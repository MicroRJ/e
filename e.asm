; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	stbi_write_tga_with_rle
PUBLIC	stbi_write_png_compression_level
PUBLIC	stbi_write_force_png_filter
PUBLIC	rx_ps_shader_bytecode
PUBLIC	rx_vs_shader_bytecode
_TLS	SEGMENT
cc	DW	07H
	ORG $+4502
_TLS	ENDS
_DATA	SEGMENT
stbi_write_tga_with_rle DD 01H
stbi_write_png_compression_level DD 08H
stbi_write_force_png_filter DD 0ffffffffH
$SG106345 DB	'none', 00H
	ORG $+7
$SG106346 DB	'not in table', 00H
	ORG $+3
$SG106347 DB	'already in table', 00H
_DATA	ENDS
CONST	SEGMENT
?tag@?O@??stbi__process_marker@@9@9 DB 04aH		; `stbi__process_marker'::`14'::tag
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	ORG $+3
?tag@?BA@??stbi__process_marker@@9@9 DB 041H		; `stbi__process_marker'::`16'::tag
	DB	064H
	DB	06fH
	DB	062H
	DB	065H
	DB	00H
	ORG $+2
?rgb@?5??stbi__process_frame_header@@9@9 DB 052H	; `stbi__process_frame_header'::`6'::rgb
	DB	047H
	DB	042H
	ORG $+5
?length_dezigzag@?1??stbi__compute_huffman_codes@@9@9 DB 010H ; `stbi__compute_huffman_codes'::`2'::length_dezigzag
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
	ORG $+5
stbi__zlength_base DD 03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	DD	00H
	DD	00H
	ORG $+4
stbi__zlength_extra DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
stbi__zdist_base DD 01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
	DD	00H
	DD	00H
stbi__zdist_extra DD 00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
stbi__zdefault_length DB 08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
stbi__zdefault_distance DB 05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
?png_sig@?1??stbi__check_png_header@@9@9 DB 089H	; `stbi__check_png_header'::`2'::png_sig
	DB	050H
	DB	04eH
	DB	047H
	DB	0dH
	DB	0aH
	DB	01aH
	DB	0aH
stbi__depth_scale_table DB 00H
	DB	0ffH
	DB	055H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+7
?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_nrcodes
	DB	00H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
stbiw__jpg_ZigZag DB 00H
	DB	01H
	DB	05H
	DB	06H
	DB	0eH
	DB	0fH
	DB	01bH
	DB	01cH
	DB	02H
	DB	04H
	DB	07H
	DB	0dH
	DB	010H
	DB	01aH
	DB	01dH
	DB	02aH
	DB	03H
	DB	08H
	DB	0cH
	DB	011H
	DB	019H
	DB	01eH
	DB	029H
	DB	02bH
	DB	09H
	DB	0bH
	DB	012H
	DB	018H
	DB	01fH
	DB	028H
	DB	02cH
	DB	035H
	DB	0aH
	DB	013H
	DB	017H
	DB	020H
	DB	027H
	DB	02dH
	DB	034H
	DB	036H
	DB	014H
	DB	016H
	DB	021H
	DB	026H
	DB	02eH
	DB	033H
	DB	037H
	DB	03cH
	DB	015H
	DB	022H
	DB	025H
	DB	02fH
	DB	032H
	DB	038H
	DB	03bH
	DB	03dH
	DB	023H
	DB	024H
	DB	030H
	DB	031H
	DB	039H
	DB	03aH
	DB	03eH
	DB	03fH
?std_dc_luminance_values@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
?fillBits@?L@??stbi_write_jpg_core@@9@9 DW 07fH		; `stbi_write_jpg_core'::`11'::fillBits
	DW	07H
?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	07dH
	ORG $+7
?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_nrcodes
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+7
?std_ac_luminance_values@?1??stbi_write_jpg_core@@9@9 DB 01H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_values
	DB	02H
	DB	03H
	DB	00H
	DB	04H
	DB	011H
	DB	05H
	DB	012H
	DB	021H
	DB	031H
	DB	041H
	DB	06H
	DB	013H
	DB	051H
	DB	061H
	DB	07H
	DB	022H
	DB	071H
	DB	014H
	DB	032H
	DB	081H
	DB	091H
	DB	0a1H
	DB	08H
	DB	023H
	DB	042H
	DB	0b1H
	DB	0c1H
	DB	015H
	DB	052H
	DB	0d1H
	DB	0f0H
	DB	024H
	DB	033H
	DB	062H
	DB	072H
	DB	082H
	DB	09H
	DB	0aH
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	ORG $+6
?std_dc_chrominance_values@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
	ORG $+4
?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	04H
	DB	04H
	DB	03H
	DB	04H
	DB	07H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	01H
	DB	02H
	DB	077H
	ORG $+7
?std_ac_chrominance_values@?1??stbi_write_jpg_core@@9@9 DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	011H
	DB	04H
	DB	05H
	DB	021H
	DB	031H
	DB	06H
	DB	012H
	DB	041H
	DB	051H
	DB	07H
	DB	061H
	DB	071H
	DB	013H
	DB	022H
	DB	032H
	DB	081H
	DB	08H
	DB	014H
	DB	042H
	DB	091H
	DB	0a1H
	DB	0b1H
	DB	0c1H
	DB	09H
	DB	023H
	DB	033H
	DB	052H
	DB	0f0H
	DB	015H
	DB	062H
	DB	072H
	DB	0d1H
	DB	0aH
	DB	016H
	DB	024H
	DB	034H
	DB	0e1H
	DB	025H
	DB	0f1H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
	ORG $+6
?aasf@?1??stbi_write_jpg_core@@9@9 DD 0403504f3r ; 2.82843 ; `stbi_write_jpg_core'::`2'::aasf
	DD	0407b14bfr			; 3.92314
	DD	0406c835fr			; 3.69552
	DD	04054db30r			; 3.32588
	DD	0403504f3r			; 2.82843
	DD	0400e39dar			; 2.22228
	DD	03fc3ef15r			; 1.53073
	DD	03f47c5c2r			; 0.780361
	ORG $+8
?YDC_HT@?1??stbi_write_jpg_core@@9@9 DW 00H		; `stbi_write_jpg_core'::`2'::YDC_HT
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	03H
	DW	05H
	DW	03H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	ORG $+976
?UVDC_HT@?1??stbi_write_jpg_core@@9@9 DW 00H		; `stbi_write_jpg_core'::`2'::UVDC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	DW	03feH
	DW	0aH
	DW	07feH
	DW	0bH
	ORG $+976
?YAC_HT@?1??stbi_write_jpg_core@@9@9 DW 0aH		; `stbi_write_jpg_core'::`2'::YAC_HT
	DW	04H
	DW	00H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0bH
	DW	04H
	DW	01aH
	DW	05H
	DW	078H
	DW	07H
	DW	0f8H
	DW	08H
	DW	03f6H
	DW	0aH
	DW	0ff82H
	DW	010H
	DW	0ff83H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0cH
	DW	04H
	DW	01bH
	DW	05H
	DW	079H
	DW	07H
	DW	01f6H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff84H
	DW	010H
	DW	0ff85H
	DW	010H
	DW	0ff86H
	DW	010H
	DW	0ff87H
	DW	010H
	DW	0ff88H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01cH
	DW	05H
	DW	0f9H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f7H
	DW	09H
	DW	0ff5H
	DW	0cH
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f8H
	DW	0aH
	DW	0ff96H
	DW	010H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ff9eH
	DW	010H
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07bH
	DW	07H
	DW	0ff6H
	DW	0cH
	DW	0ffa6H
	DW	010H
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0faH
	DW	08H
	DW	0ff7H
	DW	0cH
	DW	0ffaeH
	DW	010H
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	07fc0H
	DW	0fH
	DW	0ffb6H
	DW	010H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03f9H
	DW	0aH
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f8H
	DW	0bH
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0fff5H
	DW	010H
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
?UVAC_HT@?1??stbi_write_jpg_core@@9@9 DW 00H		; `stbi_write_jpg_core'::`2'::UVAC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0aH
	DW	04H
	DW	018H
	DW	05H
	DW	019H
	DW	05H
	DW	038H
	DW	06H
	DW	078H
	DW	07H
	DW	01f4H
	DW	09H
	DW	03f6H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0bH
	DW	04H
	DW	039H
	DW	06H
	DW	0f6H
	DW	08H
	DW	01f5H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff5H
	DW	0cH
	DW	0ff88H
	DW	010H
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01aH
	DW	05H
	DW	0f7H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff6H
	DW	0cH
	DW	07fc2H
	DW	0fH
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01bH
	DW	05H
	DW	0f8H
	DW	08H
	DW	03f8H
	DW	0aH
	DW	0ff7H
	DW	0cH
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	0ff96H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f6H
	DW	09H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	0ff9eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f9H
	DW	0aH
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	0ffa6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	079H
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	0ffaeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f8H
	DW	0bH
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	0ffb6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0f9H
	DW	08H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f7H
	DW	09H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03fe0H
	DW	0eH
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	0fff5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	07fc3H
	DW	0fH
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
?YQT@?1??stbi_write_jpg_core@@9@9 DD 010H		; `stbi_write_jpg_core'::`2'::YQT
	DD	0bH
	DD	0aH
	DD	010H
	DD	018H
	DD	028H
	DD	033H
	DD	03dH
	DD	0cH
	DD	0cH
	DD	0eH
	DD	013H
	DD	01aH
	DD	03aH
	DD	03cH
	DD	037H
	DD	0eH
	DD	0dH
	DD	010H
	DD	018H
	DD	028H
	DD	039H
	DD	045H
	DD	038H
	DD	0eH
	DD	011H
	DD	016H
	DD	01dH
	DD	033H
	DD	057H
	DD	050H
	DD	03eH
	DD	012H
	DD	016H
	DD	025H
	DD	038H
	DD	044H
	DD	06dH
	DD	067H
	DD	04dH
	DD	018H
	DD	023H
	DD	037H
	DD	040H
	DD	051H
	DD	068H
	DD	071H
	DD	05cH
	DD	031H
	DD	040H
	DD	04eH
	DD	057H
	DD	067H
	DD	079H
	DD	078H
	DD	065H
	DD	048H
	DD	05cH
	DD	05fH
	DD	062H
	DD	070H
	DD	064H
	DD	067H
	DD	063H
?UVQT@?1??stbi_write_jpg_core@@9@9 DD 011H		; `stbi_write_jpg_core'::`2'::UVQT
	DD	012H
	DD	018H
	DD	02fH
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	012H
	DD	015H
	DD	01aH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	018H
	DD	01aH
	DD	038H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	02fH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
?head0@?9??stbi_write_jpg_core@@9@9 DB 0ffH		; `stbi_write_jpg_core'::`10'::head0
	DB	0d8H
	DB	0ffH
	DB	0e0H
	DB	00H
	DB	010H
	DB	04aH
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0dbH
	DB	00H
	DB	084H
	DB	00H
	ORG $+7
?head2@?9??stbi_write_jpg_core@@9@9 DB 0ffH		; `stbi_write_jpg_core'::`10'::head2
	DB	0daH
	DB	00H
	DB	0cH
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	011H
	DB	03H
	DB	011H
	DB	00H
	DB	03fH
	DB	00H
	ORG $+2
rx_ps_shader_bytecode DB 044H
	DB	058H
	DB	042H
	DB	043H
	DB	0d0H
	DB	084H
	DB	0d0H
	DB	058H
	DB	035H
	DB	0a1H
	DB	05fH
	DB	02eH
	DB	017H
	DB	072H
	DB	07bH
	DB	0eaH
	DB	049H
	DB	0b2H
	DB	08H
	DB	095H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	07cH
	DB	01H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	0d4H
	DB	00H
	DB	00H
	DB	00H
	DB	049H
	DB	053H
	DB	047H
	DB	04eH
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	053H
	DB	056H
	DB	05fH
	DB	050H
	DB	04fH
	DB	053H
	DB	049H
	DB	054H
	DB	049H
	DB	04fH
	DB	04eH
	DB	00H
	DB	043H
	DB	04fH
	DB	04cH
	DB	04fH
	DB	052H
	DB	00H
	DB	054H
	DB	045H
	DB	058H
	DB	043H
	DB	04fH
	DB	04fH
	DB	052H
	DB	044H
	DB	00H
	DB	0abH
	DB	04fH
	DB	053H
	DB	047H
	DB	04eH
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	053H
	DB	056H
	DB	05fH
	DB	054H
	DB	061H
	DB	072H
	DB	067H
	DB	065H
	DB	074H
	DB	00H
	DB	0abH
	DB	0abH
	DB	053H
	DB	048H
	DB	045H
	DB	058H
	DB	0a0H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	028H
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	08H
	DB	00H
	DB	01H
	DB	05aH
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	060H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	058H
	DB	018H
	DB	00H
	DB	04H
	DB	00H
	DB	070H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	055H
	DB	055H
	DB	00H
	DB	00H
	DB	062H
	DB	010H
	DB	00H
	DB	03H
	DB	0f2H
	DB	010H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	010H
	DB	00H
	DB	03H
	DB	032H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	068H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	045H
	DB	00H
	DB	00H
	DB	08bH
	DB	0c2H
	DB	00H
	DB	00H
	DB	080H
	DB	043H
	DB	055H
	DB	015H
	DB	00H
	DB	0f2H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	07eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	060H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	038H
	DB	00H
	DB	00H
	DB	07H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	0eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	01eH
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03eH
	DB	00H
	DB	00H
	DB	01H
	ORG $+4
rx_vs_shader_bytecode DB 044H
	DB	058H
	DB	042H
	DB	043H
	DB	011H
	DB	02eH
	DB	0b2H
	DB	03aH
	DB	04dH
	DB	02dH
	DB	0c5H
	DB	071H
	DB	08fH
	DB	0eeH
	DB	079H
	DB	045H
	DB	09aH
	DB	0f2H
	DB	0f4H
	DB	0aaH
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	04cH
	DB	02H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02cH
	DB	00H
	DB	00H
	DB	00H
	DB	09cH
	DB	00H
	DB	00H
	DB	00H
	DB	010H
	DB	01H
	DB	00H
	DB	00H
	DB	049H
	DB	053H
	DB	047H
	DB	04eH
	DB	068H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	059H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	03H
	DB	00H
	DB	00H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	0fH
	DB	00H
	DB	00H
	DB	050H
	DB	04fH
	DB	053H
	DB	049H
	DB	054H
	DB	049H
	DB	04fH
	DB	04eH
	DB	00H
	DB	054H
	DB	045H
	DB	058H
	DB	043H
	DB	04fH
	DB	04fH
	DB	052H
	DB	044H
	DB	00H
	DB	043H
	DB	04fH
	DB	04cH
	DB	04fH
	DB	052H
	DB	00H
	DB	04fH
	DB	053H
	DB	047H
	DB	04eH
	DB	06cH
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	08H
	DB	00H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	05cH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	0fH
	DB	00H
	DB	00H
	DB	00H
	DB	062H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	0cH
	DB	00H
	DB	00H
	DB	053H
	DB	056H
	DB	05fH
	DB	050H
	DB	04fH
	DB	053H
	DB	049H
	DB	054H
	DB	049H
	DB	04fH
	DB	04eH
	DB	00H
	DB	043H
	DB	04fH
	DB	04cH
	DB	04fH
	DB	052H
	DB	00H
	DB	054H
	DB	045H
	DB	058H
	DB	043H
	DB	04fH
	DB	04fH
	DB	052H
	DB	044H
	DB	00H
	DB	0abH
	DB	053H
	DB	048H
	DB	045H
	DB	058H
	DB	034H
	DB	01H
	DB	00H
	DB	00H
	DB	050H
	DB	00H
	DB	01H
	DB	00H
	DB	04dH
	DB	00H
	DB	00H
	DB	00H
	DB	06aH
	DB	08H
	DB	00H
	DB	01H
	DB	059H
	DB	00H
	DB	00H
	DB	04H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	04H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	03H
	DB	032H
	DB	010H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	05fH
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	010H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	067H
	DB	00H
	DB	00H
	DB	04H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	03H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	065H
	DB	00H
	DB	00H
	DB	03H
	DB	032H
	DB	020H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	068H
	DB	00H
	DB	00H
	DB	02H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	038H
	DB	00H
	DB	00H
	DB	08H
	DB	0f2H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	056H
	DB	015H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	00H
	DB	00H
	DB	0aH
	DB	0f2H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	06H
	DB	010H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	0eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	00H
	DB	00H
	DB	0aH
	DB	0f2H
	DB	00H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	0a6H
	DB	01aH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	0eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	032H
	DB	00H
	DB	00H
	DB	0aH
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	08eH
	DB	020H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	03H
	DB	00H
	DB	00H
	DB	00H
	DB	0f6H
	DB	01fH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	0eH
	DB	010H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	00H
	DB	00H
	DB	05H
	DB	0f2H
	DB	020H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	01eH
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	036H
	DB	00H
	DB	00H
	DB	05H
	DB	032H
	DB	020H
	DB	010H
	DB	00H
	DB	02H
	DB	00H
	DB	00H
	DB	00H
	DB	046H
	DB	010H
	DB	010H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	03eH
	DB	00H
	DB	00H
	DB	01H
	ORG $+4
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
	ORG $+8
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
	ORG $+8
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
	ORG $+8
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
	ORG $+8
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
	ORG $+8
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
stbi__bmask DD	00H
	DD	01H
	DD	03H
	DD	07H
	DD	0fH
	DD	01fH
	DD	03fH
	DD	07fH
	DD	0ffH
	DD	01ffH
	DD	03ffH
	DD	07ffH
	DD	0fffH
	DD	01fffH
	DD	03fffH
	DD	07fffH
	DD	0ffffH
	ORG $+12
stbi__jbias DD	00H
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0fffffff9H
	DD	0fffffff1H
	DD	0ffffffe1H
	DD	0ffffffc1H
	DD	0ffffff81H
	DD	0ffffff01H
	DD	0fffffe01H
	DD	0fffffc01H
	DD	0fffff801H
	DD	0fffff001H
	DD	0ffffe001H
	DD	0ffffc001H
	DD	0ffff8001H
stbi__jpeg_dezigzag DB 00H
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
CONST	ENDS
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	stbi_load_from_memory
PUBLIC	stbi_load_from_callbacks
PUBLIC	stbi_load
PUBLIC	stbi_load_from_file
PUBLIC	stbi_load_gif_from_memory
PUBLIC	stbi_load_16_from_memory
PUBLIC	stbi_load_16_from_callbacks
PUBLIC	stbi_load_16
PUBLIC	stbi_load_from_file_16
PUBLIC	stbi_loadf_from_memory
PUBLIC	stbi_loadf_from_callbacks
PUBLIC	stbi_loadf
PUBLIC	stbi_loadf_from_file
PUBLIC	stbi_hdr_to_ldr_gamma
PUBLIC	stbi_hdr_to_ldr_scale
PUBLIC	stbi_ldr_to_hdr_gamma
PUBLIC	stbi_ldr_to_hdr_scale
PUBLIC	stbi_is_hdr_from_callbacks
PUBLIC	stbi_is_hdr_from_memory
PUBLIC	stbi_is_hdr
PUBLIC	stbi_is_hdr_from_file
PUBLIC	stbi_failure_reason
PUBLIC	stbi_image_free
PUBLIC	stbi_info_from_memory
PUBLIC	stbi_info_from_callbacks
PUBLIC	stbi_is_16_bit_from_memory
PUBLIC	stbi_is_16_bit_from_callbacks
PUBLIC	stbi_info
PUBLIC	stbi_info_from_file
PUBLIC	stbi_is_16_bit
PUBLIC	stbi_is_16_bit_from_file
PUBLIC	stbi_set_unpremultiply_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb
PUBLIC	stbi_set_flip_vertically_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb_thread
PUBLIC	stbi_set_flip_vertically_on_load_thread
PUBLIC	stbi_zlib_decode_malloc_guesssize
PUBLIC	stbi_zlib_decode_malloc_guesssize_headerflag
PUBLIC	stbi_zlib_decode_malloc
PUBLIC	stbi_zlib_decode_buffer
PUBLIC	stbi_zlib_decode_noheader_malloc
PUBLIC	stbi_zlib_decode_noheader_buffer
PUBLIC	stbi__unpremultiply_on_load_thread
PUBLIC	stbi_write_png
PUBLIC	stbi_write_bmp
PUBLIC	stbi_write_tga
PUBLIC	stbi_write_hdr
PUBLIC	stbi_write_jpg
PUBLIC	stbi_write_png_to_func
PUBLIC	stbi_write_bmp_to_func
PUBLIC	stbi_write_tga_to_func
PUBLIC	stbi_write_hdr_to_func
PUBLIC	stbi_write_jpg_to_func
PUBLIC	stbi_flip_vertically_on_write
PUBLIC	stbi_zlib_compress
PUBLIC	stbi_write_png_to_mem
PUBLIC	rxvec3
PUBLIC	rxvec3_xyz
PUBLIC	rxvec3_xy
PUBLIC	rxvec3_x
PUBLIC	rxvec3_y
PUBLIC	rxvec3_z
PUBLIC	rxmatrix_identity
PUBLIC	rxmatrix_multiply
PUBLIC	rxmix
PUBLIC	rxunmix
PUBLIC	rxremix
PUBLIC	rxclamp
PUBLIC	rxpow2i
PUBLIC	rxclampi
PUBLIC	rxmax
PUBLIC	rxmin
PUBLIC	rxmaxi
PUBLIC	rxmini
PUBLIC	rxvector_dot
PUBLIC	rxvector_cross
PUBLIC	rxvector_length
PUBLIC	rxvec2_dot
PUBLIC	rxvec2_len
PUBLIC	rxvec2_add
PUBLIC	rxvec2_sub
PUBLIC	rxvector_add
PUBLIC	rxvector_sub
PUBLIC	rxvector_mul
PUBLIC	rxvector_downscale
PUBLIC	rxvector_scale
PUBLIC	rxvector_negate
PUBLIC	rxvector_min
PUBLIC	rxvector_max
PUBLIC	rxvector_abs
PUBLIC	rxvector_normalize
PUBLIC	rxmatrix_projection
PUBLIC	rxmatrix_rotZ
PUBLIC	rxmatrix_rotY
PUBLIC	rxmatrix_rotX
PUBLIC	rxmatrix_translate_xyz
PUBLIC	rxmatrix_flip_vertically
PUBLIC	rxmul_matvec
PUBLIC	rxadd_vec2
PUBLIC	rxmul_vec2
PUBLIC	rxvec2_xy
PUBLIC	rxvec2i_vec2
PUBLIC	rxlinker_register_terminal
PUBLIC	rxlinker_onlyquery_terminal
PUBLIC	rxlinker_labelshas_terminal
PUBLIC	rxlinker_labelsadd_terminal
PUBLIC	rxlinker_labelsrem_terminal
PUBLIC	rxlinker_resolve_terminal
PUBLIC	rxtexture_load
PUBLIC	rxrender_target_copy
PUBLIC	rxrender_target_apply
PUBLIC	rxshader_apply
PUBLIC	rxcompile_shader_bytecode
PUBLIC	rxload_vertex_shader
PUBLIC	rxload_pixel_shader
PUBLIC	rxbuffer_borrow
PUBLIC	rxuniform_buffer_delete
PUBLIC	rxuniform_buffer_update
PUBLIC	rxuniform_buffer_bind_ex
PUBLIC	rxenable_ztesting
PUBLIC	rxarticle_create
PUBLIC	rxarticle_attach
PUBLIC	rxinvalidate_contents
PUBLIC	rxunknown_typeof_compute_shader
PUBLIC	rxunknown_typeof_vertex_shader
PUBLIC	rxunknown_typeof_pixel_shader
PUBLIC	rxshader_typeof_compute
PUBLIC	rxshader_typeof_vertex
PUBLIC	rxshader_typeof_pixel
PUBLIC	rxdelete_blobbler
PUBLIC	rxcreate_shader
PUBLIC	rxdelete_unknown
PUBLIC	rxdelete_vertex_buffer
PUBLIC	rxdelete_index_buffer
PUBLIC	rxreturn
PUBLIC	rxuniform_buffer_borrow
PUBLIC	rxuniform_buffer_create
PUBLIC	rxcreate_index_buffer
PUBLIC	rxcreate_vertex_buffer
PUBLIC	rxcreate_struct_buffer
PUBLIC	rxborrow_vertex_buffer
PUBLIC	rxborrow_index_buffer
PUBLIC	rxborrow_struct_buffer
PUBLIC	rxdriver_stage_viewport
PUBLIC	rxcomtag
PUBLIC	rxcomadd
PUBLIC	rx3d
PUBLIC	rx2d
PUBLIC	rxclip
PUBLIC	rxsampler_bind_ex
PUBLIC	rxtexture_bind_ex
PUBLIC	rxcomexc
PUBLIC	rxdraw_end
PUBLIC	rxqueue_custom_command
PUBLIC	rxdraw_matrix
PUBLIC	rxclear
PUBLIC	rxqueue_shader_command
PUBLIC	rxqueue_uniform_command
PUBLIC	rxvertex_mode_end
PUBLIC	rxvertex_mode
PUBLIC	rxsubmit_index
PUBLIC	rxvertex_color_rgba
PUBLIC	rxvertex_color
PUBLIC	rxsubmit_vertex_array
PUBLIC	rxsubmit_vertex
PUBLIC	rxsubmit_vertex_ex
PUBLIC	rx_vertex_xyz
PUBLIC	rx_vertex_xyz_color
PUBLIC	rxsubmit_vertex_xy
PUBLIC	rxsubmit_vertex_tex
PUBLIC	rxdraw_skinned_preset_unnormalized
PUBLIC	rxdraw_skinned_unnormalized
PUBLIC	rxdraw_skinned_ex
PUBLIC	rxdraw_skinned
PUBLIC	rxtexture_scaled
PUBLIC	rxdraw_rect
PUBLIC	rxdraw_circle
PUBLIC	rxdraw_line
PUBLIC	rxdraw_outline
PUBLIC	rxdraw_text_length
PUBLIC	rxchrxsz
PUBLIC	rxdraw_text_ex
PUBLIC	rxdraw_text
PUBLIC	rxtexture_delete
PUBLIC	rxcreate_render_target
PUBLIC	rxtime
PUBLIC	rxeffect_candle
PUBLIC	rxeffect_shadow
PUBLIC	rxrestore_render_stack
PUBLIC	rxdefault_render_pass_end
PUBLIC	rxwindow_message_handler_win32
PUBLIC	rxwindow_message_callback_win32
PUBLIC	rxwindow_poll
PUBLIC	rxwindow_create
PUBLIC	rxwindow_enable
PUBLIC	rxwindow_resize
PUBLIC	rxwindow_xy
PUBLIC	rxtick
PUBLIC	rxcreate_simple_stencil_state_d3d
PUBLIC	rxinit_default_font
PUBLIC	rxinit
PUBLIC	load_bitmap8
PUBLIC	is_click_leave_rect
PUBLIC	is_click_enter_rect
PUBLIC	mouse_is_key
PUBLIC	rect_by_xyxy
PUBLIC	rect_by_size
PUBLIC	rect_in_xy
PUBLIC	rect_cut
PUBLIC	rect_center
PUBLIC	rect_padd
PUBLIC	text_rect
PUBLIC	set_window_rect
PUBLIC	get_monitor_rect
PUBLIC	get_window_rect
PUBLIC	get_window_client_rect
PUBLIC	draw_rect
PUBLIC	draw_text
PUBLIC	set_clip_rect
PUBLIC	button_widget
PUBLIC	checkbox_widget
PUBLIC	dropdown_widget
PUBLIC	cursor_in_rect
PUBLIC	is_click_enter
PUBLIC	rxtstkey
PUBLIC	rxchr
PUBLIC	list_item_widget
PUBLIC	slider_widget
PUBLIC	is_click_leave
PUBLIC	mouse_poll
PUBLIC	erecache
PUBLIC	buflen
PUBLIC	egetrow
PUBLIC	egetlen
PUBLIC	egetoff
PUBLIC	esetcur
PUBLIC	egetcur
PUBLIC	egetcurx
PUBLIC	egetcury
PUBLIC	ecurloc
PUBLIC	currec
PUBLIC	emovcurx
PUBLIC	emovcury
PUBLIC	eputchar
PUBLIC	edelchar
PUBLIC	fload
PUBLIC	fsave
PUBLIC	ewdg
PUBLIC	copy_string_ex
PUBLIC	copy_string
PUBLIC	fdlg
PUBLIC	main
PUBLIC	__real@00000000
PUBLIC	__real@0a4fb11f
PUBLIC	__real@3c8efa35
PUBLIC	__real@3d909091
PUBLIC	__real@3da685db
PUBLIC	__real@3de978d5
PUBLIC	__real@3e48c8c9
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e991687
PUBLIC	__real@3e99999a
PUBLIC	__real@3ea99ae9
PUBLIC	__real@3ec3ef15
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ed65e89
PUBLIC	__real@3f000000
PUBLIC	__real@3f0a8bd4
PUBLIC	__real@3f1645a2
PUBLIC	__real@3f3504f3
PUBLIC	__real@3f40c0c1
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae147ae147b
PUBLIC	__real@3fa73d75
PUBLIC	__real@3fa999999999999a
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@400921fb60000000
PUBLIC	__real@40400000
PUBLIC	__real@4056800000000000
PUBLIC	__real@4066800000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@40c00000
PUBLIC	__real@41200000
PUBLIC	__real@41800000
PUBLIC	__real@43000000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@477fff00
PUBLIC	__real@be2cca2e
PUBLIC	__real@bf800000
PUBLIC	__xmm@00000200000002000000020000000200
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@01010000010100000101000001010000
PUBLIC	__xmm@08a914e808a914e808a914e808a914e8
PUBLIC	__xmm@11c8e09e11c8e09e11c8e09e11c8e09e
PUBLIC	__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
PUBLIC	__xmm@12d0046b12d0046b12d0046b12d0046b
PUBLIC	__xmm@166f166f166f166f166f166f166f166f
PUBLIC	__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
PUBLIC	__xmm@e09ee565e09ee565e09ee565e09ee565
PUBLIC	__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
PUBLIC	__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
PUBLIC	__xmm@f493f493f493f493f493f493f493f493
PUBLIC	__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
PUBLIC	__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	strncmp:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_SetCurrentDirectoryA:PROC
EXTRN	__imp_GetCurrentDirectoryA:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_FlushFileBuffers:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_GetFinalPathNameByHandleA:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_GetOverlappedResult:PROC
EXTRN	__imp_WaitForSingleObject:PROC
EXTRN	__imp_WaitForSingleObjectEx:PROC
EXTRN	__imp_CreateEventA:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_ReadDirectoryChangesW:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageW:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_PostQuitMessage:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_ShowWindow:PROC
EXTRN	__imp_SetWindowPos:PROC
EXTRN	__imp_GetKeyState:PROC
EXTRN	__imp_GetSystemMetrics:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_GetWindowRect:PROC
EXTRN	__imp_AdjustWindowRect:PROC
EXTRN	__imp_SetCursor:PROC
EXTRN	__imp_LoadCursorA:PROC
EXTRN	__imp_WideCharToMultiByte:PROC
EXTRN	__imp_SetConsoleTextAttribute:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	abs:PROC
EXTRN	_lrotl:PROC
EXTRN	strtol:PROC
EXTRN	D3DCompile:PROC
EXTRN	D3DReflect:PROC
EXTRN	D3DGetBlobPart:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	fopen_s:PROC
EXTRN	fclose:PROC
EXTRN	feof:PROC
EXTRN	ferror:PROC
EXTRN	fgetc:PROC
EXTRN	fread:PROC
EXTRN	fseek:PROC
EXTRN	ftell:PROC
EXTRN	fwrite:PROC
EXTRN	ungetc:PROC
EXTRN	printf:PROC
EXTRN	cos:PROC
EXTRN	pow:PROC
EXTRN	sin:PROC
EXTRN	tan:PROC
EXTRN	frexp:PROC
EXTRN	ldexp:PROC
EXTRN	cosf:PROC
EXTRN	sinf:PROC
EXTRN	sqrtf:PROC
EXTRN	_wassert:PROC
EXTRN	__imp_GetOpenFileNameA:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	IID_ID3D11ShaderReflection:BYTE
EXTRN	IID_IDXGIDevice:BYTE
EXTRN	IID_ID3D11Resource:BYTE
EXTRN	IID_ID3D11Buffer:BYTE
EXTRN	IID_ID3D11Texture2D:BYTE
EXTRN	IID_ID3D11ShaderResourceView:BYTE
EXTRN	IID_ID3D11RenderTargetView:BYTE
EXTRN	IID_ID3D11VertexShader:BYTE
EXTRN	IID_ID3D11PixelShader:BYTE
EXTRN	IID_ID3D11ComputeShader:BYTE
EXTRN	IID_ID3D11InfoQueue:BYTE
EXTRN	IID_IDXGIFactory2:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
_TLS	SEGMENT
stbi__g_failure_reason DQ 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
stbi__vertically_flip_on_load_global DD 01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
stbi__vertically_flip_on_load_local DD 01H DUP (?)
stbi__vertically_flip_on_load_set DD 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
stbi__unpremultiply_on_load_global DD 01H DUP (?)
stbi__de_iphone_flag_global DD 01H DUP (?)
_BSS	ENDS
_TLS	SEGMENT
stbi__unpremultiply_on_load_local DD 01H DUP (?)
stbi__unpremultiply_on_load_set DD 01H DUP (?)
stbi__de_iphone_flag_local DD 01H DUP (?)
stbi__de_iphone_flag_set DD 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
$SG134520 DB	01H DUP (?)
	ALIGN	4

stbi__flip_vertically_on_write DD 01H DUP (?)
rx	DB	05809e8H DUP (?)
?EntryBuffer@?1??rxinvalidate_contents@@9@9 DB 01140H DUP (?) ; `rxinvalidate_contents'::`2'::EntryBuffer
?IsEventActive@?1??rxinvalidate_contents@@9@9 DD 01H DUP (?) ; `rxinvalidate_contents'::`2'::IsEventActive
?editor@?1??main@@9@9 DB 048H DUP (?)			; `main'::`2'::editor
_BSS	ENDS
pdata	SEGMENT
$pdata$stbsp_vsprintf DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$stbsp_vsprintf
$pdata$stbsp_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+303
	DD	imagerel $unwind$stbsp_vsnprintf
$pdata$stbsp_sprintf DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$stbsp_sprintf
$pdata$stbsp_snprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$stbsp_snprintf
$pdata$stbsp_vsprintfcb DD imagerel $LN408
	DD	imagerel $LN408+13380
	DD	imagerel $unwind$stbsp_vsprintfcb
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+1613
	DD	imagerel $unwind$stbsp__real_to_str
$pdata$stbsp__real_to_parts DD imagerel stbsp__real_to_parts
	DD	imagerel stbsp__real_to_parts+154
	DD	imagerel $unwind$stbsp__real_to_parts
$pdata$stbsp__strlen_limited DD imagerel stbsp__strlen_limited
	DD	imagerel stbsp__strlen_limited+239
	DD	imagerel $unwind$stbsp__strlen_limited
$pdata$stbsp__clamp_callback DD imagerel stbsp__clamp_callback
	DD	imagerel stbsp__clamp_callback+300
	DD	imagerel $unwind$stbsp__clamp_callback
$pdata$stbsp__count_clamp_callback DD imagerel stbsp__count_clamp_callback
	DD	imagerel stbsp__count_clamp_callback+59
	DD	imagerel $unwind$stbsp__count_clamp_callback
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+3868
	DD	imagerel $unwind$stbsp__raise_to_power10
$pdata$ccuserallocator_ DD imagerel ccuserallocator_
	DD	imagerel ccuserallocator_+1632
	DD	imagerel $unwind$ccuserallocator_
$pdata$ccinternalallocator_ DD imagerel ccinternalallocator_
	DD	imagerel ccinternalallocator_+83
	DD	imagerel $unwind$ccinternalallocator_
$pdata$ccinit DD imagerel ccinit
	DD	imagerel ccinit+213
	DD	imagerel $unwind$ccinit
$pdata$ccformatvex DD imagerel ccformatvex
	DD	imagerel ccformatvex+52
	DD	imagerel $unwind$ccformatvex
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+354
	DD	imagerel $unwind$ccformatv
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+73
	DD	imagerel $unwind$ccformat
$pdata$ccclocktick DD imagerel ccclocktick
	DD	imagerel ccclocktick+25
	DD	imagerel $unwind$ccclocktick
$pdata$cccaller DD imagerel cccaller
	DD	imagerel cccaller+91
	DD	imagerel $unwind$cccaller
$pdata$ccdlbadd_ DD imagerel ccdlbadd_
	DD	imagerel ccdlbadd_+992
	DD	imagerel $unwind$ccdlbadd_
$pdata$cctblhsh_ DD imagerel cctblhsh_
	DD	imagerel cctblhsh_+1896
	DD	imagerel $unwind$cctblhsh_
$pdata$cctblgeti_ DD imagerel cctblgeti_
	DD	imagerel cctblgeti_+385
	DD	imagerel $unwind$cctblgeti_
$pdata$cctblputi_ DD imagerel cctblputi_
	DD	imagerel cctblputi_+585
	DD	imagerel $unwind$cctblputi_
$pdata$cctblseti_ DD imagerel cctblseti_
	DD	imagerel cctblseti_+347
	DD	imagerel $unwind$cctblseti_
$pdata$ccdlbdel_ DD imagerel ccdlbdel_
	DD	imagerel ccdlbdel_+570
	DD	imagerel $unwind$ccdlbdel_
$pdata$ccfnames DD imagerel ccfnames
	DD	imagerel ccfnames+103
	DD	imagerel $unwind$ccfnames
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+143
	DD	imagerel $unwind$cctrace_
$pdata$ccprintf DD imagerel ccprintf
	DD	imagerel ccprintf+2725
	DD	imagerel $unwind$ccprintf
$pdata$ccout DD	imagerel ccout
	DD	imagerel ccout+35
	DD	imagerel $unwind$ccout
$pdata$ccstatic_alloc DD imagerel ccstatic_alloc
	DD	imagerel ccstatic_alloc+403
	DD	imagerel $unwind$ccstatic_alloc
$pdata$ccallocentry DD imagerel ccallocentry
	DD	imagerel ccallocentry+181
	DD	imagerel $unwind$ccallocentry
$pdata$cccheck_ward DD imagerel cccheck_ward
	DD	imagerel cccheck_ward+1481
	DD	imagerel $unwind$cccheck_ward
$pdata$ccfileext DD imagerel ccfileext
	DD	imagerel ccfileext+90
	DD	imagerel $unwind$ccfileext
$pdata$ccrealfile DD imagerel ccrealfile
	DD	imagerel ccrealfile+41
	DD	imagerel $unwind$ccrealfile
$pdata$ccfilesize DD imagerel ccfilesize
	DD	imagerel ccfilesize+27
	DD	imagerel $unwind$ccfilesize
$pdata$ccflushfile DD imagerel ccflushfile
	DD	imagerel ccflushfile+135
	DD	imagerel $unwind$ccflushfile
$pdata$ccclosefile DD imagerel ccclosefile
	DD	imagerel ccclosefile+25
	DD	imagerel $unwind$ccclosefile
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+433
	DD	imagerel $unwind$ccopenfile
$pdata$ccfnameh__ DD imagerel ccfnameh__
	DD	imagerel ccfnameh__+98
	DD	imagerel $unwind$ccfnameh__
$pdata$ccfnameh DD imagerel ccfnameh
	DD	imagerel ccfnameh+32
	DD	imagerel $unwind$ccfnameh
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+816
	DD	imagerel $unwind$ccpullfile
$pdata$ccpushfile DD imagerel ccpushfile
	DD	imagerel ccpushfile+622
	DD	imagerel $unwind$ccpushfile
$pdata$stbi_load_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_from_memory
$pdata$stbi_load_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_from_callbacks
$pdata$stbi_load DD imagerel $LN6
	DD	imagerel $LN6+158
	DD	imagerel $unwind$stbi_load
$pdata$stbi_load_from_file DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$stbi_load_from_file
$pdata$stbi_load_gif_from_memory DD imagerel $LN6
	DD	imagerel $LN6+315
	DD	imagerel $unwind$stbi_load_gif_from_memory
$pdata$stbi_load_16_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_16_from_memory
$pdata$stbi_load_16_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_16_from_callbacks
$pdata$stbi_load_16 DD imagerel $LN6
	DD	imagerel $LN6+158
	DD	imagerel $unwind$stbi_load_16
$pdata$stbi_load_from_file_16 DD imagerel $LN4
	DD	imagerel $LN4+195
	DD	imagerel $unwind$stbi_load_from_file_16
$pdata$stbi_loadf_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_loadf_from_memory
$pdata$stbi_loadf_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_loadf_from_callbacks
$pdata$stbi_loadf DD imagerel $LN6
	DD	imagerel $LN6+158
	DD	imagerel $unwind$stbi_loadf
$pdata$stbi_loadf_from_file DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$stbi_loadf_from_file
$pdata$stbi_is_hdr_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_hdr_from_callbacks
$pdata$stbi_is_hdr_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_hdr_from_memory
$pdata$stbi_is_hdr DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$stbi_is_hdr
$pdata$stbi_is_hdr_from_file DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbi_is_hdr_from_file
$pdata$stbi_image_free DD imagerel $LN3
	DD	imagerel $LN3+96
	DD	imagerel $unwind$stbi_image_free
$pdata$stbi_info_from_memory DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbi_info_from_memory
$pdata$stbi_info_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_info_from_callbacks
$pdata$stbi_is_16_bit_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_16_bit_from_memory
$pdata$stbi_is_16_bit_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_16_bit_from_callbacks
$pdata$stbi_info DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$stbi_info
$pdata$stbi_info_from_file DD imagerel $LN3
	DD	imagerel $LN3+166
	DD	imagerel $unwind$stbi_info_from_file
$pdata$stbi_is_16_bit DD imagerel $LN4
	DD	imagerel $LN4+86
	DD	imagerel $unwind$stbi_is_16_bit
$pdata$stbi_is_16_bit_from_file DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbi_is_16_bit_from_file
$pdata$stbi_zlib_decode_malloc_guesssize DD imagerel $LN7
	DD	imagerel $LN7+339
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize
$pdata$stbi_zlib_decode_malloc_guesssize_headerflag DD imagerel $LN7
	DD	imagerel $LN7+342
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize_headerflag
$pdata$stbi_zlib_decode_malloc DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbi_zlib_decode_malloc
$pdata$stbi_zlib_decode_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_buffer
$pdata$stbi_zlib_decode_noheader_malloc DD imagerel $LN7
	DD	imagerel $LN7+326
	DD	imagerel $unwind$stbi_zlib_decode_noheader_malloc
$pdata$stbi_zlib_decode_noheader_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_noheader_buffer
$pdata$stbi__cpuid3 DD imagerel stbi__cpuid3
	DD	imagerel stbi__cpuid3+80
	DD	imagerel $unwind$stbi__cpuid3
$pdata$stbi__sse2_available DD imagerel stbi__sse2_available
	DD	imagerel stbi__sse2_available+54
	DD	imagerel $unwind$stbi__sse2_available
$pdata$stbi__refill_buffer DD imagerel stbi__refill_buffer
	DD	imagerel stbi__refill_buffer+231
	DD	imagerel $unwind$stbi__refill_buffer
$pdata$stbi__start_mem DD imagerel stbi__start_mem
	DD	imagerel stbi__start_mem+147
	DD	imagerel $unwind$stbi__start_mem
$pdata$stbi__start_callbacks DD imagerel stbi__start_callbacks
	DD	imagerel stbi__start_callbacks+184
	DD	imagerel $unwind$stbi__start_callbacks
$pdata$stbi__stdio_read DD imagerel stbi__stdio_read
	DD	imagerel stbi__stdio_read+52
	DD	imagerel $unwind$stbi__stdio_read
$pdata$stbi__stdio_skip DD imagerel stbi__stdio_skip
	DD	imagerel stbi__stdio_skip+73
	DD	imagerel $unwind$stbi__stdio_skip
$pdata$stbi__stdio_eof DD imagerel stbi__stdio_eof
	DD	imagerel stbi__stdio_eof+64
	DD	imagerel $unwind$stbi__stdio_eof
$pdata$stbi__start_file DD imagerel stbi__start_file
	DD	imagerel stbi__start_file+41
	DD	imagerel $unwind$stbi__start_file
$pdata$stbi__jpeg_test DD imagerel stbi__jpeg_test
	DD	imagerel stbi__jpeg_test+201
	DD	imagerel $unwind$stbi__jpeg_test
$pdata$stbi__jpeg_load DD imagerel stbi__jpeg_load
	DD	imagerel stbi__jpeg_load+264
	DD	imagerel $unwind$stbi__jpeg_load
$pdata$stbi__jpeg_info DD imagerel stbi__jpeg_info
	DD	imagerel stbi__jpeg_info+212
	DD	imagerel $unwind$stbi__jpeg_info
$pdata$stbi__png_test DD imagerel stbi__png_test
	DD	imagerel stbi__png_test+42
	DD	imagerel $unwind$stbi__png_test
$pdata$stbi__png_load DD imagerel stbi__png_load
	DD	imagerel stbi__png_load+94
	DD	imagerel $unwind$stbi__png_load
$pdata$stbi__png_info DD imagerel stbi__png_info
	DD	imagerel stbi__png_info+64
	DD	imagerel $unwind$stbi__png_info
$pdata$stbi__png_is16 DD imagerel stbi__png_is16
	DD	imagerel stbi__png_is16+76
	DD	imagerel $unwind$stbi__png_is16
$pdata$stbi__bmp_test DD imagerel stbi__bmp_test
	DD	imagerel stbi__bmp_test+42
	DD	imagerel $unwind$stbi__bmp_test
$pdata$stbi__bmp_load DD imagerel stbi__bmp_load
	DD	imagerel stbi__bmp_load+4878
	DD	imagerel $unwind$stbi__bmp_load
$pdata$stbi__bmp_info DD imagerel stbi__bmp_info
	DD	imagerel stbi__bmp_info+249
	DD	imagerel $unwind$stbi__bmp_info
$pdata$stbi__tga_test DD imagerel stbi__tga_test
	DD	imagerel stbi__tga_test+374
	DD	imagerel $unwind$stbi__tga_test
$pdata$stbi__tga_load DD imagerel stbi__tga_load
	DD	imagerel stbi__tga_load+3082
	DD	imagerel $unwind$stbi__tga_load
$pdata$stbi__tga_info DD imagerel stbi__tga_info
	DD	imagerel stbi__tga_info+612
	DD	imagerel $unwind$stbi__tga_info
$pdata$stbi__psd_test DD imagerel stbi__psd_test
	DD	imagerel stbi__psd_test+71
	DD	imagerel $unwind$stbi__psd_test
$pdata$stbi__psd_load DD imagerel stbi__psd_load
	DD	imagerel stbi__psd_load+3070
	DD	imagerel $unwind$stbi__psd_load
$pdata$stbi__psd_info DD imagerel stbi__psd_info
	DD	imagerel stbi__psd_info+327
	DD	imagerel $unwind$stbi__psd_info
$pdata$stbi__psd_is16 DD imagerel stbi__psd_is16
	DD	imagerel stbi__psd_is16+194
	DD	imagerel $unwind$stbi__psd_is16
$pdata$stbi__hdr_test DD imagerel stbi__hdr_test
	DD	imagerel stbi__hdr_test+87
	DD	imagerel $unwind$stbi__hdr_test
$pdata$stbi__hdr_load DD imagerel stbi__hdr_load
	DD	imagerel stbi__hdr_load+3037
	DD	imagerel $unwind$stbi__hdr_load
$pdata$stbi__hdr_info DD imagerel stbi__hdr_info
	DD	imagerel stbi__hdr_info+539
	DD	imagerel $unwind$stbi__hdr_info
$pdata$stbi__pic_test DD imagerel stbi__pic_test
	DD	imagerel stbi__pic_test+42
	DD	imagerel $unwind$stbi__pic_test
$pdata$stbi__pic_load DD imagerel stbi__pic_load
	DD	imagerel stbi__pic_load+777
	DD	imagerel $unwind$stbi__pic_load
$pdata$stbi__pic_info DD imagerel stbi__pic_info
	DD	imagerel stbi__pic_info+642
	DD	imagerel $unwind$stbi__pic_info
$pdata$stbi__gif_test DD imagerel stbi__gif_test
	DD	imagerel stbi__gif_test+42
	DD	imagerel $unwind$stbi__gif_test
$pdata$stbi__gif_load DD imagerel stbi__gif_load
	DD	imagerel stbi__gif_load+560
	DD	imagerel $unwind$stbi__gif_load
$pdata$stbi__load_gif_main DD imagerel stbi__load_gif_main
	DD	imagerel stbi__load_gif_main+1440
	DD	imagerel $unwind$stbi__load_gif_main
$pdata$stbi__gif_info DD imagerel stbi__gif_info
	DD	imagerel stbi__gif_info+54
	DD	imagerel $unwind$stbi__gif_info
$pdata$stbi__pnm_test DD imagerel stbi__pnm_test
	DD	imagerel stbi__pnm_test+91
	DD	imagerel $unwind$stbi__pnm_test
$pdata$stbi__pnm_load DD imagerel stbi__pnm_load
	DD	imagerel stbi__pnm_load+678
	DD	imagerel $unwind$stbi__pnm_load
$pdata$stbi__pnm_info DD imagerel stbi__pnm_info
	DD	imagerel stbi__pnm_info+379
	DD	imagerel $unwind$stbi__pnm_info
$pdata$stbi__pnm_is16 DD imagerel stbi__pnm_is16
	DD	imagerel stbi__pnm_is16+46
	DD	imagerel $unwind$stbi__pnm_is16
$pdata$stbi__malloc DD imagerel stbi__malloc
	DD	imagerel stbi__malloc+97
	DD	imagerel $unwind$stbi__malloc
$pdata$stbi__addsizes_valid DD imagerel stbi__addsizes_valid
	DD	imagerel stbi__addsizes_valid+62
	DD	imagerel $unwind$stbi__addsizes_valid
$pdata$stbi__mul2sizes_valid DD imagerel stbi__mul2sizes_valid
	DD	imagerel stbi__mul2sizes_valid+84
	DD	imagerel $unwind$stbi__mul2sizes_valid
$pdata$stbi__mad2sizes_valid DD imagerel stbi__mad2sizes_valid
	DD	imagerel stbi__mad2sizes_valid+85
	DD	imagerel $unwind$stbi__mad2sizes_valid
$pdata$stbi__mad3sizes_valid DD imagerel stbi__mad3sizes_valid
	DD	imagerel stbi__mad3sizes_valid+119
	DD	imagerel $unwind$stbi__mad3sizes_valid
$pdata$stbi__mad4sizes_valid DD imagerel stbi__mad4sizes_valid
	DD	imagerel stbi__mad4sizes_valid+153
	DD	imagerel $unwind$stbi__mad4sizes_valid
$pdata$stbi__malloc_mad2 DD imagerel stbi__malloc_mad2
	DD	imagerel stbi__malloc_mad2+71
	DD	imagerel $unwind$stbi__malloc_mad2
$pdata$stbi__malloc_mad3 DD imagerel stbi__malloc_mad3
	DD	imagerel stbi__malloc_mad3+86
	DD	imagerel $unwind$stbi__malloc_mad3
$pdata$stbi__malloc_mad4 DD imagerel stbi__malloc_mad4
	DD	imagerel stbi__malloc_mad4+99
	DD	imagerel $unwind$stbi__malloc_mad4
$pdata$stbi__ldr_to_hdr DD imagerel stbi__ldr_to_hdr
	DD	imagerel stbi__ldr_to_hdr+698
	DD	imagerel $unwind$stbi__ldr_to_hdr
$pdata$stbi__hdr_to_ldr DD imagerel stbi__hdr_to_ldr
	DD	imagerel stbi__hdr_to_ldr+776
	DD	imagerel $unwind$stbi__hdr_to_ldr
$pdata$stbi__load_main DD imagerel stbi__load_main
	DD	imagerel stbi__load_main+885
	DD	imagerel $unwind$stbi__load_main
$pdata$stbi__convert_16_to_8 DD imagerel stbi__convert_16_to_8
	DD	imagerel stbi__convert_16_to_8+290
	DD	imagerel $unwind$stbi__convert_16_to_8
$pdata$stbi__convert_8_to_16 DD imagerel stbi__convert_8_to_16
	DD	imagerel stbi__convert_8_to_16+308
	DD	imagerel $unwind$stbi__convert_8_to_16
$pdata$stbi__vertical_flip DD imagerel stbi__vertical_flip
	DD	imagerel stbi__vertical_flip+410
	DD	imagerel $unwind$stbi__vertical_flip
$pdata$stbi__vertical_flip_slices DD imagerel stbi__vertical_flip_slices
	DD	imagerel stbi__vertical_flip_slices+133
	DD	imagerel $unwind$stbi__vertical_flip_slices
$pdata$stbi__load_and_postprocess_8bit DD imagerel stbi__load_and_postprocess_8bit
	DD	imagerel stbi__load_and_postprocess_8bit+453
	DD	imagerel $unwind$stbi__load_and_postprocess_8bit
$pdata$stbi__load_and_postprocess_16bit DD imagerel stbi__load_and_postprocess_16bit
	DD	imagerel stbi__load_and_postprocess_16bit+459
	DD	imagerel $unwind$stbi__load_and_postprocess_16bit
$pdata$stbi__float_postprocess DD imagerel stbi__float_postprocess
	DD	imagerel stbi__float_postprocess+194
	DD	imagerel $unwind$stbi__float_postprocess
$pdata$stbi__fopen DD imagerel stbi__fopen
	DD	imagerel stbi__fopen+57
	DD	imagerel $unwind$stbi__fopen
$pdata$stbi__loadf_main DD imagerel stbi__loadf_main
	DD	imagerel stbi__loadf_main+377
	DD	imagerel $unwind$stbi__loadf_main
$pdata$stbi__get8 DD imagerel stbi__get8
	DD	imagerel stbi__get8+169
	DD	imagerel $unwind$stbi__get8
$pdata$stbi__at_eof DD imagerel stbi__at_eof
	DD	imagerel stbi__at_eof+117
	DD	imagerel $unwind$stbi__at_eof
$pdata$stbi__skip DD imagerel stbi__skip
	DD	imagerel stbi__skip+205
	DD	imagerel $unwind$stbi__skip
$pdata$stbi__getn DD imagerel stbi__getn
	DD	imagerel stbi__getn+345
	DD	imagerel $unwind$stbi__getn
$pdata$stbi__get16be DD imagerel stbi__get16be
	DD	imagerel stbi__get16be+63
	DD	imagerel $unwind$stbi__get16be
$pdata$stbi__get32be DD imagerel stbi__get32be
	DD	imagerel stbi__get32be+57
	DD	imagerel $unwind$stbi__get32be
$pdata$stbi__get16le DD imagerel stbi__get16le
	DD	imagerel stbi__get16le+55
	DD	imagerel $unwind$stbi__get16le
$pdata$stbi__get32le DD imagerel stbi__get32le
	DD	imagerel stbi__get32le+57
	DD	imagerel $unwind$stbi__get32le
$pdata$stbi__convert_format DD imagerel stbi__convert_format
	DD	imagerel stbi__convert_format+2976
	DD	imagerel $unwind$stbi__convert_format
$pdata$stbi__convert_format16 DD imagerel stbi__convert_format16
	DD	imagerel stbi__convert_format16+3028
	DD	imagerel $unwind$stbi__convert_format16
$pdata$stbi__build_huffman DD imagerel stbi__build_huffman
	DD	imagerel stbi__build_huffman+648
	DD	imagerel $unwind$stbi__build_huffman
$pdata$stbi__build_fast_ac DD imagerel stbi__build_fast_ac
	DD	imagerel stbi__build_fast_ac+367
	DD	imagerel $unwind$stbi__build_fast_ac
$pdata$stbi__grow_buffer_unsafe DD imagerel stbi__grow_buffer_unsafe
	DD	imagerel stbi__grow_buffer_unsafe+264
	DD	imagerel $unwind$stbi__grow_buffer_unsafe
$pdata$stbi__jpeg_huff_decode DD imagerel stbi__jpeg_huff_decode
	DD	imagerel stbi__jpeg_huff_decode+661
	DD	imagerel $unwind$stbi__jpeg_huff_decode
$pdata$stbi__extend_receive DD imagerel stbi__extend_receive
	DD	imagerel stbi__extend_receive+209
	DD	imagerel $unwind$stbi__extend_receive
$pdata$stbi__jpeg_get_bits DD imagerel stbi__jpeg_get_bits
	DD	imagerel stbi__jpeg_get_bits+164
	DD	imagerel $unwind$stbi__jpeg_get_bits
$pdata$stbi__jpeg_get_bit DD imagerel stbi__jpeg_get_bit
	DD	imagerel stbi__jpeg_get_bit+110
	DD	imagerel $unwind$stbi__jpeg_get_bit
$pdata$stbi__jpeg_decode_block DD imagerel stbi__jpeg_decode_block
	DD	imagerel stbi__jpeg_decode_block+740
	DD	imagerel $unwind$stbi__jpeg_decode_block
$pdata$stbi__jpeg_decode_block_prog_dc DD imagerel stbi__jpeg_decode_block_prog_dc
	DD	imagerel stbi__jpeg_decode_block_prog_dc+405
	DD	imagerel $unwind$stbi__jpeg_decode_block_prog_dc
$pdata$stbi__jpeg_decode_block_prog_ac DD imagerel stbi__jpeg_decode_block_prog_ac
	DD	imagerel stbi__jpeg_decode_block_prog_ac+1618
	DD	imagerel $unwind$stbi__jpeg_decode_block_prog_ac
$pdata$stbi__idct_block DD imagerel stbi__idct_block
	DD	imagerel stbi__idct_block+2715
	DD	imagerel $unwind$stbi__idct_block
$pdata$stbi__idct_simd DD imagerel stbi__idct_simd
	DD	imagerel stbi__idct_simd+6280
	DD	imagerel $unwind$stbi__idct_simd
$pdata$stbi__get_marker DD imagerel stbi__get_marker
	DD	imagerel stbi__get_marker+137
	DD	imagerel $unwind$stbi__get_marker
$pdata$stbi__jpeg_reset DD imagerel stbi__jpeg_reset
	DD	imagerel stbi__jpeg_reset+237
	DD	imagerel $unwind$stbi__jpeg_reset
$pdata$stbi__parse_entropy_coded_data DD imagerel stbi__parse_entropy_coded_data
	DD	imagerel stbi__parse_entropy_coded_data+3156
	DD	imagerel $unwind$stbi__parse_entropy_coded_data
$pdata$stbi__jpeg_dequantize DD imagerel stbi__jpeg_dequantize
	DD	imagerel stbi__jpeg_dequantize+86
	DD	imagerel $unwind$stbi__jpeg_dequantize
$pdata$stbi__jpeg_finish DD imagerel stbi__jpeg_finish
	DD	imagerel stbi__jpeg_finish+457
	DD	imagerel $unwind$stbi__jpeg_finish
$pdata$stbi__process_marker DD imagerel stbi__process_marker
	DD	imagerel stbi__process_marker+1716
	DD	imagerel $unwind$stbi__process_marker
$pdata$stbi__process_scan_header DD imagerel stbi__process_scan_header
	DD	imagerel stbi__process_scan_header+812
	DD	imagerel $unwind$stbi__process_scan_header
$pdata$stbi__free_jpeg_components DD imagerel stbi__free_jpeg_components
	DD	imagerel stbi__free_jpeg_components+653
	DD	imagerel $unwind$stbi__free_jpeg_components
$pdata$stbi__process_frame_header DD imagerel stbi__process_frame_header
	DD	imagerel stbi__process_frame_header+2318
	DD	imagerel $unwind$stbi__process_frame_header
$pdata$stbi__decode_jpeg_header DD imagerel stbi__decode_jpeg_header
	DD	imagerel stbi__decode_jpeg_header+345
	DD	imagerel $unwind$stbi__decode_jpeg_header
$pdata$stbi__decode_jpeg_image DD imagerel stbi__decode_jpeg_image
	DD	imagerel stbi__decode_jpeg_image+487
	DD	imagerel $unwind$stbi__decode_jpeg_image
$pdata$stbi__resample_row_v_2 DD imagerel stbi__resample_row_v_2
	DD	imagerel stbi__resample_row_v_2+110
	DD	imagerel $unwind$stbi__resample_row_v_2
$pdata$stbi__resample_row_h_2 DD imagerel stbi__resample_row_h_2
	DD	imagerel stbi__resample_row_h_2+474
	DD	imagerel $unwind$stbi__resample_row_h_2
$pdata$stbi__resample_row_hv_2 DD imagerel stbi__resample_row_hv_2
	DD	imagerel stbi__resample_row_hv_2+383
	DD	imagerel $unwind$stbi__resample_row_hv_2
$pdata$stbi__resample_row_hv_2_simd DD imagerel stbi__resample_row_hv_2_simd
	DD	imagerel stbi__resample_row_hv_2_simd+1205
	DD	imagerel $unwind$stbi__resample_row_hv_2_simd
$pdata$stbi__resample_row_generic DD imagerel stbi__resample_row_generic
	DD	imagerel stbi__resample_row_generic+131
	DD	imagerel $unwind$stbi__resample_row_generic
$pdata$stbi__YCbCr_to_RGB_row DD imagerel stbi__YCbCr_to_RGB_row
	DD	imagerel stbi__YCbCr_to_RGB_row+451
	DD	imagerel $unwind$stbi__YCbCr_to_RGB_row
$pdata$stbi__YCbCr_to_RGB_simd DD imagerel stbi__YCbCr_to_RGB_simd
	DD	imagerel stbi__YCbCr_to_RGB_simd+1356
	DD	imagerel $unwind$stbi__YCbCr_to_RGB_simd
$pdata$stbi__setup_jpeg DD imagerel stbi__setup_jpeg
	DD	imagerel stbi__setup_jpeg+137
	DD	imagerel $unwind$stbi__setup_jpeg
$pdata$stbi__cleanup_jpeg DD imagerel stbi__cleanup_jpeg
	DD	imagerel stbi__cleanup_jpeg+38
	DD	imagerel $unwind$stbi__cleanup_jpeg
$pdata$stbi__blinn_8x8 DD imagerel stbi__blinn_8x8
	DD	imagerel stbi__blinn_8x8+54
	DD	imagerel $unwind$stbi__blinn_8x8
$pdata$load_jpeg_image DD imagerel load_jpeg_image
	DD	imagerel load_jpeg_image+4520
	DD	imagerel $unwind$load_jpeg_image
$pdata$stbi__jpeg_info_raw DD imagerel stbi__jpeg_info_raw
	DD	imagerel stbi__jpeg_info_raw+172
	DD	imagerel $unwind$stbi__jpeg_info_raw
$pdata$stbi__bit_reverse DD imagerel stbi__bit_reverse
	DD	imagerel stbi__bit_reverse+71
	DD	imagerel $unwind$stbi__bit_reverse
$pdata$stbi__zbuild_huffman DD imagerel stbi__zbuild_huffman
	DD	imagerel stbi__zbuild_huffman+896
	DD	imagerel $unwind$stbi__zbuild_huffman
$pdata$stbi__zeof DD imagerel stbi__zeof
	DD	imagerel stbi__zeof+52
	DD	imagerel $unwind$stbi__zeof
$pdata$stbi__zget8 DD imagerel stbi__zget8
	DD	imagerel stbi__zget8+77
	DD	imagerel $unwind$stbi__zget8
$pdata$stbi__fill_bits DD imagerel stbi__fill_bits
	DD	imagerel stbi__fill_bits+142
	DD	imagerel $unwind$stbi__fill_bits
$pdata$stbi__zreceive DD imagerel stbi__zreceive
	DD	imagerel stbi__zreceive+143
	DD	imagerel $unwind$stbi__zreceive
$pdata$stbi__zhuffman_decode_slowpath DD imagerel stbi__zhuffman_decode_slowpath
	DD	imagerel stbi__zhuffman_decode_slowpath+290
	DD	imagerel $unwind$stbi__zhuffman_decode_slowpath
$pdata$stbi__zhuffman_decode DD imagerel stbi__zhuffman_decode
	DD	imagerel stbi__zhuffman_decode+193
	DD	imagerel $unwind$stbi__zhuffman_decode
$pdata$stbi__zexpand DD imagerel stbi__zexpand
	DD	imagerel stbi__zexpand+450
	DD	imagerel $unwind$stbi__zexpand
$pdata$stbi__parse_huffman_block DD imagerel stbi__parse_huffman_block
	DD	imagerel stbi__parse_huffman_block+707
	DD	imagerel $unwind$stbi__parse_huffman_block
$pdata$stbi__compute_huffman_codes DD imagerel stbi__compute_huffman_codes
	DD	imagerel stbi__compute_huffman_codes+787
	DD	imagerel $unwind$stbi__compute_huffman_codes
$pdata$stbi__parse_uncompressed_block DD imagerel stbi__parse_uncompressed_block
	DD	imagerel stbi__parse_uncompressed_block+498
	DD	imagerel $unwind$stbi__parse_uncompressed_block
$pdata$stbi__parse_zlib_header DD imagerel stbi__parse_zlib_header
	DD	imagerel stbi__parse_zlib_header+178
	DD	imagerel $unwind$stbi__parse_zlib_header
$pdata$stbi__parse_zlib DD imagerel stbi__parse_zlib
	DD	imagerel stbi__parse_zlib+296
	DD	imagerel $unwind$stbi__parse_zlib
$pdata$stbi__do_zlib DD imagerel stbi__do_zlib
	DD	imagerel stbi__do_zlib+108
	DD	imagerel $unwind$stbi__do_zlib
$pdata$stbi__get_chunk_header DD imagerel stbi__get_chunk_header
	DD	imagerel stbi__get_chunk_header+47
	DD	imagerel $unwind$stbi__get_chunk_header
$pdata$stbi__check_png_header DD imagerel stbi__check_png_header
	DD	imagerel stbi__check_png_header+95
	DD	imagerel $unwind$stbi__check_png_header
$pdata$stbi__paeth DD imagerel stbi__paeth
	DD	imagerel stbi__paeth+157
	DD	imagerel $unwind$stbi__paeth
$pdata$stbi__create_png_image_raw DD imagerel stbi__create_png_image_raw
	DD	imagerel stbi__create_png_image_raw+6296
	DD	imagerel $unwind$stbi__create_png_image_raw
$pdata$stbi__create_png_image DD imagerel stbi__create_png_image
	DD	imagerel stbi__create_png_image+1431
	DD	imagerel $unwind$stbi__create_png_image
$pdata$stbi__compute_transparency DD imagerel stbi__compute_transparency
	DD	imagerel stbi__compute_transparency+450
	DD	imagerel $unwind$stbi__compute_transparency
$pdata$stbi__compute_transparency16 DD imagerel stbi__compute_transparency16
	DD	imagerel stbi__compute_transparency16+453
	DD	imagerel $unwind$stbi__compute_transparency16
$pdata$stbi__expand_png_palette DD imagerel stbi__expand_png_palette
	DD	imagerel stbi__expand_png_palette+682
	DD	imagerel $unwind$stbi__expand_png_palette
$pdata$stbi__de_iphone DD imagerel stbi__de_iphone
	DD	imagerel stbi__de_iphone+800
	DD	imagerel $unwind$stbi__de_iphone
$pdata$stbi__parse_png_file DD imagerel stbi__parse_png_file
	DD	imagerel stbi__parse_png_file+3649
	DD	imagerel $unwind$stbi__parse_png_file
$pdata$stbi__do_png DD imagerel stbi__do_png
	DD	imagerel stbi__do_png+913
	DD	imagerel $unwind$stbi__do_png
$pdata$stbi__png_info_raw DD imagerel stbi__png_info_raw
	DD	imagerel stbi__png_info_raw+150
	DD	imagerel $unwind$stbi__png_info_raw
$pdata$stbi__bmp_test_raw DD imagerel stbi__bmp_test_raw
	DD	imagerel stbi__bmp_test_raw+180
	DD	imagerel $unwind$stbi__bmp_test_raw
$pdata$stbi__high_bit DD imagerel stbi__high_bit
	DD	imagerel stbi__high_bit+169
	DD	imagerel $unwind$stbi__high_bit
$pdata$stbi__shiftsigned DD imagerel stbi__shiftsigned
	DD	imagerel stbi__shiftsigned+206
	DD	imagerel $unwind$stbi__shiftsigned
$pdata$stbi__bmp_parse_header DD imagerel stbi__bmp_parse_header
	DD	imagerel stbi__bmp_parse_header+1589
	DD	imagerel $unwind$stbi__bmp_parse_header
$pdata$stbi__tga_get_comp DD imagerel stbi__tga_get_comp
	DD	imagerel stbi__tga_get_comp+144
	DD	imagerel $unwind$stbi__tga_get_comp
$pdata$stbi__tga_read_rgb16 DD imagerel stbi__tga_read_rgb16
	DD	imagerel stbi__tga_read_rgb16+197
	DD	imagerel $unwind$stbi__tga_read_rgb16
$pdata$stbi__psd_decode_rle DD imagerel stbi__psd_decode_rle
	DD	imagerel stbi__psd_decode_rle+318
	DD	imagerel $unwind$stbi__psd_decode_rle
$pdata$stbi__pic_is4 DD imagerel stbi__pic_is4
	DD	imagerel stbi__pic_is4+88
	DD	imagerel $unwind$stbi__pic_is4
$pdata$stbi__pic_test_core DD imagerel stbi__pic_test_core
	DD	imagerel stbi__pic_test_core+108
	DD	imagerel $unwind$stbi__pic_test_core
$pdata$stbi__readval DD imagerel stbi__readval
	DD	imagerel stbi__readval+171
	DD	imagerel $unwind$stbi__readval
$pdata$stbi__copyval DD imagerel stbi__copyval
	DD	imagerel stbi__copyval+108
	DD	imagerel $unwind$stbi__copyval
$pdata$stbi__pic_load_core DD imagerel stbi__pic_load_core
	DD	imagerel stbi__pic_load_core+1624
	DD	imagerel $unwind$stbi__pic_load_core
$pdata$stbi__gif_test_raw DD imagerel stbi__gif_test_raw
	DD	imagerel stbi__gif_test_raw+152
	DD	imagerel $unwind$stbi__gif_test_raw
$pdata$stbi__gif_parse_colortable DD imagerel stbi__gif_parse_colortable
	DD	imagerel stbi__gif_parse_colortable+235
	DD	imagerel $unwind$stbi__gif_parse_colortable
$pdata$stbi__gif_header DD imagerel stbi__gif_header
	DD	imagerel stbi__gif_header+524
	DD	imagerel $unwind$stbi__gif_header
$pdata$stbi__gif_info_raw DD imagerel stbi__gif_info_raw
	DD	imagerel stbi__gif_info_raw+353
	DD	imagerel $unwind$stbi__gif_info_raw
$pdata$stbi__out_gif_code DD imagerel stbi__out_gif_code
	DD	imagerel stbi__out_gif_code+662
	DD	imagerel $unwind$stbi__out_gif_code
$pdata$stbi__process_gif_raster DD imagerel stbi__process_gif_raster
	DD	imagerel stbi__process_gif_raster+1123
	DD	imagerel $unwind$stbi__process_gif_raster
$pdata$stbi__gif_load_next DD imagerel stbi__gif_load_next
	DD	imagerel stbi__gif_load_next+2555
	DD	imagerel $unwind$stbi__gif_load_next
$pdata$stbi__load_gif_main_outofmem DD imagerel stbi__load_gif_main_outofmem
	DD	imagerel stbi__load_gif_main_outofmem+549
	DD	imagerel $unwind$stbi__load_gif_main_outofmem
$pdata$stbi__hdr_test_core DD imagerel stbi__hdr_test_core
	DD	imagerel stbi__hdr_test_core+109
	DD	imagerel $unwind$stbi__hdr_test_core
$pdata$stbi__hdr_gettoken DD imagerel stbi__hdr_gettoken
	DD	imagerel stbi__hdr_gettoken+179
	DD	imagerel $unwind$stbi__hdr_gettoken
$pdata$stbi__hdr_convert DD imagerel stbi__hdr_convert
	DD	imagerel stbi__hdr_convert+608
	DD	imagerel $unwind$stbi__hdr_convert
$pdata$stbi__pnm_isspace DD imagerel stbi__pnm_isspace
	DD	imagerel stbi__pnm_isspace+92
	DD	imagerel $unwind$stbi__pnm_isspace
$pdata$stbi__pnm_skip_whitespace DD imagerel stbi__pnm_skip_whitespace
	DD	imagerel stbi__pnm_skip_whitespace+162
	DD	imagerel $unwind$stbi__pnm_skip_whitespace
$pdata$stbi__pnm_isdigit DD imagerel stbi__pnm_isdigit
	DD	imagerel stbi__pnm_isdigit+52
	DD	imagerel $unwind$stbi__pnm_isdigit
$pdata$stbi__pnm_getinteger DD imagerel stbi__pnm_getinteger
	DD	imagerel stbi__pnm_getinteger+102
	DD	imagerel $unwind$stbi__pnm_getinteger
$pdata$stbi__info_main DD imagerel stbi__info_main
	DD	imagerel stbi__info_main+380
	DD	imagerel $unwind$stbi__info_main
$pdata$stbi__is_16_main DD imagerel stbi__is_16_main
	DD	imagerel stbi__is_16_main+79
	DD	imagerel $unwind$stbi__is_16_main
$pdata$stbi_write_png DD imagerel $LN5
	DD	imagerel $LN5+351
	DD	imagerel $unwind$stbi_write_png
$pdata$stbi_write_bmp DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_bmp
$pdata$stbi_write_tga DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_tga
$pdata$stbi_write_hdr DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_hdr
$pdata$stbi_write_jpg DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$stbi_write_jpg
$pdata$stbi_write_png_to_func DD imagerel $LN4
	DD	imagerel $LN4+218
	DD	imagerel $unwind$stbi_write_png_to_func
$pdata$stbi_write_bmp_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_bmp_to_func
$pdata$stbi_write_tga_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_tga_to_func
$pdata$stbi_write_hdr_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_hdr_to_func
$pdata$stbi_write_jpg_to_func DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$stbi_write_jpg_to_func
$pdata$stbi__stdio_write DD imagerel stbi__stdio_write
	DD	imagerel stbi__stdio_write+52
	DD	imagerel $unwind$stbi__stdio_write
$pdata$stbiw__fopen DD imagerel stbiw__fopen
	DD	imagerel stbiw__fopen+57
	DD	imagerel $unwind$stbiw__fopen
$pdata$stbi__start_write_file DD imagerel stbi__start_write_file
	DD	imagerel stbi__start_write_file+93
	DD	imagerel $unwind$stbi__start_write_file
$pdata$stbi__end_write_file DD imagerel stbi__end_write_file
	DD	imagerel stbi__end_write_file+28
	DD	imagerel $unwind$stbi__end_write_file
$pdata$stbiw__writefv DD imagerel stbiw__writefv
	DD	imagerel stbiw__writefv+475
	DD	imagerel $unwind$stbiw__writefv
$pdata$stbiw__writef DD imagerel stbiw__writef
	DD	imagerel stbiw__writef+68
	DD	imagerel $unwind$stbiw__writef
$pdata$stbiw__write_flush DD imagerel stbiw__write_flush
	DD	imagerel stbiw__write_flush+74
	DD	imagerel $unwind$stbiw__write_flush
$pdata$stbiw__putc DD imagerel stbiw__putc
	DD	imagerel stbiw__putc+45
	DD	imagerel $unwind$stbiw__putc
$pdata$stbiw__write1 DD imagerel stbiw__write1
	DD	imagerel stbiw__write1+87
	DD	imagerel $unwind$stbiw__write1
$pdata$stbiw__write3 DD imagerel stbiw__write3
	DD	imagerel stbiw__write3+149
	DD	imagerel $unwind$stbiw__write3
$pdata$stbiw__write_pixel DD imagerel stbiw__write_pixel
	DD	imagerel stbiw__write_pixel+519
	DD	imagerel $unwind$stbiw__write_pixel
$pdata$stbiw__write_pixels DD imagerel stbiw__write_pixels
	DD	imagerel stbiw__write_pixels+319
	DD	imagerel $unwind$stbiw__write_pixels
$pdata$stbiw__outfile DD imagerel stbiw__outfile
	DD	imagerel stbiw__outfile+208
	DD	imagerel $unwind$stbiw__outfile
$pdata$stbi_write_bmp_core DD imagerel stbi_write_bmp_core
	DD	imagerel stbi_write_bmp_core+902
	DD	imagerel $unwind$stbi_write_bmp_core
$pdata$stbi_write_tga_core DD imagerel stbi_write_tga_core
	DD	imagerel stbi_write_tga_core+1764
	DD	imagerel $unwind$stbi_write_tga_core
$pdata$stbiw__linear_to_rgbe DD imagerel stbiw__linear_to_rgbe
	DD	imagerel stbiw__linear_to_rgbe+582
	DD	imagerel $unwind$stbiw__linear_to_rgbe
$pdata$stbiw__write_run_data DD imagerel stbiw__write_run_data
	DD	imagerel stbiw__write_run_data+138
	DD	imagerel $unwind$stbiw__write_run_data
$pdata$stbiw__write_dump_data DD imagerel stbiw__write_dump_data
	DD	imagerel stbiw__write_dump_data+126
	DD	imagerel $unwind$stbiw__write_dump_data
$pdata$stbiw__write_hdr_scanline DD imagerel stbiw__write_hdr_scanline
	DD	imagerel stbiw__write_hdr_scanline+1547
	DD	imagerel $unwind$stbiw__write_hdr_scanline
$pdata$stbi_write_hdr_core DD imagerel stbi_write_hdr_core
	DD	imagerel stbi_write_hdr_core+587
	DD	imagerel $unwind$stbi_write_hdr_core
$pdata$stbiw__sbgrowf DD imagerel stbiw__sbgrowf
	DD	imagerel stbiw__sbgrowf+399
	DD	imagerel $unwind$stbiw__sbgrowf
$pdata$stbiw__zlib_flushf DD imagerel stbiw__zlib_flushf
	DD	imagerel stbiw__zlib_flushf+244
	DD	imagerel $unwind$stbiw__zlib_flushf
$pdata$stbiw__zlib_bitrev DD imagerel stbiw__zlib_bitrev
	DD	imagerel stbiw__zlib_bitrev+81
	DD	imagerel $unwind$stbiw__zlib_bitrev
$pdata$stbiw__zlib_countm DD imagerel stbiw__zlib_countm
	DD	imagerel stbiw__zlib_countm+96
	DD	imagerel $unwind$stbiw__zlib_countm
$pdata$stbiw__zhash DD imagerel stbiw__zhash
	DD	imagerel stbiw__zhash+180
	DD	imagerel $unwind$stbiw__zhash
$pdata$stbi_zlib_compress DD imagerel $LN94
	DD	imagerel $LN94+5829
	DD	imagerel $unwind$stbi_zlib_compress
$pdata$stbiw__crc32 DD imagerel stbiw__crc32
	DD	imagerel stbiw__crc32+108
	DD	imagerel $unwind$stbiw__crc32
$pdata$stbiw__wpcrc DD imagerel stbiw__wpcrc
	DD	imagerel stbiw__wpcrc+204
	DD	imagerel $unwind$stbiw__wpcrc
$pdata$stbiw__paeth DD imagerel stbiw__paeth
	DD	imagerel stbiw__paeth+172
	DD	imagerel $unwind$stbiw__paeth
$pdata$stbiw__encode_png_line DD imagerel stbiw__encode_png_line
	DD	imagerel stbiw__encode_png_line+1576
	DD	imagerel $unwind$stbiw__encode_png_line
$pdata$stbi_write_png_to_mem DD imagerel $LN23
	DD	imagerel $LN23+3123
	DD	imagerel $unwind$stbi_write_png_to_mem
$pdata$stbiw__jpg_writeBits DD imagerel stbiw__jpg_writeBits
	DD	imagerel stbiw__jpg_writeBits+230
	DD	imagerel $unwind$stbiw__jpg_writeBits
$pdata$stbiw__jpg_DCT DD imagerel stbiw__jpg_DCT
	DD	imagerel stbiw__jpg_DCT+837
	DD	imagerel $unwind$stbiw__jpg_DCT
$pdata$stbiw__jpg_calcBits DD imagerel stbiw__jpg_calcBits
	DD	imagerel stbiw__jpg_calcBits+229
	DD	imagerel $unwind$stbiw__jpg_calcBits
$pdata$stbiw__jpg_processDU DD imagerel stbiw__jpg_processDU
	DD	imagerel stbiw__jpg_processDU+1769
	DD	imagerel $unwind$stbiw__jpg_processDU
$pdata$stbi_write_jpg_core DD imagerel stbi_write_jpg_core
	DD	imagerel stbi_write_jpg_core+4687
	DD	imagerel $unwind$stbi_write_jpg_core
$pdata$rxvec3 DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$rxvec3
$pdata$rxvec3_xyz DD imagerel $LN3
	DD	imagerel $LN3+123
	DD	imagerel $unwind$rxvec3_xyz
$pdata$rxvec3_xy DD imagerel $LN3
	DD	imagerel $LN3+75
	DD	imagerel $unwind$rxvec3_xy
$pdata$rxvec3_x DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$rxvec3_x
$pdata$rxvec3_y DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$rxvec3_y
$pdata$rxvec3_z DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$rxvec3_z
$pdata$rxmatrix_identity DD imagerel $LN3
	DD	imagerel $LN3+570
	DD	imagerel $unwind$rxmatrix_identity
$pdata$rxmatrix_multiply DD imagerel $LN9
	DD	imagerel $LN9+470
	DD	imagerel $unwind$rxmatrix_multiply
$pdata$rxremix DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$rxremix
$pdata$rxclamp DD imagerel $LN7
	DD	imagerel $LN7+110
	DD	imagerel $unwind$rxclamp
$pdata$rxclampi DD imagerel $LN7
	DD	imagerel $LN7+79
	DD	imagerel $unwind$rxclampi
$pdata$rxmax DD	imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$rxmax
$pdata$rxmin DD	imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$rxmin
$pdata$rxmaxi DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$rxmaxi
$pdata$rxmini DD imagerel $LN5
	DD	imagerel $LN5+46
	DD	imagerel $unwind$rxmini
$pdata$rxvector_cross DD imagerel $LN3
	DD	imagerel $LN3+207
	DD	imagerel $unwind$rxvector_cross
$pdata$rxvector_length DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$rxvector_length
$pdata$rxvec2_len DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$rxvec2_len
$pdata$rxvec2_add DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxvec2_add
$pdata$rxvec2_sub DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxvec2_sub
$pdata$rxvector_add DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$rxvector_add
$pdata$rxvector_sub DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$rxvector_sub
$pdata$rxvector_mul DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$rxvector_mul
$pdata$rxvector_downscale DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$rxvector_downscale
$pdata$rxvector_scale DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$rxvector_scale
$pdata$rxvector_negate DD imagerel $LN3
	DD	imagerel $LN3+142
	DD	imagerel $unwind$rxvector_negate
$pdata$rxvector_min DD imagerel $LN9
	DD	imagerel $LN9+254
	DD	imagerel $unwind$rxvector_min
$pdata$rxvector_max DD imagerel $LN9
	DD	imagerel $LN9+254
	DD	imagerel $unwind$rxvector_max
$pdata$rxvector_abs DD imagerel $LN9
	DD	imagerel $LN9+271
	DD	imagerel $unwind$rxvector_abs
$pdata$rxvector_normalize DD imagerel $LN5
	DD	imagerel $LN5+183
	DD	imagerel $unwind$rxvector_normalize
$pdata$rxmatrix_projection DD imagerel $LN3
	DD	imagerel $LN3+496
	DD	imagerel $unwind$rxmatrix_projection
$pdata$rxmatrix_rotZ DD imagerel $LN3
	DD	imagerel $LN3+310
	DD	imagerel $unwind$rxmatrix_rotZ
$pdata$rxmatrix_rotY DD imagerel $LN3
	DD	imagerel $LN3+310
	DD	imagerel $unwind$rxmatrix_rotY
$pdata$rxmatrix_rotX DD imagerel $LN3
	DD	imagerel $LN3+306
	DD	imagerel $unwind$rxmatrix_rotX
$pdata$rxmatrix_translate_xyz DD imagerel $LN3
	DD	imagerel $LN3+246
	DD	imagerel $unwind$rxmatrix_translate_xyz
$pdata$rxmatrix_flip_vertically DD imagerel $LN3
	DD	imagerel $LN3+153
	DD	imagerel $unwind$rxmatrix_flip_vertically
$pdata$rxmul_matvec DD imagerel $LN3
	DD	imagerel $LN3+767
	DD	imagerel $unwind$rxmul_matvec
$pdata$rxadd_vec2 DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxadd_vec2
$pdata$rxmul_vec2 DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxmul_vec2
$pdata$rxvec2_xy DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$rxvec2_xy
$pdata$rxvec2i_vec2 DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$rxvec2i_vec2
$pdata$rxlinker_register_terminal DD imagerel $LN7
	DD	imagerel $LN7+302
	DD	imagerel $unwind$rxlinker_register_terminal
$pdata$rxlinker_onlyquery_terminal DD imagerel $LN4
	DD	imagerel $LN4+213
	DD	imagerel $unwind$rxlinker_onlyquery_terminal
$pdata$rxlinker_labelshas_terminal DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$rxlinker_labelshas_terminal
$pdata$rxlinker_labelsadd_terminal DD imagerel $LN6
	DD	imagerel $LN6+93
	DD	imagerel $unwind$rxlinker_labelsadd_terminal
$pdata$rxlinker_labelsrem_terminal DD imagerel $LN6
	DD	imagerel $LN6+93
	DD	imagerel $unwind$rxlinker_labelsrem_terminal
$pdata$rxlinker_resolve_terminal DD imagerel $LN18
	DD	imagerel $LN18+859
	DD	imagerel $unwind$rxlinker_resolve_terminal
$pdata$rxtexture_load DD imagerel $LN4
	DD	imagerel $LN4+254
	DD	imagerel $unwind$rxtexture_load
$pdata$rxtexture_create_untyped DD imagerel rxtexture_create_untyped
	DD	imagerel rxtexture_create_untyped+1212
	DD	imagerel $unwind$rxtexture_create_untyped
$pdata$rxtexture_create_ex DD imagerel rxtexture_create_ex
	DD	imagerel rxtexture_create_ex+161
	DD	imagerel $unwind$rxtexture_create_ex
$pdata$rxtexture_create DD imagerel rxtexture_create
	DD	imagerel rxtexture_create+99
	DD	imagerel $unwind$rxtexture_create
$pdata$rxtexture_apply DD imagerel rxtexture_apply
	DD	imagerel rxtexture_apply+480
	DD	imagerel $unwind$rxtexture_apply
$pdata$rxtexture_bind DD imagerel rxtexture_bind
	DD	imagerel rxtexture_bind+50
	DD	imagerel $unwind$rxtexture_bind
$pdata$rxtexture_borrow DD imagerel rxtexture_borrow
	DD	imagerel rxtexture_borrow+442
	DD	imagerel $unwind$rxtexture_borrow
$pdata$rxrender_target_copy DD imagerel $LN5
	DD	imagerel $LN5+334
	DD	imagerel $unwind$rxrender_target_copy
$pdata$rxrender_target_apply DD imagerel $LN18
	DD	imagerel $LN18+751
	DD	imagerel $unwind$rxrender_target_apply
$pdata$rxsampler_apply DD imagerel rxsampler_apply
	DD	imagerel rxsampler_apply+181
	DD	imagerel $unwind$rxsampler_apply
$pdata$rxsampler_bind DD imagerel rxsampler_bind
	DD	imagerel rxsampler_bind+26
	DD	imagerel $unwind$rxsampler_bind
$pdata$rxshader_apply DD imagerel $LN11
	DD	imagerel $LN11+555
	DD	imagerel $unwind$rxshader_apply
$pdata$rxcompile_shader_bytecode DD imagerel $LN6
	DD	imagerel $LN6+545
	DD	imagerel $unwind$rxcompile_shader_bytecode
$pdata$rxload_vertex_shader DD imagerel $LN25
	DD	imagerel $LN25+882
	DD	imagerel $unwind$rxload_vertex_shader
$pdata$rxload_pixel_shader DD imagerel $LN25
	DD	imagerel $LN25+882
	DD	imagerel $unwind$rxload_pixel_shader
$pdata$rxbuffer_borrow DD imagerel $LN12
	DD	imagerel $LN12+418
	DD	imagerel $unwind$rxbuffer_borrow
$pdata$rxuniform_buffer_delete DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$rxuniform_buffer_delete
$pdata$rxuniform_buffer_update DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$rxuniform_buffer_update
$pdata$rxuniform_buffer_bind_ex DD imagerel $LN13
	DD	imagerel $LN13+360
	DD	imagerel $unwind$rxuniform_buffer_bind_ex
$pdata$rxenable_ztesting DD imagerel $LN5
	DD	imagerel $LN5+73
	DD	imagerel $unwind$rxenable_ztesting
$pdata$rxarticle_create DD imagerel $LN7
	DD	imagerel $LN7+299
	DD	imagerel $unwind$rxarticle_create
$pdata$rxinvalidate_contents DD imagerel $LN14
	DD	imagerel $LN14+495
	DD	imagerel $unwind$rxinvalidate_contents
$pdata$rxunknown_typeof_compute_shader DD imagerel $LN6
	DD	imagerel $LN6+100
	DD	imagerel $unwind$rxunknown_typeof_compute_shader
$pdata$rxunknown_typeof_vertex_shader DD imagerel $LN6
	DD	imagerel $LN6+100
	DD	imagerel $unwind$rxunknown_typeof_vertex_shader
$pdata$rxunknown_typeof_pixel_shader DD imagerel $LN6
	DD	imagerel $LN6+100
	DD	imagerel $unwind$rxunknown_typeof_pixel_shader
$pdata$rxshader_typeof_compute DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$rxshader_typeof_compute
$pdata$rxshader_typeof_vertex DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$rxshader_typeof_vertex
$pdata$rxshader_typeof_pixel DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$rxshader_typeof_pixel
$pdata$rxdelete_blobbler DD imagerel $LN4
	DD	imagerel $LN4+47
	DD	imagerel $unwind$rxdelete_blobbler
$pdata$rxcreate_shader DD imagerel $LN31
	DD	imagerel $LN31+1443
	DD	imagerel $unwind$rxcreate_shader
$pdata$rxdelete_unknown DD imagerel $LN4
	DD	imagerel $LN4+38
	DD	imagerel $unwind$rxdelete_unknown
$pdata$rxdelete_vertex_buffer DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$rxdelete_vertex_buffer
$pdata$rxdelete_index_buffer DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$rxdelete_index_buffer
$pdata$rxreturn DD imagerel $LN3
	DD	imagerel $LN3+45
	DD	imagerel $unwind$rxreturn
$pdata$rxuniform_buffer_borrow DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxuniform_buffer_borrow
$pdata$rxuniform_buffer_create DD imagerel $LN3
	DD	imagerel $LN3+157
	DD	imagerel $unwind$rxuniform_buffer_create
$pdata$rxcreate_index_buffer DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$rxcreate_index_buffer
$pdata$rxcreate_vertex_buffer DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$rxcreate_vertex_buffer
$pdata$rxcreate_struct_buffer DD imagerel $LN3
	DD	imagerel $LN3+229
	DD	imagerel $unwind$rxcreate_struct_buffer
$pdata$rxborrow_vertex_buffer DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxborrow_vertex_buffer
$pdata$rxborrow_index_buffer DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxborrow_index_buffer
$pdata$rxborrow_struct_buffer DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$rxborrow_struct_buffer
$pdata$rxdriver_stage_viewport DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$rxdriver_stage_viewport
$pdata$rxcomtag DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$rxcomtag
$pdata$rxcomadd DD imagerel $LN4
	DD	imagerel $LN4+212
	DD	imagerel $unwind$rxcomadd
$pdata$rx3d DD	imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$rx3d
$pdata$rx2d DD	imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$rx2d
$pdata$rxclip DD imagerel $LN11
	DD	imagerel $LN11+446
	DD	imagerel $unwind$rxclip
$pdata$rxsampler_bind_ex DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$rxsampler_bind_ex
$pdata$rxtexture_bind_ex DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$rxtexture_bind_ex
$pdata$rxcomexc DD imagerel $LN38
	DD	imagerel $LN38+2236
	DD	imagerel $unwind$rxcomexc
$pdata$rxdraw_end DD imagerel $LN3
	DD	imagerel $LN3+19
	DD	imagerel $unwind$rxdraw_end
$pdata$rxqueue_custom_command DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$rxqueue_custom_command
$pdata$rxdraw_matrix DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$rxdraw_matrix
$pdata$rxqueue_shader_command DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$rxqueue_shader_command
$pdata$rxqueue_uniform_command DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$rxqueue_uniform_command
$pdata$rxvertex_mode_end DD imagerel $LN7
	DD	imagerel $LN7+136
	DD	imagerel $unwind$rxvertex_mode_end
$pdata$rxvertex_mode DD imagerel $LN7
	DD	imagerel $LN7+300
	DD	imagerel $unwind$rxvertex_mode
$pdata$rxsubmit_index DD imagerel $LN11
	DD	imagerel $LN11+305
	DD	imagerel $unwind$rxsubmit_index
$pdata$rxvertex_color DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$rxvertex_color
$pdata$rxsubmit_vertex_array DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$rxsubmit_vertex_array
$pdata$rxsubmit_vertex DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$rxsubmit_vertex
$pdata$rxsubmit_vertex_ex DD imagerel $LN11
	DD	imagerel $LN11+422
	DD	imagerel $unwind$rxsubmit_vertex_ex
$pdata$rx_vertex_xyz DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$rx_vertex_xyz
$pdata$rx_vertex_xyz_color DD imagerel $LN3
	DD	imagerel $LN3+131
	DD	imagerel $unwind$rx_vertex_xyz_color
$pdata$rxsubmit_vertex_xy DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$rxsubmit_vertex_xy
$pdata$rxsubmit_vertex_tex DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$rxsubmit_vertex_tex
$pdata$rxdraw_skinned_preset_unnormalized DD imagerel $LN3
	DD	imagerel $LN3+464
	DD	imagerel $unwind$rxdraw_skinned_preset_unnormalized
$pdata$rxdraw_skinned_unnormalized DD imagerel $LN3
	DD	imagerel $LN3+252
	DD	imagerel $unwind$rxdraw_skinned_unnormalized
$pdata$rxdraw_skinned_ex DD imagerel $LN3
	DD	imagerel $LN3+292
	DD	imagerel $unwind$rxdraw_skinned_ex
$pdata$rxdraw_skinned DD imagerel $LN3
	DD	imagerel $LN3+302
	DD	imagerel $unwind$rxdraw_skinned
$pdata$rxtexture_scaled DD imagerel $LN3
	DD	imagerel $LN3+328
	DD	imagerel $unwind$rxtexture_scaled
$pdata$rxdraw_rect DD imagerel $LN3
	DD	imagerel $LN3+211
	DD	imagerel $unwind$rxdraw_rect
$pdata$rxdraw_circle DD imagerel $LN6
	DD	imagerel $LN6+540
	DD	imagerel $unwind$rxdraw_circle
$pdata$rxdraw_line DD imagerel $LN3
	DD	imagerel $LN3+586
	DD	imagerel $unwind$rxdraw_line
$pdata$rxdraw_outline DD imagerel $LN3
	DD	imagerel $LN3+679
	DD	imagerel $unwind$rxdraw_outline
$pdata$rxdraw_text_length DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$rxdraw_text_length
$pdata$rxdraw_text_ex DD imagerel $LN11
	DD	imagerel $LN11+938
	DD	imagerel $unwind$rxdraw_text_ex
$pdata$rxdraw_text DD imagerel $LN4
	DD	imagerel $LN4+216
	DD	imagerel $unwind$rxdraw_text
$pdata$rxtexture_delete DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$rxtexture_delete
$pdata$rxcreate_render_target DD imagerel $LN3
	DD	imagerel $LN3+177
	DD	imagerel $unwind$rxcreate_render_target
$pdata$rxtime DD imagerel $LN3
	DD	imagerel $LN3+121
	DD	imagerel $unwind$rxtime
$pdata$rxeffect_candle DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$rxeffect_candle
$pdata$rxeffect_shadow DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$rxeffect_shadow
$pdata$rxrestore_render_stack DD imagerel $LN3
	DD	imagerel $LN3+897
	DD	imagerel $unwind$rxrestore_render_stack
$pdata$rxdefault_render_pass_end DD imagerel $LN3
	DD	imagerel $LN3+210
	DD	imagerel $unwind$rxdefault_render_pass_end
$pdata$rxwindow_message_handler_win32 DD imagerel $LN64
	DD	imagerel $LN64+1635
	DD	imagerel $unwind$rxwindow_message_handler_win32
$pdata$rxwindow_message_callback_win32 DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$rxwindow_message_callback_win32
$pdata$rxwindow_poll DD imagerel $LN5
	DD	imagerel $LN5+234
	DD	imagerel $unwind$rxwindow_poll
$pdata$rxwindow_create DD imagerel $LN8
	DD	imagerel $LN8+446
	DD	imagerel $unwind$rxwindow_create
$pdata$rxwindow_enable DD imagerel $LN4
	DD	imagerel $LN4+59
	DD	imagerel $unwind$rxwindow_enable
$pdata$rxwindow_resize DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$rxwindow_resize
$pdata$rxwindow_xy DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$rxwindow_xy
$pdata$rxtick DD imagerel $LN15
	DD	imagerel $LN15+1543
	DD	imagerel $unwind$rxtick
$pdata$rxcreate_simple_stencil_state_d3d DD imagerel $LN3
	DD	imagerel $LN3+204
	DD	imagerel $unwind$rxcreate_simple_stencil_state_d3d
$pdata$rxinit_default_font DD imagerel $LN6
	DD	imagerel $LN6+12628
	DD	imagerel $unwind$rxinit_default_font
$pdata$rxinit DD imagerel $LN17
	DD	imagerel $LN17+3002
	DD	imagerel $unwind$rxinit
$pdata$load_bitmap8 DD imagerel $LN9
	DD	imagerel $LN9+242
	DD	imagerel $unwind$load_bitmap8
$pdata$is_click_leave_rect DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$is_click_leave_rect
$pdata$is_click_enter_rect DD imagerel $LN5
	DD	imagerel $LN5+85
	DD	imagerel $unwind$is_click_enter_rect
$pdata$mouse_is_key DD imagerel $LN5
	DD	imagerel $LN5+88
	DD	imagerel $unwind$mouse_is_key
$pdata$rect_by_xyxy DD imagerel $LN11
	DD	imagerel $LN11+381
	DD	imagerel $unwind$rect_by_xyxy
$pdata$rect_by_size DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$rect_by_size
$pdata$rect_in_xy DD imagerel $LN6
	DD	imagerel $LN6+97
	DD	imagerel $unwind$rect_in_xy
$pdata$rect_cut DD imagerel $LN9
	DD	imagerel $LN9+698
	DD	imagerel $unwind$rect_cut
$pdata$rect_center DD imagerel $LN3
	DD	imagerel $LN3+250
	DD	imagerel $unwind$rect_center
$pdata$rect_padd DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$rect_padd
$pdata$text_rect DD imagerel $LN3
	DD	imagerel $LN3+174
	DD	imagerel $unwind$text_rect
$pdata$set_window_rect DD imagerel $LN3
	DD	imagerel $LN3+73
	DD	imagerel $unwind$set_window_rect
$pdata$get_monitor_rect DD imagerel $LN3
	DD	imagerel $LN3+144
	DD	imagerel $unwind$get_monitor_rect
$pdata$get_window_rect DD imagerel $LN3
	DD	imagerel $LN3+145
	DD	imagerel $unwind$get_window_rect
$pdata$get_window_client_rect DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$get_window_client_rect
$pdata$draw_rect DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$draw_rect
$pdata$draw_text DD imagerel $LN3
	DD	imagerel $LN3+108
	DD	imagerel $unwind$draw_text
$pdata$set_clip_rect DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$set_clip_rect
$pdata$button_widget DD imagerel $LN5
	DD	imagerel $LN5+786
	DD	imagerel $unwind$button_widget
$pdata$checkbox_widget DD imagerel $LN12
	DD	imagerel $LN12+1482
	DD	imagerel $unwind$checkbox_widget
$pdata$dropdown_widget DD imagerel $LN12
	DD	imagerel $LN12+1359
	DD	imagerel $unwind$dropdown_widget
$pdata$cursor_in_rect DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$cursor_in_rect
$pdata$is_click_enter DD imagerel $LN5
	DD	imagerel $LN5+144
	DD	imagerel $unwind$is_click_enter
$pdata$list_item_widget DD imagerel $LN5
	DD	imagerel $LN5+609
	DD	imagerel $unwind$list_item_widget
$pdata$slider_widget DD imagerel $LN6
	DD	imagerel $LN6+837
	DD	imagerel $unwind$slider_widget
$pdata$is_click_leave DD imagerel $LN5
	DD	imagerel $LN5+144
	DD	imagerel $unwind$is_click_leave
$pdata$mouse_poll DD imagerel $LN14
	DD	imagerel $LN14+415
	DD	imagerel $unwind$mouse_poll
$pdata$erecache DD imagerel $LN15
	DD	imagerel $LN15+392
	DD	imagerel $unwind$erecache
$pdata$egetlen DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$egetlen
$pdata$egetoff DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$egetoff
$pdata$esetcur DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$esetcur
$pdata$egetcur DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$egetcur
$pdata$egetcurx DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$egetcurx
$pdata$egetcury DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$egetcury
$pdata$ecurloc DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$ecurloc
$pdata$currec DD imagerel $LN3
	DD	imagerel $LN3+195
	DD	imagerel $unwind$currec
$pdata$emovcurx DD imagerel $LN11
	DD	imagerel $LN11+347
	DD	imagerel $unwind$emovcurx
$pdata$emovcury DD imagerel $LN6
	DD	imagerel $LN6+311
	DD	imagerel $unwind$emovcury
$pdata$eputchar DD imagerel $LN5
	DD	imagerel $LN5+233
	DD	imagerel $unwind$eputchar
$pdata$edelchar DD imagerel $LN5
	DD	imagerel $LN5+192
	DD	imagerel $unwind$edelchar
$pdata$fload DD	imagerel $LN7
	DD	imagerel $LN7+291
	DD	imagerel $unwind$fload
$pdata$fsave DD	imagerel $LN4
	DD	imagerel $LN4+112
	DD	imagerel $unwind$fsave
$pdata$ewdg DD	imagerel $LN39
	DD	imagerel $LN39+1717
	DD	imagerel $unwind$ewdg
$pdata$copy_string_ex DD imagerel $LN5
	DD	imagerel $LN5+209
	DD	imagerel $unwind$copy_string_ex
$pdata$copy_string DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$copy_string
$pdata$fdlg DD	imagerel $LN3
	DD	imagerel $LN3+218
	DD	imagerel $unwind$fdlg
$pdata$main DD	imagerel $LN9
	DD	imagerel $LN9+551
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
CONST	SEGMENT
__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e DB '~', 0faH, '~', 0faH, '~', 0faH
	DB	'~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH
CONST	ENDS
;	COMDAT __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
CONST	SEGMENT
__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d DB 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH
	DB	0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H
CONST	ENDS
;	COMDAT __xmm@f493f493f493f493f493f493f493f493
CONST	SEGMENT
__xmm@f493f493f493f493f493f493f493f493 DB 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
	DB	093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
CONST	ENDS
;	COMDAT __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
CONST	SEGMENT
__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9 DB 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H
	DB	01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH
CONST	ENDS
;	COMDAT __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
CONST	SEGMENT
__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0 DB 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H
	DB	0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H
CONST	ENDS
;	COMDAT __xmm@e09ee565e09ee565e09ee565e09ee565
CONST	SEGMENT
__xmm@e09ee565e09ee565e09ee565e09ee565 DB 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H
	DB	09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H
CONST	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
CONST	SEGMENT
__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a DB 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
	DB	'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
CONST	ENDS
;	COMDAT __xmm@166f166f166f166f166f166f166f166f
CONST	SEGMENT
__xmm@166f166f166f166f166f166f166f166f DB 'o', 016H, 'o', 016H, 'o', 016H
	DB	'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H
CONST	ENDS
;	COMDAT __xmm@12d0046b12d0046b12d0046b12d0046b
CONST	SEGMENT
__xmm@12d0046b12d0046b12d0046b12d0046b DB 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H
	DB	012H, 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H, 012H
CONST	ENDS
;	COMDAT __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
CONST	SEGMENT
__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3 DB 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H
	DB	0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
CONST	SEGMENT
__xmm@11c8e09e11c8e09e11c8e09e11c8e09e DB 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H
	DB	0c8H, 011H, 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@08a914e808a914e808a914e808a914e8
CONST	SEGMENT
__xmm@08a914e808a914e808a914e808a914e8 DB 0e8H, 014H, 0a9H, 08H, 0e8H, 014H
	DB	0a9H, 08H, 0e8H, 014H, 0a9H, 08H, 0e8H, 014H, 0a9H, 08H
CONST	ENDS
;	COMDAT __xmm@01010000010100000101000001010000
CONST	SEGMENT
__xmm@01010000010100000101000001010000 DB 00H, 00H, 01H, 01H, 00H, 00H, 01H
	DB	01H, 00H, 00H, 01H, 01H, 00H, 00H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00000200000002000000020000000200
CONST	SEGMENT
__xmm@00000200000002000000020000000200 DB 00H, 02H, 00H, 00H, 00H, 02H, 00H
	DB	00H, 00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@be2cca2e
CONST	SEGMENT
__real@be2cca2e DD 0be2cca2er			; -0.16874
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@40c00000
CONST	SEGMENT
__real@40c00000 DD 040c00000r			; 6
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4066800000000000
CONST	SEGMENT
__real@4066800000000000 DQ 04066800000000000r	; 180
CONST	ENDS
;	COMDAT __real@4056800000000000
CONST	SEGMENT
__real@4056800000000000 DQ 04056800000000000r	; 90
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@400921fb60000000
CONST	SEGMENT
__real@400921fb60000000 DQ 0400921fb60000000r	; 3.14159
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fa999999999999a
CONST	SEGMENT
__real@3fa999999999999a DQ 03fa999999999999ar	; 0.05
CONST	ENDS
;	COMDAT __real@3fa73d75
CONST	SEGMENT
__real@3fa73d75 DD 03fa73d75r			; 1.30656
CONST	ENDS
;	COMDAT __real@3f847ae147ae147b
CONST	SEGMENT
__real@3f847ae147ae147b DQ 03f847ae147ae147br	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f40c0c1
CONST	SEGMENT
__real@3f40c0c1 DD 03f40c0c1r			; 0.752941
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f1645a2
CONST	SEGMENT
__real@3f1645a2 DD 03f1645a2r			; 0.587
CONST	ENDS
;	COMDAT __real@3f0a8bd4
CONST	SEGMENT
__real@3f0a8bd4 DD 03f0a8bd4r			; 0.541196
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed65e89
CONST	SEGMENT
__real@3ed65e89 DD 03ed65e89r			; 0.41869
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3ec3ef15
CONST	SEGMENT
__real@3ec3ef15 DD 03ec3ef15r			; 0.382683
CONST	ENDS
;	COMDAT __real@3ea99ae9
CONST	SEGMENT
__real@3ea99ae9 DD 03ea99ae9r			; 0.33126
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e991687
CONST	SEGMENT
__real@3e991687 DD 03e991687r			; 0.299
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3e48c8c9
CONST	SEGMENT
__real@3e48c8c9 DD 03e48c8c9r			; 0.196078
CONST	ENDS
;	COMDAT __real@3de978d5
CONST	SEGMENT
__real@3de978d5 DD 03de978d5r			; 0.114
CONST	ENDS
;	COMDAT __real@3da685db
CONST	SEGMENT
__real@3da685db DD 03da685dbr			; 0.08131
CONST	ENDS
;	COMDAT __real@3d909091
CONST	SEGMENT
__real@3d909091 DD 03d909091r			; 0.0705882
CONST	ENDS
;	COMDAT __real@3c8efa35
CONST	SEGMENT
__real@3c8efa35 DD 03c8efa35r			; 0.0174533
CONST	ENDS
;	COMDAT __real@0a4fb11f
CONST	SEGMENT
__real@0a4fb11f DD 00a4fb11fr			; 1e-32
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+5
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
$SG106301 DB	'NaN', 00H
?hex@?1??stbsp_vsprintfcb@@9@9 DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
	ORG $+1
$SG106302 DB	'Inf', 00H
?hexu@?1??stbsp_vsprintfcb@@9@9 DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
	ORG $+1
$SG105722 DB	'null', 00H
	ORG $+3
$SG105796 DB	'_KMGT', 00H
	ORG $+2
$SG105797 DB	'_kMGT', 00H
	ORG $+2
$SG106582 DB	'err', 00H
$SG106581 DB	'assertion triggered', 00H
$SG106658 DB	'err', 00H
$SG106583 DB	'ccstatic_alloc', 00H
	ORG $+1
$SG106584 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG106716 DB	'err', 00H
$SG106637 DB	'%s: %s[%i] %s() %s', 0aH, 00H
$SG106721 DB	'err', 00H
$SG106657 DB	'assertion triggered', 00H
$SG106727 DB	'err', 00H
$SG106659 DB	'ccdlbdel_', 00H
	ORG $+2
$SG106797 DB	'err', 00H
$SG106660 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG106802 DB	'err', 00H
$SG106662 DB	'ccdlbdel_', 00H
	ORG $+2
$SG106813 DB	'err', 00H
$SG106663 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG106826 DB	'err', 00H
$SG106664 DB	'ccdlbdel_', 00H
	ORG $+2
$SG106831 DB	'err', 00H
$SG106665 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG106873 DB	'err', 00H
$SG106715 DB	'assertion triggered', 00H
$SG106894 DB	'err', 00H
$SG106717 DB	'ccdlbadd_', 00H
	ORG $+2
$SG106900 DB	'war', 00H
$SG106718 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG106918 DB	'err', 00H
$SG106720 DB	'assertion triggered', 00H
$SG107083 DB	'%c', 00H
	ORG $+1
$SG106722 DB	'ccdlbadd_', 00H
	ORG $+2
$SG107097 DB	'err', 00H
$SG106723 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107095 DB	'error', 00H
	ORG $+2
$SG107106 DB	'%%', 00H
	ORG $+1
$SG106726 DB	'assertion triggered', 00H
$SG107109 DB	'%i', 00H
	ORG $+1
$SG106728 DB	'ccdlbadd_', 00H
	ORG $+2
$SG107112 DB	'%f', 00H
	ORG $+1
$SG106729 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107115 DB	'%s', 00H
	ORG $+1
$SG106731 DB	'ccdlbadd_', 00H
	ORG $+2
$SG107118 DB	'%c', 00H
	ORG $+1
$SG106732 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107121 DB	'%p', 00H
	ORG $+1
$SG106741 DB	'ccallocentry', 00H
	ORG $+3
$SG106742 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107129 DB	'error', 00H
	ORG $+2
$SG107131 DB	'err', 00H
$SG106796 DB	'assertion triggered', 00H
$SG107213 DB	'err', 00H
$SG106798 DB	'cctblhsh_', 00H
	ORG $+2
$SG107217 DB	'err', 00H
$SG106799 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107222 DB	'err', 00H
$SG106801 DB	'assertion triggered', 00H
$SG107226 DB	'err', 00H
$SG106803 DB	'cctblhsh_', 00H
	ORG $+2
$SG107231 DB	'err', 00H
$SG106804 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107236 DB	'err', 00H
$SG106812 DB	'assertion triggered', 00H
$SG107241 DB	'err', 00H
$SG106814 DB	'cctblhsh_', 00H
	ORG $+2
$SG107246 DB	'err', 00H
$SG106815 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107251 DB	'err', 00H
$SG106825 DB	'assertion triggered', 00H
$SG107256 DB	'err', 00H
$SG106827 DB	'cctblhsh_', 00H
	ORG $+2
$SG107261 DB	'err', 00H
$SG106828 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107536 DB	'war', 00H
$SG106830 DB	'assertion triggered', 00H
$SG107565 DB	'err', 00H
$SG106832 DB	'cctblhsh_', 00H
	ORG $+2
$SG107570 DB	'war', 00H
$SG106833 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107600 DB	'err', 00H
$SG106872 DB	'assertion triggered', 00H
$SG107604 DB	'dbg', 00H
$SG106874 DB	'cctblgeti_', 00H
	ORG $+1
$SG107617 DB	'err', 00H
$SG106875 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107640 DB	'err', 00H
$SG106893 DB	'assertion triggered', 00H
$SG107644 DB	'dbg', 00H
$SG106895 DB	'cctblputi_', 00H
	ORG $+1
$SG107650 DB	'err', 00H
$SG106896 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG107655 DB	'err', 00H
$SG106899 DB	'already in table, added by %s[%i]::%s()', 00H
$SG106917 DB	'assertion triggered', 00H
$SG129817 DB	'rb', 00H
	ORG $+1
$SG106919 DB	'cctblseti_', 00H
	ORG $+1
$SG129868 DB	'rb', 00H
	ORG $+1
$SG106920 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG130019 DB	'rb', 00H
	ORG $+1
$SG107096 DB	'assertion triggered', 00H
$SG130045 DB	'rb', 00H
	ORG $+1
$SG107098 DB	'ccprintf', 00H
	ORG $+3
stbi__l2h_gamma DD 0400ccccdr			; 2.2
$SG107099 DB	'W:\cpp\void\e\rx\cc\ccprintf.cc', 00H
$SG107124 DB	'%lli', 00H
	ORG $+3
$SG107127 DB	'%llu', 00H
	ORG $+3
$SG107130 DB	'assertion triggered', 00H
stbi__l2h_scale DD 03f800000r			; 1
$SG107132 DB	'ccprintf', 00H
	ORG $+3
stbi__h2l_gamma_i DD 03ee8ba2er			; 0.454545
$SG107133 DB	'W:\cpp\void\e\rx\cc\ccprintf.cc', 00H
$SG107212 DB	'corrupted heap block, head guard breached', 00H
	ORG $+2
stbi__h2l_scale_i DD 03f800000r			; 1
$SG107214 DB	'cccheck_ward', 00H
	ORG $+3
$SG107215 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG130254 DB	'0', 00H, 00H, 00H
$SG107216 DB	'assertion triggered', 00H
$SG130367 DB	'0', 00H, 00H, 00H
$SG107218 DB	'cccheck_ward', 00H
	ORG $+3
$SG107219 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG131543 DB	'bad H', 00H
	ORG $+2
$SG131548 DB	'bad TQ', 00H
	ORG $+1
$SG135068 DB	'-Y ', 00H
$SG107221 DB	'corrupted heap block, tail guard breached', 00H
	ORG $+2
$SG131575 DB	'no SOI', 00H
	ORG $+1
$SG135071 DB	'+X ', 00H
$SG107223 DB	'cccheck_ward', 00H
	ORG $+3
$SG107224 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG131546 DB	'bad V', 00H
	ORG $+2
$SG131579 DB	'no SOF', 00H
	ORG $+1
$SG135148 DB	'-Y ', 00H
$SG107225 DB	'assertion triggered', 00H
$SG135150 DB	'+X ', 00H
$SG107227 DB	'cccheck_ward', 00H
	ORG $+3
$SG107228 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG131555 DB	'bad H', 00H
	ORG $+2
$SG135060 DB	'#?RGBE', 00H
	ORG $+1
$SG135394 DB	'rb', 00H
	ORG $+1
$SG107230 DB	'assertion triggered', 00H
$SG135414 DB	'rb', 00H
	ORG $+1
$SG107232 DB	'cccheck_ward', 00H
	ORG $+3
$SG107233 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG131557 DB	'bad V', 00H
	ORG $+2
$SG135653 DB	'wb', 00H
	ORG $+1
$SG107235 DB	'assertion triggered', 00H
$SG135724 DB	'0', 00H, 00H, 00H
$SG107237 DB	'cccheck_ward', 00H
	ORG $+3
$SG107238 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG136198 DB	'p', 00H, 00H, 00H
$SG107240 DB	'assertion triggered', 00H
$SG136711 DB	'wb', 00H
	ORG $+1
$SG107242 DB	'cccheck_ward', 00H
	ORG $+3
$SG107243 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG138068 DB	'err', 00H
$SG107245 DB	'assertion triggered', 00H
$SG138094 DB	'err', 00H
$SG107247 DB	'cccheck_ward', 00H
	ORG $+3
$SG107248 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG138143 DB	'err', 00H
$SG107250 DB	'assertion triggered', 00H
$SG138148 DB	'err', 00H
$SG107252 DB	'cccheck_ward', 00H
	ORG $+3
$SG107253 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG138153 DB	'r', 00H
	ORG $+2
$SG107255 DB	'assertion triggered', 00H
$SG138159 DB	'dbg', 00H
$SG107257 DB	'cccheck_ward', 00H
	ORG $+3
$SG107258 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG138166 DB	'war', 00H
$SG107260 DB	'assertion triggered', 00H
$SG138263 DB	'dbg', 00H
$SG107262 DB	'cccheck_ward', 00H
	ORG $+3
$SG107263 DB	'W:\cpp\void\e\rx\cc\cc.c', 00H
	ORG $+3
$SG138268 DB	'war', 00H
$SG107535 DB	'flush failed', 00H
	ORG $+3
$SG107537 DB	'ccflushfile', 00H
$SG138321 DB	'war', 00H
$SG107538 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138327 DB	'war', 00H
$SG107564 DB	'assertion triggered', 00H
$SG138332 DB	'war', 00H
$SG107566 DB	'ccopenfile', 00H
	ORG $+1
$SG138337 DB	'war', 00H
$SG107567 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138350 DB	'err', 00H
$SG107569 DB	'''%s'': invalid file', 00H
	ORG $+1
$SG138356 DB	'err', 00H
$SG107571 DB	'ccopenfile', 00H
	ORG $+1
$SG138361 DB	'war', 00H
$SG107572 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138394 DB	'err', 00H
$SG107599 DB	'invalid file', 00H
	ORG $+3
$SG107601 DB	'ccpullfile', 00H
	ORG $+1
$SG138399 DB	'err', 00H
$SG107602 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138404 DB	'err', 00H
$SG107603 DB	'''%s'': %i,%i', 00H
$SG138410 DB	'err', 00H
$SG107605 DB	'ccpullfile', 00H
	ORG $+1
$SG138415 DB	'err', 00H
$SG107606 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138449 DB	'err', 00H
$SG107613 DB	'ccpullfile', 00H
	ORG $+1
$SG138454 DB	'err', 00H
$SG107614 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138459 DB	'err', 00H
$SG107616 DB	'''%s'': could not be read', 00H
$SG107618 DB	'ccpullfile', 00H
	ORG $+1
$SG138465 DB	'err', 00H
$SG107619 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138470 DB	'err', 00H
$SG107620 DB	'ccpullfile', 00H
	ORG $+1
$SG138498 DB	'err', 00H
$SG107621 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138538 DB	'err', 00H
$SG107639 DB	'invalid file', 00H
	ORG $+3
$SG107641 DB	'ccpushfile', 00H
	ORG $+1
$SG138543 DB	'err', 00H
$SG107642 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138562 DB	'err', 00H
$SG107643 DB	'''%s'': %i,%i', 00H
$SG138678 DB	'war', 00H
$SG107645 DB	'ccpushfile', 00H
	ORG $+1
$SG138714 DB	'err', 00H
$SG107646 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138719 DB	'err', 00H
$SG107649 DB	'''%s'': write failed', 00H
	ORG $+1
$SG138786 DB	'err', 00H
$SG107651 DB	'ccpushfile', 00H
	ORG $+1
$SG138793 DB	'err', 00H
$SG107652 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138798 DB	'err', 00H
$SG107654 DB	'assertion triggered', 00H
$SG138804 DB	'err', 00H
$SG107656 DB	'ccpushfile', 00H
	ORG $+1
$SG138851 DB	'err', 00H
$SG107657 DB	'W:\cpp\void\e\rx\cc\ccio.cc', 00H
$SG138864 DB	'err', 00H
stbi__stdio_callbacks DQ FLAT:stbi__stdio_read
	DQ	FLAT:stbi__stdio_skip
	DQ	FLAT:stbi__stdio_eof
$SG129476 DB	'stbi__malloc', 00H
	ORG $+3
$SG129477 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG129563 DB	'stbi_image_free', 00H
$SG129564 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG129622 DB	'unknown image type', 00H
	ORG $+1
$SG138880 DB	'err', 00H
$SG129647 DB	'outofmem', 00H
	ORG $+3
$SG138391 DB	'vs_5_0', 00H
	ORG $+1
$SG138885 DB	'err', 00H
$SG129648 DB	'stbi__convert_16_to_8', 00H
	ORG $+2
$SG129649 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG129675 DB	'outofmem', 00H
	ORG $+3
$SG138446 DB	'ps_5_0', 00H
	ORG $+1
$SG138941 DB	'err', 00H
$SG129676 DB	'stbi__convert_8_to_16', 00H
	ORG $+2
$SG129677 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG129745 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG129746 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
$SG138946 DB	'err', 00H
$SG129772 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG129773 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
$SG139195 DB	'err', 00H
$SG129819 DB	'can''t fopen', 00H
$SG139220 DB	'png', 00H
$SG129870 DB	'can''t fopen', 00H
$SG139221 DB	'jpg', 00H
$SG129972 DB	'unknown image type', 00H
	ORG $+1
$SG139222 DB	'bmp', 00H
$SG130021 DB	'can''t fopen', 00H
$SG139289 DB	'err', 00H
$SG130234 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG138715 DB	'rxclip', 00H
	ORG $+1
$SG139293 DB	'err', 00H
$SG130235 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG130237 DB	'stbi__convert_format', 00H
	ORG $+3
$SG130238 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130239 DB	'outofmem', 00H
	ORG $+3
$SG138720 DB	'rxclip', 00H
	ORG $+1
$SG139299 DB	'err', 00H
$SG130253 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG139303 DB	'err', 00H
$SG130255 DB	'stbi__convert_format', 00H
	ORG $+3
$SG130256 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130257 DB	'stbi__convert_format', 00H
	ORG $+3
$SG130258 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130259 DB	'unsupported', 00H
$SG139348 DB	'err', 00H
$SG130260 DB	'stbi__convert_format', 00H
	ORG $+3
$SG130261 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130347 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG139353 DB	'err', 00H
$SG130348 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG130350 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG130351 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130352 DB	'outofmem', 00H
	ORG $+3
$SG139374 DB	'err', 00H
$SG130366 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG139432 DB	'err', 00H
$SG130368 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG130369 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130370 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG130371 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130372 DB	'unsupported', 00H
$SG139440 DB	'err', 00H
$SG130373 DB	'stbi__convert_format16', 00H
	ORG $+1
$SG130374 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130408 DB	'stbi__ldr_to_hdr', 00H
	ORG $+3
$SG139444 DB	'error', 00H
	ORG $+2
$SG139446 DB	'err', 00H
$SG130409 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130410 DB	'outofmem', 00H
	ORG $+3
$SG139644 DB	'rxtick', 00H
	ORG $+1
$SG139648 DB	'err', 00H
$SG130414 DB	'stbi__ldr_to_hdr', 00H
	ORG $+3
$SG139649 DB	'rxtick', 00H
	ORG $+1
$SG139753 DB	'err', 00H
$SG130415 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130451 DB	'stbi__hdr_to_ldr', 00H
	ORG $+3
$SG139748 DB	'MainVS', 00H
	ORG $+1
$SG139756 DB	'.', 00H
	ORG $+2
$SG130452 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130453 DB	'outofmem', 00H
	ORG $+3
$SG139750 DB	'MainPS', 00H
	ORG $+1
$SG140719 DB	'err', 00H
$SG130461 DB	'stbi__hdr_to_ldr', 00H
	ORG $+3
$SG139754 DB	'rxinit', 00H
	ORG $+1
$SG140724 DB	'err', 00H
$SG130462 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG130587 DB	'bad code lengths', 00H
	ORG $+3
$SG140864 DB	'[yes]', 00H
	ORG $+2
$SG140891 DB	'[-]', 00H
$SG130647 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG130708 DB	'bad huffman code', 00H
	ORG $+7
$SG130648 DB	'(', 00H, '(', 00H, '(', 00H, 'j', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '(', 00H, '3', 00H, '2', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, '_', 00H, '_', 00H, 'b', 00H, 'm', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, '[', 00H, 'h', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']'
	DB	00H, ']', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '[', 00H, 'c', 00H, ']', 00H, 00H, 00H
$SG140892 DB	'[+]', 00H
$SG130713 DB	'bad huffman code', 00H
	ORG $+3
$SG140865 DB	'[nop]', 00H
	ORG $+2
$SG141126 DB	'r', 00H
	ORG $+2
$SG130733 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG130739 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG130780 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG130788 DB	'bad huffman code', 00H
	ORG $+3
$SG141137 DB	'w', 00H
	ORG $+2
$SG130801 DB	'bad huffman code', 00H
	ORG $+3
$SG141237 DB	'%i,%i', 00H
	ORG $+6
$SG130808 DB	'bad huffman code', 00H
	ORG $+7
$SG131387 DB	'expected marker', 00H
$SG131390 DB	'bad DRI len', 00H
	ORG $+4
$SG131393 DB	'bad DQT type', 00H
	ORG $+3
$SG131395 DB	'bad DQT table', 00H
	ORG $+2
$SG131399 DB	'bad DHT header', 00H
	ORG $+1
$SG131411 DB	'bad COM len', 00H
	ORG $+4
$SG131412 DB	'bad APP len', 00H
	ORG $+4
$SG131420 DB	'unknown marker', 00H
	ORG $+1
$SG131440 DB	'bad SOS component count', 00H
$SG131442 DB	'bad SOS len', 00H
	ORG $+4
$SG131446 DB	'bad DC huff', 00H
	ORG $+4
$SG131448 DB	'bad AC huff', 00H
	ORG $+4
$SG131453 DB	'bad SOS', 00H
$SG131455 DB	'bad SOS', 00H
$SG131458 DB	'bad SOS', 00H
$SG131475 DB	'stbi__free_jpeg_components', 00H
	ORG $+5
$SG131476 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG131478 DB	'stbi__free_jpeg_components', 00H
	ORG $+5
$SG131479 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG131481 DB	'stbi__free_jpeg_components', 00H
	ORG $+5
$SG131482 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG131525 DB	'bad SOF len', 00H
	ORG $+4
$SG131527 DB	'only 8-bit', 00H
	ORG $+5
$SG131529 DB	'no header height', 00H
	ORG $+7
$SG131531 DB	'0 width', 00H
$SG131533 DB	'too large', 00H
	ORG $+6
$SG131535 DB	'too large', 00H
	ORG $+6
$SG131537 DB	'bad component count', 00H
	ORG $+4
$SG131539 DB	'bad SOF len', 00H
	ORG $+4
$SG131551 DB	'too large', 00H
	ORG $+6
$SG131559 DB	'outofmem', 00H
	ORG $+7
$SG131562 DB	'outofmem', 00H
	ORG $+7
$SG131608 DB	'bad DNL len', 00H
	ORG $+4
$SG131610 DB	'bad DNL height', 00H
	ORG $+1
$SG132039 DB	'bad req_comp', 00H
	ORG $+3
$SG132045 DB	'outofmem', 00H
	ORG $+7
$SG132055 DB	'outofmem', 00H
	ORG $+7
$SG132104 DB	'outofmem', 00H
	ORG $+7
$SG132105 DB	'stbi__jpeg_load', 00H
$SG132106 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132115 DB	'outofmem', 00H
	ORG $+7
$SG132116 DB	'stbi__jpeg_test', 00H
$SG132117 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132146 DB	'outofmem', 00H
	ORG $+7
$SG132147 DB	'stbi__jpeg_info', 00H
$SG132148 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132169 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG132170 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG132208 DB	'bad sizes', 00H
	ORG $+6
$SG132211 DB	'bad codelengths', 00H
$SG132299 DB	'output buffer limit', 00H
	ORG $+4
$SG132301 DB	'outofmem', 00H
	ORG $+7
$SG132303 DB	'outofmem', 00H
	ORG $+7
$SG132304 DB	'stbi__zexpand', 00H
	ORG $+2
$SG132305 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132307 DB	'outofmem', 00H
	ORG $+7
$SG132336 DB	'bad huffman code', 00H
	ORG $+7
$SG132342 DB	'bad huffman code', 00H
	ORG $+7
$SG132345 DB	'bad dist', 00H
	ORG $+7
$SG132380 DB	'bad codelengths', 00H
$SG132386 DB	'bad codelengths', 00H
$SG132391 DB	'bad codelengths', 00H
$SG132393 DB	'bad codelengths', 00H
$SG132395 DB	'bad codelengths', 00H
$SG132413 DB	'zlib corrupt', 00H
	ORG $+3
$SG132415 DB	'zlib corrupt', 00H
	ORG $+3
$SG132417 DB	'read past buffer', 00H
	ORG $+7
$SG132428 DB	'bad zlib header', 00H
$SG132430 DB	'bad zlib header', 00H
$SG132432 DB	'no preset dict', 00H
	ORG $+1
$SG132434 DB	'bad compression', 00H
$SG132495 DB	'stbi_zlib_decode_malloc_guesssize', 00H
	ORG $+6
$SG132496 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132528 DB	'stbi_zlib_decode_malloc_guesssize_headerflag', 00H
	ORG $+3
$SG132529 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132565 DB	'stbi_zlib_decode_noheader_malloc', 00H
	ORG $+7
$SG132566 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132602 DB	'bad png sig', 00H
first_row_filter DB 00H
	DB	01H
	DB	00H
	DB	05H
	DB	06H
	ORG $+7
$SG132793 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG132800 DB	'not enough pixels', 00H
	ORG $+6
$SG132794 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+'
	DB	00H, '1', 00H, 00H, 00H
	ORG $+6
$SG132796 DB	'outofmem', 00H
	ORG $+7
$SG132798 DB	'too large', 00H
	ORG $+6
$SG132802 DB	'invalid filter', 00H
	ORG $+1
$SG132805 DB	'invalid width', 00H
	ORG $+2
$SG132830 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG132831 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, '_', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG132861 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG132862 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG132907 DB	'outofmem', 00H
	ORG $+7
$SG132910 DB	'stbi__create_png_image', 00H
	ORG $+1
$SG132911 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132912 DB	'stbi__create_png_image', 00H
	ORG $+1
$SG132913 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG132934 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG132935 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG132960 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG132961 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG132992 DB	'outofmem', 00H
	ORG $+7
$SG132995 DB	'stbi__expand_png_palette', 00H
	ORG $+7
$SG132996 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133042 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG133043 DB	's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'm', 00H, 'g', 00H
	DB	'_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+4
?invalid_chunk@?BO@??stbi__parse_png_file@@9@9 DB 'XXXX PNG chunk not kno'
	DB	'wn', 00H					; `stbi__parse_png_file'::`30'::invalid_chunk
	ORG $+7
$SG133150 DB	'multiple IHDR', 00H
	ORG $+2
$SG133152 DB	'bad IHDR len', 00H
	ORG $+3
$SG133154 DB	'too large', 00H
	ORG $+6
$SG133156 DB	'too large', 00H
	ORG $+6
$SG133158 DB	'1/2/4/8/16-bit only', 00H
	ORG $+4
$SG133160 DB	'bad ctype', 00H
	ORG $+6
$SG133162 DB	'bad ctype', 00H
	ORG $+6
$SG133166 DB	'bad ctype', 00H
	ORG $+6
$SG133168 DB	'bad comp method', 00H
$SG133170 DB	'bad filter method', 00H
	ORG $+6
$SG133172 DB	'bad interlace method', 00H
	ORG $+3
$SG133175 DB	'0-pixel image', 00H
	ORG $+2
$SG133179 DB	'too large', 00H
	ORG $+6
$SG133182 DB	'too large', 00H
	ORG $+6
$SG133185 DB	'first not IHDR', 00H
	ORG $+1
$SG133187 DB	'invalid PLTE', 00H
	ORG $+3
$SG133189 DB	'invalid PLTE', 00H
	ORG $+3
$SG133192 DB	'first not IHDR', 00H
	ORG $+1
$SG133194 DB	'tRNS after IDAT', 00H
$SG133199 DB	'tRNS before PLTE', 00H
	ORG $+7
$SG133201 DB	'bad tRNS len', 00H
	ORG $+3
$SG133203 DB	'tRNS with alpha', 00H
$SG133205 DB	'bad tRNS len', 00H
	ORG $+3
$SG133210 DB	'first not IHDR', 00H
	ORG $+1
$SG133212 DB	'no PLTE', 00H
$SG133217 DB	'stbi__parse_png_file', 00H
	ORG $+3
$SG133218 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133220 DB	'outofmem', 00H
	ORG $+7
$SG133222 DB	'outofdata', 00H
	ORG $+6
$SG133225 DB	'first not IHDR', 00H
	ORG $+1
$SG133228 DB	'no IDAT', 00H
$SG133230 DB	'stbi__parse_png_file', 00H
	ORG $+3
$SG133231 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133248 DB	'stbi__parse_png_file', 00H
	ORG $+3
$SG133249 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133252 DB	'first not IHDR', 00H
	ORG $+1
$SG133287 DB	'bad req_comp', 00H
	ORG $+3
$SG133293 DB	'bad bits_per_channel', 00H
	ORG $+3
$SG133299 DB	'stbi__do_png', 00H
	ORG $+3
$SG133300 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133301 DB	'stbi__do_png', 00H
	ORG $+3
$SG133302 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133303 DB	'stbi__do_png', 00H
	ORG $+3
$SG133304 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
?mul_table@?1??stbi__shiftsigned@@9@9 DD 00H		; `stbi__shiftsigned'::`2'::mul_table
	DD	0ffH
	DD	055H
	DD	049H
	DD	011H
	DD	021H
	DD	041H
	DD	081H
	DD	01H
	ORG $+4
?shift_table@?1??stbi__shiftsigned@@9@9 DD 00H		; `stbi__shiftsigned'::`2'::shift_table
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	04H
	DD	06H
	DD	00H
	ORG $+4
$SG133403 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG133404 DB	'v', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H
	DB	'6', 00H, 00H, 00H
$SG133405 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG133406 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG133485 DB	'not BMP', 00H
$SG133487 DB	'bad BMP', 00H
$SG133489 DB	'unknown BMP', 00H
	ORG $+4
$SG133493 DB	'bad BMP', 00H
$SG133497 DB	'BMP RLE', 00H
$SG133499 DB	'BMP JPEG/PNG', 00H
	ORG $+3
$SG133501 DB	'bad BMP', 00H
$SG133513 DB	'bad BMP', 00H
$SG133514 DB	'bad BMP', 00H
$SG133516 DB	'bad BMP', 00H
$SG133664 DB	'too large', 00H
	ORG $+6
$SG133666 DB	'too large', 00H
	ORG $+6
$SG133673 DB	'bad offset', 00H
	ORG $+5
$SG133679 DB	'too large', 00H
	ORG $+6
$SG133681 DB	'outofmem', 00H
	ORG $+7
$SG133686 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG133687 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133688 DB	'invalid', 00H
$SG133696 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG133697 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133698 DB	'bad bpp', 00H
$SG133719 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG133720 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133721 DB	'bad masks', 00H
	ORG $+6
$SG133724 DB	'stbi__bmp_load', 00H
	ORG $+1
$SG133725 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133726 DB	'bad masks', 00H
	ORG $+6
$SG133939 DB	'too large', 00H
	ORG $+6
$SG133941 DB	'too large', 00H
	ORG $+6
$SG133946 DB	'bad format', 00H
	ORG $+5
$SG133949 DB	'too large', 00H
	ORG $+6
$SG133951 DB	'outofmem', 00H
	ORG $+7
$SG133956 DB	'stbi__tga_load', 00H
	ORG $+1
$SG133957 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133958 DB	'bad palette', 00H
	ORG $+4
$SG133960 DB	'stbi__tga_load', 00H
	ORG $+1
$SG133961 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133962 DB	'outofmem', 00H
	ORG $+7
$SG133965 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG133966 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG133968 DB	'stbi__tga_load', 00H
	ORG $+1
$SG133969 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133970 DB	'stbi__tga_load', 00H
	ORG $+1
$SG133971 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG133972 DB	'bad palette', 00H
	ORG $+4
$SG133984 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG133985 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG133988 DB	'stbi__tga_load', 00H
	ORG $+1
$SG133989 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134152 DB	'not PSD', 00H
$SG134154 DB	'wrong version', 00H
	ORG $+2
$SG134157 DB	'wrong channel count', 00H
	ORG $+4
$SG134159 DB	'too large', 00H
	ORG $+6
$SG134161 DB	'too large', 00H
	ORG $+6
$SG134163 DB	'unsupported bit depth', 00H
	ORG $+2
$SG134165 DB	'wrong color format', 00H
	ORG $+5
$SG134167 DB	'bad compression', 00H
$SG134169 DB	'too large', 00H
	ORG $+6
$SG134173 DB	'outofmem', 00H
	ORG $+7
$SG134179 DB	'stbi__psd_load', 00H
	ORG $+1
$SG134180 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134181 DB	'corrupt', 00H
$SG134221 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG134223 DB	'PICT', 00H
	ORG $+3
$SG134248 DB	'bad file', 00H
	ORG $+7
$SG134354 DB	'bad format', 00H
	ORG $+5
$SG134356 DB	'bad file', 00H
	ORG $+7
$SG134358 DB	'bad format', 00H
	ORG $+5
$SG134360 DB	'bad format', 00H
	ORG $+5
$SG134365 DB	'bad file', 00H
	ORG $+7
$SG134370 DB	'bad file', 00H
	ORG $+7
$SG134376 DB	'bad file', 00H
	ORG $+7
$SG134379 DB	'bad file', 00H
	ORG $+7
$SG134426 DB	'too large', 00H
	ORG $+6
$SG134428 DB	'too large', 00H
	ORG $+6
$SG134430 DB	'bad file', 00H
	ORG $+7
$SG134432 DB	'too large', 00H
	ORG $+6
$SG134434 DB	'outofmem', 00H
	ORG $+7
$SG134436 DB	'stbi__pic_load', 00H
	ORG $+1
$SG134437 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134515 DB	'not GIF', 00H
$SG134517 DB	'not GIF', 00H
$SG134519 DB	'not GIF', 00H
$SG134522 DB	'too large', 00H
	ORG $+6
$SG134524 DB	'too large', 00H
	ORG $+6
$SG134542 DB	'outofmem', 00H
	ORG $+7
$SG134544 DB	'stbi__gif_info_raw', 00H
	ORG $+5
$SG134545 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134548 DB	'stbi__gif_info_raw', 00H
	ORG $+5
$SG134549 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134626 DB	'no clear code', 00H
	ORG $+2
$SG134630 DB	'too many codes', 00H
	ORG $+1
$SG134632 DB	'illegal code in raster', 00H
	ORG $+1
$SG134634 DB	'illegal code in raster', 00H
	ORG $+1
$SG134707 DB	'too large', 00H
	ORG $+6
$SG134710 DB	'outofmem', 00H
	ORG $+7
$SG134721 DB	'bad Image Descriptor', 00H
	ORG $+3
$SG134729 DB	'missing color table', 00H
	ORG $+4
$SG134743 DB	'unknown code', 00H
	ORG $+3
$SG134756 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG134757 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134758 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG134759 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134760 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG134761 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134763 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG134764 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134766 DB	'stbi__load_gif_main_outofmem', 00H
	ORG $+3
$SG134767 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134768 DB	'outofmem', 00H
	ORG $+7
$SG134820 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG134821 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134825 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG134826 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134833 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG134834 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134835 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG134836 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134837 DB	'stbi__load_gif_main', 00H
	ORG $+4
$SG134838 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134840 DB	'not GIF', 00H
$SG134863 DB	'stbi__gif_load', 00H
	ORG $+1
$SG134864 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134865 DB	'stbi__gif_load', 00H
	ORG $+1
$SG134866 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134867 DB	'stbi__gif_load', 00H
	ORG $+1
$SG134868 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG134893 DB	'#?RADIANCE', 0aH, 00H
	ORG $+4
$SG134895 DB	'#?RGBE', 0aH, 00H
$SG135059 DB	'#?RADIANCE', 00H
	ORG $+5
$SG135061 DB	'not HDR', 00H
$SG135064 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG135066 DB	'unsupported format', 00H
	ORG $+5
$SG135069 DB	'unsupported data layout', 00H
$SG135072 DB	'unsupported data layout', 00H
$SG135074 DB	'too large', 00H
	ORG $+6
$SG135076 DB	'too large', 00H
	ORG $+6
$SG135080 DB	'too large', 00H
	ORG $+6
$SG135082 DB	'outofmem', 00H
	ORG $+7
$SG135088 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135089 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135091 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135092 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135093 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135094 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135095 DB	'invalid decoded scanline length', 00H
$SG135098 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135099 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135100 DB	'outofmem', 00H
	ORG $+7
$SG135104 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135105 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135106 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135107 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135108 DB	'corrupt', 00H
$SG135110 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135111 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135112 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135113 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135114 DB	'corrupt', 00H
$SG135116 DB	'stbi__hdr_load', 00H
	ORG $+1
$SG135117 DB	'W:\cpp\void\e\rx\stb_image.h', 00H
	ORG $+3
$SG135145 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG135224 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG135277 DB	'too large', 00H
	ORG $+6
$SG135279 DB	'too large', 00H
	ORG $+6
$SG135282 DB	'too large', 00H
	ORG $+6
$SG135284 DB	'outofmem', 00H
	ORG $+7
$SG135346 DB	'max value > 65535', 00H
	ORG $+6
$SG135375 DB	'unknown image type', 00H
	ORG $+5
$SG135396 DB	'can''t fopen', 00H
	ORG $+4
$SG135416 DB	'can''t fopen', 00H
	ORG $+4
$SG135723 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG135884 DB	'11 4 22 44 44 22 444444', 00H
$SG135885 DB	'11 4 22 44 44 22 444444 4444 4 444 444 444 444', 00H
	ORG $+1
$SG135965 DB	'111 221 2222 11', 00H
$SG135966 DB	'111 221 2222 11', 00H
$SG136037 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG136038 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	'+', 00H, '1', 00H, '2', 00H, '8', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, '5', 00H, '5', 00H, 00H, 00H
	ORG $+4
$SG136051 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG136052 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '8'
	DB	00H, 00H, 00H
	ORG $+4
$SG136136 DB	'stbi_write_hdr_core', 00H
	ORG $+4
$SG136137 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136139 DB	'EXPOSURE=          1.0000000000000', 0aH, 0aH, '-Y %d +X'
	DB	' %d', 0aH, 00H
	ORG $+7
$SG136138 DB	'#?RADIANCE', 0aH, '# Written by stb_image_write.h', 0aH, 'F'
	DB	'ORMAT=32-bit_rle_rgbe', 0aH, 00H
	ORG $+6
$SG136140 DB	'stbi_write_hdr_core', 00H
	ORG $+4
$SG136141 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136195 DB	'stbiw__sbgrowf', 00H
	ORG $+1
$SG136196 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136197 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
?lengthc@?1??stbi_zlib_compress@@9@9 DW 03H		; `stbi_zlib_compress'::`2'::lengthc
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	0103H
	ORG $+4
?lengtheb@?1??stbi_zlib_compress@@9@9 DB 00H		; `stbi_zlib_compress'::`2'::lengtheb
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	00H
	ORG $+3
?distc@?1??stbi_zlib_compress@@9@9 DW 01H		; `stbi_zlib_compress'::`2'::distc
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	08000H
	ORG $+2
?disteb@?1??stbi_zlib_compress@@9@9 DB 00H		; `stbi_zlib_compress'::`2'::disteb
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
	ORG $+2
$SG136444 DB	'stbi_zlib_compress', 00H
	ORG $+5
$SG136445 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136457 DB	'd', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, '7', 00H, '6', 00H, '7', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '2', 00H, '5', 00H, '8', 00H, 00H
	DB	00H
	ORG $+4
$SG136456 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG136460 DB	'stbi_zlib_compress', 00H
	ORG $+5
$SG136461 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136462 DB	'stbi_zlib_compress', 00H
	ORG $+5
$SG136463 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
?mapping@?1??stbiw__encode_png_line@@9@9 DD 00H		; `stbiw__encode_png_line'::`2'::mapping
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	ORG $+4
?crc_table@?1??stbiw__crc32@@9@9 DD 00H			; `stbiw__crc32'::`2'::crc_table
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
?firstmap@?1??stbiw__encode_png_line@@9@9 DD 00H	; `stbiw__encode_png_line'::`2'::firstmap
	DD	01H
	DD	00H
	DD	05H
	DD	06H
	ORG $+4
$SG136656 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136657 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136659 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136660 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136662 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136663 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136668 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136669 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136670 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136671 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136673 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136674 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+1
$SG136676 DB	'IHDR', 00H
	ORG $+3
$SG136677 DB	'IHDR', 00H
	ORG $+3
$SG136678 DB	'IHDR', 00H
	ORG $+3
$SG136679 DB	'IHDR', 00H
	ORG $+3
$SG136680 DB	'IDAT', 00H
	ORG $+3
$SG136681 DB	'IDAT', 00H
	ORG $+3
$SG136682 DB	'IDAT', 00H
	ORG $+3
$SG136683 DB	'IDAT', 00H
	ORG $+7
$SG136684 DB	'stbi_write_png_to_mem', 00H
	ORG $+2
$SG136685 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+1
$SG136686 DB	'IEND', 00H
	ORG $+3
$SG136687 DB	'IEND', 00H
	ORG $+3
$SG136688 DB	'IEND', 00H
	ORG $+3
$SG136689 DB	'IEND', 00H
	ORG $+7
$SG136691 DB	'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '*', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG136690 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'e'
	DB	00H, '\', 00H, 'r', 00H, 'x', 00H, '\', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e'
	DB	00H, '_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG136713 DB	'stbi_write_png', 00H
	ORG $+1
$SG136714 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136715 DB	'stbi_write_png', 00H
	ORG $+1
$SG136716 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG136737 DB	'stbi_write_png_to_func', 00H
	ORG $+1
$SG136738 DB	'W:\cpp\void\e\rx\stb_image_write.h', 00H
	ORG $+5
$SG138064 DB	'rxarticle_create', 00H
	ORG $+7
$SG138065 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138067 DB	'assertion triggered', 00H
	ORG $+4
$SG138069 DB	'rxarticle_create', 00H
	ORG $+7
$SG138070 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138090 DB	'rxlinker_register_terminal', 00H
	ORG $+5
$SG138091 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138093 DB	'assertion triggered', 00H
	ORG $+4
$SG138095 DB	'rxlinker_register_terminal', 00H
	ORG $+5
$SG138096 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138104 DB	'rxlinker_onlyquery_terminal', 00H
	ORG $+4
$SG138105 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138142 DB	'assertion triggered', 00H
	ORG $+4
$SG138144 DB	'rxlinker_resolve_terminal', 00H
	ORG $+6
$SG138145 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138147 DB	'assertion triggered', 00H
	ORG $+4
$SG138149 DB	'rxlinker_resolve_terminal', 00H
	ORG $+6
$SG138150 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138158 DB	'''%s'': file contents re/loaded', 00H
	ORG $+2
$SG138160 DB	'rxlinker_resolve_terminal', 00H
	ORG $+6
$SG138161 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138163 DB	'rxlinker_resolve_terminal', 00H
	ORG $+6
$SG138164 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138165 DB	'''%s'': file contents could not be read', 00H
	ORG $+2
$SG138167 DB	'rxlinker_resolve_terminal', 00H
	ORG $+6
$SG138168 DB	'W:\cpp\void\e\rx\rxobject.cc', 00H
	ORG $+3
$SG138262 DB	'''%s'': compiled shader', 00H
	ORG $+2
$SG138264 DB	'rxcompile_shader_bytecode', 00H
	ORG $+6
$SG138265 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138266 DB	'<!4%s!>', 0dH, 0aH, 00H
	ORG $+6
$SG138267 DB	'''%s'': there were compilation errors', 00H
	ORG $+4
$SG138269 DB	'rxcompile_shader_bytecode', 00H
	ORG $+6
$SG138270 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138320 DB	'create_vertex_shader::error', 00H
	ORG $+4
$SG138322 DB	'rxcreate_shader', 00H
$SG138323 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138326 DB	'create_pixel_shader::error', 00H
	ORG $+5
$SG138328 DB	'rxcreate_shader', 00H
$SG138329 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138331 DB	'extract_input_signature::error', 00H
	ORG $+1
$SG138333 DB	'rxcreate_shader', 00H
$SG138334 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138336 DB	'reflection_interface::error', 00H
	ORG $+4
$SG138338 DB	'rxcreate_shader', 00H
$SG138339 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138348 DB	'not implemented', 00H
$SG138349 DB	'assertion triggered', 00H
	ORG $+4
$SG138351 DB	'rxcreate_shader', 00H
$SG138352 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138354 DB	'not implemented', 00H
$SG138355 DB	'assertion triggered', 00H
	ORG $+4
$SG138357 DB	'rxcreate_shader', 00H
$SG138358 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138360 DB	'create_input_layout::error', 00H
	ORG $+5
$SG138362 DB	'rxcreate_shader', 00H
$SG138363 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138393 DB	'assertion triggered', 00H
	ORG $+4
$SG138395 DB	'rxload_vertex_shader', 00H
	ORG $+3
$SG138396 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138398 DB	'assertion triggered', 00H
	ORG $+4
$SG138400 DB	'rxload_vertex_shader', 00H
	ORG $+3
$SG138401 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138403 DB	'assertion triggered', 00H
	ORG $+4
$SG138405 DB	'rxload_vertex_shader', 00H
	ORG $+3
$SG138406 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138409 DB	'assertion triggered', 00H
	ORG $+4
$SG138411 DB	'rxload_vertex_shader', 00H
	ORG $+3
$SG138412 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138414 DB	'assertion triggered', 00H
	ORG $+4
$SG138416 DB	'rxload_vertex_shader', 00H
	ORG $+3
$SG138417 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138448 DB	'assertion triggered', 00H
	ORG $+4
$SG138450 DB	'rxload_pixel_shader', 00H
	ORG $+4
$SG138451 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138453 DB	'assertion triggered', 00H
	ORG $+4
$SG138455 DB	'rxload_pixel_shader', 00H
	ORG $+4
$SG138456 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138458 DB	'assertion triggered', 00H
	ORG $+4
$SG138460 DB	'rxload_pixel_shader', 00H
	ORG $+4
$SG138461 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138464 DB	'assertion triggered', 00H
	ORG $+4
$SG138466 DB	'rxload_pixel_shader', 00H
	ORG $+4
$SG138467 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138469 DB	'assertion triggered', 00H
	ORG $+4
$SG138471 DB	'rxload_pixel_shader', 00H
	ORG $+4
$SG138472 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138494 DB	'rxshader_apply', 00H
	ORG $+1
$SG138495 DB	'W:\cpp\void\e\rx\rx.shader.cc', 00H
	ORG $+2
$SG138497 DB	'assertion triggered', 00H
	ORG $+4
$SG138499 DB	'rxshader_apply', 00H
	ORG $+1
$SG138500 DB	'W:\cpp\void\e\rx\rx.shader.cc', 00H
	ORG $+2
$SG138537 DB	'assertion triggered', 00H
	ORG $+4
$SG138539 DB	'rxbuffer_borrow', 00H
$SG138540 DB	'W:\cpp\void\e\rx\rx.buffer.cc', 00H
	ORG $+2
$SG138542 DB	'assertion triggered', 00H
	ORG $+4
$SG138544 DB	'rxbuffer_borrow', 00H
$SG138545 DB	'W:\cpp\void\e\rx\rx.buffer.cc', 00H
	ORG $+2
$SG138561 DB	'assertion triggered', 00H
	ORG $+4
$SG138563 DB	'rxuniform_buffer_bind_ex', 00H
	ORG $+7
$SG138564 DB	'W:\cpp\void\e\rx\rx.buffer.cc', 00H
	ORG $+2
$SG138677 DB	'''%i'': command limit reached', 00H
	ORG $+4
$SG138679 DB	'rxcomadd', 00H
	ORG $+7
$SG138680 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138687 DB	'ztest::on', 00H
	ORG $+6
$SG138688 DB	'ztest::off', 00H
	ORG $+5
$SG138691 DB	'mode::3d', 00H
	ORG $+7
$SG138694 DB	'mode::2d', 00H
	ORG $+7
$SG138713 DB	'assertion triggered', 00H
	ORG $+4
$SG138716 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138718 DB	'assertion triggered', 00H
	ORG $+4
$SG138721 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138785 DB	'assertion triggered', 00H
	ORG $+4
$SG138787 DB	'rxcomexc', 00H
	ORG $+7
$SG138788 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138792 DB	'assertion triggered', 00H
	ORG $+4
$SG138794 DB	'rxcomexc', 00H
	ORG $+7
$SG138795 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138797 DB	'assertion triggered', 00H
	ORG $+4
$SG138799 DB	'rxcomexc', 00H
	ORG $+7
$SG138800 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138803 DB	'assertion triggered', 00H
	ORG $+4
$SG138805 DB	'rxcomexc', 00H
	ORG $+7
$SG138806 DB	'W:\cpp\void\e\rx\rx.command.cc', 00H
	ORG $+1
$SG138850 DB	'assertion triggered', 00H
	ORG $+4
$SG138852 DB	'rxvertex_mode_end', 00H
	ORG $+6
$SG138853 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138863 DB	'assertion triggered', 00H
	ORG $+4
$SG138865 DB	'rxvertex_mode', 00H
	ORG $+2
$SG138866 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138879 DB	'assertion triggered', 00H
	ORG $+4
$SG138881 DB	'rxsubmit_index', 00H
	ORG $+1
$SG138882 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138884 DB	'assertion triggered', 00H
	ORG $+4
$SG138886 DB	'rxsubmit_index', 00H
	ORG $+1
$SG138887 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138940 DB	'assertion triggered', 00H
	ORG $+4
$SG138942 DB	'rxsubmit_vertex_ex', 00H
	ORG $+5
$SG138943 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG138945 DB	'assertion triggered', 00H
	ORG $+4
$SG138947 DB	'rxsubmit_vertex_ex', 00H
	ORG $+5
$SG138948 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139194 DB	'assertion triggered', 00H
	ORG $+4
$SG139196 DB	'rxdraw_text_ex', 00H
	ORG $+1
$SG139197 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139288 DB	'invalid size x %i', 00H
	ORG $+6
$SG139290 DB	'rxtexture_create_untyped', 00H
	ORG $+7
$SG139291 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139292 DB	'assertion triggered', 00H
	ORG $+4
$SG139294 DB	'rxtexture_create_untyped', 00H
	ORG $+7
$SG139295 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139298 DB	'invalid size y %i', 00H
	ORG $+6
$SG139300 DB	'rxtexture_create_untyped', 00H
	ORG $+7
$SG139301 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139302 DB	'assertion triggered', 00H
	ORG $+4
$SG139304 DB	'rxtexture_create_untyped', 00H
	ORG $+7
$SG139305 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139347 DB	'assertion triggered', 00H
	ORG $+4
$SG139349 DB	'rxtexture_borrow', 00H
	ORG $+7
$SG139350 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139352 DB	'assertion triggered', 00H
	ORG $+4
$SG139354 DB	'rxtexture_borrow', 00H
	ORG $+7
$SG139355 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139370 DB	'rxtexture_apply', 00H
$SG139371 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139373 DB	'assertion triggered', 00H
	ORG $+4
$SG139375 DB	'rxtexture_apply', 00H
$SG139376 DB	'W:\cpp\void\e\rx\rx.texture.cc', 00H
	ORG $+1
$SG139428 DB	'rxrender_target_apply', 00H
	ORG $+2
$SG139429 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139431 DB	'assertion triggered', 00H
	ORG $+4
$SG139433 DB	'rxrender_target_apply', 00H
	ORG $+2
$SG139434 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139439 DB	'assertion triggered', 00H
	ORG $+4
$SG139441 DB	'rxrender_target_apply', 00H
	ORG $+2
$SG139442 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139445 DB	'assertion triggered', 00H
	ORG $+4
$SG139447 DB	'rxrender_target_apply', 00H
	ORG $+2
$SG139448 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139645 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139647 DB	'assertion triggered', 00H
	ORG $+4
$SG139650 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG139741 DB	'user32.dll', 00H
	ORG $+5
$SG139742 DB	'SetProcessDPIAwarenessContext', 00H
	ORG $+2
$SG139743 DB	'SetProcessDPIAware', 00H
	ORG $+5
$SG139747 DB	'light.hlsl', 00H
	ORG $+5
$SG139749 DB	'light.hlsl', 00H
	ORG $+5
$SG139752 DB	'assertion triggered', 00H
	ORG $+4
$SG139755 DB	'W:\cpp\void\e\rx\rx.c', 00H
	ORG $+2
$SG140718 DB	'assertion triggered', 00H
	ORG $+4
$SG140720 DB	'rect_by_xyxy', 00H
	ORG $+3
$SG140721 DB	'W:\cpp\void\e\rect.cc', 00H
	ORG $+2
$SG140723 DB	'assertion triggered', 00H
	ORG $+4
$SG140725 DB	'rect_by_xyxy', 00H
	ORG $+3
$SG140726 DB	'W:\cpp\void\e\rect.cc', 00H
	ORG $+2
$SG141203 DB	'copy_string_ex', 00H
	ORG $+1
$SG141204 DB	'e.cc', 00H
	ORG $+3
$SG141217 DB	'All', 00H, '*.*', 00H, 'Text', 00H, '*.TXT', 00H, 00H
	ORG $+4
$SG141233 DB	'T', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'a', 00H, 00H, 00H
	ORG $+4
$SG141234 DB	'light.hlsl', 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:main
	DD	01cH
	DD	020dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:fdlg
	DD	011H
	DD	0c2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ewdg
	DD	01dH
	DD	069bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:emovcury
	DD	01cH
	DD	011dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:emovcurx
	DD	01cH
	DD	0141H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:slider_widget
	DD	029H
	DD	032bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:list_item_widget
	DD	022H
	DD	0247H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:dropdown_widget
	DD	022H
	DD	0535H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:checkbox_widget
	DD	022H
	DD	05b0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:button_widget
	DD	01dH
	DD	02f8H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:get_window_client_rect
	DD	015H
	DD	06bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:get_window_rect
	DD	015H
	DD	07dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:get_monitor_rect
	DD	015H
	DD	07cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:text_rect
	DD	023H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rect_center
	DD	01fH
	DD	0e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rect_cut
	DD	027H
	DD	02a0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rect_by_xyxy
	DD	026H
	DD	0163H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxinit
	DD	018H
	DD	0ba0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxinit_default_font
	DD	014H
	DD	0313aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcreate_simple_stencil_state_d3d
	DD	016H
	DD	0baH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxtick
	DD	014H
	DD	05edH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxwindow_resize
	DD	016H
	DD	080H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxwindow_create
	DD	016H
	DD	01a6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxwindow_poll
	DD	011H
	DD	0d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxrestore_render_stack
	DD	014H
	DD	0367H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxdraw_text
	DD	022H
	DD	0c4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxtexture_scaled
	DD	02aH
	DD	012eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxdraw_skinned
	DD	02aH
	DD	0114H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvertex_mode
	DD	014H
	DD	0112H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcomexc
	DD	01cH
	DD	0860H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxdriver_stage_viewport
	DD	01aH
	DD	081H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcreate_struct_buffer
	DD	018H
	DD	0d3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcreate_vertex_buffer
	DD	018H
	DD	084H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcreate_index_buffer
	DD	018H
	DD	084H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxuniform_buffer_create
	DD	017H
	DD	08bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxcreate_shader
	DD	021H
	DD	0589H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxinvalidate_contents
	DD	011H
	DD	01d7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxtexture_create_untyped
	DD	026H
	DD	04a2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_flip_vertically
	DD	018H
	DD	07fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_translate_xyz
	DD	02aH
	DD	0dcH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_rotX
	DD	01eH
	DD	0118H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_rotY
	DD	01eH
	DD	011cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_rotZ
	DD	01eH
	DD	011cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_projection
	DD	02aH
	DD	01d6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_abs
	DD	01aH
	DD	0fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_max
	DD	020H
	DD	0eaH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_min
	DD	020H
	DD	0eaH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_negate
	DD	01aH
	DD	07aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_scale
	DD	020H
	DD	07dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_downscale
	DD	020H
	DD	07dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_mul
	DD	01fH
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_sub
	DD	01fH
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvector_add
	DD	01fH
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_multiply
	DD	01fH
	DD	01c2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxmatrix_identity
	DD	015H
	DD	0226H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:rxvec3_xyz
	DD	027H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_core
	DD	02aH
	DD	01237H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbiw__jpg_processDU
	DD	027H
	DD	06cfH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_png_to_mem
	DD	026H
	DD	0c19H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_core
	DD	026H
	DD	0231H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbiw__write_hdr_scanline
	DD	021H
	DD	05f9H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_to_func
	DD	026H
	DD	092H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg
	DD	025H
	DD	0a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__pic_load_core
	DD	024H
	DD	0640H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__parse_png_file
	DD	021H
	DD	0e27H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__create_png_image
	DD	027H
	DD	057dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__compute_huffman_codes
	DD	016H
	DD	02fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__zbuild_huffman
	DD	020H
	DD	0368H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:load_jpeg_image
	DD	025H
	DD	01190H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__process_marker
	DD	01aH
	DD	069cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__parse_entropy_coded_data
	DD	016H
	DD	0c3cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__idct_block
	DD	01fH
	DD	0a83H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__loadf_main
	DD	022H
	DD	0167H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__load_and_postprocess_16bit
	DD	025H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__load_and_postprocess_8bit
	DD	025H
	DD	01b0H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__vertical_flip
	DD	024H
	DD	0182H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__load_gif_main
	DD	02dH
	DD	0586H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__gif_load
	DD	02dH
	DD	0216H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__pic_info
	DD	022H
	DD	0270H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__hdr_info
	DD	025H
	DD	0203H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__hdr_load
	DD	027H
	DD	0bc3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__bmp_info
	DD	022H
	DD	0e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__bmp_load
	DD	027H
	DD	012f4H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi__cpuid3
	DD	010H
	DD	03dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_malloc
	DD	027H
	DD	012cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize_headerflag
	DD	02cH
	DD	013cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize
	DD	02cH
	DD	0139H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_file
	DD	016H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_file
	DD	025H
	DD	08eH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_callbacks
	DD	025H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_memory
	DD	024H
	DD	068H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_file
	DD	016H
	DD	067H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_file
	DD	025H
	DD	06cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file_16
	DD	025H
	DD	0abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_gif_from_memory
	DD	024H
	DD	0123H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file
	DD	025H
	DD	0abH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsnprintf
	DD	024H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsprintfcb
	DD	025H
	DD	02b4eH
	DD	02b50H
	DD	032eeH
voltbl	ENDS
xdata	SEGMENT
$unwind$stbsp_vsprintf DD 011301H
	DD	06213H
$unwind$stbsp_vsnprintf DD 022c19H
	DD	04d011aH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$stbsp_sprintf DD 011801H
	DD	08218H
$unwind$stbsp_snprintf DD 011701H
	DD	06217H
$unwind$stbsp_vsprintfcb DD 022d19H
	DD	08d011bH
	DD	imagerel __GSHandlerCheck
	DD	0450H
$unwind$stbsp__real_to_str DD 021b01H
	DD	017011bH
$unwind$stbsp__real_to_parts DD 011401H
	DD	04214H
$unwind$stbsp__strlen_limited DD 010d01H
	DD	0220dH
$unwind$stbsp__clamp_callback DD 011301H
	DD	06213H
$unwind$stbsp__count_clamp_callback DD 011301H
	DD	02213H
$unwind$stbsp__raise_to_power10 DD 021c01H
	DD	035011cH
$unwind$ccuserallocator_ DD 031501H
	DD	07011a215H
	DD	06010H
$unwind$ccinternalallocator_ DD 011301H
	DD	04213H
$unwind$ccinit DD 010401H
	DD	06204H
$unwind$ccformatvex DD 011701H
	DD	04217H
$unwind$ccformatv DD 010e01H
	DD	0620eH
$unwind$ccformat DD 011801H
	DD	06218H
$unwind$ccclocktick DD 010401H
	DD	06204H
$unwind$cccaller DD 031901H
	DD	070154219H
	DD	06014H
$unwind$ccdlbadd_ DD 041c01H
	DD	02d011cH
	DD	060147015H
$unwind$cctblhsh_ DD 041d01H
	DD	03d011dH
	DD	060157016H
$unwind$cctblgeti_ DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$cctblputi_ DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$cctblseti_ DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$ccdlbdel_ DD 040e01H
	DD	025010eH
	DD	060067007H
$unwind$ccfnames DD 010901H
	DD	02209H
$unwind$cctrace_ DD 011801H
	DD	08218H
$unwind$ccprintf DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$ccout DD 010901H
	DD	04209H
$unwind$ccstatic_alloc DD 041101H
	DD	0110111H
	DD	06009700aH
$unwind$ccallocentry DD 040e01H
	DD	011010eH
	DD	060067007H
$unwind$cccheck_ward DD 041301H
	DD	0610113H
	DD	0600b700cH
$unwind$ccfileext DD 010901H
	DD	02209H
$unwind$ccrealfile DD 010901H
	DD	02209H
$unwind$ccfilesize DD 010901H
	DD	04209H
$unwind$ccflushfile DD 040e01H
	DD	011010eH
	DD	060067007H
$unwind$ccclosefile DD 010901H
	DD	04209H
$unwind$ccopenfile DD 041301H
	DD	01b0113H
	DD	0600b700cH
$unwind$ccfnameh__ DD 010901H
	DD	08209H
$unwind$ccfnameh DD 010901H
	DD	04209H
$unwind$ccpullfile DD 041701H
	DD	0350117H
	DD	0600f7010H
$unwind$ccpushfile DD 041c01H
	DD	02b011cH
	DD	060147015H
$unwind$stbi_load_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_load_gif_from_memory DD 022c19H
	DD	029011aH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$stbi_load_16_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16 DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file_16 DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_loadf_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf DD 011801H
	DD	0a218H
$unwind$stbi_loadf_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_hdr_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr DD 010901H
	DD	06209H
$unwind$stbi_is_hdr_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_image_free DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$stbi_info_from_memory DD 022c19H
	DD	023011aH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info_from_callbacks DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info DD 011801H
	DD	06218H
$unwind$stbi_info_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_16_bit DD 010901H
	DD	06209H
$unwind$stbi_is_16_bit_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_zlib_decode_malloc_guesssize DD 043419H
	DD	02130122H
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01080H
$unwind$stbi_zlib_decode_malloc_guesssize_headerflag DD 043419H
	DD	02130122H
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01080H
$unwind$stbi_zlib_decode_malloc DD 011201H
	DD	04212H
$unwind$stbi_zlib_decode_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi_zlib_decode_noheader_malloc DD 042f19H
	DD	0213011dH
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	01080H
$unwind$stbi_zlib_decode_noheader_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi__cpuid3 DD 021519H
	DD	030023206H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$stbi__sse2_available DD 010401H
	DD	06204H
$unwind$stbi__refill_buffer DD 010901H
	DD	06209H
$unwind$stbi__start_mem DD 011301H
	DD	02213H
$unwind$stbi__start_callbacks DD 031501H
	DD	070116215H
	DD	06010H
$unwind$stbi__stdio_read DD 011301H
	DD	04213H
$unwind$stbi__stdio_skip DD 010d01H
	DD	0620dH
$unwind$stbi__stdio_eof DD 010901H
	DD	06209H
$unwind$stbi__start_file DD 010e01H
	DD	0420eH
$unwind$stbi__jpeg_test DD 040e01H
	DD	011010eH
	DD	060067007H
$unwind$stbi__jpeg_load DD 041d01H
	DD	013011dH
	DD	060157016H
$unwind$stbi__jpeg_info DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$stbi__png_test DD 010901H
	DD	06209H
$unwind$stbi__png_load DD 011801H
	DD	0c218H
$unwind$stbi__png_info DD 011801H
	DD	0a218H
$unwind$stbi__png_is16 DD 010901H
	DD	0a209H
$unwind$stbi__bmp_test DD 010901H
	DD	06209H
$unwind$stbi__bmp_load DD 042f19H
	DD	0cf011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0660H
$unwind$stbi__bmp_info DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$stbi__tga_test DD 010901H
	DD	06209H
$unwind$stbi__tga_load DD 041d01H
	DD	04d011dH
	DD	060157016H
$unwind$stbi__tga_info DD 011801H
	DD	0a218H
$unwind$stbi__psd_test DD 010901H
	DD	06209H
$unwind$stbi__psd_load DD 041d01H
	DD	02d011dH
	DD	060157016H
$unwind$stbi__psd_info DD 011801H
	DD	06218H
$unwind$stbi__psd_is16 DD 010901H
	DD	06209H
$unwind$stbi__hdr_test DD 010901H
	DD	06209H
$unwind$stbi__hdr_load DD 042f19H
	DD	0eb011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0740H
$unwind$stbi__hdr_info DD 022d19H
	DD	089011bH
	DD	imagerel __GSHandlerCheck
	DD	0430H
$unwind$stbi__pic_test DD 010901H
	DD	06209H
$unwind$stbi__pic_load DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$stbi__pic_info DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$stbi__gif_test DD 010901H
	DD	06209H
$unwind$stbi__gif_load DD 043519H
	DD	011310123H
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	08970H
$unwind$stbi__load_gif_main DD 043519H
	DD	011490123H
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	08a30H
$unwind$stbi__gif_info DD 011801H
	DD	04218H
$unwind$stbi__pnm_test DD 010901H
	DD	06209H
$unwind$stbi__pnm_load DD 011801H
	DD	0c218H
$unwind$stbi__pnm_info DD 011801H
	DD	06218H
$unwind$stbi__pnm_is16 DD 010901H
	DD	04209H
$unwind$stbi__malloc DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$stbi__addsizes_valid DD 010c01H
	DD	0220cH
$unwind$stbi__mul2sizes_valid DD 010c01H
	DD	0220cH
$unwind$stbi__mad2sizes_valid DD 011101H
	DD	06211H
$unwind$stbi__mad3sizes_valid DD 011601H
	DD	06216H
$unwind$stbi__mad4sizes_valid DD 011601H
	DD	06216H
$unwind$stbi__malloc_mad2 DD 011101H
	DD	04211H
$unwind$stbi__malloc_mad3 DD 011601H
	DD	04216H
$unwind$stbi__malloc_mad4 DD 011601H
	DD	06216H
$unwind$stbi__ldr_to_hdr DD 041c01H
	DD	01d011cH
	DD	060147015H
$unwind$stbi__hdr_to_ldr DD 041c01H
	DD	01d011cH
	DD	060147015H
$unwind$stbi__load_main DD 011801H
	DD	0c218H
$unwind$stbi__convert_16_to_8 DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$stbi__convert_8_to_16 DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$stbi__vertical_flip DD 022c19H
	DD	010f011aH
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$stbi__vertical_flip_slices DD 011701H
	DD	06217H
$unwind$stbi__load_and_postprocess_8bit DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$stbi__load_and_postprocess_16bit DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$stbi__float_postprocess DD 011801H
	DD	06218H
$unwind$stbi__fopen DD 010e01H
	DD	0620eH
$unwind$stbi__loadf_main DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$stbi__get8 DD 010901H
	DD	06209H
$unwind$stbi__at_eof DD 010901H
	DD	06209H
$unwind$stbi__skip DD 010d01H
	DD	0620dH
$unwind$stbi__getn DD 011301H
	DD	06213H
$unwind$stbi__get16be DD 010901H
	DD	06209H
$unwind$stbi__get32be DD 010901H
	DD	06209H
$unwind$stbi__get16le DD 010901H
	DD	06209H
$unwind$stbi__get32le DD 010901H
	DD	06209H
$unwind$stbi__convert_format DD 041c01H
	DD	031011cH
	DD	060147015H
$unwind$stbi__convert_format16 DD 041c01H
	DD	031011cH
	DD	060147015H
$unwind$stbi__build_huffman DD 010e01H
	DD	0820eH
$unwind$stbi__build_fast_ac DD 010e01H
	DD	0620eH
$unwind$stbi__grow_buffer_unsafe DD 010901H
	DD	06209H
$unwind$stbi__jpeg_huff_decode DD 010e01H
	DD	0a20eH
$unwind$stbi__extend_receive DD 010d01H
	DD	0620dH
$unwind$stbi__jpeg_get_bits DD 010d01H
	DD	0620dH
$unwind$stbi__jpeg_get_bit DD 010901H
	DD	06209H
$unwind$stbi__jpeg_decode_block DD 011801H
	DD	0a218H
$unwind$stbi__jpeg_decode_block_prog_dc DD 011801H
	DD	08218H
$unwind$stbi__jpeg_decode_block_prog_ac DD 021b01H
	DD	011011bH
$unwind$stbi__idct_block DD 022719H
	DD	0390115H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$stbi__idct_simd DD 021501H
	DD	014f0115H
$unwind$stbi__get_marker DD 010901H
	DD	06209H
$unwind$stbi__jpeg_reset DD 010901H
	DD	02209H
$unwind$stbi__parse_entropy_coded_data DD 021e19H
	DD	03f010cH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$stbi__jpeg_dequantize DD 010e01H
	DD	0220eH
$unwind$stbi__jpeg_finish DD 010901H
	DD	08209H
$unwind$stbi__process_marker DD 022219H
	DD	01b0110H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$stbi__process_scan_header DD 010901H
	DD	08209H
$unwind$stbi__free_jpeg_components DD 041701H
	DD	0230117H
	DD	0600f7010H
$unwind$stbi__process_frame_header DD 010d01H
	DD	0c20dH
$unwind$stbi__decode_jpeg_header DD 010d01H
	DD	0620dH
$unwind$stbi__decode_jpeg_image DD 010901H
	DD	06209H
$unwind$stbi__resample_row_v_2 DD 011801H
	DD	02218H
$unwind$stbi__resample_row_h_2 DD 011801H
	DD	02218H
$unwind$stbi__resample_row_hv_2 DD 011801H
	DD	02218H
$unwind$stbi__resample_row_hv_2_simd DD 021b01H
	DD	033011bH
$unwind$stbi__resample_row_generic DD 011801H
	DD	02218H
$unwind$stbi__YCbCr_to_RGB_row DD 011801H
	DD	04218H
$unwind$stbi__YCbCr_to_RGB_simd DD 021b01H
	DD	047011bH
$unwind$stbi__setup_jpeg DD 010901H
	DD	04209H
$unwind$stbi__cleanup_jpeg DD 010901H
	DD	04209H
$unwind$stbi__blinn_8x8 DD 010c01H
	DD	0220cH
$unwind$load_jpeg_image DD 022d19H
	DD	03d011bH
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$stbi__jpeg_info_raw DD 011801H
	DD	06218H
$unwind$stbi__bit_reverse DD 010c01H
	DD	0420cH
$unwind$stbi__zbuild_huffman DD 022819H
	DD	01d0116H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$stbi__zeof DD 010901H
	DD	02209H
$unwind$stbi__zget8 DD 010901H
	DD	06209H
$unwind$stbi__fill_bits DD 010901H
	DD	06209H
$unwind$stbi__zreceive DD 010d01H
	DD	0620dH
$unwind$stbi__zhuffman_decode_slowpath DD 010e01H
	DD	0820eH
$unwind$stbi__zhuffman_decode DD 010e01H
	DD	0620eH
$unwind$stbi__zexpand DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$stbi__parse_huffman_block DD 010901H
	DD	08209H
$unwind$stbi__compute_huffman_codes DD 021e19H
	DD	0149010cH
	DD	imagerel __GSHandlerCheck
	DD	0a30H
$unwind$stbi__parse_uncompressed_block DD 010901H
	DD	06209H
$unwind$stbi__parse_zlib_header DD 010901H
	DD	06209H
$unwind$stbi__parse_zlib DD 010d01H
	DD	0620dH
$unwind$stbi__do_zlib DD 011801H
	DD	04218H
$unwind$stbi__get_chunk_header DD 010901H
	DD	06209H
$unwind$stbi__check_png_header DD 010901H
	DD	06209H
$unwind$stbi__paeth DD 011101H
	DD	06211H
$unwind$stbi__create_png_image_raw DD 021b01H
	DD	01b011bH
$unwind$stbi__create_png_image DD 042f19H
	DD	033011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$stbi__compute_transparency DD 011301H
	DD	08213H
$unwind$stbi__compute_transparency16 DD 011301H
	DD	08213H
$unwind$stbi__expand_png_palette DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$stbi__de_iphone DD 010901H
	DD	0a209H
$unwind$stbi__parse_png_file DD 042919H
	DD	0b70117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	05a0H
$unwind$stbi__do_png DD 041d01H
	DD	023011dH
	DD	060157016H
$unwind$stbi__png_info_raw DD 011801H
	DD	04218H
$unwind$stbi__bmp_test_raw DD 010901H
	DD	06209H
$unwind$stbi__high_bit DD 010801H
	DD	02208H
$unwind$stbi__shiftsigned DD 011101H
	DD	04211H
$unwind$stbi__bmp_parse_header DD 021101H
	DD	0110111H
$unwind$stbi__tga_get_comp DD 011101H
	DD	02211H
$unwind$stbi__tga_read_rgb16 DD 010e01H
	DD	0820eH
$unwind$stbi__psd_decode_rle DD 011301H
	DD	06213H
$unwind$stbi__pic_is4 DD 010e01H
	DD	0620eH
$unwind$stbi__pic_test_core DD 010901H
	DD	06209H
$unwind$stbi__readval DD 011201H
	DD	06212H
$unwind$stbi__copyval DD 011201H
	DD	02212H
$unwind$stbi__pic_load_core DD 022c19H
	DD	01f011aH
	DD	imagerel __GSHandlerCheck
	DD	0e8H
$unwind$stbi__gif_test_raw DD 010901H
	DD	06209H
$unwind$stbi__gif_parse_colortable DD 011801H
	DD	06218H
$unwind$stbi__gif_header DD 011801H
	DD	06218H
$unwind$stbi__gif_info_raw DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$stbi__out_gif_code DD 010e01H
	DD	0820eH
$unwind$stbi__process_gif_raster DD 021101H
	DD	0130111H
$unwind$stbi__gif_load_next DD 021b01H
	DD	013011bH
$unwind$stbi__load_gif_main_outofmem DD 041801H
	DD	0310118H
	DD	060107011H
$unwind$stbi__hdr_test_core DD 010e01H
	DD	0620eH
$unwind$stbi__hdr_gettoken DD 010e01H
	DD	0620eH
$unwind$stbi__hdr_convert DD 011301H
	DD	06213H
$unwind$stbi__pnm_isspace DD 010801H
	DD	02208H
$unwind$stbi__pnm_skip_whitespace DD 010e01H
	DD	0420eH
$unwind$stbi__pnm_isdigit DD 010801H
	DD	02208H
$unwind$stbi__pnm_getinteger DD 010e01H
	DD	0620eH
$unwind$stbi__info_main DD 011801H
	DD	04218H
$unwind$stbi__is_16_main DD 010901H
	DD	04209H
$unwind$stbi_write_png DD 041c01H
	DD	01b011cH
	DD	060147015H
$unwind$stbi_write_bmp DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_tga DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_hdr DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_jpg DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_png_to_func DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$stbi_write_bmp_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_tga_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_hdr_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_jpg_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi__stdio_write DD 011301H
	DD	04213H
$unwind$stbiw__fopen DD 010e01H
	DD	0620eH
$unwind$stbi__start_write_file DD 010e01H
	DD	0620eH
$unwind$stbi__end_write_file DD 010901H
	DD	04209H
$unwind$stbiw__writefv DD 011301H
	DD	08213H
$unwind$stbiw__writef DD 011801H
	DD	06218H
$unwind$stbiw__write_flush DD 010901H
	DD	04209H
$unwind$stbiw__putc DD 010d01H
	DD	0420dH
$unwind$stbiw__write1 DD 010d01H
	DD	0420dH
$unwind$stbiw__write3 DD 011701H
	DD	06217H
$unwind$stbiw__write_pixel DD 011701H
	DD	08217H
$unwind$stbiw__write_pixels DD 011701H
	DD	0a217H
$unwind$stbiw__outfile DD 011701H
	DD	0c217H
$unwind$stbi_write_bmp_core DD 021a01H
	DD	031011aH
$unwind$stbi_write_tga_core DD 021a01H
	DD	023011aH
$unwind$stbiw__linear_to_rgbe DD 010e01H
	DD	0820eH
$unwind$stbiw__write_run_data DD 011201H
	DD	06212H
$unwind$stbiw__write_dump_data DD 011201H
	DD	06212H
$unwind$stbiw__write_hdr_scanline DD 012619H
	DD	0e217H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$stbi_write_hdr_core DD 042e19H
	DD	037011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$stbiw__sbgrowf DD 041701H
	DD	0130117H
	DD	0600f7010H
$unwind$stbiw__zlib_flushf DD 011301H
	DD	06213H
$unwind$stbiw__zlib_bitrev DD 010c01H
	DD	0220cH
$unwind$stbiw__zlib_countm DD 011301H
	DD	02213H
$unwind$stbiw__zhash DD 010901H
	DD	02209H
$unwind$stbi_zlib_compress DD 041c01H
	DD	047011cH
	DD	060147015H
$unwind$stbiw__crc32 DD 010d01H
	DD	0220dH
$unwind$stbiw__wpcrc DD 010d01H
	DD	0620dH
$unwind$stbiw__paeth DD 011101H
	DD	06211H
$unwind$stbiw__encode_png_line DD 011701H
	DD	0e217H
$unwind$stbi_write_png_to_mem DD 042e19H
	DD	055011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0290H
$unwind$stbiw__jpg_writeBits DD 011801H
	DD	06218H
$unwind$stbiw__jpg_DCT DD 011801H
	DD	0e218H
$unwind$stbiw__jpg_calcBits DD 010d01H
	DD	0220dH
$unwind$stbiw__jpg_processDU DD 042f19H
	DD	035011dH
	DD	030157016H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$stbi_write_jpg_core DD 023219H
	DD	029d0120H
	DD	imagerel __GSHandlerCheck
	DD	014d0H
$unwind$rxvec3 DD 031101H
	DD	0700d6211H
	DD	0600cH
$unwind$rxvec3_xyz DD 032c19H
	DD	07019421dH
	DD	06018H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvec3_xy DD 031701H
	DD	070136217H
	DD	06012H
$unwind$rxvec3_x DD 031101H
	DD	0700d6211H
	DD	0600cH
$unwind$rxvec3_y DD 031101H
	DD	0700d6211H
	DD	0600cH
$unwind$rxvec3_z DD 031101H
	DD	0700d6211H
	DD	0600cH
$unwind$rxmatrix_identity DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$rxmatrix_multiply DD 032419H
	DD	07011c215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$rxremix DD 011c01H
	DD	0421cH
$unwind$rxclamp DD 011601H
	DD	02216H
$unwind$rxclampi DD 011101H
	DD	02211H
$unwind$rxmax DD 011001H
	DD	02210H
$unwind$rxmin DD 011001H
	DD	02210H
$unwind$rxmaxi DD 010c01H
	DD	0220cH
$unwind$rxmini DD 010c01H
	DD	0220cH
$unwind$rxvector_cross DD 031501H
	DD	070118215H
	DD	06010H
$unwind$rxvector_length DD 030b01H
	DD	07007820bH
	DD	06006H
$unwind$rxvec2_len DD 010901H
	DD	04209H
$unwind$rxvec2_add DD 010e01H
	DD	0220eH
$unwind$rxvec2_sub DD 010e01H
	DD	0220eH
$unwind$rxvector_add DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvector_sub DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvector_mul DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvector_downscale DD 032519H
	DD	070124216H
	DD	06011H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvector_scale DD 032519H
	DD	070124216H
	DD	06011H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvector_negate DD 031f19H
	DD	0700c4210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rxvector_min DD 032519H
	DD	070126216H
	DD	06011H
	DD	imagerel __GSHandlerCheck
	DD	020H
$unwind$rxvector_max DD 032519H
	DD	070126216H
	DD	06011H
	DD	imagerel __GSHandlerCheck
	DD	020H
$unwind$rxvector_abs DD 031f19H
	DD	0700c6210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	020H
$unwind$rxvector_normalize DD 031001H
	DD	0700cc210H
	DD	0600bH
$unwind$rxmatrix_projection DD 043219H
	DD	0170120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$rxmatrix_rotZ DD 042619H
	DD	0190114H
	DD	0600c700dH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$rxmatrix_rotY DD 042619H
	DD	0190114H
	DD	0600c700dH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$rxmatrix_rotX DD 042619H
	DD	0190114H
	DD	0600c700dH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$rxmatrix_translate_xyz DD 043219H
	DD	0170120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$rxmatrix_flip_vertically DD 042019H
	DD	017010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$rxmul_matvec DD 031501H
	DD	070112215H
	DD	06010H
$unwind$rxadd_vec2 DD 010e01H
	DD	0220eH
$unwind$rxmul_vec2 DD 010e01H
	DD	0220eH
$unwind$rxvec2_xy DD 010c01H
	DD	0220cH
$unwind$rxvec2i_vec2 DD 010901H
	DD	02209H
$unwind$rxlinker_register_terminal DD 040e01H
	DD	019010eH
	DD	060067007H
$unwind$rxlinker_onlyquery_terminal DD 040e01H
	DD	011010eH
	DD	060067007H
$unwind$rxlinker_labelshas_terminal DD 010d01H
	DD	0620dH
$unwind$rxlinker_labelsadd_terminal DD 010d01H
	DD	0620dH
$unwind$rxlinker_labelsrem_terminal DD 010d01H
	DD	0620dH
$unwind$rxlinker_resolve_terminal DD 040e01H
	DD	033010eH
	DD	060067007H
$unwind$rxtexture_load DD 031001H
	DD	0700cc210H
	DD	0600bH
$unwind$rxtexture_create_untyped DD 042e19H
	DD	043011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$rxtexture_create_ex DD 041c01H
	DD	011011cH
	DD	060147015H
$unwind$rxtexture_create DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$rxtexture_apply DD 041201H
	DD	0190112H
	DD	0600a700bH
$unwind$rxtexture_bind DD 030b01H
	DD	07007820bH
	DD	06006H
$unwind$rxtexture_borrow DD 041301H
	DD	01d0113H
	DD	0600b700cH
$unwind$rxrender_target_copy DD 010e01H
	DD	0c20eH
$unwind$rxrender_target_apply DD 041301H
	DD	02b0113H
	DD	0600b700cH
$unwind$rxsampler_apply DD 010d01H
	DD	0420dH
$unwind$rxsampler_bind DD 010901H
	DD	04209H
$unwind$rxshader_apply DD 040e01H
	DD	01b010eH
	DD	060067007H
$unwind$rxcompile_shader_bytecode DD 041c01H
	DD	025011cH
	DD	060147015H
$unwind$rxload_vertex_shader DD 041301H
	DD	03f0113H
	DD	0600b700cH
$unwind$rxload_pixel_shader DD 041301H
	DD	03f0113H
	DD	0600b700cH
$unwind$rxbuffer_borrow DD 041301H
	DD	01d0113H
	DD	0600b700cH
$unwind$rxuniform_buffer_delete DD 010901H
	DD	06209H
$unwind$rxuniform_buffer_update DD 041801H
	DD	0110118H
	DD	060107011H
$unwind$rxuniform_buffer_bind_ex DD 041201H
	DD	0110112H
	DD	0600a700bH
$unwind$rxenable_ztesting DD 010801H
	DD	06208H
$unwind$rxarticle_create DD 040e01H
	DD	019010eH
	DD	060067007H
$unwind$rxinvalidate_contents DD 021919H
	DD	0350107H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$rxunknown_typeof_compute_shader DD 010901H
	DD	06209H
$unwind$rxunknown_typeof_vertex_shader DD 010901H
	DD	06209H
$unwind$rxunknown_typeof_pixel_shader DD 010901H
	DD	06209H
$unwind$rxshader_typeof_compute DD 010901H
	DD	04209H
$unwind$rxshader_typeof_vertex DD 010901H
	DD	04209H
$unwind$rxshader_typeof_pixel DD 010901H
	DD	04209H
$unwind$rxdelete_blobbler DD 010901H
	DD	04209H
$unwind$rxcreate_shader DD 042919H
	DD	0e30117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	0700H
$unwind$rxdelete_unknown DD 010901H
	DD	04209H
$unwind$rxdelete_vertex_buffer DD 010901H
	DD	04209H
$unwind$rxdelete_index_buffer DD 010901H
	DD	04209H
$unwind$rxreturn DD 010901H
	DD	04209H
$unwind$rxuniform_buffer_borrow DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$rxuniform_buffer_create DD 011c19H
	DD	0a20dH
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$rxcreate_index_buffer DD 011d19H
	DD	0a20eH
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$rxcreate_vertex_buffer DD 011d19H
	DD	0a20eH
	DD	imagerel __GSHandlerCheck
	DD	048H
$unwind$rxcreate_struct_buffer DD 011d19H
	DD	0e20eH
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$rxborrow_vertex_buffer DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$rxborrow_index_buffer DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$rxborrow_struct_buffer DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$rxdriver_stage_viewport DD 011f19H
	DD	08210H
	DD	imagerel __GSHandlerCheck
	DD	038H
$unwind$rxcomtag DD 010901H
	DD	02209H
$unwind$rxcomadd DD 040d01H
	DD	011010dH
	DD	060057006H
$unwind$rx3d DD	010401H
	DD	04204H
$unwind$rx2d DD	010401H
	DD	04204H
$unwind$rxclip DD 041b01H
	DD	019011bH
	DD	060137014H
$unwind$rxsampler_bind_ex DD 010d01H
	DD	0620dH
$unwind$rxtexture_bind_ex DD 030f01H
	DD	0700b620fH
	DD	0600aH
$unwind$rxcomexc DD 042419H
	DD	08d0112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	0450H
$unwind$rxdraw_end DD 010401H
	DD	04204H
$unwind$rxqueue_custom_command DD 010901H
	DD	06209H
$unwind$rxdraw_matrix DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$rxqueue_shader_command DD 010901H
	DD	06209H
$unwind$rxqueue_uniform_command DD 010901H
	DD	06209H
$unwind$rxvertex_mode_end DD 030701H
	DD	07003e207H
	DD	06002H
$unwind$rxvertex_mode DD 041c19H
	DD	013010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$rxsubmit_index DD 040d01H
	DD	019010dH
	DD	060057006H
$unwind$rxvertex_color DD 020701H
	DD	060067007H
$unwind$rxsubmit_vertex_array DD 010d01H
	DD	0420dH
$unwind$rxsubmit_vertex DD 020701H
	DD	060067007H
$unwind$rxsubmit_vertex_ex DD 042101H
	DD	01d0121H
	DD	06019701aH
$unwind$rx_vertex_xyz DD 031801H
	DD	07014a218H
	DD	06013H
$unwind$rx_vertex_xyz_color DD 031d01H
	DD	07019a21dH
	DD	06018H
$unwind$rxsubmit_vertex_xy DD 031201H
	DD	0700ea212H
	DD	0600dH
$unwind$rxsubmit_vertex_tex DD 031e01H
	DD	0701aa21eH
	DD	06019H
$unwind$rxdraw_skinned_preset_unnormalized DD 031d01H
	DD	07019a21dH
	DD	06018H
$unwind$rxdraw_skinned_unnormalized DD 041f01H
	DD	013011fH
	DD	060177018H
$unwind$rxdraw_skinned_ex DD 041f01H
	DD	013011fH
	DD	060177018H
$unwind$rxdraw_skinned DD 043219H
	DD	0150120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$rxtexture_scaled DD 043219H
	DD	0150120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$rxdraw_rect DD 042001H
	DD	0110120H
	DD	060187019H
$unwind$rxdraw_circle DD 031d01H
	DD	07019c21dH
	DD	06018H
$unwind$rxdraw_line DD 042001H
	DD	0110120H
	DD	060187019H
$unwind$rxdraw_outline DD 042001H
	DD	0130120H
	DD	060187019H
$unwind$rxdraw_text_length DD 010f01H
	DD	0620fH
$unwind$rxdraw_text_ex DD 041c01H
	DD	01f011cH
	DD	060147015H
$unwind$rxdraw_text DD 032719H
	DD	07014c218H
	DD	06013H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$rxtexture_delete DD 010901H
	DD	06209H
$unwind$rxcreate_render_target DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$rxtime DD 010401H
	DD	06204H
$unwind$rxeffect_candle DD 010401H
	DD	02204H
$unwind$rxeffect_shadow DD 010401H
	DD	02204H
$unwind$rxrestore_render_stack DD 041c19H
	DD	01d010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$rxdefault_render_pass_end DD 040a01H
	DD	015010aH
	DD	060027003H
$unwind$rxwindow_message_handler_win32 DD 011201H
	DD	0a212H
$unwind$rxwindow_message_callback_win32 DD 011701H
	DD	06217H
$unwind$rxwindow_poll DD 021619H
	DD	0110107H
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$rxwindow_create DD 021e19H
	DD	01d010cH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$rxwindow_enable DD 010401H
	DD	04204H
$unwind$rxwindow_resize DD 011b19H
	DD	0c20cH
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$rxwindow_xy DD 010c01H
	DD	0820cH
$unwind$rxtick DD 041c19H
	DD	04d010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	0258H
$unwind$rxcreate_simple_stencil_state_d3d DD 011b19H
	DD	0e20cH
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$rxinit_default_font DD 041c19H
	DD	0df010aH
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	06e0H
$unwind$rxinit DD 042019H
	DD	07b010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	03c0H
$unwind$load_bitmap8 DD 011201H
	DD	04212H
$unwind$is_click_leave_rect DD 030b01H
	DD	07007820bH
	DD	06006H
$unwind$is_click_enter_rect DD 030b01H
	DD	07007820bH
	DD	06006H
$unwind$mouse_is_key DD 010801H
	DD	02208H
$unwind$rect_by_xyxy DD 042e19H
	DD	01b011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$rect_by_size DD 031901H
	DD	070158219H
	DD	06014H
$unwind$rect_in_xy DD 011201H
	DD	02212H
$unwind$rect_cut DD 042f19H
	DD	015011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$rect_center DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$rect_padd DD 031a01H
	DD	07016a21aH
	DD	06015H
$unwind$text_rect DD 032819H
	DD	07015c219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$set_window_rect DD 010e01H
	DD	0820eH
$unwind$get_monitor_rect DD 031a19H
	DD	07007c20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$get_window_rect DD 031a19H
	DD	07007e20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$get_window_client_rect DD 031a19H
	DD	07007c20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$draw_rect DD 031001H
	DD	0700ca210H
	DD	0600bH
$unwind$draw_text DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$set_clip_rect DD 010901H
	DD	04209H
$unwind$button_widget DD 042519H
	DD	02d0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$checkbox_widget DD 042a19H
	DD	0470118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$dropdown_widget DD 042a19H
	DD	0470118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0220H
$unwind$cursor_in_rect DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$is_click_enter DD 010801H
	DD	04208H
$unwind$list_item_widget DD 042a19H
	DD	0210118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$slider_widget DD 043119H
	DD	025011fH
	DD	060177018H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$is_click_leave DD 010801H
	DD	04208H
$unwind$mouse_poll DD 010401H
	DD	08204H
$unwind$erecache DD 011201H
	DD	08212H
$unwind$egetlen DD 010d01H
	DD	0620dH
$unwind$egetoff DD 010d01H
	DD	0620dH
$unwind$esetcur DD 020c01H
	DD	0600b700cH
$unwind$egetcur DD 020c01H
	DD	0600b700cH
$unwind$egetcurx DD 010901H
	DD	08209H
$unwind$egetcury DD 010901H
	DD	08209H
$unwind$ecurloc DD 010901H
	DD	06209H
$unwind$currec DD 031501H
	DD	07011a215H
	DD	06010H
$unwind$emovcurx DD 042419H
	DD	0130112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$emovcury DD 042419H
	DD	0130112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$eputchar DD 010d01H
	DD	0820dH
$unwind$edelchar DD 010901H
	DD	08209H
$unwind$fload DD 010e01H
	DD	0a20eH
$unwind$fsave DD 010e01H
	DD	0620eH
$unwind$ewdg DD	042519H
	DD	02d0113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$copy_string_ex DD 041201H
	DD	0110112H
	DD	0600a700bH
$unwind$copy_string DD 010901H
	DD	04209H
$unwind$fdlg DD	021919H
	DD	03d0107H
	DD	imagerel __GSHandlerCheck
	DD	01d0H
$unwind$main DD	042419H
	DD	0170112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 80
$T5 = 96
$S39$6 = 112
r$7 = 128
s$8 = 144
__$ArrayPad$ = 160
argc$ = 208
argv$ = 216
main	PROC
; File W:\cpp\void\e\e.cc
; Line 87
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 88
	lea	rcx, OFFSET FLAT:$SG141233
	call	rxinit
; Line 91
	mov	r8d, 72					; 00000048H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?editor@?1??main@@9@9
	call	memset
; Line 93
	lea	rdx, OFFSET FLAT:$SG141234
	lea	rcx, OFFSET FLAT:?editor@?1??main@@9@9
	call	fload
; Line 95
	mov	DWORD PTR ?editor@?1??main@@9@9+16, 1
$LN4@main:
; Line 100
	mov	eax, DWORD PTR rx+5769532
	and	eax, 1
	test	eax, eax
	je	SHORT $LN5@main
	mov	ecx, 79					; 0000004fH
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN5@main
; Line 102
	mov	DWORD PTR ?editor@?1??main@@9@9+16, 0
; Line 104
	call	fdlg
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?editor@?1??main@@9@9
	call	fload
$LN5@main:
; Line 107
	mov	eax, DWORD PTR rx+5769532
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@main
	mov	ecx, 83					; 00000053H
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN6@main
; Line 109
	mov	DWORD PTR ?editor@?1??main@@9@9+16, 0
; Line 111
	call	fdlg
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:?editor@?1??main@@9@9
	call	fsave
$LN6@main:
; Line 115
	call	mouse_poll
; Line 117
	call	rx2d
; Line 119
	lea	rcx, QWORD PTR $T4[rsp]
	call	get_window_client_rect
	lea	rcx, QWORD PTR r$7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 121
	mov	r9d, 16
	mov	r8d, 2
	lea	rdx, QWORD PTR r$7[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	rect_cut
	lea	rcx, QWORD PTR s$8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 123
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S39$6[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S39$6[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S39$6[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S39$6[rsp+12], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $S39$6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR ?editor@?1??main@@9@9+36
	mov	edx, DWORD PTR ?editor@?1??main@@9@9+32
	lea	rcx, OFFSET FLAT:$SG141237
	call	ccformat
	lea	rcx, QWORD PTR $T2[rsp]
	lea	rdx, QWORD PTR s$8[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T1[rsp]
	mov	r8d, 16
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	draw_text
; Line 127
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR r$7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, OFFSET FLAT:?editor@?1??main@@9@9
	lea	rcx, QWORD PTR $T3[rsp]
	call	ewdg
; Line 131
	mov	DWORD PTR ?editor@?1??main@@9@9+16, 1
; Line 133
	call	rxtick
	test	eax, eax
	jne	$LN4@main
; Line 135
	xor	eax, eax
; Line 136
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
OpenFileName$ = 32
DirBuff$ = 192
__$ArrayPad$ = 464
fdlg	PROC
; File W:\cpp\void\e\e.cc
; Line 63
$LN3:
	sub	rsp, 488				; 000001e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 65
	lea	rdx, QWORD PTR DirBuff$[rsp]
	mov	ecx, 260				; 00000104H
	call	QWORD PTR __imp_GetCurrentDirectoryA
; Line 68
	mov	r8d, 152				; 00000098H
	xor	edx, edx
	lea	rcx, QWORD PTR OpenFileName$[rsp]
	call	memset
; Line 69
	mov	DWORD PTR OpenFileName$[rsp], 152	; 00000098H
; Line 70
	mov	QWORD PTR OpenFileName$[rsp+8], 0
; Line 71
	mov	edx, 1
	mov	ecx, 260				; 00000104H
	call	ccstatic_alloc
	mov	QWORD PTR OpenFileName$[rsp+48], rax
; Line 72
	mov	DWORD PTR OpenFileName$[rsp+56], 260	; 00000104H
; Line 73
	lea	rax, OFFSET FLAT:$SG141217
	mov	QWORD PTR OpenFileName$[rsp+24], rax
; Line 74
	mov	DWORD PTR OpenFileName$[rsp+44], 1
; Line 75
	mov	QWORD PTR OpenFileName$[rsp+64], 0
; Line 76
	mov	DWORD PTR OpenFileName$[rsp+72], 0
; Line 77
	mov	QWORD PTR OpenFileName$[rsp+80], 0
; Line 78
	mov	DWORD PTR OpenFileName$[rsp+96], 6144	; 00001800H
; Line 79
	lea	rcx, QWORD PTR OpenFileName$[rsp]
	call	QWORD PTR __imp_GetOpenFileNameA
; Line 81
	lea	rcx, QWORD PTR DirBuff$[rsp]
	call	QWORD PTR __imp_SetCurrentDirectoryA
; Line 83
	mov	rax, QWORD PTR OpenFileName$[rsp+48]
; Line 84
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 488				; 000001e8H
	ret	0
fdlg	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_string$ = 48
copy_string PROC
; File W:\cpp\void\e\e.cc
; Line 56
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 57
	cmp	QWORD PTR the_string$[rsp], 0
	jne	SHORT $LN2@copy_strin
	xor	eax, eax
	jmp	SHORT $LN1@copy_strin
$LN2@copy_strin:
; Line 59
	mov	rcx, QWORD PTR the_string$[rsp]
	call	strlen
	mov	edx, eax
	mov	rcx, QWORD PTR the_string$[rsp]
	call	copy_string_ex
$LN1@copy_strin:
; Line 60
	add	rsp, 40					; 00000028H
	ret	0
copy_string ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_result$ = 48
tv69 = 56
$T1 = 64
$T2 = 96
the_string$ = 160
the_length$ = 168
copy_string_ex PROC
; File W:\cpp\void\e\e.cc
; Line 42
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 43
	cmp	QWORD PTR the_string$[rsp], 0
	je	SHORT $LN3@copy_strin
	cmp	DWORD PTR the_length$[rsp], 0
	jne	SHORT $LN2@copy_strin
$LN3@copy_strin:
; Line 44
	xor	eax, eax
	jmp	$LN1@copy_strin
$LN2@copy_strin:
; Line 46
	mov	eax, DWORD PTR the_length$[rsp]
	inc	eax
	mov	eax, eax
	mov	QWORD PTR tv69[rsp], rax
	lea	rcx, OFFSET FLAT:$SG141203
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 46					; 0000002eH
	lea	r8, OFFSET FLAT:$SG141204
	mov	edx, 212				; 000000d4H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv69[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR the_result$[rsp], rax
; Line 47
	mov	eax, DWORD PTR the_length$[rsp]
	inc	eax
	mov	eax, eax
	mov	r8d, eax
	mov	rdx, QWORD PTR the_string$[rsp]
	mov	rcx, QWORD PTR the_result$[rsp]
	call	memcpy
; Line 48
	mov	eax, DWORD PTR the_length$[rsp]
	mov	rcx, QWORD PTR the_result$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 50
	mov	rax, QWORD PTR the_result$[rsp]
$LN1@copy_strin:
; Line 51
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
copy_string_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
in_rect$ = 52
tv231 = 56
tv88 = 64
tv144 = 72
tv206 = 80
the_line$2 = 88
tv395 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
$T10 = 224
$T11 = 240
$S35$ = 256
$S36$12 = 272
$S37$ = 288
color$ = 304
$S38$ = 320
__$ArrayPad$ = 336
rect$ = 384
widget$ = 392
ewdg	PROC
; File W:\cpp\void\e\e.h
; Line 316
$LN39:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 317
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T3[rsp]
	call	cursor_in_rect
	mov	DWORD PTR in_rect$[rsp], eax
; Line 319
	xor	ecx, ecx
	call	is_click_enter
	test	eax, eax
	je	SHORT $LN5@ewdg
; Line 321
	cmp	DWORD PTR in_rect$[rsp], 0
	je	SHORT $LN6@ewdg
; Line 323
	mov	rax, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rax+16], 1
$LN6@ewdg:
$LN5@ewdg:
; Line 327
	mov	rax, QWORD PTR widget$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	$LN7@ewdg
; Line 329
	mov	ecx, 4
	call	rxtstkey
	test	eax, eax
	je	$LN8@ewdg
; Line 330
	mov	eax, DWORD PTR rx+5769532
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@ewdg
; Line 332
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+40]
	dec	eax
	mov	rcx, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 333
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN33@ewdg
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv88[rsp], rax
	jmp	SHORT $LN34@ewdg
$LN33@ewdg:
	mov	QWORD PTR tv88[rsp], 0
$LN34@ewdg:
	mov	eax, DWORD PTR tv88[rsp]
	dec	eax
	mov	r8d, eax
	xor	edx, edx
	mov	rax, QWORD PTR widget$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	rxclampi
	mov	rcx, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 334
	jmp	SHORT $LN11@ewdg
$LN10@ewdg:
; Line 336
	mov	edx, -1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcury
$LN11@ewdg:
; Line 338
	jmp	$LN9@ewdg
$LN8@ewdg:
; Line 339
	mov	ecx, 5
	call	rxtstkey
	test	eax, eax
	je	$LN12@ewdg
; Line 341
	mov	eax, DWORD PTR rx+5769532
	and	eax, 1
	test	eax, eax
	je	SHORT $LN14@ewdg
; Line 343
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	rcx, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 344
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN35@ewdg
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv144[rsp], rax
	jmp	SHORT $LN36@ewdg
$LN35@ewdg:
	mov	QWORD PTR tv144[rsp], 0
$LN36@ewdg:
	mov	eax, DWORD PTR tv144[rsp]
	dec	eax
	mov	r8d, eax
	xor	edx, edx
	mov	rax, QWORD PTR widget$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	rxclampi
	mov	rcx, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 345
	jmp	SHORT $LN15@ewdg
$LN14@ewdg:
; Line 347
	mov	edx, 1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcury
$LN15@ewdg:
; Line 349
	jmp	$LN13@ewdg
$LN12@ewdg:
; Line 350
	mov	ecx, 2
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN16@ewdg
; Line 351
	mov	eax, DWORD PTR rx+5769532
	and	eax, 1
	test	eax, eax
	je	SHORT $LN18@ewdg
; Line 353
	jmp	SHORT $LN19@ewdg
$LN18@ewdg:
; Line 355
	mov	edx, -1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcurx
$LN19@ewdg:
; Line 357
	jmp	$LN17@ewdg
$LN16@ewdg:
; Line 358
	mov	ecx, 3
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN20@ewdg
; Line 360
	mov	eax, DWORD PTR rx+5769532
	and	eax, 1
	test	eax, eax
	je	SHORT $LN22@ewdg
; Line 362
	jmp	SHORT $LN23@ewdg
$LN22@ewdg:
; Line 364
	mov	edx, 1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcurx
$LN23@ewdg:
; Line 366
	jmp	$LN21@ewdg
$LN20@ewdg:
; Line 367
	mov	ecx, 11
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN24@ewdg
; Line 368
	mov	rcx, QWORD PTR widget$[rsp]
	call	edelchar
; Line 369
	jmp	$LN25@ewdg
$LN24@ewdg:
; Line 370
	mov	ecx, 10
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN26@ewdg
; Line 371
	mov	rcx, QWORD PTR widget$[rsp]
	call	ecurloc
	test	eax, eax
	je	SHORT $LN28@ewdg
; Line 372
	mov	edx, -1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcurx
; Line 373
	mov	rcx, QWORD PTR widget$[rsp]
	call	edelchar
$LN28@ewdg:
; Line 375
	jmp	SHORT $LN27@ewdg
$LN26@ewdg:
; Line 376
	mov	ecx, 1
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN29@ewdg
; Line 377
	mov	edx, 13
	mov	rcx, QWORD PTR widget$[rsp]
	call	eputchar
; Line 378
	mov	edx, 10
	mov	rcx, QWORD PTR widget$[rsp]
	call	eputchar
; Line 379
	mov	edx, 1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcurx
; Line 380
	jmp	SHORT $LN30@ewdg
$LN29@ewdg:
; Line 381
	call	rxchr
	test	eax, eax
	je	SHORT $LN31@ewdg
; Line 382
	call	rxchr
	mov	edx, eax
	mov	rcx, QWORD PTR widget$[rsp]
	call	eputchar
; Line 383
	mov	edx, 1
	mov	rcx, QWORD PTR widget$[rsp]
	call	emovcurx
$LN31@ewdg:
$LN30@ewdg:
$LN27@ewdg:
$LN25@ewdg:
$LN21@ewdg:
$LN17@ewdg:
$LN13@ewdg:
$LN9@ewdg:
$LN7@ewdg:
; Line 392
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S35$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S35$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S35$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S35$[rsp+12], xmm0
	lea	rax, QWORD PTR color$[rsp]
	lea	rcx, QWORD PTR $S35$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 394
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	draw_rect
; Line 396
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@ewdg
$LN2@ewdg:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@ewdg:
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN37@ewdg
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv206[rsp], rax
	jmp	SHORT $LN38@ewdg
$LN37@ewdg:
	mov	QWORD PTR tv206[rsp], 0
$LN38@ewdg:
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	ecx, DWORD PTR tv206[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, 32					; 00000020H
	mov	ecx, eax
	call	rxmini
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@ewdg
; Line 398
	mov	rax, QWORD PTR widget$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR widget$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR i$1[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR the_line$2[rsp], rax
; Line 400
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S36$12[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S36$12[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S36$12[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S36$12[rsp+12], xmm0
	mov	rax, QWORD PTR the_line$2[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR widget$[rsp]
	add	rax, QWORD PTR [rcx+56]
	mov	ecx, DWORD PTR i$1[rsp]
	inc	ecx
	imul	ecx, ecx, -32				; ffffffffffffffe0H
	mov	rdx, QWORD PTR rect$[rsp]
	add	ecx, DWORD PTR [rdx+12]
	mov	DWORD PTR tv231[rsp], ecx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $S36$12[rsp]
	mov	QWORD PTR tv395[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv395[rsp]
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR the_line$2[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 32					; 00000020H
	mov	eax, DWORD PTR tv231[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	rxdraw_text_ex
; Line 404
	jmp	$LN2@ewdg
$LN3@ewdg:
; Line 406
	xorps	xmm0, xmm0
	movss	DWORD PTR $S37$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S37$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S37$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S37$[rsp+12], xmm0
	lea	rax, QWORD PTR color$[rsp]
	lea	rcx, QWORD PTR $S37$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 407
	movsd	xmm0, QWORD PTR rx+664
	divsd	xmm0, QWORD PTR __real@3fd0000000000000
	mulsd	xmm0, QWORD PTR __real@400921fb60000000
	call	sin
	movsd	xmm1, QWORD PTR __real@3fe0000000000000
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	movsd	xmm2, QWORD PTR __real@3ff0000000000000
	movsd	xmm1, QWORD PTR __real@3fa999999999999a
	call	rxclamp
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR color$[rsp+12], xmm0
; Line 409
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T7[rsp]
	mov	rdx, QWORD PTR widget$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	currec
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	draw_rect
; Line 411
	mov	DWORD PTR $S38$[rsp], 0
	mov	DWORD PTR $S38$[rsp+4], 0
	mov	DWORD PTR $S38$[rsp+8], 65535		; 0000ffffH
	mov	DWORD PTR $S38$[rsp+12], 65535		; 0000ffffH
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $S38$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T10[rsp]
	call	set_clip_rect
; Line 412
	xor	eax, eax
; Line 413
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
ewdg	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$1 = 32
file$2 = 40
widget$ = 64
name$ = 72
fsave	PROC
; File W:\cpp\void\e\e.h
; Line 302
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 303
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN2@fsave
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	test	rax, rax
	je	SHORT $LN2@fsave
; Line 305
	lea	rdx, OFFSET FLAT:$SG141137
	mov	rcx, QWORD PTR name$[rsp]
	call	ccopenfile
	mov	QWORD PTR file$2[rsp], rax
; Line 307
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+64]
	mov	DWORD PTR length$1[rsp], eax
; Line 308
	mov	rax, QWORD PTR widget$[rsp]
	mov	r9, QWORD PTR [rax+56]
	mov	r8d, DWORD PTR length$1[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$2[rsp]
	call	ccpushfile
; Line 310
	mov	rcx, QWORD PTR file$2[rsp]
	call	ccclosefile
$LN2@fsave:
; Line 312
	add	rsp, 56					; 00000038H
	ret	0
fsave	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$1 = 32
tv80 = 40
memory$2 = 48
buffer$3 = 56
file$4 = 64
tv90 = 72
widget$ = 96
name$ = 104
fload	PROC
; File W:\cpp\void\e\e.h
; Line 275
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 276
	cmp	QWORD PTR name$[rsp], 0
	je	$LN2@fload
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	test	rax, rax
	je	$LN2@fload
; Line 278
	lea	rdx, OFFSET FLAT:$SG141126
	mov	rcx, QWORD PTR name$[rsp]
	call	ccopenfile
	mov	QWORD PTR file$4[rsp], rax
; Line 280
	mov	DWORD PTR length$1[rsp], 0
; Line 281
	lea	r8, QWORD PTR length$1[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$4[rsp]
	call	ccpullfile
	mov	QWORD PTR memory$2[rsp], rax
; Line 283
	cmp	QWORD PTR memory$2[rsp], 0
	je	$LN3@fload
; Line 285
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN5@fload
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+56]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN6@fload
$LN5@fload:
	mov	QWORD PTR tv80[rsp], 0
$LN6@fload:
	mov	rcx, QWORD PTR tv80[rsp]
	call	ccdlbdel_
; Line 286
	mov	rax, QWORD PTR widget$[rsp]
	mov	QWORD PTR [rax+56], 0
; Line 288
	mov	eax, DWORD PTR length$1[rsp]
	mov	ecx, DWORD PTR length$1[rsp]
	mov	rdx, QWORD PTR widget$[rsp]
	add	rdx, 56					; 00000038H
	mov	QWORD PTR tv90[rsp], rdx
	mov	r9d, eax
	mov	r8d, ecx
	mov	edx, 1
	mov	rax, QWORD PTR tv90[rsp]
	mov	rcx, rax
	call	ccdlbadd_
	mov	rcx, QWORD PTR widget$[rsp]
	add	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR buffer$3[rsp], rax
; Line 289
	mov	eax, DWORD PTR length$1[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR memory$2[rsp]
	mov	rcx, QWORD PTR buffer$3[rsp]
	call	memcpy
; Line 291
	mov	rax, QWORD PTR widget$[rsp]
	mov	ecx, DWORD PTR length$1[rsp]
	mov	DWORD PTR [rax+64], ecx
; Line 293
	mov	r8, QWORD PTR buffer$3[rsp]
	mov	edx, DWORD PTR length$1[rsp]
	mov	rcx, QWORD PTR widget$[rsp]
	call	erecache
$LN3@fload:
$LN2@fload:
; Line 296
	add	rsp, 88					; 00000058H
	ret	0
fload	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$ = 32
mov$ = 36
mem$ = 40
tv89 = 48
widget$ = 80
edelchar PROC
; File W:\cpp\void\e\e.h
; Line 257
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 258
	mov	rcx, QWORD PTR widget$[rsp]
	call	ecurloc
	mov	DWORD PTR loc$[rsp], eax
; Line 260
	movsxd	rax, DWORD PTR loc$[rsp]
	mov	rcx, QWORD PTR widget$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mem$[rsp], rax
; Line 261
	mov	rax, QWORD PTR mem$[rsp]
	mov	BYTE PTR [rax], 0
; Line 263
	mov	rcx, QWORD PTR widget$[rsp]
	call	buflen
	sub	eax, DWORD PTR loc$[rsp]
	dec	eax
	mov	DWORD PTR mov$[rsp], eax
; Line 264
	movsxd	rax, DWORD PTR mov$[rsp]
	mov	rcx, QWORD PTR mem$[rsp]
	inc	rcx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR mem$[rsp]
	call	memmove
; Line 266
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+64]
	dec	eax
	mov	rcx, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rcx+64], eax
; Line 269
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN3@edelchar
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv89[rsp], rax
	jmp	SHORT $LN4@edelchar
$LN3@edelchar:
	mov	QWORD PTR tv89[rsp], 0
$LN4@edelchar:
	mov	rax, QWORD PTR widget$[rsp]
	mov	r8, QWORD PTR [rax+56]
	mov	edx, DWORD PTR tv89[rsp]
	mov	rcx, QWORD PTR widget$[rsp]
	call	erecache
; Line 270
	add	rsp, 72					; 00000048H
	ret	0
edelchar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$ = 32
mov$ = 36
mem$ = 40
tv83 = 48
widget$ = 80
chr$ = 88
eputchar PROC
; File W:\cpp\void\e\e.h
; Line 238
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 239
	mov	rax, QWORD PTR widget$[rsp]
	add	rax, 56					; 00000038H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, rax
	call	ccdlbadd_
; Line 240
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+64]
	inc	eax
	mov	rcx, QWORD PTR widget$[rsp]
	mov	DWORD PTR [rcx+64], eax
; Line 242
	mov	rcx, QWORD PTR widget$[rsp]
	call	ecurloc
	mov	DWORD PTR loc$[rsp], eax
; Line 243
	movsxd	rax, DWORD PTR loc$[rsp]
	mov	rcx, QWORD PTR widget$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR mem$[rsp], rax
; Line 245
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN3@eputchar
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv83[rsp], rax
	jmp	SHORT $LN4@eputchar
$LN3@eputchar:
	mov	QWORD PTR tv83[rsp], 0
$LN4@eputchar:
	mov	eax, DWORD PTR loc$[rsp]
	mov	ecx, DWORD PTR tv83[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	mov	DWORD PTR mov$[rsp], eax
; Line 246
	movsxd	rax, DWORD PTR mov$[rsp]
	mov	rcx, QWORD PTR mem$[rsp]
	inc	rcx
	mov	r8, rax
	mov	rdx, QWORD PTR mem$[rsp]
	call	memmove
; Line 248
	mov	rax, QWORD PTR mem$[rsp]
	movzx	ecx, BYTE PTR chr$[rsp]
	mov	BYTE PTR [rax], cl
; Line 251
	mov	rax, QWORD PTR widget$[rsp]
	mov	r8, QWORD PTR [rax+56]
	mov	rax, QWORD PTR widget$[rsp]
	mov	edx, DWORD PTR [rax+64]
	mov	rcx, QWORD PTR widget$[rsp]
	call	erecache
; Line 252
	add	rsp, 72					; 00000048H
	ret	0
eputchar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
tv88 = 40
$T1 = 48
$T2 = 80
cur$ = 104
__$ArrayPad$ = 128
wdg$ = 176
mov$ = 184
emovcury PROC
; File W:\cpp\void\e\e.h
; Line 221
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 222
	mov	rdx, QWORD PTR wdg$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	egetcur
	lea	rcx, QWORD PTR cur$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 20
	rep movsb
; Line 224
	mov	rax, QWORD PTR wdg$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN4@emovcury
	mov	rax, QWORD PTR wdg$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN5@emovcury
$LN4@emovcury:
	mov	QWORD PTR tv74[rsp], 0
$LN5@emovcury:
	mov	eax, DWORD PTR mov$[rsp]
	mov	ecx, DWORD PTR cur$[rsp+16]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR tv74[rsp]
	dec	ecx
	cmp	eax, ecx
	ja	$LN2@emovcury
	mov	eax, DWORD PTR mov$[rsp]
	mov	ecx, DWORD PTR cur$[rsp+16]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jl	SHORT $LN2@emovcury
; Line 227
	mov	eax, DWORD PTR mov$[rsp]
	mov	ecx, DWORD PTR cur$[rsp+16]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR cur$[rsp+16], eax
; Line 228
	mov	edx, DWORD PTR cur$[rsp+16]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetlen
	cvtsi2sd xmm0, eax
	cvtsi2sd xmm1, DWORD PTR cur$[rsp+12]
	movsd	QWORD PTR tv88[rsp], xmm1
	movaps	xmm2, xmm0
	xorps	xmm1, xmm1
	movsd	xmm0, QWORD PTR tv88[rsp]
	call	rxclamp
	cvttsd2si eax, xmm0
	mov	DWORD PTR cur$[rsp+12], eax
; Line 230
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR cur$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 20
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	esetcur
$LN2@emovcury:
; Line 232
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
emovcury ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
tv79 = 40
$T1 = 48
$T2 = 80
cur$ = 104
__$ArrayPad$ = 128
wdg$ = 176
mov$ = 184
emovcurx PROC
; File W:\cpp\void\e\e.h
; Line 191
$LN11:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 192
	mov	rdx, QWORD PTR wdg$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	egetcur
	lea	rcx, QWORD PTR cur$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 20
	rep movsb
; Line 194
	mov	eax, DWORD PTR mov$[rsp]
	mov	ecx, DWORD PTR cur$[rsp+12]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv68[rsp], eax
	mov	edx, DWORD PTR cur$[rsp+16]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetlen
	mov	ecx, DWORD PTR tv68[rsp]
	cmp	ecx, eax
	jle	SHORT $LN2@emovcurx
; Line 196
	mov	rax, QWORD PTR wdg$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN9@emovcurx
	mov	rax, QWORD PTR wdg$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv79[rsp], rax
	jmp	SHORT $LN10@emovcurx
$LN9@emovcurx:
	mov	QWORD PTR tv79[rsp], 0
$LN10@emovcurx:
	mov	eax, DWORD PTR cur$[rsp+16]
	inc	eax
	mov	ecx, DWORD PTR tv79[rsp]
	dec	ecx
	cmp	eax, ecx
	ja	SHORT $LN4@emovcurx
; Line 198
	mov	eax, DWORD PTR cur$[rsp+16]
	inc	eax
	mov	DWORD PTR cur$[rsp+16], eax
; Line 199
	mov	DWORD PTR cur$[rsp+12], 0
$LN4@emovcurx:
; Line 201
	jmp	SHORT $LN3@emovcurx
$LN2@emovcurx:
; Line 202
	mov	eax, DWORD PTR mov$[rsp]
	mov	ecx, DWORD PTR cur$[rsp+12]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jge	SHORT $LN5@emovcurx
; Line 204
	mov	eax, DWORD PTR cur$[rsp+16]
	dec	eax
	test	eax, eax
	jl	SHORT $LN7@emovcurx
; Line 206
	mov	eax, DWORD PTR cur$[rsp+16]
	dec	eax
	mov	DWORD PTR cur$[rsp+16], eax
; Line 207
	mov	edx, DWORD PTR cur$[rsp+16]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetlen
	mov	DWORD PTR cur$[rsp+12], eax
$LN7@emovcurx:
; Line 209
	jmp	SHORT $LN6@emovcurx
$LN5@emovcurx:
; Line 211
	mov	eax, DWORD PTR mov$[rsp]
	mov	ecx, DWORD PTR cur$[rsp+12]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR cur$[rsp+12], eax
$LN6@emovcurx:
$LN3@emovcurx:
; Line 214
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR cur$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 20
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	esetcur
; Line 215
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
emovcurx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ycur$ = 48
xcur$ = 52
$T1 = 56
__$ReturnAddress$ = 112
widget$ = 120
rect$ = 128
currec	PROC
; File W:\cpp\void\e\e.h
; Line 175
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 176
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR xcur$[rsp], eax
; Line 177
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR ycur$[rsp], eax
; Line 179
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	ecx, DWORD PTR ycur$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ycur$[rsp], eax
; Line 181
	imul	eax, DWORD PTR ycur$[rsp], 32		; 00000020H
	mov	DWORD PTR ycur$[rsp], eax
; Line 182
	mov	ecx, 32					; 00000020H
	call	rxchrxsz
	cvtsi2ss xmm1, DWORD PTR xcur$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvttss2si eax, xmm0
	mov	DWORD PTR xcur$[rsp], eax
; Line 183
	mov	rax, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR ycur$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	sub	eax, 32					; 00000020H
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx]
	add	ecx, DWORD PTR xcur$[rsp]
	mov	DWORD PTR [rsp+32], 32			; 00000020H
	mov	r9d, 16
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_size
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 184
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
currec	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 32
wdg$ = 64
ecurloc	PROC
; File W:\cpp\void\e\e.h
; Line 166
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 167
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetcury
	mov	edx, eax
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetoff
	mov	DWORD PTR tv64[rsp], eax
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetcurx
	mov	ecx, DWORD PTR tv64[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 168
	add	rsp, 56					; 00000038H
	ret	0
ecurloc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
wdg$ = 80
egetcury PROC
; File W:\cpp\void\e\e.h
; Line 159
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 160
	mov	rdx, QWORD PTR wdg$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	egetcur
	mov	eax, DWORD PTR [rax+16]
; Line 161
	add	rsp, 72					; 00000048H
	ret	0
egetcury ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
wdg$ = 80
egetcurx PROC
; File W:\cpp\void\e\e.h
; Line 152
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 153
	mov	rdx, QWORD PTR wdg$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	egetcur
	mov	eax, DWORD PTR [rax+12]
; Line 154
	add	rsp, 72					; 00000048H
	ret	0
egetcurx ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
__$ReturnAddress$ = 24
wdg$ = 32
egetcur	PROC
; File W:\cpp\void\e\e.h
; Line 145
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
; Line 146
	mov	rax, QWORD PTR wdg$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	lea	rsi, QWORD PTR [rax+20]
	mov	ecx, 20
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 147
	pop	rdi
	pop	rsi
	ret	0
egetcur	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
wdg$ = 24
cur$ = 32
esetcur	PROC
; File W:\cpp\void\e\e.h
; Line 138
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
; Line 139
	mov	rax, QWORD PTR wdg$[rsp]
	lea	rdi, QWORD PTR [rax+20]
	mov	rsi, QWORD PTR cur$[rsp]
	mov	ecx, 20
	rep movsb
; Line 140
	pop	rdi
	pop	rsi
	ret	0
esetcur	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
wdg$ = 64
index$ = 72
egetoff	PROC
; File W:\cpp\void\e\e.h
; Line 132
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 133
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetrow
	mov	QWORD PTR $T1[rsp], rax
	mov	eax, DWORD PTR $T1[rsp]
; Line 134
	add	rsp, 56					; 00000038H
	ret	0
egetoff	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
wdg$ = 64
index$ = 72
egetlen	PROC
; File W:\cpp\void\e\e.h
; Line 124
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 125
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR wdg$[rsp]
	call	egetrow
	mov	QWORD PTR $T1[rsp], rax
	mov	eax, DWORD PTR $T1[rsp+4]
; Line 126
	add	rsp, 56					; 00000038H
	ret	0
egetlen	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
wdg$ = 8
index$ = 16
egetrow	PROC
; File W:\cpp\void\e\e.h
; Line 116
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 117
	movsxd	rax, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR wdg$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	rax, QWORD PTR [rcx+rax*8]
; Line 118
	ret	0
egetrow	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
widget$ = 8
buflen	PROC
; File W:\cpp\void\e\e.h
; Line 108
	mov	QWORD PTR [rsp+8], rcx
; Line 109
	mov	rax, QWORD PTR widget$[rsp]
	mov	eax, DWORD PTR [rax+64]
; Line 110
	ret	0
buflen	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cursor$ = 32
line$1 = 40
tv68 = 48
widget$ = 80
length$ = 88
buffer$ = 96
erecache PROC
; File W:\cpp\void\e\e.h
; Line 62
$LN15:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 63
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR cursor$[rsp], rax
; Line 65
	mov	rax, QWORD PTR widget$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN12@erecache
	mov	rax, QWORD PTR widget$[rsp]
	mov	rax, QWORD PTR [rax+48]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv68[rsp], rax
	jmp	SHORT $LN13@erecache
$LN12@erecache:
	mov	QWORD PTR tv68[rsp], 0
$LN13@erecache:
	mov	rcx, QWORD PTR tv68[rsp]
	call	ccdlbdel_
; Line 66
	mov	rax, QWORD PTR widget$[rsp]
	mov	QWORD PTR [rax+48], 0
$LN14@erecache:
$retry$16:
; Line 69
	movsxd	rax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR cursor$[rsp], rax
	jae	$LN4@erecache
; Line 75
	mov	rax, QWORD PTR widget$[rsp]
	add	rax, 48					; 00000030H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlbadd_
	mov	rcx, QWORD PTR widget$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR line$1[rsp], rax
; Line 76
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR cursor$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR line$1[rsp]
	mov	DWORD PTR [rcx], eax
; Line 77
	mov	rax, QWORD PTR line$1[rsp]
	mov	DWORD PTR [rax+4], 0
$LN2@erecache:
; Line 79
	movsxd	rax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR cursor$[rsp], rax
	jae	$LN3@erecache
; Line 81
	mov	rax, QWORD PTR cursor$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN5@erecache
; Line 82
	mov	rax, QWORD PTR cursor$[rsp]
	inc	rax
	mov	QWORD PTR cursor$[rsp], rax
; Line 84
	mov	rax, QWORD PTR cursor$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	jne	SHORT $LN7@erecache
; Line 85
	mov	rax, QWORD PTR cursor$[rsp]
	inc	rax
	mov	QWORD PTR cursor$[rsp], rax
$LN7@erecache:
; Line 87
	jmp	$retry$16
; Line 88
	jmp	SHORT $LN6@erecache
$LN5@erecache:
; Line 89
	mov	rax, QWORD PTR cursor$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	jne	SHORT $LN8@erecache
; Line 90
	mov	rax, QWORD PTR cursor$[rsp]
	inc	rax
	mov	QWORD PTR cursor$[rsp], rax
; Line 92
	mov	rax, QWORD PTR cursor$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	jne	SHORT $LN10@erecache
; Line 93
	mov	rax, QWORD PTR cursor$[rsp]
	inc	rax
	mov	QWORD PTR cursor$[rsp], rax
$LN10@erecache:
; Line 95
	jmp	$LN14@erecache
; Line 96
	jmp	SHORT $LN9@erecache
$LN8@erecache:
; Line 98
	mov	rax, QWORD PTR cursor$[rsp]
	inc	rax
	mov	QWORD PTR cursor$[rsp], rax
; Line 99
	mov	rax, QWORD PTR line$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	inc	eax
	mov	rcx, QWORD PTR line$1[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN9@erecache:
$LN6@erecache:
; Line 101
	jmp	$LN2@erecache
$LN3@erecache:
$LN4@erecache:
; Line 103
	add	rsp, 72					; 00000048H
	ret	0
erecache ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
tv76 = 36
tv86 = 40
tv128 = 44
yscroll$ = 48
result$ = 52
mouse_poll PROC
; File W:\cpp\void\e\mouse.cc
; Line 68
$LN14:
	sub	rsp, 72					; 00000048H
; Line 69
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	edx, 36					; 00000024H
	imul	rdx, rdx, 0
	lea	r8, OFFSET FLAT:rx+48
	mov	eax, DWORD PTR [rcx+rax+8]
	mov	DWORD PTR [r8+rdx+4], eax
; Line 70
	mov	ecx, 12
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN6@mouse_poll
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN7@mouse_poll
$LN6@mouse_poll:
	mov	DWORD PTR tv76[rsp], 0
$LN7@mouse_poll:
	mov	ecx, 13
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN8@mouse_poll
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN9@mouse_poll
$LN8@mouse_poll:
	mov	DWORD PTR tv80[rsp], 0
$LN9@mouse_poll:
	mov	ecx, 14
	call	rxtstkey
	test	eax, eax
	je	SHORT $LN10@mouse_poll
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN11@mouse_poll
$LN10@mouse_poll:
	mov	DWORD PTR tv86[rsp], 0
$LN11@mouse_poll:
	mov	eax, DWORD PTR tv80[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR tv76[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR tv86[rsp]
	shl	ecx, 2
	or	eax, ecx
	mov	ecx, 36					; 00000024H
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:rx+48
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 75
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	edx, 36					; 00000024H
	imul	rdx, rdx, 0
	lea	r8, OFFSET FLAT:rx+48
	mov	edx, DWORD PTR [r8+rdx+8]
	cmp	DWORD PTR [rcx+rax+4], edx
	je	SHORT $LN12@mouse_poll
	mov	DWORD PTR tv128[rsp], 1
	jmp	SHORT $LN13@mouse_poll
$LN12@mouse_poll:
	mov	DWORD PTR tv128[rsp], 0
$LN13@mouse_poll:
	mov	eax, DWORD PTR tv128[rsp]
	mov	DWORD PTR result$[rsp], eax
; Line 78
	xor	ecx, ecx
	call	is_click_enter
	test	eax, eax
	je	SHORT $LN2@mouse_poll
; Line 80
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	edx, DWORD PTR rx+40
	mov	DWORD PTR [rcx+rax+12], edx
; Line 81
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	edx, DWORD PTR rx+44
	mov	DWORD PTR [rcx+rax+16], edx
$LN2@mouse_poll:
; Line 84
	mov	ecx, 15
	call	rxtstkey
	mov	DWORD PTR yscroll$[rsp], eax
; Line 86
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	edx, DWORD PTR yscroll$[rsp]
	cmp	DWORD PTR [rcx+rax+20], edx
	je	SHORT $LN3@mouse_poll
; Line 88
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	edx, DWORD PTR yscroll$[rsp]
	mov	DWORD PTR [rcx+rax+20], edx
; Line 89
	jmp	SHORT $LN4@mouse_poll
$LN3@mouse_poll:
; Line 91
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	DWORD PTR [rcx+rax+20], 0
$LN4@mouse_poll:
; Line 94
	mov	eax, DWORD PTR result$[rsp]
; Line 95
	add	rsp, 72					; 00000048H
	ret	0
mouse_poll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
tv77 = 8
tv78 = 16
x$ = 48
is_click_leave PROC
; File W:\cpp\void\e\mouse.cc
; Line 47
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	QWORD PTR tv77[rsp], rcx
	mov	edx, DWORD PTR x$[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv77[rsp]
	mov	eax, DWORD PTR [rdx+rax+8]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@is_click_l
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	QWORD PTR tv78[rsp], rcx
	mov	edx, DWORD PTR x$[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv78[rsp]
	mov	eax, DWORD PTR [rdx+rax+4]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN3@is_click_l
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@is_click_l
$LN3@is_click_l:
	mov	DWORD PTR tv76[rsp], 0
$LN4@is_click_l:
	mov	eax, DWORD PTR tv76[rsp]
	add	rsp, 40					; 00000028H
	ret	0
is_click_leave ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_thumb_offset$ = 48
tv136 = 52
is_active$ = 56
tv75 = 64
tv148 = 72
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
the_inner_rect$ = 208
$S33$ = 224
$S34$ = 240
the_thumb_rect$ = 256
__$ArrayPad$ = 272
rect$ = 320
label$ = 328
min$ = 336
max$ = 344
value$ = 352
slider_widget PROC
; File W:\cpp\void\e\rect.cc
; Line 305
$LN6:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 306
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S33$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S33$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S33$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S33$[rsp+12], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $S33$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	draw_rect
; Line 308
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r9d, 4
	mov	r8d, 4
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	rect_padd
	lea	rcx, QWORD PTR the_inner_rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 310
	mov	eax, DWORD PTR the_inner_rect$[rsp]
	mov	ecx, DWORD PTR the_inner_rect$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 16
	cvtsi2sd xmm0, eax
	movsd	QWORD PTR tv75[rsp], xmm0
	movsd	xmm2, QWORD PTR max$[rsp]
	movsd	xmm1, QWORD PTR min$[rsp]
	mov	rax, QWORD PTR value$[rsp]
	movsd	xmm0, QWORD PTR [rax]
	call	rxclamp
	movsd	xmm1, QWORD PTR tv75[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	xorps	xmm3, xmm3
	movsd	xmm2, QWORD PTR max$[rsp]
	movsd	xmm1, QWORD PTR min$[rsp]
	call	rxremix
	cvttsd2si eax, xmm0
	mov	DWORD PTR the_thumb_offset$[rsp], eax
; Line 315
	mov	eax, DWORD PTR the_inner_rect$[rsp]
	mov	ecx, DWORD PTR the_thumb_offset$[rsp]
	lea	eax, DWORD PTR [rax+rcx+16]
	mov	ecx, DWORD PTR the_thumb_offset$[rsp]
	mov	edx, DWORD PTR the_inner_rect$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR the_inner_rect$[rsp+12]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, DWORD PTR the_inner_rect$[rsp+4]
	mov	edx, ecx
	lea	rcx, QWORD PTR $T8[rsp]
	call	rect_by_xyxy
	lea	rcx, QWORD PTR the_thumb_rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 320
	xor	ecx, ecx
	call	mouse_is_key
	test	eax, eax
	je	SHORT $LN4@slider_wid
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR rx+44
	mov	edx, DWORD PTR rx+40
	lea	rcx, QWORD PTR $T4[rsp]
	call	rect_in_xy
	test	eax, eax
	je	SHORT $LN4@slider_wid
	mov	DWORD PTR tv136[rsp], 1
	jmp	SHORT $LN5@slider_wid
$LN4@slider_wid:
	mov	DWORD PTR tv136[rsp], 0
$LN5@slider_wid:
	mov	eax, DWORD PTR tv136[rsp]
	mov	DWORD PTR is_active$[rsp], eax
; Line 322
	cmp	DWORD PTR is_active$[rsp], 0
	je	SHORT $LN2@slider_wid
; Line 324
	cvtsi2sd xmm0, DWORD PTR the_inner_rect$[rsp+8]
	cvtsi2sd xmm1, DWORD PTR the_inner_rect$[rsp]
	cvtsi2sd xmm2, DWORD PTR rx+40
	movsd	QWORD PTR tv148[rsp], xmm2
	movsd	xmm3, QWORD PTR max$[rsp]
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	xmm3, QWORD PTR min$[rsp]
	movaps	xmm2, xmm0
	movsd	xmm0, QWORD PTR tv148[rsp]
	call	rxremix
	movsd	xmm2, QWORD PTR max$[rsp]
	movsd	xmm1, QWORD PTR min$[rsp]
	call	rxclamp
	mov	rax, QWORD PTR value$[rsp]
	movsd	QWORD PTR [rax], xmm0
$LN2@slider_wid:
; Line 329
	movss	xmm0, DWORD PTR __real@3e48c8c9
	movss	DWORD PTR $S34$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3e48c8c9
	movss	DWORD PTR $S34$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3e48c8c9
	movss	DWORD PTR $S34$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S34$[rsp+12], xmm0
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $S34$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR the_thumb_rect$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	draw_rect
; Line 331
	mov	eax, DWORD PTR is_active$[rsp]
; Line 332
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
slider_widget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tv73 = 40
$T1 = 48
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
$T6 = 128
$T7 = 144
$T8 = 160
$S30$ = 176
$S31$ = 192
$S32$ = 208
the_text_rect$ = 224
__$ArrayPad$ = 240
rect$ = 288
color$ = 296
string$ = 304
list_item_widget PROC
; File W:\cpp\void\e\rect.cc
; Line 288
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 289
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	set_clip_rect
; Line 291
	lea	rax, QWORD PTR the_text_rect$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
; Line 293
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S30$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S30$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S30$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S30$[rsp+12], xmm0
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $S30$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	draw_rect
; Line 295
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR rx+44
	mov	edx, DWORD PTR rx+40
	lea	rcx, QWORD PTR $T4[rsp]
	call	rect_in_xy
	test	eax, eax
	je	SHORT $LN3@list_item_
	xorps	xmm0, xmm0
	movss	DWORD PTR $S31$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S31$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S31$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S31$[rsp+12], xmm0
	lea	rax, QWORD PTR $S31$[rsp]
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN4@list_item_
$LN3@list_item_:
	mov	rax, QWORD PTR color$[rsp]
	mov	QWORD PTR tv73[rsp], rax
$LN4@list_item_:
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv73[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR the_text_rect$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T5[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR string$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	draw_text
; Line 298
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T7[rsp]
	call	is_click_leave_rect
	mov	DWORD PTR result$[rsp], eax
; Line 300
	mov	DWORD PTR $S32$[rsp], 0
	mov	DWORD PTR $S32$[rsp+4], 0
	mov	DWORD PTR $S32$[rsp+8], 65535		; 0000ffffH
	mov	DWORD PTR $S32$[rsp+12], 65535		; 0000ffffH
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $S32$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T8[rsp]
	call	set_clip_rect
; Line 301
	mov	eax, DWORD PTR result$[rsp]
; Line 302
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
list_item_widget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rxchr	PROC
; File W:\cpp\void\e\mouse.cc
; Line 43
	movsx	eax, WORD PTR rx+5769016
; Line 44
	ret	0
rxchr	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
rxtstkey PROC
; File W:\cpp\void\e\mouse.cc
; Line 37
	mov	DWORD PTR [rsp+8], ecx
; Line 38
	movsxd	rax, DWORD PTR x$[rsp]
	lea	rcx, OFFSET FLAT:rx+5769274
	movsx	eax, BYTE PTR [rcx+rax]
; Line 39
	ret	0
rxtstkey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
tv77 = 8
tv78 = 16
x$ = 48
is_click_enter PROC
; File W:\cpp\void\e\mouse.cc
; Line 50
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	QWORD PTR tv77[rsp], rcx
	mov	edx, DWORD PTR x$[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv77[rsp]
	mov	eax, DWORD PTR [rdx+rax+8]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN3@is_click_e
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	QWORD PTR tv78[rsp], rcx
	mov	edx, DWORD PTR x$[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv78[rsp]
	mov	eax, DWORD PTR [rdx+rax+4]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN3@is_click_e
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN4@is_click_e
$LN3@is_click_e:
	mov	DWORD PTR tv76[rsp], 0
$LN4@is_click_e:
	mov	eax, DWORD PTR tv76[rsp]
	add	rsp, 40					; 00000028H
	ret	0
is_click_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
rect$ = 80
cursor_in_rect PROC
; File W:\cpp\void\e\mouse.cc
; Line 53
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 54
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR rx+44
	mov	edx, DWORD PTR rx+40
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_in_xy
; Line 55
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cursor_in_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv184 = 48
is_over$ = 52
tv72 = 56
tv74 = 64
tv78 = 72
the_btn_text$ = 80
$T1 = 96
$T2 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 192
$T8 = 208
$T9 = 224
$T10 = 240
$T11 = 256
$T12 = 272
$T13 = 288
$T14 = 304
$T15 = 320
$T16 = 336
$T17 = 352
$T18 = 368
$T19 = 384
the_btn_text_rect$ = 400
$S29$ = 416
$S28$ = 432
$S27$ = 448
$S26$ = 464
$S25$ = 480
color$ = 496
the_text_rect$ = 512
the_btn_prnt_rect$ = 528
__$ArrayPad$ = 544
rect$ = 592
string$ = 600
is_on$ = 608
dropdown_widget PROC
; File W:\cpp\void\e\rect.cc
; Line 250
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 251
	lea	rax, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T8[rsp]
	call	set_clip_rect
; Line 253
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S25$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S25$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S25$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S25$[rsp+12], xmm0
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $S25$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	draw_rect
; Line 255
	lea	rax, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR rx+44
	mov	edx, DWORD PTR rx+40
	lea	rcx, QWORD PTR $T11[rsp]
	call	rect_in_xy
	mov	DWORD PTR is_over$[rsp], eax
; Line 257
	cmp	DWORD PTR is_over$[rsp], 0
	je	SHORT $LN6@dropdown_w
	xorps	xmm0, xmm0
	movss	DWORD PTR $S26$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S26$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S26$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S26$[rsp+12], xmm0
	lea	rax, QWORD PTR $S26$[rsp]
	mov	QWORD PTR tv74[rsp], rax
	jmp	$LN7@dropdown_w
$LN6@dropdown_w:
	mov	rax, QWORD PTR is_on$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN4@dropdown_w
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S27$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S27$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S27$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S27$[rsp+12], xmm0
	lea	rax, QWORD PTR $S27$[rsp]
	mov	QWORD PTR tv72[rsp], rax
	jmp	SHORT $LN5@dropdown_w
$LN4@dropdown_w:
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S28$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S28$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S28$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S28$[rsp+12], xmm0
	lea	rax, QWORD PTR $S28$[rsp]
	mov	QWORD PTR tv72[rsp], rax
$LN5@dropdown_w:
	mov	rax, QWORD PTR tv72[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN7@dropdown_w:
	lea	rax, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv74[rsp]
	mov	ecx, 16
	rep movsb
; Line 260
	lea	rax, QWORD PTR the_btn_prnt_rect$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
; Line 261
	mov	rax, QWORD PTR is_on$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN8@dropdown_w
	lea	rax, OFFSET FLAT:$SG140891
	mov	QWORD PTR tv78[rsp], rax
	jmp	SHORT $LN9@dropdown_w
$LN8@dropdown_w:
	lea	rax, OFFSET FLAT:$SG140892
	mov	QWORD PTR tv78[rsp], rax
$LN9@dropdown_w:
	mov	rax, QWORD PTR tv78[rsp]
	mov	QWORD PTR the_btn_text$[rsp], rax
; Line 263
	mov	rax, QWORD PTR the_btn_text$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T16[rsp]
	call	text_rect
	lea	rcx, QWORD PTR the_btn_text_rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 264
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR the_btn_text_rect$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR the_btn_text_rect$[rsp]
	mov	ecx, DWORD PTR the_btn_text_rect$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	xor	r8d, r8d
	lea	rdx, QWORD PTR the_btn_prnt_rect$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	rect_cut
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T7[rsp]
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	rect_center
	lea	rcx, QWORD PTR the_btn_text_rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 267
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR the_btn_text_rect$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T5[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR the_btn_text$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	draw_text
; Line 269
	mov	rax, QWORD PTR string$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T19[rsp]
	call	text_rect
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	rect_center
	lea	rcx, QWORD PTR the_text_rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 270
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR the_text_rect$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T1[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR string$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	draw_text
; Line 272
	lea	rax, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T13[rsp]
	call	is_click_leave_rect
	test	eax, eax
	je	SHORT $LN2@dropdown_w
; Line 274
	mov	rax, QWORD PTR is_on$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN10@dropdown_w
	mov	DWORD PTR tv184[rsp], 1
	jmp	SHORT $LN11@dropdown_w
$LN10@dropdown_w:
	mov	DWORD PTR tv184[rsp], 0
$LN11@dropdown_w:
	mov	rax, QWORD PTR is_on$[rsp]
	mov	ecx, DWORD PTR tv184[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@dropdown_w:
; Line 277
	mov	DWORD PTR $S29$[rsp], 0
	mov	DWORD PTR $S29$[rsp+4], 0
	mov	DWORD PTR $S29$[rsp+8], 65535		; 0000ffffH
	mov	DWORD PTR $S29$[rsp+12], 65535		; 0000ffffH
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $S29$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T14[rsp]
	call	set_clip_rect
; Line 279
	mov	rax, QWORD PTR is_on$[rsp]
	mov	eax, DWORD PTR [rax]
; Line 280
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
dropdown_widget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv193 = 48
is_over$ = 52
tv78 = 56
tv81 = 64
ts$1 = 72
tv169 = 80
$T2 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
$T10 = 224
$T11 = 240
$T12 = 256
$T13 = 272
$T14 = 288
$T15 = 304
$T16 = 320
$T17 = 336
$T18 = 352
$T19 = 368
$T20 = 384
q$ = 400
$S19$ = 416
$S20$21 = 432
$S21$22 = 448
$S22$23 = 464
$S23$24 = 480
$S24$ = 496
color$ = 512
r$ = 528
__$ArrayPad$ = 544
rect$ = 592
label$ = 600
is_on$ = 608
checkbox_widget PROC
; File W:\cpp\void\e\rect.cc
; Line 208
$LN12:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 209
	lea	rax, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T11[rsp]
	call	set_clip_rect
; Line 211
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S19$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S19$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S19$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S19$[rsp+12], xmm0
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $S19$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	draw_rect
; Line 213
	lea	rax, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR rx+44
	mov	edx, DWORD PTR rx+40
	lea	rcx, QWORD PTR $T14[rsp]
	call	rect_in_xy
	mov	DWORD PTR is_over$[rsp], eax
; Line 220
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r9d, 4
	mov	r8d, 4
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	rect_padd
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 223
	mov	rax, QWORD PTR is_on$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN4@checkbox_w
	xorps	xmm0, xmm0
	movss	DWORD PTR $S20$21[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S20$21[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S20$21[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S20$21[rsp+12], xmm0
	lea	rax, QWORD PTR $S20$21[rsp]
	mov	QWORD PTR tv78[rsp], rax
	jmp	SHORT $LN5@checkbox_w
$LN4@checkbox_w:
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S21$22[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S21$22[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S21$22[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S21$22[rsp+12], xmm0
	lea	rax, QWORD PTR $S21$22[rsp]
	mov	QWORD PTR tv78[rsp], rax
$LN5@checkbox_w:
	lea	rax, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv78[rsp]
	mov	ecx, 16
	rep movsb
; Line 225
	mov	rax, QWORD PTR is_on$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN6@checkbox_w
	lea	rax, OFFSET FLAT:$SG140864
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN7@checkbox_w
$LN6@checkbox_w:
	lea	rax, OFFSET FLAT:$SG140865
	mov	QWORD PTR tv81[rsp], rax
$LN7@checkbox_w:
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR ts$1[rsp], rax
; Line 227
	mov	rax, QWORD PTR ts$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T16[rsp]
	call	text_rect
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 228
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR q$[rsp]
	mov	ecx, DWORD PTR q$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, 1
	lea	rdx, QWORD PTR r$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	rect_cut
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	rect_center
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 229
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T5[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR ts$1[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	draw_text
; Line 232
	cmp	DWORD PTR is_over$[rsp], 0
	je	SHORT $LN8@checkbox_w
	xorps	xmm0, xmm0
	movss	DWORD PTR $S22$23[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S22$23[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S22$23[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S22$23[rsp+12], xmm0
	lea	rax, QWORD PTR $S22$23[rsp]
	mov	QWORD PTR tv169[rsp], rax
	jmp	SHORT $LN9@checkbox_w
$LN8@checkbox_w:
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S23$24[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S23$24[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S23$24[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S23$24[rsp+12], xmm0
	lea	rax, QWORD PTR $S23$24[rsp]
	mov	QWORD PTR tv169[rsp], rax
$LN9@checkbox_w:
	lea	rax, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv169[rsp]
	mov	ecx, 16
	rep movsb
; Line 234
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T19[rsp]
	call	text_rect
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 235
	mov	eax, DWORD PTR q$[rsp]
	mov	ecx, DWORD PTR q$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	xor	r8d, r8d
	lea	rdx, QWORD PTR r$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	rect_cut
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 236
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR color$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR q$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T7[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR label$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	draw_text
; Line 239
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T9[rsp]
	call	is_click_leave_rect
	test	eax, eax
	je	SHORT $LN2@checkbox_w
; Line 241
	mov	rax, QWORD PTR is_on$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN10@checkbox_w
	mov	DWORD PTR tv193[rsp], 1
	jmp	SHORT $LN11@checkbox_w
$LN10@checkbox_w:
	mov	DWORD PTR tv193[rsp], 0
$LN11@checkbox_w:
	mov	rax, QWORD PTR is_on$[rsp]
	mov	ecx, DWORD PTR tv193[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@checkbox_w:
; Line 244
	mov	DWORD PTR $S24$[rsp], 0
	mov	DWORD PTR $S24$[rsp+4], 0
	mov	DWORD PTR $S24$[rsp+8], 65535		; 0000ffffH
	mov	DWORD PTR $S24$[rsp+12], 65535		; 0000ffffH
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $S24$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T10[rsp]
	call	set_clip_rect
; Line 246
	mov	rax, QWORD PTR is_on$[rsp]
	mov	eax, DWORD PTR [rax]
; Line 247
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
checkbox_widget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv83 = 56
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
$T12 = 240
$S15$ = 256
$S16$ = 272
$S17$ = 288
$S18$ = 304
the_text_rect$ = 320
__$ArrayPad$ = 336
rect$ = 384
string$ = 392
button_widget PROC
; File W:\cpp\void\e\rect.cc
; Line 189
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 190
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	set_clip_rect
; Line 192
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S15$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S15$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3d909091
	movss	DWORD PTR $S15$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S15$[rsp+12], xmm0
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $S15$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	draw_rect
; Line 194
	mov	rax, QWORD PTR string$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	text_rect
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T4[rsp]
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	rect_center
	lea	rcx, QWORD PTR the_text_rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 197
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR rx+44
	mov	edx, DWORD PTR rx+40
	lea	rcx, QWORD PTR $T6[rsp]
	call	rect_in_xy
	test	eax, eax
	je	SHORT $LN3@button_wid
	xorps	xmm0, xmm0
	movss	DWORD PTR $S16$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S16$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S16$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S16$[rsp+12], xmm0
	lea	rax, QWORD PTR $S16$[rsp]
	mov	QWORD PTR tv83[rsp], rax
	jmp	SHORT $LN4@button_wid
$LN3@button_wid:
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S17$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S17$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f40c0c1
	movss	DWORD PTR $S17$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S17$[rsp+12], xmm0
	lea	rax, QWORD PTR $S17$[rsp]
	mov	QWORD PTR tv83[rsp], rax
$LN4@button_wid:
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv83[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR the_text_rect$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r9, QWORD PTR $T7[rsp]
	mov	r8d, 32					; 00000020H
	mov	rdx, QWORD PTR string$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	draw_text
; Line 201
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T9[rsp]
	call	is_click_leave_rect
	mov	DWORD PTR result$[rsp], eax
; Line 203
	mov	DWORD PTR $S18$[rsp], 0
	mov	DWORD PTR $S18$[rsp+4], 0
	mov	DWORD PTR $S18$[rsp+8], 65535		; 0000ffffH
	mov	DWORD PTR $S18$[rsp+12], 65535		; 0000ffffH
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $S18$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T10[rsp]
	call	set_clip_rect
; Line 204
	mov	eax, DWORD PTR result$[rsp]
; Line 205
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
button_widget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rect$ = 48
set_clip_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 183
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 184
	mov	rax, QWORD PTR rect$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	rax, QWORD PTR rect$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	rxclip
; Line 186
	add	rsp, 40					; 00000028H
	ret	0
set_clip_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
rect$ = 96
text$ = 104
size$ = 112
color$ = 120
draw_text PROC
; File W:\cpp\void\e\rect.cc
; Line 178
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 179
	mov	rcx, QWORD PTR text$[rsp]
	call	strlen
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rcx, QWORD PTR text$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR size$[rsp]
	mov	rax, QWORD PTR rect$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxdraw_text_ex
; Line 180
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
draw_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 48
$T1 = 64
rect$ = 112
color$ = 120
draw_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 170
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 171
	mov	rax, QWORD PTR rect$[rsp]
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	cvtsi2ss xmm0, eax
	mov	rax, QWORD PTR rect$[rsp]
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	cvtsi2ss xmm1, eax
	mov	rax, QWORD PTR rect$[rsp]
	cvtsi2ss xmm2, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rect$[rsp]
	cvtsi2ss xmm3, DWORD PTR [rax]
	movss	DWORD PTR tv78[rsp], xmm3
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	movss	DWORD PTR [rsp+32], xmm0
	movaps	xmm3, xmm1
	movss	xmm0, DWORD PTR tv78[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxdraw_rect
; Line 175
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
draw_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
rect$ = 64
__$ArrayPad$ = 80
__$ReturnAddress$ = 128
get_window_client_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 163
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 165
	mov	eax, DWORD PTR rx+5768988
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR rx+5768984
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_size
	lea	rcx, QWORD PTR rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 166
	lea	rax, QWORD PTR rect$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 167
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
get_window_client_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
wnd_rect$ = 64
rect$ = 80
__$ArrayPad$ = 96
__$ReturnAddress$ = 144
get_window_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 150
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 152
	lea	rdx, QWORD PTR wnd_rect$[rsp]
	mov	rcx, QWORD PTR rx+5768976
	call	QWORD PTR __imp_GetWindowRect
; Line 155
	mov	eax, DWORD PTR wnd_rect$[rsp+12]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR wnd_rect$[rsp+8]
	mov	r8d, DWORD PTR wnd_rect$[rsp+4]
	mov	edx, DWORD PTR wnd_rect$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_xyxy
	lea	rcx, QWORD PTR rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 159
	lea	rax, QWORD PTR rect$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 160
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
get_window_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
$T1 = 56
rect$ = 72
__$ArrayPad$ = 88
__$ReturnAddress$ = 128
get_monitor_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 142
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 143
	mov	ecx, 1
	call	QWORD PTR __imp_GetSystemMetrics
	mov	DWORD PTR tv65[rsp], eax
	xor	ecx, ecx
	call	QWORD PTR __imp_GetSystemMetrics
	mov	ecx, DWORD PTR tv65[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_size
	lea	rcx, QWORD PTR rect$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 146
	lea	rax, QWORD PTR rect$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 147
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
get_monitor_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
wnd$ = 80
rect$ = 88
set_window_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 137
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 138
	mov	DWORD PTR [rsp+48], 1
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	rax, QWORD PTR rect$[rsp]
	mov	r9d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rect$[rsp]
	mov	r8d, DWORD PTR [rax]
	xor	edx, edx
	mov	rcx, QWORD PTR wnd$[rsp]
	call	QWORD PTR __imp_SetWindowPos
; Line 139
	add	rsp, 72					; 00000048H
	ret	0
set_window_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
result$ = 64
__$ArrayPad$ = 80
__$ReturnAddress$ = 128
x0$ = 136
y0$ = 144
height$ = 152
string$ = 160
text_rect PROC
; File W:\cpp\void\e\rect.cc
; Line 129
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 130
	cvtsi2ss xmm0, DWORD PTR height$[rsp]
	mov	rdx, QWORD PTR string$[rsp]
	call	rxdraw_text_length
	cvttss2si eax, xmm0
	mov	ecx, DWORD PTR height$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR y0$[rsp]
	mov	edx, DWORD PTR x0$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_size
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 133
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 134
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
text_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
$T1 = 56
__$ReturnAddress$ = 112
rect$ = 120
xpadd$ = 128
ypadd$ = 136
rect_padd PROC
; File W:\cpp\void\e\rect.cc
; Line 119
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 120
	mov	eax, DWORD PTR ypadd$[rsp]
	sar	eax, 1
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR xpadd$[rsp]
	sar	ecx, 1
	mov	rdx, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR ypadd$[rsp]
	sar	edx, 1
	mov	r8, QWORD PTR rect$[rsp]
	add	edx, DWORD PTR [r8+4]
	mov	r8d, DWORD PTR xpadd$[rsp]
	sar	r8d, 1
	mov	r9, QWORD PTR rect$[rsp]
	add	r8d, DWORD PTR [r9]
	mov	DWORD PTR tv79[rsp], r8d
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, edx
	mov	eax, DWORD PTR tv79[rsp]
	mov	edx, eax
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_xyxy
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 126
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rect_padd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
parent$ = 72
child$ = 80
rect_center PROC
; File W:\cpp\void\e\rect.cc
; Line 108
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 110
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	sar	eax, 1
	mov	rcx, QWORD PTR parent$[rsp]
	mov	ecx, DWORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR child$[rsp]
	mov	rdx, QWORD PTR child$[rsp]
	mov	edx, DWORD PTR [rdx]
	mov	ecx, DWORD PTR [rcx+8]
	sub	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR result$[rsp], eax
; Line 111
	mov	rax, QWORD PTR parent$[rsp]
	mov	rcx, QWORD PTR parent$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	sar	eax, 1
	mov	rcx, QWORD PTR parent$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR child$[rsp]
	mov	rdx, QWORD PTR child$[rsp]
	mov	edx, DWORD PTR [rdx+4]
	mov	ecx, DWORD PTR [rcx+12]
	sub	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	mov	DWORD PTR result$[rsp+4], eax
; Line 112
	mov	rax, QWORD PTR child$[rsp]
	mov	rcx, QWORD PTR child$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	ecx, DWORD PTR result$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR result$[rsp+8], eax
; Line 113
	mov	rax, QWORD PTR child$[rsp]
	mov	rcx, QWORD PTR child$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	ecx, DWORD PTR result$[rsp+4]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR result$[rsp+12], eax
; Line 114
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 115
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rect_center ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
$T1 = 56
$T2 = 72
$T3 = 88
$T4 = 104
$T5 = 120
result$ = 136
__$ArrayPad$ = 152
__$ReturnAddress$ = 192
rect$ = 200
mode$ = 208
size$ = 216
rect_cut PROC
; File W:\cpp\void\e\rect.cc
; Line 83
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 84
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_size
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 85
	mov	eax, DWORD PTR mode$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	cmp	DWORD PTR tv71[rsp], 0
	je	$LN7@rect_cut
	cmp	DWORD PTR tv71[rsp], 1
	je	$LN6@rect_cut
	cmp	DWORD PTR tv71[rsp], 2
	je	SHORT $LN4@rect_cut
	cmp	DWORD PTR tv71[rsp], 3
	je	$LN5@rect_cut
	jmp	$LN2@rect_cut
$LN4@rect_cut:
; Line 87
	mov	rax, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR rect$[rsp]
	mov	r9d, DWORD PTR [rcx+8]
	mov	r8d, eax
	mov	rax, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rect_by_xyxy
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 88
	mov	rax, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR rect$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 89
	jmp	$LN2@rect_cut
$LN5@rect_cut:
; Line 91
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR rect$[rsp]
	mov	r9d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR rect$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	rect_by_xyxy
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 92
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR rect$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 93
	jmp	$LN2@rect_cut
$LN6@rect_cut:
; Line 95
	mov	rax, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR rect$[rsp]
	mov	r9d, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR rect$[rsp]
	mov	r8d, DWORD PTR [rcx+4]
	mov	edx, eax
	lea	rcx, QWORD PTR $T4[rsp]
	call	rect_by_xyxy
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 96
	mov	rax, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR size$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR rect$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 97
	jmp	SHORT $LN2@rect_cut
$LN7@rect_cut:
; Line 99
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR rect$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	rax, QWORD PTR rect$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR rect$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T5[rsp]
	call	rect_by_xyxy
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 100
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR rect$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@rect_cut:
; Line 103
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 104
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
rect_cut ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 0
rect$ = 32
x$ = 40
y$ = 48
rect_in_xy PROC
; File W:\cpp\void\e\rect.cc
; Line 74
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 75
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR x$[rsp], eax
	jl	SHORT $LN3@rect_in_xy
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR y$[rsp], eax
	jl	SHORT $LN3@rect_in_xy
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN4@rect_in_xy
	mov	rax, QWORD PTR rect$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR y$[rsp], eax
	jge	SHORT $LN4@rect_in_xy
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN5@rect_in_xy
$LN3@rect_in_xy:
$LN4@rect_in_xy:
	mov	DWORD PTR tv72[rsp], 0
$LN5@rect_in_xy:
	mov	eax, DWORD PTR tv72[rsp]
; Line 78
	add	rsp, 24
	ret	0
rect_in_xy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
__$ReturnAddress$ = 96
x$ = 104
y$ = 112
xx$ = 120
yy$ = 128
rect_by_size PROC
; File W:\cpp\void\e\rect.cc
; Line 67
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 68
	mov	eax, DWORD PTR yy$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR xx$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rect_by_xyxy
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 69
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rect_by_size ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
$T4 = 144
rect$ = 176
__$ArrayPad$ = 192
__$ReturnAddress$ = 240
x0$ = 248
y0$ = 256
x1$ = 264
y1$ = 272
rect_by_xyxy PROC
; File W:\cpp\void\e\rect.cc
; Line 54
$LN11:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 56
	mov	eax, DWORD PTR x0$[rsp]
	mov	DWORD PTR rect$[rsp], eax
	mov	eax, DWORD PTR x1$[rsp]
	mov	DWORD PTR rect$[rsp+8], eax
; Line 57
	mov	eax, DWORD PTR y0$[rsp]
	mov	DWORD PTR rect$[rsp+4], eax
	mov	eax, DWORD PTR y1$[rsp]
	mov	DWORD PTR rect$[rsp+12], eax
$LN4@rect_by_xy:
; Line 59
	mov	eax, DWORD PTR x1$[rsp]
	cmp	DWORD PTR x0$[rsp], eax
	jle	SHORT $LN8@rect_by_xy
	lea	rax, OFFSET FLAT:$SG140720
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:$SG140721
	mov	edx, 210				; 000000d2H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG140718
	lea	rdx, OFFSET FLAT:$SG140719
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN8@rect_by_xy:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rect_by_xy
$LN7@rect_by_xy:
; Line 60
	mov	eax, DWORD PTR y1$[rsp]
	cmp	DWORD PTR y0$[rsp], eax
	jle	SHORT $LN9@rect_by_xy
	lea	rax, OFFSET FLAT:$SG140725
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 60					; 0000003cH
	lea	r8, OFFSET FLAT:$SG140726
	mov	edx, 211				; 000000d3H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG140723
	lea	rdx, OFFSET FLAT:$SG140724
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN9@rect_by_xy:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rect_by_xy
; Line 61
	lea	rax, QWORD PTR rect$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 62
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
rect_by_xyxy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 0
tv71 = 8
x$ = 32
mouse_is_key PROC
; File W:\cpp\void\e\mouse.cc
; Line 32
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 33
	mov	eax, 36					; 00000024H
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+48
	mov	QWORD PTR tv71[rsp], rcx
	mov	edx, DWORD PTR x$[rsp]
	mov	r8d, 1
	movzx	ecx, dl
	mov	edx, r8d
	shl	edx, cl
	mov	ecx, edx
	mov	rdx, QWORD PTR tv71[rsp]
	mov	eax, DWORD PTR [rdx+rax+8]
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN3@mouse_is_k
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@mouse_is_k
$LN3@mouse_is_k:
	mov	DWORD PTR tv70[rsp], 0
$LN4@mouse_is_k:
	mov	eax, DWORD PTR tv70[rsp]
; Line 34
	add	rsp, 24
	ret	0
mouse_is_key ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
$T1 = 48
rect$ = 96
is_click_enter_rect PROC
; File W:\cpp\void\e\mouse.cc
; Line 63
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 64
	xor	ecx, ecx
	call	is_click_enter
	test	eax, eax
	je	SHORT $LN3@is_click_e
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	cursor_in_rect
	test	eax, eax
	je	SHORT $LN3@is_click_e
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@is_click_e
$LN3@is_click_e:
	mov	DWORD PTR tv70[rsp], 0
$LN4@is_click_e:
	mov	eax, DWORD PTR tv70[rsp]
; Line 65
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
is_click_enter_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
$T1 = 48
rect$ = 96
is_click_leave_rect PROC
; File W:\cpp\void\e\mouse.cc
; Line 58
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 59
	xor	ecx, ecx
	call	is_click_leave
	test	eax, eax
	je	SHORT $LN3@is_click_l
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR rect$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	cursor_in_rect
	test	eax, eax
	je	SHORT $LN3@is_click_l
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@is_click_l
$LN3@is_click_l:
	mov	DWORD PTR tv70[rsp], 0
$LN4@is_click_l:
	mov	eax, DWORD PTR tv70[rsp]
; Line 60
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
is_click_leave_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bp$1 = 0
bitrow$2 = 4
$S14$3 = 8
y$4 = 12
x$5 = 16
color$6 = 24
memory$ = 48
stride$ = 56
source$ = 64
load_bitmap8 PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1800
$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1801
	mov	DWORD PTR y$4[rsp], 0
	jmp	SHORT $LN4@load_bitma
$LN2@load_bitma:
	mov	eax, DWORD PTR y$4[rsp]
	inc	eax
	mov	DWORD PTR y$4[rsp], eax
$LN4@load_bitma:
	cmp	DWORD PTR y$4[rsp], 16
	jge	$LN3@load_bitma
; Line 1802
	mov	rax, QWORD PTR source$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR bitrow$2[rsp], ax
	mov	rax, QWORD PTR source$[rsp]
	inc	rax
	mov	QWORD PTR source$[rsp], rax
; Line 1804
	mov	rax, QWORD PTR memory$[rsp]
	mov	QWORD PTR color$6[rsp], rax
; Line 1806
	mov	DWORD PTR x$5[rsp], 0
	jmp	SHORT $LN7@load_bitma
$LN5@load_bitma:
	mov	eax, DWORD PTR x$5[rsp]
	inc	eax
	mov	DWORD PTR x$5[rsp], eax
$LN7@load_bitma:
	cmp	DWORD PTR x$5[rsp], 8
	jge	SHORT $LN6@load_bitma
; Line 1809
	movzx	eax, WORD PTR bitrow$2[rsp]
	and	eax, 1
	imul	eax, eax, 255				; 000000ffH
	mov	BYTE PTR bp$1[rsp], al
; Line 1811
	movzx	eax, BYTE PTR bp$1[rsp]
	mov	BYTE PTR $S14$3[rsp], al
	movzx	eax, BYTE PTR bp$1[rsp]
	mov	BYTE PTR $S14$3[rsp+1], al
	movzx	eax, BYTE PTR bp$1[rsp]
	mov	BYTE PTR $S14$3[rsp+2], al
	movzx	eax, BYTE PTR bp$1[rsp]
	mov	BYTE PTR $S14$3[rsp+3], al
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR color$6[rsp]
	mov	edx, DWORD PTR $S14$3[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 1813
	mov	rax, QWORD PTR color$6[rsp]
	add	rax, 4
	mov	QWORD PTR color$6[rsp], rax
; Line 1814
	movzx	eax, WORD PTR bitrow$2[rsp]
	shr	ax, 1
	mov	WORD PTR bitrow$2[rsp], ax
; Line 1815
	jmp	SHORT $LN5@load_bitma
$LN6@load_bitma:
; Line 1816
	movsxd	rax, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR memory$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR memory$[rsp], rax
; Line 1817
	jmp	$LN2@load_bitma
$LN3@load_bitma:
; Line 1818
	add	rsp, 40					; 00000028H
	ret	0
load_bitmap8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 80
DriverModeFlags$ = 84
DXGIAdapter$2 = 88
DXGIDevice$3 = 96
DXGIFactory$4 = 104
DriverSelectedFeatureLevel$ = 112
User32$ = 120
RenderBuffer$5 = 128
XXX$ = 136
YYY$ = 144
RenderBufferView$6 = 152
RenderTargetViewInfo$7 = 160
t$ = 184
$T8 = 208
$T9 = 240
$T10 = 272
$T11 = 304
$T12 = 328
$T13 = 352
$T14 = 376
$T15 = 400
RootClip$ = 432
RasterizerInfo$ = 448
SwapchainInfo$16 = 488
the_stencil_texture_info$ = 536
SwapchainFullscreenInfo$17 = 584
SamplerInfo$ = 608
BlendStateInfo$ = 672
DriverFeatureMenu$ = 944
__$ArrayPad$ = 960
window_title$ = 1008
rxinit	PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1541
$LN17:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 984				; 000003d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1543
	call	ccinit
; Line 1547
	mov	DWORD PTR DriverModeFlags$[rsp], 35	; 00000023H
; Line 1550
	mov	DWORD PTR DriverFeatureMenu$[rsp], 45312 ; 0000b100H
	mov	DWORD PTR DriverFeatureMenu$[rsp+4], 45056 ; 0000b000H
	mov	DWORD PTR DriverFeatureMenu$[rsp+8], 41216 ; 0000a100H
	mov	DWORD PTR DriverFeatureMenu$[rsp+12], 40960 ; 0000a000H
; Line 1556
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR DriverFeatureMenu$[rsp+rax]
	lea	rcx, OFFSET FLAT:rx+5769552
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR DriverSelectedFeatureLevel$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:rx+5769544
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR DriverModeFlags$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jge	SHORT $LN9@rxinit
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR DriverFeatureMenu$[rsp+rax]
	lea	rcx, OFFSET FLAT:rx+5769552
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR DriverSelectedFeatureLevel$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:rx+5769544
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR DriverModeFlags$[rsp]
	xor	r8d, r8d
	mov	edx, 5
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jl	$LN8@rxinit
$LN9@rxinit:
; Line 1559
	mov	eax, DWORD PTR DriverModeFlags$[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN10@rxinit
; Line 1560
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5769536
	lea	rdx, OFFSET FLAT:IID_ID3D11InfoQueue
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN11@rxinit
; Line 1561
	mov	rax, QWORD PTR rx+5769536
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769536
	call	QWORD PTR [rax+248]
; Line 1562
	mov	rax, QWORD PTR rx+5769536
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5769536
	call	QWORD PTR [rax+248]
; Line 1563
	mov	rax, QWORD PTR rx+5769536
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	edx, 2
	mov	rcx, QWORD PTR rx+5769536
	call	QWORD PTR [rax+248]
$LN11@rxinit:
$LN10@rxinit:
$LN8@rxinit:
; Line 1568
	mov	rcx, QWORD PTR window_title$[rsp]
	call	rxwindow_create
; Line 1570
	mov	edx, 32512				; 00007f00H
	xor	ecx, ecx
	call	QWORD PTR __imp_LoadCursorA
	mov	QWORD PTR rx, rax
; Line 1571
	mov	rcx, QWORD PTR rx
	call	QWORD PTR __imp_SetCursor
; Line 1575
	lea	rcx, OFFSET FLAT:$SG139741
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR User32$[rsp], rax
; Line 1576
	lea	rdx, OFFSET FLAT:$SG139742
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR XXX$[rsp], rax
; Line 1577
	lea	rdx, OFFSET FLAT:$SG139743
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR YYY$[rsp], rax
; Line 1579
	cmp	QWORD PTR XXX$[rsp], 0
	je	SHORT $LN12@rxinit
	mov	rcx, -3
	call	QWORD PTR XXX$[rsp]
	jmp	SHORT $LN13@rxinit
$LN12@rxinit:
; Line 1581
	cmp	QWORD PTR YYY$[rsp], 0
	je	SHORT $LN14@rxinit
	call	QWORD PTR YYY$[rsp]
$LN14@rxinit:
$LN13@rxinit:
; Line 1583
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_FreeLibrary
; Line 1586
	call	rxwindow_poll
; Line 1592
	mov	QWORD PTR DXGIFactory$4[rsp], 0
; Line 1593
	mov	QWORD PTR DXGIDevice$3[rsp], 0
; Line 1594
	mov	QWORD PTR DXGIAdapter$2[rsp], 0
; Line 1595
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR DXGIDevice$3[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIDevice
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax]
; Line 1596
	mov	rax, QWORD PTR DXGIDevice$3[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR DXGIAdapter$2[rsp]
	mov	rcx, QWORD PTR DXGIDevice$3[rsp]
	call	QWORD PTR [rax+56]
; Line 1597
	mov	rax, QWORD PTR DXGIAdapter$2[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR DXGIFactory$4[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIFactory2
	mov	rcx, QWORD PTR DXGIAdapter$2[rsp]
	call	QWORD PTR [rax+48]
; Line 1598
	mov	rax, QWORD PTR DXGIAdapter$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR DXGIAdapter$2[rsp]
	call	QWORD PTR [rax+16]
; Line 1599
	mov	rax, QWORD PTR DXGIDevice$3[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR DXGIDevice$3[rsp]
	call	QWORD PTR [rax+16]
; Line 1603
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	lea	rcx, QWORD PTR SwapchainInfo$16[rsp]
	call	memset
; Line 1604
	mov	eax, DWORD PTR rx+5768984
	mov	DWORD PTR SwapchainInfo$16[rsp], eax
; Line 1605
	mov	eax, DWORD PTR rx+5768988
	mov	DWORD PTR SwapchainInfo$16[rsp+4], eax
; Line 1606
	mov	DWORD PTR SwapchainInfo$16[rsp+8], 28
; Line 1607
	mov	DWORD PTR SwapchainInfo$16[rsp+24], 32	; 00000020H
; Line 1608
	mov	DWORD PTR SwapchainInfo$16[rsp+28], 2
; Line 1609
	mov	DWORD PTR SwapchainInfo$16[rsp+36], 3
; Line 1610
	mov	DWORD PTR SwapchainInfo$16[rsp+44], 66	; 00000042H
; Line 1611
	mov	DWORD PTR SwapchainInfo$16[rsp+16], 1
; Line 1612
	mov	DWORD PTR SwapchainInfo$16[rsp+20], 0
; Line 1616
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR SwapchainFullscreenInfo$17[rsp]
	call	memset
; Line 1617
	mov	DWORD PTR SwapchainFullscreenInfo$17[rsp], 1
; Line 1618
	mov	DWORD PTR SwapchainFullscreenInfo$17[rsp+4], 1
; Line 1619
	mov	DWORD PTR SwapchainFullscreenInfo$17[rsp+16], 1
; Line 1624
	mov	rax, QWORD PTR DXGIFactory$4[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:rx+5769560
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], 0
	lea	rcx, QWORD PTR SwapchainFullscreenInfo$17[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, QWORD PTR SwapchainInfo$16[rsp]
	mov	r8, QWORD PTR rx+5768976
	mov	rdx, QWORD PTR rx+5769544
	mov	rcx, QWORD PTR DXGIFactory$4[rsp]
	call	QWORD PTR [rax+120]
; Line 1627
	mov	rax, QWORD PTR rx+5769560
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR rx+5769560
	call	QWORD PTR [rax+264]
	mov	QWORD PTR rx+5769568, rax
; Line 1628
	mov	rax, QWORD PTR rx+5769560
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR RenderBuffer$5[rsp]
	lea	r8, OFFSET FLAT:IID_ID3D11Texture2D
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769560
	call	QWORD PTR [rax+72]
; Line 1629
	mov	rax, QWORD PTR DXGIFactory$4[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR DXGIFactory$4[rsp]
	call	QWORD PTR [rax+16]
; Line 1632
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR RenderTargetViewInfo$7[rsp]
	call	memset
; Line 1633
	mov	DWORD PTR RenderTargetViewInfo$7[rsp], 0
; Line 1634
	mov	DWORD PTR RenderTargetViewInfo$7[rsp+4], 4
; Line 1635
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR RenderBufferView$6[rsp]
	lea	r8, QWORD PTR RenderTargetViewInfo$7[rsp]
	mov	rdx, QWORD PTR RenderBuffer$5[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+72]
; Line 1637
	mov	rcx, QWORD PTR RenderBuffer$5[rsp]
	call	rxarticle_create
	mov	r8, QWORD PTR RenderBufferView$6[rsp]
	mov	edx, 1
	mov	rcx, rax
	call	rxarticle_attach
; Line 1641
	mov	eax, DWORD PTR SwapchainInfo$16[rsp]
	mov	DWORD PTR rx+5768576, eax
; Line 1642
	mov	eax, DWORD PTR SwapchainInfo$16[rsp+4]
	mov	DWORD PTR rx+5768580, eax
; Line 1643
	mov	eax, DWORD PTR SwapchainInfo$16[rsp+8]
	mov	DWORD PTR rx+5768584, eax
; Line 1644
	mov	rax, QWORD PTR RenderBuffer$5[rsp]
	mov	QWORD PTR rx+5768568, rax
; Line 1649
	mov	r9d, DWORD PTR rx+5768584
	mov	r8d, DWORD PTR rx+5768580
	mov	edx, DWORD PTR rx+5768576
	lea	rcx, QWORD PTR $T11[rsp]
	call	rxcreate_render_target
	lea	rcx, OFFSET FLAT:rx+5768592
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1652
	mov	r9d, DWORD PTR rx+5768584
	mov	r8d, DWORD PTR rx+5768580
	mov	edx, DWORD PTR rx+5768576
	lea	rcx, QWORD PTR $T12[rsp]
	call	rxcreate_render_target
	lea	rcx, OFFSET FLAT:rx+5768616
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1656
	lea	rdx, OFFSET FLAT:$SG139747
	lea	rcx, OFFSET FLAT:$SG139748
	call	rxload_vertex_shader
	mov	QWORD PTR rx+5768656, rax
; Line 1657
	lea	rdx, OFFSET FLAT:$SG139749
	lea	rcx, OFFSET FLAT:$SG139750
	call	rxload_pixel_shader
	mov	QWORD PTR rx+5768664, rax
; Line 1659
	lea	r8, OFFSET FLAT:rx_vs_shader_bytecode
	mov	edx, 588				; 0000024cH
	mov	ecx, 3
	call	rxcreate_shader
	mov	QWORD PTR rx+5769632, rax
; Line 1661
	lea	r8, OFFSET FLAT:rx_ps_shader_bytecode
	mov	edx, 380				; 0000017cH
	mov	ecx, 2
	call	rxcreate_shader
	mov	QWORD PTR rx+5769640, rax
; Line 1664
	xor	edx, edx
	mov	ecx, 112				; 00000070H
	call	rxuniform_buffer_create
	mov	QWORD PTR rx+1240, rax
; Line 1665
	mov	edx, 524288				; 00080000H
	mov	ecx, 4
	call	rxcreate_index_buffer
	mov	QWORD PTR rx+1256, rax
; Line 1666
	mov	edx, 524288				; 00080000H
	mov	ecx, 40					; 00000028H
	call	rxcreate_vertex_buffer
	mov	QWORD PTR rx+1248, rax
; Line 1673
	mov	DWORD PTR rx+5768720, 16
; Line 1674
	mov	DWORD PTR rx+5768672, 256		; 00000100H
; Line 1676
	movsxd	rax, DWORD PTR rx+5768720
	mov	rdx, rax
	mov	ecx, 56					; 00000038H
	call	rxcreate_struct_buffer
	mov	QWORD PTR rx+5768752, rax
; Line 1679
	movsxd	rax, DWORD PTR rx+5768672
	mov	rdx, rax
	mov	ecx, 16
	call	rxcreate_struct_buffer
	mov	QWORD PTR rx+5768704, rax
; Line 1684
	mov	edx, 1
	mov	ecx, 1
	call	rxcreate_simple_stencil_state_d3d
	mov	QWORD PTR rx+5769576, rax
; Line 1685
	xor	edx, edx
	xor	ecx, ecx
	call	rxcreate_simple_stencil_state_d3d
	mov	QWORD PTR rx+5769584, rax
; Line 1688
	mov	eax, DWORD PTR rx+5768984
	mov	DWORD PTR the_stencil_texture_info$[rsp], eax
; Line 1689
	mov	eax, DWORD PTR rx+5768988
	mov	DWORD PTR the_stencil_texture_info$[rsp+4], eax
; Line 1690
	mov	DWORD PTR the_stencil_texture_info$[rsp+8], 1
; Line 1691
	mov	DWORD PTR the_stencil_texture_info$[rsp+12], 1
; Line 1692
	mov	DWORD PTR the_stencil_texture_info$[rsp+16], 40 ; 00000028H
; Line 1693
	mov	DWORD PTR the_stencil_texture_info$[rsp+28], 0
; Line 1694
	mov	DWORD PTR the_stencil_texture_info$[rsp+32], 64 ; 00000040H
; Line 1695
	mov	DWORD PTR the_stencil_texture_info$[rsp+36], 0
; Line 1696
	mov	DWORD PTR the_stencil_texture_info$[rsp+40], 0
; Line 1697
	mov	DWORD PTR the_stencil_texture_info$[rsp+20], 1
; Line 1698
	mov	DWORD PTR the_stencil_texture_info$[rsp+24], 0
; Line 1699
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5769600
	xor	r8d, r8d
	lea	rdx, QWORD PTR the_stencil_texture_info$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+40]
; Line 1701
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5769608
	xor	r8d, r8d
	mov	rdx, QWORD PTR rx+5769600
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+80]
$LN4@rxinit:
; Line 1704
	cmp	QWORD PTR rx+5769608, 0
	jne	SHORT $LN15@rxinit
	lea	rax, OFFSET FLAT:$SG139754
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1704				; 000006a8H
	lea	r8, OFFSET FLAT:$SG139755
	mov	edx, 209				; 000000d1H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139752
	lea	rdx, OFFSET FLAT:$SG139753
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
	int	3
$LN15@rxinit:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxinit
; Line 1708
	mov	r8d, 40					; 00000028H
	xor	edx, edx
	lea	rcx, QWORD PTR RasterizerInfo$[rsp]
	call	memset
; Line 1709
	mov	DWORD PTR RasterizerInfo$[rsp], 3
; Line 1710
	mov	DWORD PTR RasterizerInfo$[rsp+4], 1
; Line 1711
	mov	DWORD PTR RasterizerInfo$[rsp+8], 0
; Line 1712
	mov	DWORD PTR RasterizerInfo$[rsp+12], 0
; Line 1713
	xorps	xmm0, xmm0
	movss	DWORD PTR RasterizerInfo$[rsp+16], xmm0
; Line 1714
	xorps	xmm0, xmm0
	movss	DWORD PTR RasterizerInfo$[rsp+20], xmm0
; Line 1715
	mov	DWORD PTR RasterizerInfo$[rsp+24], 0
; Line 1716
	mov	DWORD PTR RasterizerInfo$[rsp+28], 1
; Line 1717
	mov	DWORD PTR RasterizerInfo$[rsp+32], 0
; Line 1718
	mov	DWORD PTR RasterizerInfo$[rsp+36], 0
; Line 1719
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5769616
	lea	rdx, QWORD PTR RasterizerInfo$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+176]
; Line 1722
	mov	r8d, 264				; 00000108H
	xor	edx, edx
	lea	rcx, QWORD PTR BlendStateInfo$[rsp]
	call	memset
; Line 1723
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN7@rxinit
$LN5@rxinit:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN7@rxinit:
	cmp	DWORD PTR I$1[rsp], 1
	jge	$LN6@rxinit
; Line 1725
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+8], 1
; Line 1726
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+12], 5
; Line 1727
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+16], 6
; Line 1728
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+20], 1
; Line 1730
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+24], 1
; Line 1731
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+28], 1
; Line 1732
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	DWORD PTR BlendStateInfo$[rsp+rax+32], 1
; Line 1733
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	BYTE PTR BlendStateInfo$[rsp+rax+36], 15
; Line 1734
	jmp	$LN5@rxinit
$LN6@rxinit:
; Line 1735
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5769624
	lea	rdx, QWORD PTR BlendStateInfo$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+160]
; Line 1752
	mov	r8d, 52					; 00000034H
	xor	edx, edx
	lea	rcx, QWORD PTR SamplerInfo$[rsp]
	call	memset
; Line 1753
	mov	DWORD PTR SamplerInfo$[rsp+4], 1
; Line 1754
	mov	DWORD PTR SamplerInfo$[rsp+8], 1
; Line 1755
	mov	DWORD PTR SamplerInfo$[rsp+12], 1
; Line 1757
	mov	DWORD PTR SamplerInfo$[rsp], 21
; Line 1758
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5769648
	lea	rdx, QWORD PTR SamplerInfo$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+184]
; Line 1760
	mov	DWORD PTR SamplerInfo$[rsp], 0
; Line 1761
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:rx+5769656
	lea	rdx, QWORD PTR SamplerInfo$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+184]
; Line 1763
	call	rxrestore_render_stack
; Line 1767
	mov	DWORD PTR RootClip$[rsp], 0
; Line 1768
	mov	DWORD PTR RootClip$[rsp+4], 0
; Line 1769
	mov	DWORD PTR RootClip$[rsp+8], 16777215	; 00ffffffH
; Line 1770
	mov	DWORD PTR RootClip$[rsp+12], 16777215	; 00ffffffH
; Line 1771
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR RootClip$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+360]
; Line 1773
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3e4ccccd
	movss	xmm1, DWORD PTR __real@3e4ccccd
	movss	xmm0, DWORD PTR __real@3e4ccccd
	call	rxclear
; Line 1775
	mov	r9d, 28
	mov	r8d, 16
	mov	edx, 16
	lea	rcx, QWORD PTR $T13[rsp]
	call	rxtexture_create
	lea	rcx, OFFSET FLAT:rx+5769664
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1777
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, OFFSET FLAT:rx+5769664
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	call	rxtexture_borrow
	lea	rcx, QWORD PTR t$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1778
	mov	eax, DWORD PTR t$[rsp+16]
	imul	eax, DWORD PTR rx+5769676
	cdqe
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR t$[rsp+8]
	call	memset
; Line 1779
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR t$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T9[rsp]
	call	rxreturn
; Line 1781
	call	ccclocktick
	mov	QWORD PTR rx+632, rax
; Line 1782
	mov	rax, QWORD PTR rx+632
	mov	QWORD PTR rx+640, rax
; Line 1783
	call	rxtime
; Line 1785
	call	rxinit_default_font
; Line 1790
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 1107296256		; 42000000H
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	mov	r8d, 7
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG139756
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR rx+8, rax
; Line 1793
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateEventA
	mov	QWORD PTR rx+16, rax
; Line 1797
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 984				; 000003d8H
	pop	rdi
	pop	rsi
	ret	0
rxinit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index$ = 32
stride$ = 36
xcursor$1 = 40
ycursor$2 = 44
p$3 = 48
memory$ = 56
write$4 = 64
b$ = 72
texture$ = 96
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 216
encoded$ = 240
__$ArrayPad$ = 1760
rxinit_default_font PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1821
$LN6:
	push	rsi
	push	rdi
	sub	rsp, 1784				; 000006f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1827
	mov	BYTE PTR encoded$[rsp], 0
	mov	BYTE PTR encoded$[rsp+1], 0
	mov	BYTE PTR encoded$[rsp+2], 0
	mov	BYTE PTR encoded$[rsp+3], 0
	mov	BYTE PTR encoded$[rsp+4], 0
	mov	BYTE PTR encoded$[rsp+5], 0
	mov	BYTE PTR encoded$[rsp+6], 0
	mov	BYTE PTR encoded$[rsp+7], 0
	mov	BYTE PTR encoded$[rsp+8], 0
	mov	BYTE PTR encoded$[rsp+9], 0
	mov	BYTE PTR encoded$[rsp+10], 0
	mov	BYTE PTR encoded$[rsp+11], 0
	mov	BYTE PTR encoded$[rsp+12], 0
	mov	BYTE PTR encoded$[rsp+13], 0
	mov	BYTE PTR encoded$[rsp+14], 0
	mov	BYTE PTR encoded$[rsp+15], 0
	mov	BYTE PTR encoded$[rsp+16], 0
	mov	BYTE PTR encoded$[rsp+17], 0
	mov	BYTE PTR encoded$[rsp+18], 0
	mov	BYTE PTR encoded$[rsp+19], 0
	mov	BYTE PTR encoded$[rsp+20], 0
	mov	BYTE PTR encoded$[rsp+21], 16
	mov	BYTE PTR encoded$[rsp+22], 16
	mov	BYTE PTR encoded$[rsp+23], 16
	mov	BYTE PTR encoded$[rsp+24], 16
	mov	BYTE PTR encoded$[rsp+25], 16
	mov	BYTE PTR encoded$[rsp+26], 0
	mov	BYTE PTR encoded$[rsp+27], 16
	mov	BYTE PTR encoded$[rsp+28], 0
	mov	BYTE PTR encoded$[rsp+29], 0
	mov	BYTE PTR encoded$[rsp+30], 0
	mov	BYTE PTR encoded$[rsp+31], 0
	mov	BYTE PTR encoded$[rsp+32], 0
	mov	BYTE PTR encoded$[rsp+33], 0
	mov	BYTE PTR encoded$[rsp+34], 0
	mov	BYTE PTR encoded$[rsp+35], 0
	mov	BYTE PTR encoded$[rsp+36], 0
	mov	BYTE PTR encoded$[rsp+37], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+38], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+39], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+40], 0
	mov	BYTE PTR encoded$[rsp+41], 0
	mov	BYTE PTR encoded$[rsp+42], 0
	mov	BYTE PTR encoded$[rsp+43], 0
	mov	BYTE PTR encoded$[rsp+44], 0
	mov	BYTE PTR encoded$[rsp+45], 0
	mov	BYTE PTR encoded$[rsp+46], 0
	mov	BYTE PTR encoded$[rsp+47], 0
	mov	BYTE PTR encoded$[rsp+48], 0
	mov	BYTE PTR encoded$[rsp+49], 0
	mov	BYTE PTR encoded$[rsp+50], 0
	mov	BYTE PTR encoded$[rsp+51], 0
	mov	BYTE PTR encoded$[rsp+52], 0
	mov	BYTE PTR encoded$[rsp+53], 0
	mov	BYTE PTR encoded$[rsp+54], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+55], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+56], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+57], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+58], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+59], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+60], 0
	mov	BYTE PTR encoded$[rsp+61], 0
	mov	BYTE PTR encoded$[rsp+62], 0
	mov	BYTE PTR encoded$[rsp+63], 0
	mov	BYTE PTR encoded$[rsp+64], 0
	mov	BYTE PTR encoded$[rsp+65], 0
	mov	BYTE PTR encoded$[rsp+66], 0
	mov	BYTE PTR encoded$[rsp+67], 0
	mov	BYTE PTR encoded$[rsp+68], 0
	mov	BYTE PTR encoded$[rsp+69], 16
	mov	BYTE PTR encoded$[rsp+70], 120		; 00000078H
	mov	BYTE PTR encoded$[rsp+71], 20
	mov	BYTE PTR encoded$[rsp+72], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+73], 80		; 00000050H
	mov	BYTE PTR encoded$[rsp+74], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+75], 16
	mov	BYTE PTR encoded$[rsp+76], 0
	mov	BYTE PTR encoded$[rsp+77], 0
	mov	BYTE PTR encoded$[rsp+78], 0
	mov	BYTE PTR encoded$[rsp+79], 0
	mov	BYTE PTR encoded$[rsp+80], 0
	mov	BYTE PTR encoded$[rsp+81], 0
	mov	BYTE PTR encoded$[rsp+82], 0
	mov	BYTE PTR encoded$[rsp+83], 0
	mov	BYTE PTR encoded$[rsp+84], 0
	mov	BYTE PTR encoded$[rsp+85], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+86], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+87], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+88], 16
	mov	BYTE PTR encoded$[rsp+89], 8
	mov	BYTE PTR encoded$[rsp+90], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+91], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+92], 0
	mov	BYTE PTR encoded$[rsp+93], 0
	mov	BYTE PTR encoded$[rsp+94], 0
	mov	BYTE PTR encoded$[rsp+95], 0
	mov	BYTE PTR encoded$[rsp+96], 0
	mov	BYTE PTR encoded$[rsp+97], 0
	mov	BYTE PTR encoded$[rsp+98], 0
	mov	BYTE PTR encoded$[rsp+99], 0
	mov	BYTE PTR encoded$[rsp+100], 0
	mov	BYTE PTR encoded$[rsp+101], 24
	mov	BYTE PTR encoded$[rsp+102], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+103], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+104], 120		; 00000078H
	mov	BYTE PTR encoded$[rsp+105], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+106], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+107], 88		; 00000058H
	mov	BYTE PTR encoded$[rsp+108], 0
	mov	BYTE PTR encoded$[rsp+109], 0
	mov	BYTE PTR encoded$[rsp+110], 0
	mov	BYTE PTR encoded$[rsp+111], 0
	mov	BYTE PTR encoded$[rsp+112], 0
	mov	BYTE PTR encoded$[rsp+113], 0
	mov	BYTE PTR encoded$[rsp+114], 0
	mov	BYTE PTR encoded$[rsp+115], 0
	mov	BYTE PTR encoded$[rsp+116], 0
	mov	BYTE PTR encoded$[rsp+117], 16
	mov	BYTE PTR encoded$[rsp+118], 16
	mov	BYTE PTR encoded$[rsp+119], 16
	mov	BYTE PTR encoded$[rsp+120], 0
	mov	BYTE PTR encoded$[rsp+121], 0
	mov	BYTE PTR encoded$[rsp+122], 0
	mov	BYTE PTR encoded$[rsp+123], 0
	mov	BYTE PTR encoded$[rsp+124], 0
	mov	BYTE PTR encoded$[rsp+125], 0
	mov	BYTE PTR encoded$[rsp+126], 0
	mov	BYTE PTR encoded$[rsp+127], 0
	mov	BYTE PTR encoded$[rsp+128], 0
	mov	BYTE PTR encoded$[rsp+129], 0
	mov	BYTE PTR encoded$[rsp+130], 0
	mov	BYTE PTR encoded$[rsp+131], 0
	mov	BYTE PTR encoded$[rsp+132], 0
	mov	BYTE PTR encoded$[rsp+133], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+134], 16
	mov	BYTE PTR encoded$[rsp+135], 16
	mov	BYTE PTR encoded$[rsp+136], 16
	mov	BYTE PTR encoded$[rsp+137], 16
	mov	BYTE PTR encoded$[rsp+138], 16
	mov	BYTE PTR encoded$[rsp+139], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+140], 0
	mov	BYTE PTR encoded$[rsp+141], 0
	mov	BYTE PTR encoded$[rsp+142], 0
	mov	BYTE PTR encoded$[rsp+143], 0
	mov	BYTE PTR encoded$[rsp+144], 0
	mov	BYTE PTR encoded$[rsp+145], 0
	mov	BYTE PTR encoded$[rsp+146], 0
	mov	BYTE PTR encoded$[rsp+147], 0
	mov	BYTE PTR encoded$[rsp+148], 0
	mov	BYTE PTR encoded$[rsp+149], 8
	mov	BYTE PTR encoded$[rsp+150], 16
	mov	BYTE PTR encoded$[rsp+151], 16
	mov	BYTE PTR encoded$[rsp+152], 16
	mov	BYTE PTR encoded$[rsp+153], 16
	mov	BYTE PTR encoded$[rsp+154], 16
	mov	BYTE PTR encoded$[rsp+155], 8
	mov	BYTE PTR encoded$[rsp+156], 0
	mov	BYTE PTR encoded$[rsp+157], 0
	mov	BYTE PTR encoded$[rsp+158], 0
	mov	BYTE PTR encoded$[rsp+159], 0
	mov	BYTE PTR encoded$[rsp+160], 0
	mov	BYTE PTR encoded$[rsp+161], 0
	mov	BYTE PTR encoded$[rsp+162], 0
	mov	BYTE PTR encoded$[rsp+163], 0
	mov	BYTE PTR encoded$[rsp+164], 0
	mov	BYTE PTR encoded$[rsp+165], 0
	mov	BYTE PTR encoded$[rsp+166], 16
	mov	BYTE PTR encoded$[rsp+167], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+168], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+169], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+170], 16
	mov	BYTE PTR encoded$[rsp+171], 0
	mov	BYTE PTR encoded$[rsp+172], 0
	mov	BYTE PTR encoded$[rsp+173], 0
	mov	BYTE PTR encoded$[rsp+174], 0
	mov	BYTE PTR encoded$[rsp+175], 0
	mov	BYTE PTR encoded$[rsp+176], 0
	mov	BYTE PTR encoded$[rsp+177], 0
	mov	BYTE PTR encoded$[rsp+178], 0
	mov	BYTE PTR encoded$[rsp+179], 0
	mov	BYTE PTR encoded$[rsp+180], 0
	mov	BYTE PTR encoded$[rsp+181], 0
	mov	BYTE PTR encoded$[rsp+182], 16
	mov	BYTE PTR encoded$[rsp+183], 16
	mov	BYTE PTR encoded$[rsp+184], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+185], 16
	mov	BYTE PTR encoded$[rsp+186], 16
	mov	BYTE PTR encoded$[rsp+187], 0
	mov	BYTE PTR encoded$[rsp+188], 0
	mov	BYTE PTR encoded$[rsp+189], 0
	mov	BYTE PTR encoded$[rsp+190], 0
	mov	BYTE PTR encoded$[rsp+191], 0
	mov	BYTE PTR encoded$[rsp+192], 0
	mov	BYTE PTR encoded$[rsp+193], 0
	mov	BYTE PTR encoded$[rsp+194], 0
	mov	BYTE PTR encoded$[rsp+195], 0
	mov	BYTE PTR encoded$[rsp+196], 0
	mov	BYTE PTR encoded$[rsp+197], 0
	mov	BYTE PTR encoded$[rsp+198], 0
	mov	BYTE PTR encoded$[rsp+199], 0
	mov	BYTE PTR encoded$[rsp+200], 0
	mov	BYTE PTR encoded$[rsp+201], 0
	mov	BYTE PTR encoded$[rsp+202], 16
	mov	BYTE PTR encoded$[rsp+203], 16
	mov	BYTE PTR encoded$[rsp+204], 8
	mov	BYTE PTR encoded$[rsp+205], 0
	mov	BYTE PTR encoded$[rsp+206], 0
	mov	BYTE PTR encoded$[rsp+207], 0
	mov	BYTE PTR encoded$[rsp+208], 0
	mov	BYTE PTR encoded$[rsp+209], 0
	mov	BYTE PTR encoded$[rsp+210], 0
	mov	BYTE PTR encoded$[rsp+211], 0
	mov	BYTE PTR encoded$[rsp+212], 0
	mov	BYTE PTR encoded$[rsp+213], 0
	mov	BYTE PTR encoded$[rsp+214], 0
	mov	BYTE PTR encoded$[rsp+215], 0
	mov	BYTE PTR encoded$[rsp+216], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+217], 0
	mov	BYTE PTR encoded$[rsp+218], 0
	mov	BYTE PTR encoded$[rsp+219], 0
	mov	BYTE PTR encoded$[rsp+220], 0
	mov	BYTE PTR encoded$[rsp+221], 0
	mov	BYTE PTR encoded$[rsp+222], 0
	mov	BYTE PTR encoded$[rsp+223], 0
	mov	BYTE PTR encoded$[rsp+224], 0
	mov	BYTE PTR encoded$[rsp+225], 0
	mov	BYTE PTR encoded$[rsp+226], 0
	mov	BYTE PTR encoded$[rsp+227], 0
	mov	BYTE PTR encoded$[rsp+228], 0
	mov	BYTE PTR encoded$[rsp+229], 0
	mov	BYTE PTR encoded$[rsp+230], 0
	mov	BYTE PTR encoded$[rsp+231], 0
	mov	BYTE PTR encoded$[rsp+232], 0
	mov	BYTE PTR encoded$[rsp+233], 0
	mov	BYTE PTR encoded$[rsp+234], 16
	mov	BYTE PTR encoded$[rsp+235], 16
	mov	BYTE PTR encoded$[rsp+236], 0
	mov	BYTE PTR encoded$[rsp+237], 0
	mov	BYTE PTR encoded$[rsp+238], 0
	mov	BYTE PTR encoded$[rsp+239], 0
	mov	BYTE PTR encoded$[rsp+240], 0
	mov	BYTE PTR encoded$[rsp+241], 0
	mov	BYTE PTR encoded$[rsp+242], 0
	mov	BYTE PTR encoded$[rsp+243], 0
	mov	BYTE PTR encoded$[rsp+244], 0
	mov	BYTE PTR encoded$[rsp+245], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+246], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+247], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+248], 16
	mov	BYTE PTR encoded$[rsp+249], 8
	mov	BYTE PTR encoded$[rsp+250], 4
	mov	BYTE PTR encoded$[rsp+251], 4
	mov	BYTE PTR encoded$[rsp+252], 0
	mov	BYTE PTR encoded$[rsp+253], 0
	mov	BYTE PTR encoded$[rsp+254], 0
	mov	BYTE PTR encoded$[rsp+255], 0
	mov	BYTE PTR encoded$[rsp+256], 0
	mov	BYTE PTR encoded$[rsp+257], 0
	mov	BYTE PTR encoded$[rsp+258], 0
	mov	BYTE PTR encoded$[rsp+259], 0
	mov	BYTE PTR encoded$[rsp+260], 0
	mov	BYTE PTR encoded$[rsp+261], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+262], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+263], 100		; 00000064H
	mov	BYTE PTR encoded$[rsp+264], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+265], 76		; 0000004cH
	mov	BYTE PTR encoded$[rsp+266], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+267], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+268], 0
	mov	BYTE PTR encoded$[rsp+269], 0
	mov	BYTE PTR encoded$[rsp+270], 0
	mov	BYTE PTR encoded$[rsp+271], 0
	mov	BYTE PTR encoded$[rsp+272], 0
	mov	BYTE PTR encoded$[rsp+273], 0
	mov	BYTE PTR encoded$[rsp+274], 0
	mov	BYTE PTR encoded$[rsp+275], 0
	mov	BYTE PTR encoded$[rsp+276], 0
	mov	BYTE PTR encoded$[rsp+277], 16
	mov	BYTE PTR encoded$[rsp+278], 24
	mov	BYTE PTR encoded$[rsp+279], 16
	mov	BYTE PTR encoded$[rsp+280], 16
	mov	BYTE PTR encoded$[rsp+281], 16
	mov	BYTE PTR encoded$[rsp+282], 16
	mov	BYTE PTR encoded$[rsp+283], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+284], 0
	mov	BYTE PTR encoded$[rsp+285], 0
	mov	BYTE PTR encoded$[rsp+286], 0
	mov	BYTE PTR encoded$[rsp+287], 0
	mov	BYTE PTR encoded$[rsp+288], 0
	mov	BYTE PTR encoded$[rsp+289], 0
	mov	BYTE PTR encoded$[rsp+290], 0
	mov	BYTE PTR encoded$[rsp+291], 0
	mov	BYTE PTR encoded$[rsp+292], 0
	mov	BYTE PTR encoded$[rsp+293], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+294], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+295], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+296], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+297], 16
	mov	BYTE PTR encoded$[rsp+298], 8
	mov	BYTE PTR encoded$[rsp+299], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+300], 0
	mov	BYTE PTR encoded$[rsp+301], 0
	mov	BYTE PTR encoded$[rsp+302], 0
	mov	BYTE PTR encoded$[rsp+303], 0
	mov	BYTE PTR encoded$[rsp+304], 0
	mov	BYTE PTR encoded$[rsp+305], 0
	mov	BYTE PTR encoded$[rsp+306], 0
	mov	BYTE PTR encoded$[rsp+307], 0
	mov	BYTE PTR encoded$[rsp+308], 0
	mov	BYTE PTR encoded$[rsp+309], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+310], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+311], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+312], 48		; 00000030H
	mov	BYTE PTR encoded$[rsp+313], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+314], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+315], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+316], 0
	mov	BYTE PTR encoded$[rsp+317], 0
	mov	BYTE PTR encoded$[rsp+318], 0
	mov	BYTE PTR encoded$[rsp+319], 0
	mov	BYTE PTR encoded$[rsp+320], 0
	mov	BYTE PTR encoded$[rsp+321], 0
	mov	BYTE PTR encoded$[rsp+322], 0
	mov	BYTE PTR encoded$[rsp+323], 0
	mov	BYTE PTR encoded$[rsp+324], 0
	mov	BYTE PTR encoded$[rsp+325], 72		; 00000048H
	mov	BYTE PTR encoded$[rsp+326], 72		; 00000048H
	mov	BYTE PTR encoded$[rsp+327], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+328], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+329], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+330], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+331], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+332], 0
	mov	BYTE PTR encoded$[rsp+333], 0
	mov	BYTE PTR encoded$[rsp+334], 0
	mov	BYTE PTR encoded$[rsp+335], 0
	mov	BYTE PTR encoded$[rsp+336], 0
	mov	BYTE PTR encoded$[rsp+337], 0
	mov	BYTE PTR encoded$[rsp+338], 0
	mov	BYTE PTR encoded$[rsp+339], 0
	mov	BYTE PTR encoded$[rsp+340], 0
	mov	BYTE PTR encoded$[rsp+341], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+342], 4
	mov	BYTE PTR encoded$[rsp+343], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+344], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+345], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+346], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+347], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+348], 0
	mov	BYTE PTR encoded$[rsp+349], 0
	mov	BYTE PTR encoded$[rsp+350], 0
	mov	BYTE PTR encoded$[rsp+351], 0
	mov	BYTE PTR encoded$[rsp+352], 0
	mov	BYTE PTR encoded$[rsp+353], 0
	mov	BYTE PTR encoded$[rsp+354], 0
	mov	BYTE PTR encoded$[rsp+355], 0
	mov	BYTE PTR encoded$[rsp+356], 0
	mov	BYTE PTR encoded$[rsp+357], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+358], 4
	mov	BYTE PTR encoded$[rsp+359], 4
	mov	BYTE PTR encoded$[rsp+360], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+361], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+362], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+363], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+364], 0
	mov	BYTE PTR encoded$[rsp+365], 0
	mov	BYTE PTR encoded$[rsp+366], 0
	mov	BYTE PTR encoded$[rsp+367], 0
	mov	BYTE PTR encoded$[rsp+368], 0
	mov	BYTE PTR encoded$[rsp+369], 0
	mov	BYTE PTR encoded$[rsp+370], 0
	mov	BYTE PTR encoded$[rsp+371], 0
	mov	BYTE PTR encoded$[rsp+372], 0
	mov	BYTE PTR encoded$[rsp+373], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+374], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+375], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+376], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+377], 16
	mov	BYTE PTR encoded$[rsp+378], 16
	mov	BYTE PTR encoded$[rsp+379], 16
	mov	BYTE PTR encoded$[rsp+380], 0
	mov	BYTE PTR encoded$[rsp+381], 0
	mov	BYTE PTR encoded$[rsp+382], 0
	mov	BYTE PTR encoded$[rsp+383], 0
	mov	BYTE PTR encoded$[rsp+384], 0
	mov	BYTE PTR encoded$[rsp+385], 0
	mov	BYTE PTR encoded$[rsp+386], 0
	mov	BYTE PTR encoded$[rsp+387], 0
	mov	BYTE PTR encoded$[rsp+388], 0
	mov	BYTE PTR encoded$[rsp+389], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+390], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+391], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+392], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+393], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+394], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+395], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+396], 0
	mov	BYTE PTR encoded$[rsp+397], 0
	mov	BYTE PTR encoded$[rsp+398], 0
	mov	BYTE PTR encoded$[rsp+399], 0
	mov	BYTE PTR encoded$[rsp+400], 0
	mov	BYTE PTR encoded$[rsp+401], 0
	mov	BYTE PTR encoded$[rsp+402], 0
	mov	BYTE PTR encoded$[rsp+403], 0
	mov	BYTE PTR encoded$[rsp+404], 0
	mov	BYTE PTR encoded$[rsp+405], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+406], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+407], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+408], 120		; 00000078H
	mov	BYTE PTR encoded$[rsp+409], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+410], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+411], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+412], 0
	mov	BYTE PTR encoded$[rsp+413], 0
	mov	BYTE PTR encoded$[rsp+414], 0
	mov	BYTE PTR encoded$[rsp+415], 0
	mov	BYTE PTR encoded$[rsp+416], 0
	mov	BYTE PTR encoded$[rsp+417], 0
	mov	BYTE PTR encoded$[rsp+418], 0
	mov	BYTE PTR encoded$[rsp+419], 0
	mov	BYTE PTR encoded$[rsp+420], 0
	mov	BYTE PTR encoded$[rsp+421], 0
	mov	BYTE PTR encoded$[rsp+422], 16
	mov	BYTE PTR encoded$[rsp+423], 16
	mov	BYTE PTR encoded$[rsp+424], 0
	mov	BYTE PTR encoded$[rsp+425], 0
	mov	BYTE PTR encoded$[rsp+426], 16
	mov	BYTE PTR encoded$[rsp+427], 16
	mov	BYTE PTR encoded$[rsp+428], 0
	mov	BYTE PTR encoded$[rsp+429], 0
	mov	BYTE PTR encoded$[rsp+430], 0
	mov	BYTE PTR encoded$[rsp+431], 0
	mov	BYTE PTR encoded$[rsp+432], 0
	mov	BYTE PTR encoded$[rsp+433], 0
	mov	BYTE PTR encoded$[rsp+434], 0
	mov	BYTE PTR encoded$[rsp+435], 0
	mov	BYTE PTR encoded$[rsp+436], 0
	mov	BYTE PTR encoded$[rsp+437], 0
	mov	BYTE PTR encoded$[rsp+438], 16
	mov	BYTE PTR encoded$[rsp+439], 16
	mov	BYTE PTR encoded$[rsp+440], 0
	mov	BYTE PTR encoded$[rsp+441], 0
	mov	BYTE PTR encoded$[rsp+442], 16
	mov	BYTE PTR encoded$[rsp+443], 16
	mov	BYTE PTR encoded$[rsp+444], 8
	mov	BYTE PTR encoded$[rsp+445], 0
	mov	BYTE PTR encoded$[rsp+446], 0
	mov	BYTE PTR encoded$[rsp+447], 0
	mov	BYTE PTR encoded$[rsp+448], 0
	mov	BYTE PTR encoded$[rsp+449], 0
	mov	BYTE PTR encoded$[rsp+450], 0
	mov	BYTE PTR encoded$[rsp+451], 0
	mov	BYTE PTR encoded$[rsp+452], 0
	mov	BYTE PTR encoded$[rsp+453], 0
	mov	BYTE PTR encoded$[rsp+454], 96		; 00000060H
	mov	BYTE PTR encoded$[rsp+455], 24
	mov	BYTE PTR encoded$[rsp+456], 4
	mov	BYTE PTR encoded$[rsp+457], 24
	mov	BYTE PTR encoded$[rsp+458], 96		; 00000060H
	mov	BYTE PTR encoded$[rsp+459], 0
	mov	BYTE PTR encoded$[rsp+460], 0
	mov	BYTE PTR encoded$[rsp+461], 0
	mov	BYTE PTR encoded$[rsp+462], 0
	mov	BYTE PTR encoded$[rsp+463], 0
	mov	BYTE PTR encoded$[rsp+464], 0
	mov	BYTE PTR encoded$[rsp+465], 0
	mov	BYTE PTR encoded$[rsp+466], 0
	mov	BYTE PTR encoded$[rsp+467], 0
	mov	BYTE PTR encoded$[rsp+468], 0
	mov	BYTE PTR encoded$[rsp+469], 0
	mov	BYTE PTR encoded$[rsp+470], 0
	mov	BYTE PTR encoded$[rsp+471], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+472], 0
	mov	BYTE PTR encoded$[rsp+473], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+474], 0
	mov	BYTE PTR encoded$[rsp+475], 0
	mov	BYTE PTR encoded$[rsp+476], 0
	mov	BYTE PTR encoded$[rsp+477], 0
	mov	BYTE PTR encoded$[rsp+478], 0
	mov	BYTE PTR encoded$[rsp+479], 0
	mov	BYTE PTR encoded$[rsp+480], 0
	mov	BYTE PTR encoded$[rsp+481], 0
	mov	BYTE PTR encoded$[rsp+482], 0
	mov	BYTE PTR encoded$[rsp+483], 0
	mov	BYTE PTR encoded$[rsp+484], 0
	mov	BYTE PTR encoded$[rsp+485], 0
	mov	BYTE PTR encoded$[rsp+486], 12
	mov	BYTE PTR encoded$[rsp+487], 48		; 00000030H
	mov	BYTE PTR encoded$[rsp+488], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+489], 48		; 00000030H
	mov	BYTE PTR encoded$[rsp+490], 12
	mov	BYTE PTR encoded$[rsp+491], 0
	mov	BYTE PTR encoded$[rsp+492], 0
	mov	BYTE PTR encoded$[rsp+493], 0
	mov	BYTE PTR encoded$[rsp+494], 0
	mov	BYTE PTR encoded$[rsp+495], 0
	mov	BYTE PTR encoded$[rsp+496], 0
	mov	BYTE PTR encoded$[rsp+497], 0
	mov	BYTE PTR encoded$[rsp+498], 0
	mov	BYTE PTR encoded$[rsp+499], 0
	mov	BYTE PTR encoded$[rsp+500], 0
	mov	BYTE PTR encoded$[rsp+501], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+502], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+503], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+504], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+505], 16
	mov	BYTE PTR encoded$[rsp+506], 0
	mov	BYTE PTR encoded$[rsp+507], 16
	mov	BYTE PTR encoded$[rsp+508], 0
	mov	BYTE PTR encoded$[rsp+509], 0
	mov	BYTE PTR encoded$[rsp+510], 0
	mov	BYTE PTR encoded$[rsp+511], 0
	mov	BYTE PTR encoded$[rsp+512], 0
	mov	BYTE PTR encoded$[rsp+513], 0
	mov	BYTE PTR encoded$[rsp+514], 0
	mov	BYTE PTR encoded$[rsp+515], 0
	mov	BYTE PTR encoded$[rsp+516], 0
	mov	BYTE PTR encoded$[rsp+517], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+518], 100		; 00000064H
	mov	BYTE PTR encoded$[rsp+519], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+520], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+521], 100		; 00000064H
	mov	BYTE PTR encoded$[rsp+522], 4
	mov	BYTE PTR encoded$[rsp+523], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+524], 0
	mov	BYTE PTR encoded$[rsp+525], 0
	mov	BYTE PTR encoded$[rsp+526], 0
	mov	BYTE PTR encoded$[rsp+527], 0
	mov	BYTE PTR encoded$[rsp+528], 0
	mov	BYTE PTR encoded$[rsp+529], 0
	mov	BYTE PTR encoded$[rsp+530], 0
	mov	BYTE PTR encoded$[rsp+531], 0
	mov	BYTE PTR encoded$[rsp+532], 0
	mov	BYTE PTR encoded$[rsp+533], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+534], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+535], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+536], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+537], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+538], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+539], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+540], 0
	mov	BYTE PTR encoded$[rsp+541], 0
	mov	BYTE PTR encoded$[rsp+542], 0
	mov	BYTE PTR encoded$[rsp+543], 0
	mov	BYTE PTR encoded$[rsp+544], 0
	mov	BYTE PTR encoded$[rsp+545], 0
	mov	BYTE PTR encoded$[rsp+546], 0
	mov	BYTE PTR encoded$[rsp+547], 0
	mov	BYTE PTR encoded$[rsp+548], 0
	mov	BYTE PTR encoded$[rsp+549], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+550], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+551], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+552], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+553], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+554], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+555], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+556], 0
	mov	BYTE PTR encoded$[rsp+557], 0
	mov	BYTE PTR encoded$[rsp+558], 0
	mov	BYTE PTR encoded$[rsp+559], 0
	mov	BYTE PTR encoded$[rsp+560], 0
	mov	BYTE PTR encoded$[rsp+561], 0
	mov	BYTE PTR encoded$[rsp+562], 0
	mov	BYTE PTR encoded$[rsp+563], 0
	mov	BYTE PTR encoded$[rsp+564], 0
	mov	BYTE PTR encoded$[rsp+565], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+566], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+567], 4
	mov	BYTE PTR encoded$[rsp+568], 4
	mov	BYTE PTR encoded$[rsp+569], 4
	mov	BYTE PTR encoded$[rsp+570], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+571], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+572], 0
	mov	BYTE PTR encoded$[rsp+573], 0
	mov	BYTE PTR encoded$[rsp+574], 0
	mov	BYTE PTR encoded$[rsp+575], 0
	mov	BYTE PTR encoded$[rsp+576], 0
	mov	BYTE PTR encoded$[rsp+577], 0
	mov	BYTE PTR encoded$[rsp+578], 0
	mov	BYTE PTR encoded$[rsp+579], 0
	mov	BYTE PTR encoded$[rsp+580], 0
	mov	BYTE PTR encoded$[rsp+581], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+582], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+583], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+584], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+585], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+586], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+587], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+588], 0
	mov	BYTE PTR encoded$[rsp+589], 0
	mov	BYTE PTR encoded$[rsp+590], 0
	mov	BYTE PTR encoded$[rsp+591], 0
	mov	BYTE PTR encoded$[rsp+592], 0
	mov	BYTE PTR encoded$[rsp+593], 0
	mov	BYTE PTR encoded$[rsp+594], 0
	mov	BYTE PTR encoded$[rsp+595], 0
	mov	BYTE PTR encoded$[rsp+596], 0
	mov	BYTE PTR encoded$[rsp+597], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+598], 4
	mov	BYTE PTR encoded$[rsp+599], 4
	mov	BYTE PTR encoded$[rsp+600], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+601], 4
	mov	BYTE PTR encoded$[rsp+602], 4
	mov	BYTE PTR encoded$[rsp+603], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+604], 0
	mov	BYTE PTR encoded$[rsp+605], 0
	mov	BYTE PTR encoded$[rsp+606], 0
	mov	BYTE PTR encoded$[rsp+607], 0
	mov	BYTE PTR encoded$[rsp+608], 0
	mov	BYTE PTR encoded$[rsp+609], 0
	mov	BYTE PTR encoded$[rsp+610], 0
	mov	BYTE PTR encoded$[rsp+611], 0
	mov	BYTE PTR encoded$[rsp+612], 0
	mov	BYTE PTR encoded$[rsp+613], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+614], 4
	mov	BYTE PTR encoded$[rsp+615], 4
	mov	BYTE PTR encoded$[rsp+616], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+617], 4
	mov	BYTE PTR encoded$[rsp+618], 4
	mov	BYTE PTR encoded$[rsp+619], 4
	mov	BYTE PTR encoded$[rsp+620], 0
	mov	BYTE PTR encoded$[rsp+621], 0
	mov	BYTE PTR encoded$[rsp+622], 0
	mov	BYTE PTR encoded$[rsp+623], 0
	mov	BYTE PTR encoded$[rsp+624], 0
	mov	BYTE PTR encoded$[rsp+625], 0
	mov	BYTE PTR encoded$[rsp+626], 0
	mov	BYTE PTR encoded$[rsp+627], 0
	mov	BYTE PTR encoded$[rsp+628], 0
	mov	BYTE PTR encoded$[rsp+629], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+630], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+631], 4
	mov	BYTE PTR encoded$[rsp+632], 116		; 00000074H
	mov	BYTE PTR encoded$[rsp+633], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+634], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+635], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+636], 0
	mov	BYTE PTR encoded$[rsp+637], 0
	mov	BYTE PTR encoded$[rsp+638], 0
	mov	BYTE PTR encoded$[rsp+639], 0
	mov	BYTE PTR encoded$[rsp+640], 0
	mov	BYTE PTR encoded$[rsp+641], 0
	mov	BYTE PTR encoded$[rsp+642], 0
	mov	BYTE PTR encoded$[rsp+643], 0
	mov	BYTE PTR encoded$[rsp+644], 0
	mov	BYTE PTR encoded$[rsp+645], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+646], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+647], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+648], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+649], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+650], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+651], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+652], 0
	mov	BYTE PTR encoded$[rsp+653], 0
	mov	BYTE PTR encoded$[rsp+654], 0
	mov	BYTE PTR encoded$[rsp+655], 0
	mov	BYTE PTR encoded$[rsp+656], 0
	mov	BYTE PTR encoded$[rsp+657], 0
	mov	BYTE PTR encoded$[rsp+658], 0
	mov	BYTE PTR encoded$[rsp+659], 0
	mov	BYTE PTR encoded$[rsp+660], 0
	mov	BYTE PTR encoded$[rsp+661], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+662], 16
	mov	BYTE PTR encoded$[rsp+663], 16
	mov	BYTE PTR encoded$[rsp+664], 16
	mov	BYTE PTR encoded$[rsp+665], 16
	mov	BYTE PTR encoded$[rsp+666], 16
	mov	BYTE PTR encoded$[rsp+667], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+668], 0
	mov	BYTE PTR encoded$[rsp+669], 0
	mov	BYTE PTR encoded$[rsp+670], 0
	mov	BYTE PTR encoded$[rsp+671], 0
	mov	BYTE PTR encoded$[rsp+672], 0
	mov	BYTE PTR encoded$[rsp+673], 0
	mov	BYTE PTR encoded$[rsp+674], 0
	mov	BYTE PTR encoded$[rsp+675], 0
	mov	BYTE PTR encoded$[rsp+676], 0
	mov	BYTE PTR encoded$[rsp+677], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+678], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+679], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+680], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+681], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+682], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+683], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+684], 0
	mov	BYTE PTR encoded$[rsp+685], 0
	mov	BYTE PTR encoded$[rsp+686], 0
	mov	BYTE PTR encoded$[rsp+687], 0
	mov	BYTE PTR encoded$[rsp+688], 0
	mov	BYTE PTR encoded$[rsp+689], 0
	mov	BYTE PTR encoded$[rsp+690], 0
	mov	BYTE PTR encoded$[rsp+691], 0
	mov	BYTE PTR encoded$[rsp+692], 0
	mov	BYTE PTR encoded$[rsp+693], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+694], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+695], 20
	mov	BYTE PTR encoded$[rsp+696], 12
	mov	BYTE PTR encoded$[rsp+697], 20
	mov	BYTE PTR encoded$[rsp+698], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+699], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+700], 0
	mov	BYTE PTR encoded$[rsp+701], 0
	mov	BYTE PTR encoded$[rsp+702], 0
	mov	BYTE PTR encoded$[rsp+703], 0
	mov	BYTE PTR encoded$[rsp+704], 0
	mov	BYTE PTR encoded$[rsp+705], 0
	mov	BYTE PTR encoded$[rsp+706], 0
	mov	BYTE PTR encoded$[rsp+707], 0
	mov	BYTE PTR encoded$[rsp+708], 0
	mov	BYTE PTR encoded$[rsp+709], 4
	mov	BYTE PTR encoded$[rsp+710], 4
	mov	BYTE PTR encoded$[rsp+711], 4
	mov	BYTE PTR encoded$[rsp+712], 4
	mov	BYTE PTR encoded$[rsp+713], 4
	mov	BYTE PTR encoded$[rsp+714], 4
	mov	BYTE PTR encoded$[rsp+715], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+716], 0
	mov	BYTE PTR encoded$[rsp+717], 0
	mov	BYTE PTR encoded$[rsp+718], 0
	mov	BYTE PTR encoded$[rsp+719], 0
	mov	BYTE PTR encoded$[rsp+720], 0
	mov	BYTE PTR encoded$[rsp+721], 0
	mov	BYTE PTR encoded$[rsp+722], 0
	mov	BYTE PTR encoded$[rsp+723], 0
	mov	BYTE PTR encoded$[rsp+724], 0
	mov	BYTE PTR encoded$[rsp+725], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+726], 108		; 0000006cH
	mov	BYTE PTR encoded$[rsp+727], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+728], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+729], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+730], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+731], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+732], 0
	mov	BYTE PTR encoded$[rsp+733], 0
	mov	BYTE PTR encoded$[rsp+734], 0
	mov	BYTE PTR encoded$[rsp+735], 0
	mov	BYTE PTR encoded$[rsp+736], 0
	mov	BYTE PTR encoded$[rsp+737], 0
	mov	BYTE PTR encoded$[rsp+738], 0
	mov	BYTE PTR encoded$[rsp+739], 0
	mov	BYTE PTR encoded$[rsp+740], 0
	mov	BYTE PTR encoded$[rsp+741], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+742], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+743], 76		; 0000004cH
	mov	BYTE PTR encoded$[rsp+744], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+745], 100		; 00000064H
	mov	BYTE PTR encoded$[rsp+746], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+747], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+748], 0
	mov	BYTE PTR encoded$[rsp+749], 0
	mov	BYTE PTR encoded$[rsp+750], 0
	mov	BYTE PTR encoded$[rsp+751], 0
	mov	BYTE PTR encoded$[rsp+752], 0
	mov	BYTE PTR encoded$[rsp+753], 0
	mov	BYTE PTR encoded$[rsp+754], 0
	mov	BYTE PTR encoded$[rsp+755], 0
	mov	BYTE PTR encoded$[rsp+756], 0
	mov	BYTE PTR encoded$[rsp+757], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+758], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+759], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+760], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+761], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+762], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+763], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+764], 0
	mov	BYTE PTR encoded$[rsp+765], 0
	mov	BYTE PTR encoded$[rsp+766], 0
	mov	BYTE PTR encoded$[rsp+767], 0
	mov	BYTE PTR encoded$[rsp+768], 0
	mov	BYTE PTR encoded$[rsp+769], 0
	mov	BYTE PTR encoded$[rsp+770], 0
	mov	BYTE PTR encoded$[rsp+771], 0
	mov	BYTE PTR encoded$[rsp+772], 0
	mov	BYTE PTR encoded$[rsp+773], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+774], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+775], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+776], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+777], 4
	mov	BYTE PTR encoded$[rsp+778], 4
	mov	BYTE PTR encoded$[rsp+779], 4
	mov	BYTE PTR encoded$[rsp+780], 0
	mov	BYTE PTR encoded$[rsp+781], 0
	mov	BYTE PTR encoded$[rsp+782], 0
	mov	BYTE PTR encoded$[rsp+783], 0
	mov	BYTE PTR encoded$[rsp+784], 0
	mov	BYTE PTR encoded$[rsp+785], 0
	mov	BYTE PTR encoded$[rsp+786], 0
	mov	BYTE PTR encoded$[rsp+787], 0
	mov	BYTE PTR encoded$[rsp+788], 0
	mov	BYTE PTR encoded$[rsp+789], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+790], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+791], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+792], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+793], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+794], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+795], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+796], 96		; 00000060H
	mov	BYTE PTR encoded$[rsp+797], 0
	mov	BYTE PTR encoded$[rsp+798], 0
	mov	BYTE PTR encoded$[rsp+799], 0
	mov	BYTE PTR encoded$[rsp+800], 0
	mov	BYTE PTR encoded$[rsp+801], 0
	mov	BYTE PTR encoded$[rsp+802], 0
	mov	BYTE PTR encoded$[rsp+803], 0
	mov	BYTE PTR encoded$[rsp+804], 0
	mov	BYTE PTR encoded$[rsp+805], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+806], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+807], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+808], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+809], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+810], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+811], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+812], 0
	mov	BYTE PTR encoded$[rsp+813], 0
	mov	BYTE PTR encoded$[rsp+814], 0
	mov	BYTE PTR encoded$[rsp+815], 0
	mov	BYTE PTR encoded$[rsp+816], 0
	mov	BYTE PTR encoded$[rsp+817], 0
	mov	BYTE PTR encoded$[rsp+818], 0
	mov	BYTE PTR encoded$[rsp+819], 0
	mov	BYTE PTR encoded$[rsp+820], 0
	mov	BYTE PTR encoded$[rsp+821], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+822], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+823], 4
	mov	BYTE PTR encoded$[rsp+824], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+825], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+826], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+827], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+828], 0
	mov	BYTE PTR encoded$[rsp+829], 0
	mov	BYTE PTR encoded$[rsp+830], 0
	mov	BYTE PTR encoded$[rsp+831], 0
	mov	BYTE PTR encoded$[rsp+832], 0
	mov	BYTE PTR encoded$[rsp+833], 0
	mov	BYTE PTR encoded$[rsp+834], 0
	mov	BYTE PTR encoded$[rsp+835], 0
	mov	BYTE PTR encoded$[rsp+836], 0
	mov	BYTE PTR encoded$[rsp+837], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+838], 16
	mov	BYTE PTR encoded$[rsp+839], 16
	mov	BYTE PTR encoded$[rsp+840], 16
	mov	BYTE PTR encoded$[rsp+841], 16
	mov	BYTE PTR encoded$[rsp+842], 16
	mov	BYTE PTR encoded$[rsp+843], 16
	mov	BYTE PTR encoded$[rsp+844], 0
	mov	BYTE PTR encoded$[rsp+845], 0
	mov	BYTE PTR encoded$[rsp+846], 0
	mov	BYTE PTR encoded$[rsp+847], 0
	mov	BYTE PTR encoded$[rsp+848], 0
	mov	BYTE PTR encoded$[rsp+849], 0
	mov	BYTE PTR encoded$[rsp+850], 0
	mov	BYTE PTR encoded$[rsp+851], 0
	mov	BYTE PTR encoded$[rsp+852], 0
	mov	BYTE PTR encoded$[rsp+853], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+854], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+855], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+856], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+857], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+858], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+859], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+860], 0
	mov	BYTE PTR encoded$[rsp+861], 0
	mov	BYTE PTR encoded$[rsp+862], 0
	mov	BYTE PTR encoded$[rsp+863], 0
	mov	BYTE PTR encoded$[rsp+864], 0
	mov	BYTE PTR encoded$[rsp+865], 0
	mov	BYTE PTR encoded$[rsp+866], 0
	mov	BYTE PTR encoded$[rsp+867], 0
	mov	BYTE PTR encoded$[rsp+868], 0
	mov	BYTE PTR encoded$[rsp+869], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+870], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+871], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+872], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+873], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+874], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+875], 16
	mov	BYTE PTR encoded$[rsp+876], 0
	mov	BYTE PTR encoded$[rsp+877], 0
	mov	BYTE PTR encoded$[rsp+878], 0
	mov	BYTE PTR encoded$[rsp+879], 0
	mov	BYTE PTR encoded$[rsp+880], 0
	mov	BYTE PTR encoded$[rsp+881], 0
	mov	BYTE PTR encoded$[rsp+882], 0
	mov	BYTE PTR encoded$[rsp+883], 0
	mov	BYTE PTR encoded$[rsp+884], 0
	mov	BYTE PTR encoded$[rsp+885], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+886], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+887], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+888], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+889], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+890], 108		; 0000006cH
	mov	BYTE PTR encoded$[rsp+891], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+892], 0
	mov	BYTE PTR encoded$[rsp+893], 0
	mov	BYTE PTR encoded$[rsp+894], 0
	mov	BYTE PTR encoded$[rsp+895], 0
	mov	BYTE PTR encoded$[rsp+896], 0
	mov	BYTE PTR encoded$[rsp+897], 0
	mov	BYTE PTR encoded$[rsp+898], 0
	mov	BYTE PTR encoded$[rsp+899], 0
	mov	BYTE PTR encoded$[rsp+900], 0
	mov	BYTE PTR encoded$[rsp+901], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+902], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+903], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+904], 16
	mov	BYTE PTR encoded$[rsp+905], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+906], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+907], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+908], 0
	mov	BYTE PTR encoded$[rsp+909], 0
	mov	BYTE PTR encoded$[rsp+910], 0
	mov	BYTE PTR encoded$[rsp+911], 0
	mov	BYTE PTR encoded$[rsp+912], 0
	mov	BYTE PTR encoded$[rsp+913], 0
	mov	BYTE PTR encoded$[rsp+914], 0
	mov	BYTE PTR encoded$[rsp+915], 0
	mov	BYTE PTR encoded$[rsp+916], 0
	mov	BYTE PTR encoded$[rsp+917], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+918], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+919], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+920], 16
	mov	BYTE PTR encoded$[rsp+921], 16
	mov	BYTE PTR encoded$[rsp+922], 16
	mov	BYTE PTR encoded$[rsp+923], 16
	mov	BYTE PTR encoded$[rsp+924], 0
	mov	BYTE PTR encoded$[rsp+925], 0
	mov	BYTE PTR encoded$[rsp+926], 0
	mov	BYTE PTR encoded$[rsp+927], 0
	mov	BYTE PTR encoded$[rsp+928], 0
	mov	BYTE PTR encoded$[rsp+929], 0
	mov	BYTE PTR encoded$[rsp+930], 0
	mov	BYTE PTR encoded$[rsp+931], 0
	mov	BYTE PTR encoded$[rsp+932], 0
	mov	BYTE PTR encoded$[rsp+933], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+934], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+935], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+936], 16
	mov	BYTE PTR encoded$[rsp+937], 8
	mov	BYTE PTR encoded$[rsp+938], 4
	mov	BYTE PTR encoded$[rsp+939], 124		; 0000007cH
	mov	BYTE PTR encoded$[rsp+940], 0
	mov	BYTE PTR encoded$[rsp+941], 0
	mov	BYTE PTR encoded$[rsp+942], 0
	mov	BYTE PTR encoded$[rsp+943], 0
	mov	BYTE PTR encoded$[rsp+944], 0
	mov	BYTE PTR encoded$[rsp+945], 0
	mov	BYTE PTR encoded$[rsp+946], 0
	mov	BYTE PTR encoded$[rsp+947], 0
	mov	BYTE PTR encoded$[rsp+948], 0
	mov	BYTE PTR encoded$[rsp+949], 48		; 00000030H
	mov	BYTE PTR encoded$[rsp+950], 16
	mov	BYTE PTR encoded$[rsp+951], 16
	mov	BYTE PTR encoded$[rsp+952], 16
	mov	BYTE PTR encoded$[rsp+953], 16
	mov	BYTE PTR encoded$[rsp+954], 16
	mov	BYTE PTR encoded$[rsp+955], 48		; 00000030H
	mov	BYTE PTR encoded$[rsp+956], 0
	mov	BYTE PTR encoded$[rsp+957], 0
	mov	BYTE PTR encoded$[rsp+958], 0
	mov	BYTE PTR encoded$[rsp+959], 0
	mov	BYTE PTR encoded$[rsp+960], 0
	mov	BYTE PTR encoded$[rsp+961], 0
	mov	BYTE PTR encoded$[rsp+962], 0
	mov	BYTE PTR encoded$[rsp+963], 0
	mov	BYTE PTR encoded$[rsp+964], 0
	mov	BYTE PTR encoded$[rsp+965], 4
	mov	BYTE PTR encoded$[rsp+966], 4
	mov	BYTE PTR encoded$[rsp+967], 8
	mov	BYTE PTR encoded$[rsp+968], 16
	mov	BYTE PTR encoded$[rsp+969], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+970], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+971], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+972], 0
	mov	BYTE PTR encoded$[rsp+973], 0
	mov	BYTE PTR encoded$[rsp+974], 0
	mov	BYTE PTR encoded$[rsp+975], 0
	mov	BYTE PTR encoded$[rsp+976], 0
	mov	BYTE PTR encoded$[rsp+977], 0
	mov	BYTE PTR encoded$[rsp+978], 0
	mov	BYTE PTR encoded$[rsp+979], 0
	mov	BYTE PTR encoded$[rsp+980], 0
	mov	BYTE PTR encoded$[rsp+981], 24
	mov	BYTE PTR encoded$[rsp+982], 16
	mov	BYTE PTR encoded$[rsp+983], 16
	mov	BYTE PTR encoded$[rsp+984], 16
	mov	BYTE PTR encoded$[rsp+985], 16
	mov	BYTE PTR encoded$[rsp+986], 16
	mov	BYTE PTR encoded$[rsp+987], 24
	mov	BYTE PTR encoded$[rsp+988], 0
	mov	BYTE PTR encoded$[rsp+989], 0
	mov	BYTE PTR encoded$[rsp+990], 0
	mov	BYTE PTR encoded$[rsp+991], 0
	mov	BYTE PTR encoded$[rsp+992], 0
	mov	BYTE PTR encoded$[rsp+993], 0
	mov	BYTE PTR encoded$[rsp+994], 0
	mov	BYTE PTR encoded$[rsp+995], 0
	mov	BYTE PTR encoded$[rsp+996], 0
	mov	BYTE PTR encoded$[rsp+997], 16
	mov	BYTE PTR encoded$[rsp+998], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+999], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1000], 0
	mov	BYTE PTR encoded$[rsp+1001], 0
	mov	BYTE PTR encoded$[rsp+1002], 0
	mov	BYTE PTR encoded$[rsp+1003], 0
	mov	BYTE PTR encoded$[rsp+1004], 0
	mov	BYTE PTR encoded$[rsp+1005], 0
	mov	BYTE PTR encoded$[rsp+1006], 0
	mov	BYTE PTR encoded$[rsp+1007], 0
	mov	BYTE PTR encoded$[rsp+1008], 0
	mov	BYTE PTR encoded$[rsp+1009], 0
	mov	BYTE PTR encoded$[rsp+1010], 0
	mov	BYTE PTR encoded$[rsp+1011], 0
	mov	BYTE PTR encoded$[rsp+1012], 0
	mov	BYTE PTR encoded$[rsp+1013], 0
	mov	BYTE PTR encoded$[rsp+1014], 0
	mov	BYTE PTR encoded$[rsp+1015], 0
	mov	BYTE PTR encoded$[rsp+1016], 0
	mov	BYTE PTR encoded$[rsp+1017], 0
	mov	BYTE PTR encoded$[rsp+1018], 0
	mov	BYTE PTR encoded$[rsp+1019], 124	; 0000007cH
	mov	BYTE PTR encoded$[rsp+1020], 0
	mov	BYTE PTR encoded$[rsp+1021], 0
	mov	BYTE PTR encoded$[rsp+1022], 0
	mov	BYTE PTR encoded$[rsp+1023], 0
	mov	BYTE PTR encoded$[rsp+1024], 0
	mov	BYTE PTR encoded$[rsp+1025], 0
	mov	BYTE PTR encoded$[rsp+1026], 0
	mov	BYTE PTR encoded$[rsp+1027], 0
	mov	BYTE PTR encoded$[rsp+1028], 0
	mov	BYTE PTR encoded$[rsp+1029], 8
	mov	BYTE PTR encoded$[rsp+1030], 16
	mov	BYTE PTR encoded$[rsp+1031], 0
	mov	BYTE PTR encoded$[rsp+1032], 0
	mov	BYTE PTR encoded$[rsp+1033], 0
	mov	BYTE PTR encoded$[rsp+1034], 0
	mov	BYTE PTR encoded$[rsp+1035], 0
	mov	BYTE PTR encoded$[rsp+1036], 0
	mov	BYTE PTR encoded$[rsp+1037], 0
	mov	BYTE PTR encoded$[rsp+1038], 0
	mov	BYTE PTR encoded$[rsp+1039], 0
	mov	BYTE PTR encoded$[rsp+1040], 0
	mov	BYTE PTR encoded$[rsp+1041], 0
	mov	BYTE PTR encoded$[rsp+1042], 0
	mov	BYTE PTR encoded$[rsp+1043], 0
	mov	BYTE PTR encoded$[rsp+1044], 0
	mov	BYTE PTR encoded$[rsp+1045], 0
	mov	BYTE PTR encoded$[rsp+1046], 0
	mov	BYTE PTR encoded$[rsp+1047], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1048], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1049], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1050], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1051], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1052], 0
	mov	BYTE PTR encoded$[rsp+1053], 0
	mov	BYTE PTR encoded$[rsp+1054], 0
	mov	BYTE PTR encoded$[rsp+1055], 0
	mov	BYTE PTR encoded$[rsp+1056], 0
	mov	BYTE PTR encoded$[rsp+1057], 0
	mov	BYTE PTR encoded$[rsp+1058], 0
	mov	BYTE PTR encoded$[rsp+1059], 0
	mov	BYTE PTR encoded$[rsp+1060], 0
	mov	BYTE PTR encoded$[rsp+1061], 4
	mov	BYTE PTR encoded$[rsp+1062], 4
	mov	BYTE PTR encoded$[rsp+1063], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1064], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1065], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1066], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1067], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1068], 0
	mov	BYTE PTR encoded$[rsp+1069], 0
	mov	BYTE PTR encoded$[rsp+1070], 0
	mov	BYTE PTR encoded$[rsp+1071], 0
	mov	BYTE PTR encoded$[rsp+1072], 0
	mov	BYTE PTR encoded$[rsp+1073], 0
	mov	BYTE PTR encoded$[rsp+1074], 0
	mov	BYTE PTR encoded$[rsp+1075], 0
	mov	BYTE PTR encoded$[rsp+1076], 0
	mov	BYTE PTR encoded$[rsp+1077], 0
	mov	BYTE PTR encoded$[rsp+1078], 0
	mov	BYTE PTR encoded$[rsp+1079], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1080], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1081], 4
	mov	BYTE PTR encoded$[rsp+1082], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1083], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1084], 0
	mov	BYTE PTR encoded$[rsp+1085], 0
	mov	BYTE PTR encoded$[rsp+1086], 0
	mov	BYTE PTR encoded$[rsp+1087], 0
	mov	BYTE PTR encoded$[rsp+1088], 0
	mov	BYTE PTR encoded$[rsp+1089], 0
	mov	BYTE PTR encoded$[rsp+1090], 0
	mov	BYTE PTR encoded$[rsp+1091], 0
	mov	BYTE PTR encoded$[rsp+1092], 0
	mov	BYTE PTR encoded$[rsp+1093], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1094], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1095], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1096], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1097], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1098], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1099], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1100], 0
	mov	BYTE PTR encoded$[rsp+1101], 0
	mov	BYTE PTR encoded$[rsp+1102], 0
	mov	BYTE PTR encoded$[rsp+1103], 0
	mov	BYTE PTR encoded$[rsp+1104], 0
	mov	BYTE PTR encoded$[rsp+1105], 0
	mov	BYTE PTR encoded$[rsp+1106], 0
	mov	BYTE PTR encoded$[rsp+1107], 0
	mov	BYTE PTR encoded$[rsp+1108], 0
	mov	BYTE PTR encoded$[rsp+1109], 0
	mov	BYTE PTR encoded$[rsp+1110], 0
	mov	BYTE PTR encoded$[rsp+1111], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1112], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1113], 124	; 0000007cH
	mov	BYTE PTR encoded$[rsp+1114], 4
	mov	BYTE PTR encoded$[rsp+1115], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1116], 0
	mov	BYTE PTR encoded$[rsp+1117], 0
	mov	BYTE PTR encoded$[rsp+1118], 0
	mov	BYTE PTR encoded$[rsp+1119], 0
	mov	BYTE PTR encoded$[rsp+1120], 0
	mov	BYTE PTR encoded$[rsp+1121], 0
	mov	BYTE PTR encoded$[rsp+1122], 0
	mov	BYTE PTR encoded$[rsp+1123], 0
	mov	BYTE PTR encoded$[rsp+1124], 0
	mov	BYTE PTR encoded$[rsp+1125], 48		; 00000030H
	mov	BYTE PTR encoded$[rsp+1126], 72		; 00000048H
	mov	BYTE PTR encoded$[rsp+1127], 8
	mov	BYTE PTR encoded$[rsp+1128], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1129], 8
	mov	BYTE PTR encoded$[rsp+1130], 8
	mov	BYTE PTR encoded$[rsp+1131], 8
	mov	BYTE PTR encoded$[rsp+1132], 0
	mov	BYTE PTR encoded$[rsp+1133], 0
	mov	BYTE PTR encoded$[rsp+1134], 0
	mov	BYTE PTR encoded$[rsp+1135], 0
	mov	BYTE PTR encoded$[rsp+1136], 0
	mov	BYTE PTR encoded$[rsp+1137], 0
	mov	BYTE PTR encoded$[rsp+1138], 0
	mov	BYTE PTR encoded$[rsp+1139], 0
	mov	BYTE PTR encoded$[rsp+1140], 0
	mov	BYTE PTR encoded$[rsp+1141], 0
	mov	BYTE PTR encoded$[rsp+1142], 0
	mov	BYTE PTR encoded$[rsp+1143], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1144], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1145], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1146], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1147], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1148], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1149], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1150], 0
	mov	BYTE PTR encoded$[rsp+1151], 0
	mov	BYTE PTR encoded$[rsp+1152], 0
	mov	BYTE PTR encoded$[rsp+1153], 0
	mov	BYTE PTR encoded$[rsp+1154], 0
	mov	BYTE PTR encoded$[rsp+1155], 0
	mov	BYTE PTR encoded$[rsp+1156], 0
	mov	BYTE PTR encoded$[rsp+1157], 4
	mov	BYTE PTR encoded$[rsp+1158], 4
	mov	BYTE PTR encoded$[rsp+1159], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1160], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1161], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1162], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1163], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1164], 0
	mov	BYTE PTR encoded$[rsp+1165], 0
	mov	BYTE PTR encoded$[rsp+1166], 0
	mov	BYTE PTR encoded$[rsp+1167], 0
	mov	BYTE PTR encoded$[rsp+1168], 0
	mov	BYTE PTR encoded$[rsp+1169], 0
	mov	BYTE PTR encoded$[rsp+1170], 0
	mov	BYTE PTR encoded$[rsp+1171], 0
	mov	BYTE PTR encoded$[rsp+1172], 0
	mov	BYTE PTR encoded$[rsp+1173], 16
	mov	BYTE PTR encoded$[rsp+1174], 0
	mov	BYTE PTR encoded$[rsp+1175], 24
	mov	BYTE PTR encoded$[rsp+1176], 16
	mov	BYTE PTR encoded$[rsp+1177], 16
	mov	BYTE PTR encoded$[rsp+1178], 16
	mov	BYTE PTR encoded$[rsp+1179], 124	; 0000007cH
	mov	BYTE PTR encoded$[rsp+1180], 0
	mov	BYTE PTR encoded$[rsp+1181], 0
	mov	BYTE PTR encoded$[rsp+1182], 0
	mov	BYTE PTR encoded$[rsp+1183], 0
	mov	BYTE PTR encoded$[rsp+1184], 0
	mov	BYTE PTR encoded$[rsp+1185], 0
	mov	BYTE PTR encoded$[rsp+1186], 0
	mov	BYTE PTR encoded$[rsp+1187], 0
	mov	BYTE PTR encoded$[rsp+1188], 0
	mov	BYTE PTR encoded$[rsp+1189], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1190], 0
	mov	BYTE PTR encoded$[rsp+1191], 96		; 00000060H
	mov	BYTE PTR encoded$[rsp+1192], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1193], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1194], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1195], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1196], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1197], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1198], 0
	mov	BYTE PTR encoded$[rsp+1199], 0
	mov	BYTE PTR encoded$[rsp+1200], 0
	mov	BYTE PTR encoded$[rsp+1201], 0
	mov	BYTE PTR encoded$[rsp+1202], 0
	mov	BYTE PTR encoded$[rsp+1203], 0
	mov	BYTE PTR encoded$[rsp+1204], 0
	mov	BYTE PTR encoded$[rsp+1205], 4
	mov	BYTE PTR encoded$[rsp+1206], 4
	mov	BYTE PTR encoded$[rsp+1207], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1208], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+1209], 28
	mov	BYTE PTR encoded$[rsp+1210], 36		; 00000024H
	mov	BYTE PTR encoded$[rsp+1211], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1212], 0
	mov	BYTE PTR encoded$[rsp+1213], 0
	mov	BYTE PTR encoded$[rsp+1214], 0
	mov	BYTE PTR encoded$[rsp+1215], 0
	mov	BYTE PTR encoded$[rsp+1216], 0
	mov	BYTE PTR encoded$[rsp+1217], 0
	mov	BYTE PTR encoded$[rsp+1218], 0
	mov	BYTE PTR encoded$[rsp+1219], 0
	mov	BYTE PTR encoded$[rsp+1220], 0
	mov	BYTE PTR encoded$[rsp+1221], 12
	mov	BYTE PTR encoded$[rsp+1222], 8
	mov	BYTE PTR encoded$[rsp+1223], 8
	mov	BYTE PTR encoded$[rsp+1224], 8
	mov	BYTE PTR encoded$[rsp+1225], 8
	mov	BYTE PTR encoded$[rsp+1226], 8
	mov	BYTE PTR encoded$[rsp+1227], 112	; 00000070H
	mov	BYTE PTR encoded$[rsp+1228], 0
	mov	BYTE PTR encoded$[rsp+1229], 0
	mov	BYTE PTR encoded$[rsp+1230], 0
	mov	BYTE PTR encoded$[rsp+1231], 0
	mov	BYTE PTR encoded$[rsp+1232], 0
	mov	BYTE PTR encoded$[rsp+1233], 0
	mov	BYTE PTR encoded$[rsp+1234], 0
	mov	BYTE PTR encoded$[rsp+1235], 0
	mov	BYTE PTR encoded$[rsp+1236], 0
	mov	BYTE PTR encoded$[rsp+1237], 0
	mov	BYTE PTR encoded$[rsp+1238], 0
	mov	BYTE PTR encoded$[rsp+1239], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1240], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+1241], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+1242], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+1243], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+1244], 0
	mov	BYTE PTR encoded$[rsp+1245], 0
	mov	BYTE PTR encoded$[rsp+1246], 0
	mov	BYTE PTR encoded$[rsp+1247], 0
	mov	BYTE PTR encoded$[rsp+1248], 0
	mov	BYTE PTR encoded$[rsp+1249], 0
	mov	BYTE PTR encoded$[rsp+1250], 0
	mov	BYTE PTR encoded$[rsp+1251], 0
	mov	BYTE PTR encoded$[rsp+1252], 0
	mov	BYTE PTR encoded$[rsp+1253], 0
	mov	BYTE PTR encoded$[rsp+1254], 0
	mov	BYTE PTR encoded$[rsp+1255], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1256], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1257], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1258], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1259], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1260], 0
	mov	BYTE PTR encoded$[rsp+1261], 0
	mov	BYTE PTR encoded$[rsp+1262], 0
	mov	BYTE PTR encoded$[rsp+1263], 0
	mov	BYTE PTR encoded$[rsp+1264], 0
	mov	BYTE PTR encoded$[rsp+1265], 0
	mov	BYTE PTR encoded$[rsp+1266], 0
	mov	BYTE PTR encoded$[rsp+1267], 0
	mov	BYTE PTR encoded$[rsp+1268], 0
	mov	BYTE PTR encoded$[rsp+1269], 0
	mov	BYTE PTR encoded$[rsp+1270], 0
	mov	BYTE PTR encoded$[rsp+1271], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1272], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1273], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1274], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1275], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1276], 0
	mov	BYTE PTR encoded$[rsp+1277], 0
	mov	BYTE PTR encoded$[rsp+1278], 0
	mov	BYTE PTR encoded$[rsp+1279], 0
	mov	BYTE PTR encoded$[rsp+1280], 0
	mov	BYTE PTR encoded$[rsp+1281], 0
	mov	BYTE PTR encoded$[rsp+1282], 0
	mov	BYTE PTR encoded$[rsp+1283], 0
	mov	BYTE PTR encoded$[rsp+1284], 0
	mov	BYTE PTR encoded$[rsp+1285], 0
	mov	BYTE PTR encoded$[rsp+1286], 0
	mov	BYTE PTR encoded$[rsp+1287], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1288], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1289], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1290], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1291], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1292], 4
	mov	BYTE PTR encoded$[rsp+1293], 4
	mov	BYTE PTR encoded$[rsp+1294], 0
	mov	BYTE PTR encoded$[rsp+1295], 0
	mov	BYTE PTR encoded$[rsp+1296], 0
	mov	BYTE PTR encoded$[rsp+1297], 0
	mov	BYTE PTR encoded$[rsp+1298], 0
	mov	BYTE PTR encoded$[rsp+1299], 0
	mov	BYTE PTR encoded$[rsp+1300], 0
	mov	BYTE PTR encoded$[rsp+1301], 0
	mov	BYTE PTR encoded$[rsp+1302], 0
	mov	BYTE PTR encoded$[rsp+1303], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1304], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1305], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1306], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1307], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1308], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1309], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1310], 0
	mov	BYTE PTR encoded$[rsp+1311], 0
	mov	BYTE PTR encoded$[rsp+1312], 0
	mov	BYTE PTR encoded$[rsp+1313], 0
	mov	BYTE PTR encoded$[rsp+1314], 0
	mov	BYTE PTR encoded$[rsp+1315], 0
	mov	BYTE PTR encoded$[rsp+1316], 0
	mov	BYTE PTR encoded$[rsp+1317], 0
	mov	BYTE PTR encoded$[rsp+1318], 0
	mov	BYTE PTR encoded$[rsp+1319], 52		; 00000034H
	mov	BYTE PTR encoded$[rsp+1320], 76		; 0000004cH
	mov	BYTE PTR encoded$[rsp+1321], 4
	mov	BYTE PTR encoded$[rsp+1322], 4
	mov	BYTE PTR encoded$[rsp+1323], 4
	mov	BYTE PTR encoded$[rsp+1324], 0
	mov	BYTE PTR encoded$[rsp+1325], 0
	mov	BYTE PTR encoded$[rsp+1326], 0
	mov	BYTE PTR encoded$[rsp+1327], 0
	mov	BYTE PTR encoded$[rsp+1328], 0
	mov	BYTE PTR encoded$[rsp+1329], 0
	mov	BYTE PTR encoded$[rsp+1330], 0
	mov	BYTE PTR encoded$[rsp+1331], 0
	mov	BYTE PTR encoded$[rsp+1332], 0
	mov	BYTE PTR encoded$[rsp+1333], 0
	mov	BYTE PTR encoded$[rsp+1334], 0
	mov	BYTE PTR encoded$[rsp+1335], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1336], 4
	mov	BYTE PTR encoded$[rsp+1337], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1338], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1339], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1340], 0
	mov	BYTE PTR encoded$[rsp+1341], 0
	mov	BYTE PTR encoded$[rsp+1342], 0
	mov	BYTE PTR encoded$[rsp+1343], 0
	mov	BYTE PTR encoded$[rsp+1344], 0
	mov	BYTE PTR encoded$[rsp+1345], 0
	mov	BYTE PTR encoded$[rsp+1346], 0
	mov	BYTE PTR encoded$[rsp+1347], 0
	mov	BYTE PTR encoded$[rsp+1348], 0
	mov	BYTE PTR encoded$[rsp+1349], 8
	mov	BYTE PTR encoded$[rsp+1350], 8
	mov	BYTE PTR encoded$[rsp+1351], 60		; 0000003cH
	mov	BYTE PTR encoded$[rsp+1352], 8
	mov	BYTE PTR encoded$[rsp+1353], 8
	mov	BYTE PTR encoded$[rsp+1354], 8
	mov	BYTE PTR encoded$[rsp+1355], 112	; 00000070H
	mov	BYTE PTR encoded$[rsp+1356], 0
	mov	BYTE PTR encoded$[rsp+1357], 0
	mov	BYTE PTR encoded$[rsp+1358], 0
	mov	BYTE PTR encoded$[rsp+1359], 0
	mov	BYTE PTR encoded$[rsp+1360], 0
	mov	BYTE PTR encoded$[rsp+1361], 0
	mov	BYTE PTR encoded$[rsp+1362], 0
	mov	BYTE PTR encoded$[rsp+1363], 0
	mov	BYTE PTR encoded$[rsp+1364], 0
	mov	BYTE PTR encoded$[rsp+1365], 0
	mov	BYTE PTR encoded$[rsp+1366], 0
	mov	BYTE PTR encoded$[rsp+1367], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1368], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1369], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1370], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1371], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1372], 0
	mov	BYTE PTR encoded$[rsp+1373], 0
	mov	BYTE PTR encoded$[rsp+1374], 0
	mov	BYTE PTR encoded$[rsp+1375], 0
	mov	BYTE PTR encoded$[rsp+1376], 0
	mov	BYTE PTR encoded$[rsp+1377], 0
	mov	BYTE PTR encoded$[rsp+1378], 0
	mov	BYTE PTR encoded$[rsp+1379], 0
	mov	BYTE PTR encoded$[rsp+1380], 0
	mov	BYTE PTR encoded$[rsp+1381], 0
	mov	BYTE PTR encoded$[rsp+1382], 0
	mov	BYTE PTR encoded$[rsp+1383], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1384], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1385], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1386], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+1387], 16
	mov	BYTE PTR encoded$[rsp+1388], 0
	mov	BYTE PTR encoded$[rsp+1389], 0
	mov	BYTE PTR encoded$[rsp+1390], 0
	mov	BYTE PTR encoded$[rsp+1391], 0
	mov	BYTE PTR encoded$[rsp+1392], 0
	mov	BYTE PTR encoded$[rsp+1393], 0
	mov	BYTE PTR encoded$[rsp+1394], 0
	mov	BYTE PTR encoded$[rsp+1395], 0
	mov	BYTE PTR encoded$[rsp+1396], 0
	mov	BYTE PTR encoded$[rsp+1397], 0
	mov	BYTE PTR encoded$[rsp+1398], 0
	mov	BYTE PTR encoded$[rsp+1399], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1400], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1401], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+1402], 84		; 00000054H
	mov	BYTE PTR encoded$[rsp+1403], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+1404], 0
	mov	BYTE PTR encoded$[rsp+1405], 0
	mov	BYTE PTR encoded$[rsp+1406], 0
	mov	BYTE PTR encoded$[rsp+1407], 0
	mov	BYTE PTR encoded$[rsp+1408], 0
	mov	BYTE PTR encoded$[rsp+1409], 0
	mov	BYTE PTR encoded$[rsp+1410], 0
	mov	BYTE PTR encoded$[rsp+1411], 0
	mov	BYTE PTR encoded$[rsp+1412], 0
	mov	BYTE PTR encoded$[rsp+1413], 0
	mov	BYTE PTR encoded$[rsp+1414], 0
	mov	BYTE PTR encoded$[rsp+1415], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1416], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+1417], 16
	mov	BYTE PTR encoded$[rsp+1418], 40		; 00000028H
	mov	BYTE PTR encoded$[rsp+1419], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1420], 0
	mov	BYTE PTR encoded$[rsp+1421], 0
	mov	BYTE PTR encoded$[rsp+1422], 0
	mov	BYTE PTR encoded$[rsp+1423], 0
	mov	BYTE PTR encoded$[rsp+1424], 0
	mov	BYTE PTR encoded$[rsp+1425], 0
	mov	BYTE PTR encoded$[rsp+1426], 0
	mov	BYTE PTR encoded$[rsp+1427], 0
	mov	BYTE PTR encoded$[rsp+1428], 0
	mov	BYTE PTR encoded$[rsp+1429], 0
	mov	BYTE PTR encoded$[rsp+1430], 0
	mov	BYTE PTR encoded$[rsp+1431], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1432], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1433], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1434], 68		; 00000044H
	mov	BYTE PTR encoded$[rsp+1435], 120	; 00000078H
	mov	BYTE PTR encoded$[rsp+1436], 64		; 00000040H
	mov	BYTE PTR encoded$[rsp+1437], 56		; 00000038H
	mov	BYTE PTR encoded$[rsp+1438], 0
	mov	BYTE PTR encoded$[rsp+1439], 0
	mov	BYTE PTR encoded$[rsp+1440], 0
	mov	BYTE PTR encoded$[rsp+1441], 0
	mov	BYTE PTR encoded$[rsp+1442], 0
	mov	BYTE PTR encoded$[rsp+1443], 0
	mov	BYTE PTR encoded$[rsp+1444], 0
	mov	BYTE PTR encoded$[rsp+1445], 0
	mov	BYTE PTR encoded$[rsp+1446], 0
	mov	BYTE PTR encoded$[rsp+1447], 124	; 0000007cH
	mov	BYTE PTR encoded$[rsp+1448], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+1449], 16
	mov	BYTE PTR encoded$[rsp+1450], 8
	mov	BYTE PTR encoded$[rsp+1451], 124	; 0000007cH
	mov	BYTE PTR encoded$[rsp+1452], 0
	mov	BYTE PTR encoded$[rsp+1453], 0
	mov	BYTE PTR encoded$[rsp+1454], 0
	mov	BYTE PTR encoded$[rsp+1455], 0
	mov	BYTE PTR encoded$[rsp+1456], 0
	mov	BYTE PTR encoded$[rsp+1457], 0
	mov	BYTE PTR encoded$[rsp+1458], 0
	mov	BYTE PTR encoded$[rsp+1459], 0
	mov	BYTE PTR encoded$[rsp+1460], 0
	mov	BYTE PTR encoded$[rsp+1461], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+1462], 16
	mov	BYTE PTR encoded$[rsp+1463], 16
	mov	BYTE PTR encoded$[rsp+1464], 8
	mov	BYTE PTR encoded$[rsp+1465], 16
	mov	BYTE PTR encoded$[rsp+1466], 16
	mov	BYTE PTR encoded$[rsp+1467], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+1468], 0
	mov	BYTE PTR encoded$[rsp+1469], 0
	mov	BYTE PTR encoded$[rsp+1470], 0
	mov	BYTE PTR encoded$[rsp+1471], 0
	mov	BYTE PTR encoded$[rsp+1472], 0
	mov	BYTE PTR encoded$[rsp+1473], 0
	mov	BYTE PTR encoded$[rsp+1474], 0
	mov	BYTE PTR encoded$[rsp+1475], 0
	mov	BYTE PTR encoded$[rsp+1476], 0
	mov	BYTE PTR encoded$[rsp+1477], 16
	mov	BYTE PTR encoded$[rsp+1478], 16
	mov	BYTE PTR encoded$[rsp+1479], 16
	mov	BYTE PTR encoded$[rsp+1480], 16
	mov	BYTE PTR encoded$[rsp+1481], 16
	mov	BYTE PTR encoded$[rsp+1482], 16
	mov	BYTE PTR encoded$[rsp+1483], 16
	mov	BYTE PTR encoded$[rsp+1484], 0
	mov	BYTE PTR encoded$[rsp+1485], 0
	mov	BYTE PTR encoded$[rsp+1486], 0
	mov	BYTE PTR encoded$[rsp+1487], 0
	mov	BYTE PTR encoded$[rsp+1488], 0
	mov	BYTE PTR encoded$[rsp+1489], 0
	mov	BYTE PTR encoded$[rsp+1490], 0
	mov	BYTE PTR encoded$[rsp+1491], 0
	mov	BYTE PTR encoded$[rsp+1492], 0
	mov	BYTE PTR encoded$[rsp+1493], 8
	mov	BYTE PTR encoded$[rsp+1494], 16
	mov	BYTE PTR encoded$[rsp+1495], 16
	mov	BYTE PTR encoded$[rsp+1496], 32		; 00000020H
	mov	BYTE PTR encoded$[rsp+1497], 16
	mov	BYTE PTR encoded$[rsp+1498], 16
	mov	BYTE PTR encoded$[rsp+1499], 8
	mov	BYTE PTR encoded$[rsp+1500], 0
	mov	BYTE PTR encoded$[rsp+1501], 0
	mov	BYTE PTR encoded$[rsp+1502], 0
	mov	BYTE PTR encoded$[rsp+1503], 0
	mov	BYTE PTR encoded$[rsp+1504], 0
	mov	BYTE PTR encoded$[rsp+1505], 0
	mov	BYTE PTR encoded$[rsp+1506], 0
	mov	BYTE PTR encoded$[rsp+1507], 0
	mov	BYTE PTR encoded$[rsp+1508], 0
	mov	BYTE PTR encoded$[rsp+1509], 0
	mov	BYTE PTR encoded$[rsp+1510], 0
	mov	BYTE PTR encoded$[rsp+1511], 72		; 00000048H
	mov	BYTE PTR encoded$[rsp+1512], 52		; 00000034H
	mov	BYTE PTR encoded$[rsp+1513], 0
	mov	BYTE PTR encoded$[rsp+1514], 0
	mov	BYTE PTR encoded$[rsp+1515], 0
	mov	BYTE PTR encoded$[rsp+1516], 0
	mov	BYTE PTR encoded$[rsp+1517], 0
	mov	BYTE PTR encoded$[rsp+1518], 0
	mov	BYTE PTR encoded$[rsp+1519], 0
; Line 1925
	mov	r9d, 28
	mov	r8d, 256				; 00000100H
	mov	edx, 512				; 00000200H
	lea	rcx, QWORD PTR $T7[rsp]
	call	rxtexture_create
	lea	rcx, QWORD PTR texture$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1927
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR texture$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	rxtexture_borrow
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1929
	mov	eax, DWORD PTR b$[rsp+16]
	mov	DWORD PTR stride$[rsp], eax
; Line 1930
	mov	rax, QWORD PTR b$[rsp+8]
	mov	QWORD PTR memory$[rsp], rax
; Line 1933
	mov	DWORD PTR index$[rsp], 0
	jmp	SHORT $LN4@rxinit_def
$LN2@rxinit_def:
	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	DWORD PTR index$[rsp], eax
$LN4@rxinit_def:
	cmp	DWORD PTR index$[rsp], 95		; 0000005fH
	jae	$LN3@rxinit_def
; Line 1934
	mov	eax, DWORD PTR index$[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	and	eax, 31
	sub	eax, edx
	imul	eax, eax, 16
	mov	DWORD PTR xcursor$1[rsp], eax
; Line 1935
	mov	eax, DWORD PTR index$[rsp]
	cdq
	and	edx, 31
	add	eax, edx
	sar	eax, 5
	imul	eax, eax, 16
	mov	DWORD PTR ycursor$2[rsp], eax
; Line 1939
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR ycursor$2[rsp]
	cdqe
	mov	rcx, QWORD PTR memory$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR xcursor$1[rsp]
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	QWORD PTR write$4[rsp], rax
; Line 1941
	movsxd	rax, DWORD PTR index$[rsp]
	imul	rax, rax, 16
	lea	rax, QWORD PTR encoded$[rsp+rax]
	mov	r8, rax
	mov	edx, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR write$4[rsp]
	call	load_bitmap8
; Line 1944
	movzx	eax, WORD PTR xcursor$1[rsp]
	mov	WORD PTR p$3[rsp], ax
; Line 1945
	movzx	eax, WORD PTR ycursor$2[rsp]
	mov	WORD PTR p$3[rsp+2], ax
; Line 1947
	movsxd	rax, DWORD PTR index$[rsp]
	lea	rcx, OFFSET FLAT:rx+704
	mov	edx, DWORD PTR p$3[rsp]
	mov	DWORD PTR [rcx+rax*4], edx
; Line 1948
	jmp	$LN2@rxinit_def
$LN3@rxinit_def:
; Line 1950
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T6[rsp]
	call	rxreturn
; Line 1952
	lea	rax, OFFSET FLAT:rx+680
	lea	rcx, QWORD PTR texture$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 1953
	movss	xmm0, DWORD PTR __real@41800000
	movss	DWORD PTR rx+1084, xmm0
; Line 1954
	movss	xmm0, DWORD PTR __real@40c00000
	movss	DWORD PTR rx+1088, xmm0
; Line 1955
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1784				; 000006f8H
	pop	rdi
	pop	rsi
	ret	0
rxinit_default_font ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_depth_stencil_state$ = 32
the_info$ = 40
__$ArrayPad$ = 96
depth_enabled$ = 128
stencil_enabled$ = 136
rxcreate_simple_stencil_state_d3d PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1514
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1516
	mov	eax, DWORD PTR depth_enabled$[rsp]
	mov	DWORD PTR the_info$[rsp], eax
; Line 1517
	mov	eax, DWORD PTR stencil_enabled$[rsp]
	mov	DWORD PTR the_info$[rsp+12], eax
; Line 1518
	mov	DWORD PTR the_info$[rsp+4], 1
; Line 1519
	mov	DWORD PTR the_info$[rsp+8], 2
; Line 1520
	mov	BYTE PTR the_info$[rsp+16], 255		; 000000ffH
; Line 1521
	mov	BYTE PTR the_info$[rsp+17], 255		; 000000ffH
; Line 1522
	mov	DWORD PTR the_info$[rsp+20], 1
; Line 1523
	mov	DWORD PTR the_info$[rsp+24], 8
; Line 1524
	mov	DWORD PTR the_info$[rsp+28], 1
; Line 1525
	mov	DWORD PTR the_info$[rsp+32], 8
; Line 1526
	mov	DWORD PTR the_info$[rsp+36], 1
; Line 1527
	mov	DWORD PTR the_info$[rsp+40], 8
; Line 1528
	mov	DWORD PTR the_info$[rsp+44], 1
; Line 1529
	mov	DWORD PTR the_info$[rsp+48], 8
; Line 1531
	mov	QWORD PTR the_depth_stencil_state$[rsp], 0
; Line 1532
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR the_depth_stencil_state$[rsp]
	lea	rdx, QWORD PTR the_info$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+168]
; Line 1534
	mov	rax, QWORD PTR the_depth_stencil_state$[rsp]
; Line 1535
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
rxcreate_simple_stencil_state_d3d ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index_offset$ = 80
command$ = 88
tv218 = 96
article$1 = 104
shadow_buffer$2 = 112
candle_buffer$3 = 120
vertex_shader$4 = 128
pixel_shader$5 = 136
tv289 = 144
tv288 = 152
tv223 = 160
$T6 = 176
target$7 = 192
$T8 = 224
input_target$9 = 256
$T10 = 288
$T11 = 320
$T12 = 352
$T13 = 384
$T14 = 416
$T15 = 448
$T16 = 480
$T17 = 512
$S13$ = 544
clear_color$18 = 560
ShaderResourceView$19 = 576
__$ArrayPad$ = 600
rxtick	PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1397
$LN15:
	push	rsi
	push	rdi
	sub	rsp, 616				; 00000268H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1398
	mov	eax, DWORD PTR rx+624
	inc	eax
	mov	DWORD PTR rx+624, eax
; Line 1402
	call	rxwindow_poll
; Line 1404
	mov	rcx, QWORD PTR rx
	call	QWORD PTR __imp_SetCursor
; Line 1407
	call	rxdraw_end
; Line 1411
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S13$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S13$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S13$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S13$[rsp+12], xmm0
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $S13$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+56], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T6[rsp]
	call	rxdraw_skinned_preset_unnormalized
; Line 1415
	call	rxdraw_end
; Line 1418
	call	rxdefault_render_pass_end
; Line 1420
	mov	DWORD PTR index_offset$[rsp], 0
; Line 1422
	lea	rax, OFFSET FLAT:rx+1344
	mov	QWORD PTR command$[rsp], rax
$LN2@rxtick:
; Line 1425
	mov	rax, QWORD PTR command$[rsp]
	cmp	DWORD PTR [rax+8], 21
	je	SHORT $LN3@rxtick
; Line 1427
	mov	edx, DWORD PTR index_offset$[rsp]
	mov	rcx, QWORD PTR command$[rsp]
	call	rxcomexc
	mov	ecx, DWORD PTR index_offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index_offset$[rsp], eax
; Line 1428
	mov	rax, QWORD PTR command$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR command$[rsp], rax
; Line 1429
	jmp	SHORT $LN2@rxtick
$LN3@rxtick:
; Line 1431
	mov	rax, QWORD PTR command$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR command$[rsp], rax
; Line 1436
	cmp	QWORD PTR rx+5768656, 0
	je	$LN9@rxtick
	cmp	QWORD PTR rx+5768664, 0
	je	$LN9@rxtick
; Line 1442
	mov	rax, QWORD PTR rx+5768656
	mov	QWORD PTR vertex_shader$4[rsp], rax
; Line 1443
	mov	rax, QWORD PTR rx+5768664
	mov	QWORD PTR pixel_shader$5[rsp], rax
; Line 1444
	lea	rax, QWORD PTR input_target$9[rsp]
	lea	rcx, OFFSET FLAT:rx+5768768
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 1445
	lea	rax, QWORD PTR target$7[rsp]
	lea	rcx, OFFSET FLAT:rx+5768616
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 1446
	mov	rax, QWORD PTR rx+5768704
	mov	QWORD PTR shadow_buffer$2[rsp], rax
; Line 1447
	mov	rax, QWORD PTR rx+5768752
	mov	QWORD PTR candle_buffer$3[rsp], rax
; Line 1449
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR clear_color$18[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3e99999a
	movss	DWORD PTR clear_color$18[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3ecccccd
	movss	DWORD PTR clear_color$18[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR clear_color$18[rsp+12], xmm0
; Line 1450
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR target$7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR clear_color$18[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	rxrender_target_apply
; Line 1452
	mov	rcx, QWORD PTR vertex_shader$4[rsp]
	call	rxshader_apply
; Line 1453
	mov	rcx, QWORD PTR pixel_shader$5[rsp]
	call	rxshader_apply
; Line 1458
	lea	rax, OFFSET FLAT:$SG139644
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1458				; 000005b2H
	lea	r8, OFFSET FLAT:$SG139645
	mov	edx, 207				; 000000cfH
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR input_target$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -8
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:rx+1096
	lea	rcx, QWORD PTR $T14[rsp]
	call	cctblgeti_
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR rx+1096
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR article$1[rsp], rax
$LN6@rxtick:
; Line 1459
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 0
	je	SHORT $LN11@rxtick
	lea	rax, OFFSET FLAT:$SG139649
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1459				; 000005b3H
	lea	r8, OFFSET FLAT:$SG139650
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139647
	lea	rdx, OFFSET FLAT:$SG139648
	lea	rcx, QWORD PTR $T15[rsp]
	call	cctrace_
	int	3
$LN11@rxtick:
	xor	eax, eax
	test	eax, eax
	jne	$LN6@rxtick
; Line 1461
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR ShaderResourceView$19[rsp+rax]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR article$1[rsp]
	mov	rdx, QWORD PTR [rdi+rdx+16]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv289[rsp], rdx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:IID_ID3D11ShaderResourceView
	mov	rax, QWORD PTR article$1[rsp]
	mov	rcx, QWORD PTR [rax+rcx+16]
	mov	rax, QWORD PTR tv289[rsp]
	call	QWORD PTR [rax]
; Line 1463
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR ShaderResourceView$19[rsp+rax]
	mov	rcx, QWORD PTR shadow_buffer$2[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv288[rsp], rcx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:IID_ID3D11ShaderResourceView
	mov	rcx, QWORD PTR shadow_buffer$2[rsp]
	mov	rax, QWORD PTR tv288[rsp]
	call	QWORD PTR [rax]
; Line 1465
	mov	eax, 8
	imul	rax, rax, 2
	lea	rax, QWORD PTR ShaderResourceView$19[rsp+rax]
	mov	rcx, QWORD PTR candle_buffer$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv223[rsp], rcx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:IID_ID3D11ShaderResourceView
	mov	rcx, QWORD PTR candle_buffer$3[rsp]
	mov	rax, QWORD PTR tv223[rsp]
	call	QWORD PTR [rax]
; Line 1468
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR ShaderResourceView$19[rsp]
	mov	r8d, 3
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+64]
$LN7@rxtick:
; Line 1471
	mov	rax, QWORD PTR command$[rsp]
	cmp	DWORD PTR [rax+8], 21
	je	SHORT $LN8@rxtick
; Line 1473
	mov	edx, DWORD PTR index_offset$[rsp]
	mov	rcx, QWORD PTR command$[rsp]
	call	rxcomexc
	mov	ecx, DWORD PTR index_offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR index_offset$[rsp], eax
; Line 1474
	mov	rax, QWORD PTR command$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR command$[rsp], rax
; Line 1475
	jmp	SHORT $LN7@rxtick
$LN8@rxtick:
; Line 1477
	mov	rax, QWORD PTR command$[rsp]
	add	rax, 88					; 00000058H
	mov	QWORD PTR command$[rsp], rax
; Line 1483
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR ShaderResourceView$19[rsp]
	call	memset
; Line 1484
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR ShaderResourceView$19[rsp]
	mov	r8d, 3
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+64]
; Line 1485
	jmp	SHORT $LN10@rxtick
$LN9@rxtick:
; Line 1487
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, OFFSET FLAT:rx+5768768
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, OFFSET FLAT:rx+5768616
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	rxrender_target_copy
$LN10@rxtick:
; Line 1492
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, OFFSET FLAT:rx+5768616
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, OFFSET FLAT:rx+5768568
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	rxrender_target_copy
; Line 1498
	mov	rax, QWORD PTR rx+5769560
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5769560
	call	QWORD PTR [rax+64]
; Line 1501
	mov	r8d, 1
	mov	edx, -1					; ffffffffH
	mov	rcx, QWORD PTR rx+5769568
	call	QWORD PTR __imp_WaitForSingleObjectEx
; Line 1503
	call	rxwindow_enable
; Line 1505
	call	rxrestore_render_stack
; Line 1507
	call	rxtime
; Line 1508
	mov	eax, DWORD PTR rx+5768968
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN13@rxtick
	mov	DWORD PTR tv218[rsp], 1
	jmp	SHORT $LN14@rxtick
$LN13@rxtick:
	mov	DWORD PTR tv218[rsp], 0
$LN14@rxtick:
	mov	eax, DWORD PTR tv218[rsp]
; Line 1509
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 616				; 00000268H
	pop	rdi
	pop	rsi
	ret	0
rxtick	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 80
y$ = 88
rxwindow_xy PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 102
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 103
	mov	DWORD PTR [rsp+48], 1
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5768976
	call	QWORD PTR __imp_SetWindowPos
; Line 104
	add	rsp, 72					; 00000048H
	ret	0
rxwindow_xy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Client$ = 64
__$ArrayPad$ = 80
size_x$ = 112
size_y$ = 120
rxwindow_resize PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 87
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 89
	mov	DWORD PTR Client$[rsp], 0
; Line 90
	mov	DWORD PTR Client$[rsp+4], 0
; Line 91
	mov	eax, DWORD PTR size_x$[rsp]
	mov	DWORD PTR Client$[rsp+8], eax
; Line 92
	mov	eax, DWORD PTR size_y$[rsp]
	mov	DWORD PTR Client$[rsp+12], eax
; Line 93
	xor	r8d, r8d
	mov	edx, 13565952				; 00cf0000H
	lea	rcx, QWORD PTR Client$[rsp]
	call	QWORD PTR __imp_AdjustWindowRect
; Line 95
	mov	DWORD PTR [rsp+48], 50			; 00000032H
	mov	eax, DWORD PTR Client$[rsp+12]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR Client$[rsp+8]
	mov	DWORD PTR [rsp+32], eax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, -2
	mov	rcx, QWORD PTR rx+5768976
	call	QWORD PTR __imp_SetWindowPos
; Line 98
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
rxwindow_resize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rxwindow_enable PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 77
$LN4:
	sub	rsp, 40					; 00000028H
; Line 78
	mov	eax, DWORD PTR rx+5768968
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@rxwindow_e
; Line 79
	jmp	SHORT $LN1@rxwindow_e
$LN2@rxwindow_e:
; Line 81
	mov	eax, DWORD PTR rx+5768968
	or	eax, 2
	mov	DWORD PTR rx+5768968, eax
; Line 82
	mov	edx, 5
	mov	rcx, QWORD PTR rx+5768976
	call	QWORD PTR __imp_ShowWindow
$LN1@rxwindow_e:
; Line 83
	add	rsp, 40					; 00000028H
	ret	0
rxwindow_enable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
WindowSizeY$ = 96
WindowSizeX$ = 100
WindowClass$ = 112
WindowRect$1 = 192
__$ArrayPad$ = 208
window_title$ = 240
rxwindow_create PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 32
$LN8:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 34
	mov	r8d, 72					; 00000048H
	xor	edx, edx
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	memset
; Line 35
	lea	rax, OFFSET FLAT:rxwindow_message_callback_win32
	mov	QWORD PTR WindowClass$[rsp+8], rax
; Line 36
	xor	ecx, ecx
	call	QWORD PTR __imp_GetModuleHandleW
	mov	QWORD PTR WindowClass$[rsp+24], rax
; Line 37
	mov	rax, QWORD PTR window_title$[rsp]
	mov	QWORD PTR WindowClass$[rsp+64], rax
; Line 38
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	QWORD PTR __imp_RegisterClassW
; Line 41
	mov	DWORD PTR WindowSizeX$[rsp], 1024	; 00000400H
; Line 42
	mov	DWORD PTR WindowSizeY$[rsp], 512	; 00000200H
; Line 44
	cmp	DWORD PTR WindowSizeX$[rsp], -2147483648 ; ffffffff80000000H
	jne	SHORT $LN3@rxwindow_c
	cmp	DWORD PTR WindowSizeY$[rsp], -2147483648 ; ffffffff80000000H
	je	SHORT $LN2@rxwindow_c
$LN3@rxwindow_c:
; Line 47
	cmp	DWORD PTR WindowSizeX$[rsp], -2147483648 ; ffffffff80000000H
	jne	SHORT $LN4@rxwindow_c
	mov	DWORD PTR WindowSizeX$[rsp], 720	; 000002d0H
$LN4@rxwindow_c:
; Line 48
	cmp	DWORD PTR WindowSizeY$[rsp], -2147483648 ; ffffffff80000000H
	jne	SHORT $LN5@rxwindow_c
	mov	DWORD PTR WindowSizeY$[rsp], 720	; 000002d0H
$LN5@rxwindow_c:
$LN2@rxwindow_c:
; Line 51
	cmp	DWORD PTR WindowSizeX$[rsp], -2147483648 ; ffffffff80000000H
	je	SHORT $LN6@rxwindow_c
	cmp	DWORD PTR WindowSizeY$[rsp], -2147483648 ; ffffffff80000000H
	je	SHORT $LN6@rxwindow_c
; Line 55
	mov	DWORD PTR WindowRect$1[rsp], 0
; Line 56
	mov	DWORD PTR WindowRect$1[rsp+4], 0
; Line 57
	mov	DWORD PTR WindowRect$1[rsp+8], 1024	; 00000400H
; Line 58
	mov	DWORD PTR WindowRect$1[rsp+12], 512	; 00000200H
; Line 59
	xor	r8d, r8d
	mov	edx, 13565952				; 00cf0000H
	lea	rcx, QWORD PTR WindowRect$1[rsp]
	call	QWORD PTR __imp_AdjustWindowRect
; Line 61
	mov	eax, DWORD PTR WindowRect$1[rsp]
	mov	ecx, DWORD PTR WindowRect$1[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR WindowSizeX$[rsp], eax
; Line 62
	mov	eax, DWORD PTR WindowRect$1[rsp+4]
	mov	ecx, DWORD PTR WindowRect$1[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR WindowSizeY$[rsp], eax
$LN6@rxwindow_c:
; Line 65
	mov	QWORD PTR [rsp+88], 0
	mov	rax, QWORD PTR WindowClass$[rsp+24]
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	DWORD PTR [rsp+40], -2147483648		; ffffffff80000000H
	mov	DWORD PTR [rsp+32], -2147483648		; ffffffff80000000H
	mov	r9d, 13303808				; 00cb0000H
	mov	r8, QWORD PTR window_title$[rsp]
	mov	rdx, QWORD PTR WindowClass$[rsp+64]
	mov	ecx, 2097152				; 00200000H
	call	QWORD PTR __imp_CreateWindowExW
	mov	QWORD PTR rx+5768976, rax
; Line 73
	call	rxwindow_poll
; Line 74
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
rxwindow_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
message$ = 48
client$ = 96
__$ArrayPad$ = 112
rxwindow_poll PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 108
$LN5:
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 109
	mov	r8d, 256				; 00000100H
	lea	rdx, OFFSET FLAT:rx+5769274
	lea	rcx, OFFSET FLAT:rx+5769018
	call	memcpy
; Line 110
	mov	r8d, 256				; 00000100H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:rx+5769274
	call	memset
; Line 112
	xor	eax, eax
	mov	WORD PTR rx+5769016, ax
$LN2@rxwindow_p:
; Line 115
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR message$[rsp]
	call	QWORD PTR __imp_PeekMessageA
	test	eax, eax
	je	SHORT $LN3@rxwindow_p
; Line 116
	lea	rcx, QWORD PTR message$[rsp]
	call	QWORD PTR __imp_TranslateMessage
; Line 117
	lea	rcx, QWORD PTR message$[rsp]
	call	QWORD PTR __imp_DispatchMessageW
; Line 118
	jmp	SHORT $LN2@rxwindow_p
$LN3@rxwindow_p:
; Line 121
	lea	rdx, QWORD PTR client$[rsp]
	mov	rcx, QWORD PTR rx+5768976
	call	QWORD PTR __imp_GetClientRect
; Line 123
	mov	eax, DWORD PTR client$[rsp]
	mov	ecx, DWORD PTR client$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+5768984, eax
; Line 124
	mov	eax, DWORD PTR client$[rsp+4]
	mov	ecx, DWORD PTR client$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+5768988, eax
; Line 125
	mov	eax, DWORD PTR rx+5768984
	sar	eax, 1
	mov	DWORD PTR rx+5768992, eax
; Line 126
	mov	eax, DWORD PTR rx+5768988
	sar	eax, 1
	mov	DWORD PTR rx+5768996, eax
; Line 127
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
rxwindow_poll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
Window$ = 64
Message$ = 72
wParam$ = 80
lParam$ = 88
rxwindow_message_callback_win32 PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 131
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 132
	mov	r8, QWORD PTR lParam$[rsp]
	mov	rdx, QWORD PTR wParam$[rsp]
	mov	ecx, DWORD PTR Message$[rsp]
	call	rxwindow_message_handler_win32
	cdqe
	mov	QWORD PTR result$[rsp], rax
; Line 134
	cmp	QWORD PTR result$[rsp], 1
	je	SHORT $LN2@rxwindow_m
; Line 136
	mov	r9, QWORD PTR lParam$[rsp]
	mov	r8, QWORD PTR wParam$[rsp]
	mov	edx, DWORD PTR Message$[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
	mov	QWORD PTR result$[rsp], rax
$LN2@rxwindow_m:
; Line 139
	mov	rax, QWORD PTR result$[rsp]
; Line 140
	add	rsp, 56					; 00000038H
	ret	0
rxwindow_message_callback_win32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
key_map$1 = 32
tv64 = 36
tv86 = 40
tv91 = 44
tv128 = 48
tv137 = 52
tv147 = 56
tv159 = 60
tv151 = 64
xcursor$2 = 72
ycursor$3 = 76
Message$ = 96
wParam$ = 104
lParam$ = 112
rxwindow_message_handler_win32 PROC
; File W:\cpp\void\e\rx\rx.win32.cc
; Line 144
$LN64:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H
; Line 145
	mov	eax, DWORD PTR Message$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 512		; 00000200H
	ja	SHORT $LN58@rxwindow_m
	cmp	DWORD PTR tv64[rsp], 512		; 00000200H
	je	$LN8@rxwindow_m
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 16
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 245		; 000000f5H
	ja	$LN44@rxwindow_m
	mov	eax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN62@rxwindow_m[rcx+rax]
	mov	eax, DWORD PTR $LN63@rxwindow_m[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN58@rxwindow_m:
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 513				; 00000201H
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 9
	ja	$LN44@rxwindow_m
	mov	eax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN61@rxwindow_m[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN6@rxwindow_m:
$LN7@rxwindow_m:
; Line 148
	xor	ecx, ecx
	call	QWORD PTR __imp_PostQuitMessage
; Line 149
	mov	eax, DWORD PTR rx+5768968
	or	eax, 1
	mov	DWORD PTR rx+5768968, eax
; Line 150
	jmp	$LN2@rxwindow_m
$LN8@rxwindow_m:
; Line 153
	mov	rax, QWORD PTR lParam$[rsp]
	and	rax, 65535				; 0000ffffH
	cwde
	mov	DWORD PTR xcursor$2[rsp], eax
; Line 154
	mov	rax, QWORD PTR lParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	cwde
	mov	DWORD PTR ycursor$3[rsp], eax
; Line 156
	mov	eax, DWORD PTR xcursor$2[rsp]
	mov	DWORD PTR rx+40, eax
; Line 157
	mov	eax, DWORD PTR ycursor$3[rsp]
	mov	ecx, DWORD PTR rx+5768988
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+44, eax
; Line 158
	jmp	$LN2@rxwindow_m
$LN9@rxwindow_m:
; Line 160
	mov	rax, QWORD PTR wParam$[rsp]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	cwde
	cdq
	mov	ecx, 120				; 00000078H
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 15
	lea	rdx, OFFSET FLAT:rx+5769274
	mov	BYTE PTR [rdx+rcx], al
; Line 161
	jmp	$LN2@rxwindow_m
$LN10@rxwindow_m:
$LN11@rxwindow_m:
$LN12@rxwindow_m:
; Line 163
	cmp	DWORD PTR Message$[rsp], 514		; 00000202H
	je	SHORT $LN46@rxwindow_m
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN47@rxwindow_m
$LN46@rxwindow_m:
	mov	DWORD PTR tv86[rsp], 0
$LN47@rxwindow_m:
	mov	eax, 1
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:rx+5769274
	movzx	edx, BYTE PTR tv86[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 164
	jmp	$LN2@rxwindow_m
$LN13@rxwindow_m:
$LN14@rxwindow_m:
$LN15@rxwindow_m:
; Line 166
	cmp	DWORD PTR Message$[rsp], 517		; 00000205H
	je	SHORT $LN48@rxwindow_m
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN49@rxwindow_m
$LN48@rxwindow_m:
	mov	DWORD PTR tv91[rsp], 0
$LN49@rxwindow_m:
	mov	eax, 1
	imul	rax, rax, 13
	lea	rcx, OFFSET FLAT:rx+5769274
	movzx	edx, BYTE PTR tv91[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 167
	jmp	$LN2@rxwindow_m
$LN16@rxwindow_m:
$LN17@rxwindow_m:
$LN18@rxwindow_m:
; Line 169
	cmp	DWORD PTR Message$[rsp], 520		; 00000208H
	je	SHORT $LN50@rxwindow_m
	mov	DWORD PTR tv128[rsp], 1
	jmp	SHORT $LN51@rxwindow_m
$LN50@rxwindow_m:
	mov	DWORD PTR tv128[rsp], 0
$LN51@rxwindow_m:
	mov	eax, 1
	imul	rax, rax, 14
	lea	rcx, OFFSET FLAT:rx+5769274
	movzx	edx, BYTE PTR tv128[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 170
	jmp	$LN2@rxwindow_m
$LN19@rxwindow_m:
; Line 192
	xor	eax, eax
	mov	WORD PTR rx+5769016, ax
; Line 194
	cmp	QWORD PTR wParam$[rsp], 0
	jb	SHORT $LN20@rxwindow_m
	cmp	QWORD PTR wParam$[rsp], 128		; 00000080H
	ja	SHORT $LN20@rxwindow_m
; Line 196
	movzx	eax, WORD PTR wParam$[rsp]
	mov	WORD PTR rx+5769016, ax
$LN20@rxwindow_m:
; Line 199
	mov	eax, 1
	jmp	$LN1@rxwindow_m
$LN21@rxwindow_m:
$LN22@rxwindow_m:
$LN23@rxwindow_m:
$LN24@rxwindow_m:
; Line 206
	mov	ecx, 16
	call	QWORD PTR __imp_GetKeyState
	cwde
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN52@rxwindow_m
	mov	DWORD PTR tv137[rsp], 1
	jmp	SHORT $LN53@rxwindow_m
$LN52@rxwindow_m:
	mov	DWORD PTR tv137[rsp], 0
$LN53@rxwindow_m:
	mov	eax, DWORD PTR tv137[rsp]
	and	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR rx+5769532
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+5769532, eax
; Line 207
	mov	ecx, 17
	call	QWORD PTR __imp_GetKeyState
	cwde
	and	eax, 32768				; 00008000H
	test	eax, eax
	je	SHORT $LN54@rxwindow_m
	mov	DWORD PTR tv147[rsp], 1
	jmp	SHORT $LN55@rxwindow_m
$LN54@rxwindow_m:
	mov	DWORD PTR tv147[rsp], 0
$LN55@rxwindow_m:
	mov	eax, DWORD PTR tv147[rsp]
	and	eax, 1
	mov	ecx, DWORD PTR rx+5769532
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+5769532, eax
; Line 209
	mov	eax, DWORD PTR wParam$[rsp]
	mov	DWORD PTR key_map$1[rsp], eax
; Line 212
	mov	rax, QWORD PTR wParam$[rsp]
	mov	QWORD PTR tv151[rsp], rax
	mov	rax, QWORD PTR tv151[rsp]
	sub	rax, 8
	mov	QWORD PTR tv151[rsp], rax
	cmp	QWORD PTR tv151[rsp], 214		; 000000d6H
	ja	$LN4@rxwindow_m
	lea	rax, OFFSET FLAT:__ImageBase
	mov	rcx, QWORD PTR tv151[rsp]
	movzx	ecx, BYTE PTR $LN59@rxwindow_m[rax+rcx]
	mov	ecx, DWORD PTR $LN60@rxwindow_m[rax+rcx*4]
	add	rcx, rax
	jmp	rcx
$LN25@rxwindow_m:
; Line 214
	mov	DWORD PTR key_map$1[rsp], 6
	jmp	$LN4@rxwindow_m
$LN26@rxwindow_m:
; Line 215
	mov	DWORD PTR key_map$1[rsp], 1
	jmp	$LN4@rxwindow_m
$LN27@rxwindow_m:
; Line 216
	mov	DWORD PTR key_map$1[rsp], 10
	jmp	$LN4@rxwindow_m
$LN28@rxwindow_m:
; Line 217
	mov	DWORD PTR key_map$1[rsp], 11
	jmp	$LN4@rxwindow_m
$LN29@rxwindow_m:
; Line 219
	mov	DWORD PTR key_map$1[rsp], 2
	jmp	$LN4@rxwindow_m
$LN30@rxwindow_m:
; Line 220
	mov	DWORD PTR key_map$1[rsp], 3
	jmp	$LN4@rxwindow_m
$LN31@rxwindow_m:
; Line 221
	mov	DWORD PTR key_map$1[rsp], 4
	jmp	SHORT $LN4@rxwindow_m
$LN32@rxwindow_m:
; Line 222
	mov	DWORD PTR key_map$1[rsp], 5
	jmp	SHORT $LN4@rxwindow_m
$LN33@rxwindow_m:
; Line 224
	mov	DWORD PTR key_map$1[rsp], 32		; 00000020H
	jmp	SHORT $LN4@rxwindow_m
$LN34@rxwindow_m:
; Line 225
	mov	DWORD PTR key_map$1[rsp], 61		; 0000003dH
	jmp	SHORT $LN4@rxwindow_m
$LN35@rxwindow_m:
; Line 226
	mov	DWORD PTR key_map$1[rsp], 46		; 0000002eH
	jmp	SHORT $LN4@rxwindow_m
$LN36@rxwindow_m:
; Line 227
	mov	DWORD PTR key_map$1[rsp], 44		; 0000002cH
	jmp	SHORT $LN4@rxwindow_m
$LN37@rxwindow_m:
; Line 228
	mov	DWORD PTR key_map$1[rsp], 59		; 0000003bH
	jmp	SHORT $LN4@rxwindow_m
$LN38@rxwindow_m:
; Line 229
	mov	DWORD PTR key_map$1[rsp], 47		; 0000002fH
	jmp	SHORT $LN4@rxwindow_m
$LN39@rxwindow_m:
; Line 230
	mov	DWORD PTR key_map$1[rsp], 126		; 0000007eH
	jmp	SHORT $LN4@rxwindow_m
$LN40@rxwindow_m:
; Line 231
	mov	DWORD PTR key_map$1[rsp], 91		; 0000005bH
	jmp	SHORT $LN4@rxwindow_m
$LN41@rxwindow_m:
; Line 232
	mov	DWORD PTR key_map$1[rsp], 92		; 0000005cH
	jmp	SHORT $LN4@rxwindow_m
$LN42@rxwindow_m:
; Line 233
	mov	DWORD PTR key_map$1[rsp], 93		; 0000005dH
	jmp	SHORT $LN4@rxwindow_m
$LN43@rxwindow_m:
; Line 234
	mov	DWORD PTR key_map$1[rsp], 39		; 00000027H
$LN4@rxwindow_m:
; Line 237
	cmp	DWORD PTR Message$[rsp], 256		; 00000100H
	je	SHORT $LN56@rxwindow_m
	cmp	DWORD PTR Message$[rsp], 260		; 00000104H
	je	SHORT $LN56@rxwindow_m
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN57@rxwindow_m
$LN56@rxwindow_m:
	mov	DWORD PTR tv159[rsp], 1
$LN57@rxwindow_m:
	movsxd	rax, DWORD PTR key_map$1[rsp]
	lea	rcx, OFFSET FLAT:rx+5769274
	movzx	edx, BYTE PTR tv159[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 241
	mov	eax, 1
	jmp	SHORT $LN1@rxwindow_m
$LN44@rxwindow_m:
; Line 243
	xor	eax, eax
	jmp	SHORT $LN1@rxwindow_m
$LN2@rxwindow_m:
; Line 246
	mov	eax, 1
$LN1@rxwindow_m:
; Line 247
	add	rsp, 88					; 00000058H
	ret	0
	npad	3
$LN63@rxwindow_m:
	DD	$LN6@rxwindow_m
	DD	$LN7@rxwindow_m
	DD	$LN22@rxwindow_m
	DD	$LN21@rxwindow_m
	DD	$LN19@rxwindow_m
	DD	$LN24@rxwindow_m
	DD	$LN23@rxwindow_m
	DD	$LN44@rxwindow_m
$LN62@rxwindow_m:
	DB	0
	DB	7
	DB	1
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	7
	DB	2
	DB	3
	DB	4
	DB	7
	DB	5
	DB	6
	npad	2
$LN61@rxwindow_m:
	DD	$LN10@rxwindow_m
	DD	$LN12@rxwindow_m
	DD	$LN11@rxwindow_m
	DD	$LN13@rxwindow_m
	DD	$LN15@rxwindow_m
	DD	$LN14@rxwindow_m
	DD	$LN16@rxwindow_m
	DD	$LN18@rxwindow_m
	DD	$LN17@rxwindow_m
	DD	$LN9@rxwindow_m
$LN60@rxwindow_m:
	DD	$LN27@rxwindow_m
	DD	$LN26@rxwindow_m
	DD	$LN25@rxwindow_m
	DD	$LN33@rxwindow_m
	DD	$LN29@rxwindow_m
	DD	$LN31@rxwindow_m
	DD	$LN30@rxwindow_m
	DD	$LN32@rxwindow_m
	DD	$LN28@rxwindow_m
	DD	$LN37@rxwindow_m
	DD	$LN34@rxwindow_m
	DD	$LN36@rxwindow_m
	DD	$LN35@rxwindow_m
	DD	$LN38@rxwindow_m
	DD	$LN39@rxwindow_m
	DD	$LN40@rxwindow_m
	DD	$LN41@rxwindow_m
	DD	$LN42@rxwindow_m
	DD	$LN43@rxwindow_m
	DD	$LN4@rxwindow_m
$LN59@rxwindow_m:
	DB	0
	DB	19
	DB	19
	DB	19
	DB	19
	DB	1
	DB	19
	DB	19
	DB	19
	DB	2
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	3
	DB	19
	DB	19
	DB	19
	DB	19
	DB	4
	DB	5
	DB	6
	DB	7
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	8
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	13
	DB	14
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	15
	DB	16
	DB	17
	DB	18
rxwindow_message_handler_win32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 64
$T3 = 96
$T4 = 128
rxdefault_render_pass_end PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1379
$LN3:
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 1380
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:rx+1264
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxreturn
; Line 1381
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, OFFSET FLAT:rx+1304
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxreturn
; Line 1383
	mov	QWORD PTR rx+1288, 0
; Line 1384
	mov	QWORD PTR rx+1328, 0
; Line 1386
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, OFFSET FLAT:rx+5768680
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T3[rsp]
	call	rxreturn
; Line 1387
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, OFFSET FLAT:rx+5768728
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T4[rsp]
	call	rxreturn
; Line 1389
	mov	QWORD PTR rx+5768712, 0
; Line 1390
	mov	QWORD PTR rx+5768760, 0
; Line 1391
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
rxdefault_render_pass_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv164 = 48
Offset$ = 52
Stride$ = 56
$T1 = 64
$T2 = 96
$T3 = 120
$T4 = 144
$T5 = 168
clear_color$ = 192
__$ArrayPad$ = 208
rxrestore_render_stack PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1316
$LN3:
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1317
	mov	DWORD PTR rx+5768928, 0
; Line 1318
	mov	DWORD PTR rx+5768888, 0
; Line 1320
	lea	rax, OFFSET FLAT:rx+5768768
	lea	rcx, OFFSET FLAT:rx+5768592
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 1323
	xorps	xmm0, xmm0
	movss	DWORD PTR clear_color$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR clear_color$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR clear_color$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR clear_color$[rsp+12], xmm0
; Line 1325
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:rx+5768768
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR clear_color$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxrender_target_apply
; Line 1327
	mov	rcx, QWORD PTR rx+5769632
	call	rxshader_apply
; Line 1328
	xor	edx, edx
	mov	rcx, QWORD PTR rx+1240
	call	rxuniform_buffer_bind_ex
; Line 1330
	mov	rcx, QWORD PTR rx+5769640
	call	rxshader_apply
; Line 1331
	xor	edx, edx
	mov	rcx, QWORD PTR rx+1240
	call	rxuniform_buffer_bind_ex
; Line 1333
	mov	rdx, QWORD PTR rx+1248
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxborrow_vertex_buffer
	lea	rcx, OFFSET FLAT:rx+1264
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1334
	mov	rdx, QWORD PTR rx+1256
	lea	rcx, QWORD PTR $T3[rsp]
	call	rxborrow_index_buffer
	lea	rcx, OFFSET FLAT:rx+1304
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1335
	mov	rax, QWORD PTR rx+1272
	mov	QWORD PTR rx+1288, rax
; Line 1336
	mov	rax, QWORD PTR rx+1312
	mov	QWORD PTR rx+1328, rax
; Line 1337
	mov	DWORD PTR rx+1296, 0
; Line 1338
	mov	DWORD PTR rx+1336, 0
; Line 1339
	mov	DWORD PTR rx+5768512, 0
; Line 1342
	mov	rdx, QWORD PTR rx+5768704
	lea	rcx, QWORD PTR $T4[rsp]
	call	rxborrow_struct_buffer
	lea	rcx, OFFSET FLAT:rx+5768680
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1343
	mov	rdx, QWORD PTR rx+5768752
	lea	rcx, QWORD PTR $T5[rsp]
	call	rxborrow_struct_buffer
	lea	rcx, OFFSET FLAT:rx+5768728
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1345
	mov	rax, QWORD PTR rx+5768688
	mov	QWORD PTR rx+5768712, rax
; Line 1346
	mov	rax, QWORD PTR rx+5768736
	mov	QWORD PTR rx+5768760, rax
; Line 1349
	movsxd	rax, DWORD PTR rx+5768672
	imul	rax, rax, 16
	mov	r8, rax
	mov	edx, DWORD PTR rx+5768672
	mov	rcx, QWORD PTR rx+5768712
	call	memset
; Line 1350
	movsxd	rax, DWORD PTR rx+5768720
	imul	rax, rax, 56				; 00000038H
	mov	r8, rax
	mov	edx, DWORD PTR rx+5768720
	mov	rcx, QWORD PTR rx+5768760
	call	memset
; Line 1352
	mov	DWORD PTR rx+5768676, 0
; Line 1353
	mov	DWORD PTR rx+5768724, 0
; Line 1355
	cvtsi2ss xmm0, DWORD PTR rx+5768988
	cvtsi2ss xmm1, DWORD PTR rx+5768984
	movss	DWORD PTR tv164[rsp], xmm1
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv164[rsp]
	call	rxdriver_stage_viewport
; Line 1357
	mov	DWORD PTR Stride$[rsp], 40		; 00000028H
; Line 1358
	mov	DWORD PTR Offset$[rsp], 0
; Line 1359
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR rx+5769616
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+344]
; Line 1360
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	r9d, 268435455				; 0fffffffH
	xor	r8d, r8d
	mov	rdx, QWORD PTR rx+5769624
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+280]
; Line 1363
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR Offset$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	lea	rcx, QWORD PTR Stride$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	lea	r9, OFFSET FLAT:rx+1248
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+144]
; Line 1365
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	mov	r8d, 42					; 0000002aH
	mov	rdx, QWORD PTR rx+1256
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+152]
; Line 1369
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	edx, 4
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+192]
; Line 1370
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5769648
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+208]
; Line 1371
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, OFFSET FLAT:rx+5769648
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+80]
; Line 1373
	call	rx3d
; Line 1374
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
rxrestore_render_stack ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
rxeffect_shadow PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1310
$LN3:
	sub	rsp, 24
; Line 1311
	mov	eax, DWORD PTR rx+5768676
	cdq
	idiv	DWORD PTR rx+5768672
	mov	eax, edx
	cdqe
	imul	rax, rax, 16
	mov	rcx, QWORD PTR rx+5768712
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv69[rsp], rax
	mov	eax, DWORD PTR rx+5768676
	inc	eax
	mov	DWORD PTR rx+5768676, eax
	mov	rax, QWORD PTR tv69[rsp]
; Line 1312
	add	rsp, 24
	ret	0
rxeffect_shadow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
rxeffect_candle PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1305
$LN3:
	sub	rsp, 24
; Line 1306
	mov	eax, DWORD PTR rx+5768724
	cdq
	idiv	DWORD PTR rx+5768720
	mov	eax, edx
	cdqe
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR rx+5768760
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv69[rsp], rax
	mov	eax, DWORD PTR rx+5768724
	inc	eax
	mov	DWORD PTR rx+5768724, eax
	mov	rax, QWORD PTR tv69[rsp]
; Line 1307
	add	rsp, 24
	ret	0
rxeffect_candle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ticks$ = 32
rxtime	PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1290
$LN3:
	sub	rsp, 56					; 00000038H
; Line 1291
	call	ccclocktick
	mov	QWORD PTR ticks$[rsp], rax
; Line 1293
	mov	rax, QWORD PTR rx+632
	mov	rcx, QWORD PTR ticks$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR rx+648, rax
; Line 1294
	mov	rcx, QWORD PTR rx+648
	call	ccclocksecs
	movsd	QWORD PTR rx+664, xmm0
; Line 1296
	mov	rax, QWORD PTR rx+640
	mov	rcx, QWORD PTR ticks$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR rx+656, rax
; Line 1297
	mov	rcx, QWORD PTR rx+656
	call	ccclocksecs
	movsd	QWORD PTR rx+672, xmm0
; Line 1299
	mov	rax, QWORD PTR ticks$[rsp]
	mov	QWORD PTR rx+640, rax
; Line 1300
	add	rsp, 56					; 00000038H
	ret	0
rxtime	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_render_target$ = 96
$T1 = 120
__$ReturnAddress$ = 176
w$ = 184
h$ = 192
f$ = 200
rxcreate_render_target PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1224
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1227
	mov	DWORD PTR [rsp+80], 0
	mov	DWORD PTR [rsp+72], 1
	mov	DWORD PTR [rsp+64], 0
	mov	DWORD PTR [rsp+56], 40			; 00000028H
	mov	DWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR f$[rsp]
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxtexture_create_untyped
	lea	rcx, QWORD PTR the_render_target$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 1230
	lea	rax, QWORD PTR the_render_target$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1231
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxcreate_render_target ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
View$ = 32
Resource$ = 40
texture$ = 64
rxtexture_delete PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 74
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 78
	mov	rax, QWORD PTR texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR View$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11ShaderResourceView
	mov	rcx, QWORD PTR texture$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN2@rxtexture_
; Line 81
	mov	rax, QWORD PTR View$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR Resource$[rsp]
	mov	rcx, QWORD PTR View$[rsp]
	call	QWORD PTR [rax+56]
; Line 83
	mov	rax, QWORD PTR Resource$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR Resource$[rsp]
	call	QWORD PTR [rax+16]
; Line 84
	mov	rax, QWORD PTR View$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR View$[rsp]
	call	QWORD PTR [rax+16]
$LN2@rxtexture_:
; Line 86
	add	rsp, 56					; 00000038H
	ret	0
rxtexture_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$S11$2 = 64
__$ArrayPad$ = 80
x$ = 128
y$ = 136
h$ = 144
string$ = 152
rxdraw_text PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1212
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1213
	cmp	QWORD PTR string$[rsp], 0
	je	$LN2@rxdraw_tex
; Line 1215
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S11$2[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S11$2[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S11$2[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S11$2[rsp+12], xmm0
	mov	rcx, QWORD PTR string$[rsp]
	call	strlen
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdx, QWORD PTR $S11$2[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 16
	rep movsb
	mov	rcx, QWORD PTR string$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR h$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxdraw_text_ex
$LN2@rxdraw_tex:
; Line 1217
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_text ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index$ = 48
render_x0$ = 52
render_scale$ = 56
sample_x0$1 = 60
sample_y0$2 = 64
render_y0$ = 68
xnormalize$ = 72
baked$3 = 76
ynormalize$ = 80
render_y1$4 = 84
sample_y1$5 = 88
sample_x1$6 = 92
render_x1$7 = 96
code$8 = 100
sample_xsize$ = 104
sample_ysize$ = 108
render_xsize$ = 112
render_ysize$ = 116
xadvance$ = 120
$T9 = 128
$T10 = 144
$T11 = 176
$T12 = 208
color$ = 272
x$ = 280
y$ = 288
h$ = 296
length$ = 304
string$ = 312
rxdraw_text_ex PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1151
$LN11:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
$LN4@rxdraw_tex:
; Line 1152
	cmp	DWORD PTR h$[rsp], 0
	jne	SHORT $LN8@rxdraw_tex
	lea	rax, OFFSET FLAT:$SG139196
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1152				; 00000480H
	lea	r8, OFFSET FLAT:$SG139197
	mov	edx, 194				; 000000c2H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139194
	lea	rdx, OFFSET FLAT:$SG139195
	lea	rcx, QWORD PTR $T11[rsp]
	call	cctrace_
	int	3
$LN8@rxdraw_tex:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxdraw_tex
; Line 1154
	cmp	DWORD PTR length$[rsp], 0
	jg	SHORT $LN9@rxdraw_tex
; Line 1156
	jmp	$LN1@rxdraw_tex
$LN9@rxdraw_tex:
; Line 1159
	cvtsi2ss xmm0, DWORD PTR rx+688
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR xnormalize$[rsp], xmm0
; Line 1160
	cvtsi2ss xmm0, DWORD PTR rx+692
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ynormalize$[rsp], xmm0
; Line 1161
	cvtsi2ss xmm0, DWORD PTR h$[rsp]
	divss	xmm0, DWORD PTR rx+1084
	movss	DWORD PTR render_scale$[rsp], xmm0
; Line 1163
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR render_x0$[rsp], xmm0
; Line 1164
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR render_y0$[rsp], xmm0
; Line 1167
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, OFFSET FLAT:rx+680
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T10[rsp]
	call	rxtexture_bind
; Line 1168
	mov	rcx, QWORD PTR rx+5769656
	call	rxsampler_bind
; Line 1170
	call	rxvertex_mode
; Line 1171
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T9[rsp]
	call	rxvertex_color
; Line 1174
	movss	xmm0, DWORD PTR rx+1084
	mulss	xmm0, DWORD PTR xnormalize$[rsp]
	movss	DWORD PTR sample_xsize$[rsp], xmm0
; Line 1175
	movss	xmm0, DWORD PTR rx+1084
	mulss	xmm0, DWORD PTR ynormalize$[rsp]
	movss	DWORD PTR sample_ysize$[rsp], xmm0
; Line 1177
	movss	xmm0, DWORD PTR rx+1084
	mulss	xmm0, DWORD PTR render_scale$[rsp]
	movss	DWORD PTR render_xsize$[rsp], xmm0
; Line 1178
	movss	xmm0, DWORD PTR rx+1084
	mulss	xmm0, DWORD PTR render_scale$[rsp]
	movss	DWORD PTR render_ysize$[rsp], xmm0
; Line 1180
	movss	xmm0, DWORD PTR rx+1088
	mulss	xmm0, DWORD PTR render_scale$[rsp]
	movss	DWORD PTR xadvance$[rsp], xmm0
; Line 1183
	mov	DWORD PTR index$[rsp], 0
	jmp	SHORT $LN7@rxdraw_tex
$LN5@rxdraw_tex:
	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	DWORD PTR index$[rsp], eax
$LN7@rxdraw_tex:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR index$[rsp], eax
	jge	$LN6@rxdraw_tex
; Line 1185
	mov	rax, QWORD PTR string$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR code$8[rsp], eax
	mov	rax, QWORD PTR string$[rsp]
	inc	rax
	mov	QWORD PTR string$[rsp], rax
; Line 1187
	mov	eax, DWORD PTR code$8[rsp]
	sub	eax, 32					; 00000020H
	cdqe
	lea	rcx, OFFSET FLAT:rx+704
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR baked$3[rsp], eax
; Line 1189
	movsx	eax, WORD PTR baked$3[rsp]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR xnormalize$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sample_x0$1[rsp], xmm0
; Line 1190
	movsx	eax, WORD PTR baked$3[rsp+2]
	cvtsi2ss xmm0, eax
	movss	xmm1, DWORD PTR ynormalize$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR sample_y0$2[rsp], xmm0
; Line 1191
	movss	xmm0, DWORD PTR sample_x0$1[rsp]
	addss	xmm0, DWORD PTR sample_xsize$[rsp]
	movss	DWORD PTR sample_x1$6[rsp], xmm0
; Line 1192
	movss	xmm0, DWORD PTR sample_y0$2[rsp]
	addss	xmm0, DWORD PTR sample_ysize$[rsp]
	movss	DWORD PTR sample_y1$5[rsp], xmm0
; Line 1194
	movss	xmm0, DWORD PTR render_x0$[rsp]
	addss	xmm0, DWORD PTR render_xsize$[rsp]
	movss	DWORD PTR render_x1$7[rsp], xmm0
; Line 1195
	movss	xmm0, DWORD PTR render_y0$[rsp]
	addss	xmm0, DWORD PTR render_ysize$[rsp]
	movss	DWORD PTR render_y1$4[rsp], xmm0
; Line 1197
	movss	xmm3, DWORD PTR sample_y1$5[rsp]
	movss	xmm2, DWORD PTR sample_x0$1[rsp]
	movss	xmm1, DWORD PTR render_y0$[rsp]
	movss	xmm0, DWORD PTR render_x0$[rsp]
	call	rxsubmit_vertex_tex
; Line 1198
	movss	xmm3, DWORD PTR sample_y0$2[rsp]
	movss	xmm2, DWORD PTR sample_x0$1[rsp]
	movss	xmm1, DWORD PTR render_y1$4[rsp]
	movss	xmm0, DWORD PTR render_x0$[rsp]
	call	rxsubmit_vertex_tex
; Line 1199
	movss	xmm3, DWORD PTR sample_y0$2[rsp]
	movss	xmm2, DWORD PTR sample_x1$6[rsp]
	movss	xmm1, DWORD PTR render_y1$4[rsp]
	movss	xmm0, DWORD PTR render_x1$7[rsp]
	call	rxsubmit_vertex_tex
; Line 1200
	movss	xmm3, DWORD PTR sample_y1$5[rsp]
	movss	xmm2, DWORD PTR sample_x1$6[rsp]
	movss	xmm1, DWORD PTR render_y0$[rsp]
	movss	xmm0, DWORD PTR render_x1$7[rsp]
	call	rxsubmit_vertex_tex
; Line 1202
	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 2
	mov	ecx, eax
	call	rxsubmit_index
	mov	eax, DWORD PTR index$[rsp]
	lea	eax, DWORD PTR [rax*4+1]
	mov	ecx, eax
	call	rxsubmit_index
	mov	eax, DWORD PTR index$[rsp]
	lea	eax, DWORD PTR [rax*4+2]
	mov	ecx, eax
	call	rxsubmit_index
; Line 1203
	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 2
	mov	ecx, eax
	call	rxsubmit_index
	mov	eax, DWORD PTR index$[rsp]
	lea	eax, DWORD PTR [rax*4+2]
	mov	ecx, eax
	call	rxsubmit_index
	mov	eax, DWORD PTR index$[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	mov	ecx, eax
	call	rxsubmit_index
; Line 1205
	movss	xmm0, DWORD PTR render_x0$[rsp]
	addss	xmm0, DWORD PTR xadvance$[rsp]
	movss	DWORD PTR render_x0$[rsp], xmm0
; Line 1206
	jmp	$LN5@rxdraw_tex
$LN6@rxdraw_tex:
; Line 1208
	call	rxvertex_mode_end
$LN1@rxdraw_tex:
; Line 1209
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_text_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ysize$ = 8
rxchrxsz PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1145
	mov	DWORD PTR [rsp+8], ecx
; Line 1146
	cvtsi2ss xmm0, DWORD PTR ysize$[rsp]
	divss	xmm0, DWORD PTR rx+1084
	movss	xmm1, DWORD PTR rx+1088
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 1147
	ret	0
rxchrxsz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
h$ = 64
string$ = 72
rxdraw_text_length PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1137
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 56					; 00000038H
; Line 1138
	mov	rcx, QWORD PTR string$[rsp]
	call	strlen
	mov	eax, eax
	cvtsi2ss xmm0, rax
	mulss	xmm0, DWORD PTR rx+1088
	movss	DWORD PTR result$[rsp], xmm0
; Line 1139
	movss	xmm0, DWORD PTR h$[rsp]
	divss	xmm0, DWORD PTR rx+1084
	movss	xmm1, DWORD PTR result$[rsp]
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR result$[rsp], xmm0
; Line 1140
	movss	xmm0, DWORD PTR result$[rsp]
; Line 1141
	add	rsp, 56					; 00000038H
	ret	0
rxdraw_text_length ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
label$ = 48
tv77 = 56
tv93 = 60
tv141 = 64
tv157 = 68
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 128
color$ = 176
x$ = 184
y$ = 192
w$ = 200
h$ = 208
rxdraw_outline PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1119
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1120
	mov	rax, QWORD PTR rx+5768528
	mov	QWORD PTR label$[rsp], rax
; Line 1121
	mov	QWORD PTR rx+5768528, 0
; Line 1123
	mov	rcx, QWORD PTR label$[rsp]
	call	rxcomtag
; Line 1124
	cvtss2sd xmm0, DWORD PTR w$[rsp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR y$[rsp]
	addss	xmm1, DWORD PTR h$[rsp]
	cvtss2sd xmm1, xmm1
	subsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm1, xmm1
	cvtss2sd xmm2, DWORD PTR x$[rsp]
	subsd	xmm2, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm2, xmm2
	movss	DWORD PTR tv77[rsp], xmm2
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm3, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm3
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv77[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxdraw_rect
; Line 1126
	mov	rcx, QWORD PTR label$[rsp]
	call	rxcomtag
; Line 1127
	cvtss2sd xmm0, DWORD PTR w$[rsp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	movss	xmm1, DWORD PTR y$[rsp]
	addss	xmm1, DWORD PTR __real@00000000
	cvtss2sd xmm1, xmm1
	subsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm1, xmm1
	cvtss2sd xmm2, DWORD PTR x$[rsp]
	subsd	xmm2, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm2, xmm2
	movss	DWORD PTR tv93[rsp], xmm2
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm3, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+32], xmm3
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv93[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdraw_rect
; Line 1129
	mov	rcx, QWORD PTR label$[rsp]
	call	rxcomtag
; Line 1130
	cvtss2sd xmm0, DWORD PTR h$[rsp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	cvtss2sd xmm1, DWORD PTR y$[rsp]
	subsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm1, xmm1
	movss	xmm2, DWORD PTR x$[rsp]
	addss	xmm2, DWORD PTR __real@00000000
	cvtss2sd xmm2, xmm2
	subsd	xmm2, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm2, xmm2
	movss	DWORD PTR tv141[rsp], xmm2
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv141[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T3[rsp]
	call	rxdraw_rect
; Line 1132
	mov	rcx, QWORD PTR label$[rsp]
	call	rxcomtag
; Line 1133
	cvtss2sd xmm0, DWORD PTR h$[rsp]
	addsd	xmm0, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm0, xmm0
	cvtss2sd xmm1, DWORD PTR y$[rsp]
	subsd	xmm1, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm1, xmm1
	movss	xmm2, DWORD PTR x$[rsp]
	addss	xmm2, DWORD PTR w$[rsp]
	cvtss2sd xmm2, xmm2
	subsd	xmm2, QWORD PTR __real@3fe0000000000000
	cvtsd2ss xmm2, xmm2
	movss	DWORD PTR tv157[rsp], xmm2
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv157[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T4[rsp]
	call	rxdraw_rect
; Line 1134
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_outline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ynormal$ = 32
xnormal$ = 36
ydist$ = 40
xdist$ = 44
length$ = 48
tv84 = 52
tv90 = 56
tv128 = 60
tv134 = 64
$T1 = 80
$T2 = 96
color$ = 160
thickness$ = 168
x0$ = 176
y0$ = 184
x1$ = 192
y1$ = 200
rxdraw_line PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1098
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1099
	movss	xmm0, DWORD PTR x1$[rsp]
	subss	xmm0, DWORD PTR x0$[rsp]
	movss	DWORD PTR xdist$[rsp], xmm0
; Line 1100
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR y0$[rsp]
	movss	DWORD PTR ydist$[rsp], xmm0
; Line 1101
	movss	xmm0, DWORD PTR xdist$[rsp]
	mulss	xmm0, DWORD PTR xdist$[rsp]
	movss	xmm1, DWORD PTR ydist$[rsp]
	mulss	xmm1, DWORD PTR ydist$[rsp]
	addss	xmm0, xmm1
	call	sqrtf
	movss	DWORD PTR length$[rsp], xmm0
; Line 1103
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR thickness$[rsp]
	movss	xmm1, DWORD PTR ydist$[rsp]
	xorps	xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	mulss	xmm0, xmm1
	divss	xmm0, DWORD PTR length$[rsp]
	movss	DWORD PTR xnormal$[rsp], xmm0
; Line 1104
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR thickness$[rsp]
	mulss	xmm0, DWORD PTR xdist$[rsp]
	divss	xmm0, DWORD PTR length$[rsp]
	movss	DWORD PTR ynormal$[rsp], xmm0
; Line 1106
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, OFFSET FLAT:rx+5769664
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxtexture_bind
; Line 1107
	call	rxvertex_mode
; Line 1108
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvertex_color
; Line 1109
	movss	xmm0, DWORD PTR y0$[rsp]
	subss	xmm0, DWORD PTR ynormal$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	subss	xmm1, DWORD PTR xnormal$[rsp]
	movss	DWORD PTR tv84[rsp], xmm1
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv84[rsp]
	call	rxsubmit_vertex_tex
; Line 1110
	movss	xmm0, DWORD PTR y0$[rsp]
	addss	xmm0, DWORD PTR ynormal$[rsp]
	movss	xmm1, DWORD PTR x0$[rsp]
	addss	xmm1, DWORD PTR xnormal$[rsp]
	movss	DWORD PTR tv90[rsp], xmm1
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv90[rsp]
	call	rxsubmit_vertex_tex
; Line 1111
	movss	xmm0, DWORD PTR y1$[rsp]
	addss	xmm0, DWORD PTR ynormal$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	addss	xmm1, DWORD PTR xnormal$[rsp]
	movss	DWORD PTR tv128[rsp], xmm1
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv128[rsp]
	call	rxsubmit_vertex_tex
; Line 1112
	movss	xmm0, DWORD PTR y1$[rsp]
	subss	xmm0, DWORD PTR ynormal$[rsp]
	movss	xmm1, DWORD PTR x1$[rsp]
	subss	xmm1, DWORD PTR xnormal$[rsp]
	movss	DWORD PTR tv134[rsp], xmm1
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv134[rsp]
	call	rxsubmit_vertex_tex
; Line 1113
	xor	ecx, ecx
	call	rxsubmit_index
	mov	ecx, 1
	call	rxsubmit_index
	mov	ecx, 2
	call	rxsubmit_index
; Line 1114
	xor	ecx, ecx
	call	rxsubmit_index
	mov	ecx, 2
	call	rxsubmit_index
	mov	ecx, 3
	call	rxsubmit_index
; Line 1115
	call	rxvertex_mode_end
; Line 1116
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
ey$2 = 36
ex$3 = 40
$T4 = 48
$T5 = 64
color$ = 128
x$ = 136
y$ = 144
r$ = 152
rxdraw_circle PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1066
$LN6:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 1067
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, OFFSET FLAT:rx+5769664
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T5[rsp]
	call	rxtexture_bind
; Line 1069
	call	rxvertex_mode
; Line 1070
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T4[rsp]
	call	rxvertex_color
; Line 1072
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@rxdraw_cir
$LN2@rxdraw_cir:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@rxdraw_cir:
	cmp	DWORD PTR i$1[rsp], 360			; 00000168H
	jge	$LN3@rxdraw_cir
; Line 1075
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR ex$3[rsp], xmm0
; Line 1076
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR ey$2[rsp], xmm0
; Line 1078
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR ey$2[rsp]
	movss	xmm0, DWORD PTR ex$3[rsp]
	call	rxsubmit_vertex_tex
; Line 1080
	cvtsi2ss xmm0, DWORD PTR i$1[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c8efa35
	call	sinf
	mulss	xmm0, DWORD PTR r$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ex$3[rsp], xmm0
; Line 1081
	cvtsi2ss xmm0, DWORD PTR i$1[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c8efa35
	call	cosf
	mulss	xmm0, DWORD PTR r$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ey$2[rsp], xmm0
; Line 1083
	movss	xmm3, DWORD PTR __real@3f800000
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR ey$2[rsp]
	movss	xmm0, DWORD PTR ex$3[rsp]
	call	rxsubmit_vertex_tex
; Line 1085
	cvtsi2ss xmm0, DWORD PTR i$1[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c8efa35
	call	sinf
	mulss	xmm0, DWORD PTR r$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ex$3[rsp], xmm0
; Line 1086
	cvtsi2ss xmm0, DWORD PTR i$1[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR __real@3c8efa35
	call	cosf
	mulss	xmm0, DWORD PTR r$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	addss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR ey$2[rsp], xmm0
; Line 1088
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR ey$2[rsp]
	movss	xmm0, DWORD PTR ex$3[rsp]
	call	rxsubmit_vertex_tex
; Line 1090
	imul	eax, DWORD PTR i$1[rsp], 3
	mov	ecx, eax
	call	rxsubmit_index
	imul	eax, DWORD PTR i$1[rsp], 3
	inc	eax
	mov	ecx, eax
	call	rxsubmit_index
	imul	eax, DWORD PTR i$1[rsp], 3
	add	eax, 2
	mov	ecx, eax
	call	rxsubmit_index
; Line 1091
	jmp	$LN2@rxdraw_cir
$LN3@rxdraw_cir:
; Line 1093
	call	rxvertex_mode_end
; Line 1094
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_circle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 80
$T2 = 96
color$ = 160
x$ = 168
y$ = 176
w$ = 184
h$ = 192
rxdraw_rect PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1059
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1060
	mov	rcx, QWORD PTR rx+5769656
	call	rxsampler_bind
; Line 1061
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, OFFSET FLAT:rx+5769664
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR x$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdraw_skinned_unnormalized
; Line 1062
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_rect ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 80
$T2 = 96
$S10$ = 128
__$ArrayPad$ = 144
texture$ = 192
x$ = 200
y$ = 208
scale_x$ = 216
scale_y$ = 224
rxtexture_scaled PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1052
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1053
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S10$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S10$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S10$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S10$[rsp+12], xmm0
	mov	rax, QWORD PTR texture$[rsp]
	cvtsi2ss xmm0, DWORD PTR [rax+12]
	mulss	xmm0, DWORD PTR scale_y$[rsp]
	mov	rax, QWORD PTR texture$[rsp]
	cvtsi2ss xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR scale_x$[rsp]
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $S10$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 24
	rep movsb
	movss	xmm2, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+72], xmm2
	movss	xmm2, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+64], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+56], xmm2
	xorps	xmm2, xmm2
	movss	DWORD PTR [rsp+48], xmm2
	movss	DWORD PTR [rsp+40], xmm0
	movss	DWORD PTR [rsp+32], xmm1
	movss	xmm3, DWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR x$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdraw_skinned_unnormalized
; Line 1056
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_scaled ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 80
$T2 = 96
$S9$ = 128
__$ArrayPad$ = 144
texture$ = 192
x$ = 200
y$ = 208
w$ = 216
h$ = 224
rxdraw_skinned PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1047
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1048
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S9$[rsp], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S9$[rsp+4], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S9$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S9$[rsp+12], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $S9$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 24
	rep movsb
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+72], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rsp+64], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+56], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR x$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdraw_skinned_unnormalized
; Line 1049
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_skinned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size_y$ = 80
size_x$ = 84
$T1 = 96
$T2 = 112
texture$ = 176
color$ = 184
x$ = 192
y$ = 200
w$ = 208
h$ = 216
tx$ = 224
ty$ = 232
tw$ = 240
th$ = 248
rxdraw_skinned_ex PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1040
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1041
	mov	rax, QWORD PTR texture$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR size_x$[rsp], eax
; Line 1042
	mov	rax, QWORD PTR texture$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR size_y$[rsp], eax
; Line 1043
	cvtsi2ss xmm0, DWORD PTR size_y$[rsp]
	movss	xmm1, DWORD PTR th$[rsp]
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	cvtsi2ss xmm1, DWORD PTR size_x$[rsp]
	movss	xmm2, DWORD PTR tw$[rsp]
	divss	xmm2, xmm1
	movaps	xmm1, xmm2
	cvtsi2ss xmm2, DWORD PTR size_y$[rsp]
	movss	xmm3, DWORD PTR ty$[rsp]
	divss	xmm3, xmm2
	movaps	xmm2, xmm3
	cvtsi2ss xmm3, DWORD PTR size_x$[rsp]
	movss	xmm4, DWORD PTR tx$[rsp]
	divss	xmm4, xmm3
	movaps	xmm3, xmm4
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 24
	rep movsb
	movss	DWORD PTR [rsp+72], xmm0
	movss	DWORD PTR [rsp+64], xmm1
	movss	DWORD PTR [rsp+56], xmm2
	movss	DWORD PTR [rsp+48], xmm3
	movss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR y$[rsp]
	movss	xmm2, DWORD PTR x$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdraw_skinned_unnormalized
; Line 1044
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_skinned_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
label$ = 80
$T1 = 96
$T2 = 112
texture$ = 176
color$ = 184
x$ = 192
y$ = 200
w$ = 208
h$ = 216
tx$ = 224
ty$ = 232
tw$ = 240
th$ = 248
rxdraw_skinned_unnormalized PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1026
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1028
	mov	rax, QWORD PTR rx+5768528
	mov	QWORD PTR label$[rsp], rax
; Line 1029
	mov	QWORD PTR rx+5768528, 0
; Line 1031
	mov	rcx, QWORD PTR label$[rsp]
	call	rxcomtag
; Line 1032
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxtexture_bind
; Line 1034
	mov	rcx, QWORD PTR label$[rsp]
	call	rxcomtag
; Line 1035
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	movss	xmm0, DWORD PTR th$[rsp]
	movss	DWORD PTR [rsp+64], xmm0
	movss	xmm0, DWORD PTR tw$[rsp]
	movss	DWORD PTR [rsp+56], xmm0
	movss	xmm0, DWORD PTR ty$[rsp]
	movss	DWORD PTR [rsp+48], xmm0
	movss	xmm0, DWORD PTR tx$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR w$[rsp]
	movss	xmm2, DWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxdraw_skinned_preset_unnormalized
; Line 1036
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_skinned_unnormalized ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
tv76 = 36
tv83 = 40
tv89 = 44
tv91 = 48
$T1 = 64
color$ = 112
x$ = 120
y$ = 128
w$ = 136
h$ = 144
tx$ = 152
ty$ = 160
tw$ = 168
th$ = 176
rxdraw_skinned_preset_unnormalized PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1012
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1013
	call	rxvertex_mode
; Line 1014
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvertex_color
; Line 1015
	movss	xmm0, DWORD PTR ty$[rsp]
	addss	xmm0, DWORD PTR th$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	addss	xmm1, DWORD PTR __real@00000000
	movss	xmm2, DWORD PTR x$[rsp]
	addss	xmm2, DWORD PTR __real@00000000
	movss	DWORD PTR tv70[rsp], xmm2
	movaps	xmm3, xmm0
	movss	xmm2, DWORD PTR tx$[rsp]
	movss	xmm0, DWORD PTR tv70[rsp]
	call	rxsubmit_vertex_tex
; Line 1016
	movss	xmm0, DWORD PTR y$[rsp]
	addss	xmm0, DWORD PTR h$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	addss	xmm1, DWORD PTR __real@00000000
	movss	DWORD PTR tv76[rsp], xmm1
	movss	xmm3, DWORD PTR ty$[rsp]
	movss	xmm2, DWORD PTR tx$[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv76[rsp]
	call	rxsubmit_vertex_tex
; Line 1017
	movss	xmm0, DWORD PTR tx$[rsp]
	addss	xmm0, DWORD PTR tw$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	addss	xmm1, DWORD PTR h$[rsp]
	movss	xmm2, DWORD PTR x$[rsp]
	addss	xmm2, DWORD PTR w$[rsp]
	movss	DWORD PTR tv83[rsp], xmm2
	movss	xmm3, DWORD PTR ty$[rsp]
	movaps	xmm2, xmm0
	movss	xmm0, DWORD PTR tv83[rsp]
	call	rxsubmit_vertex_tex
; Line 1018
	movss	xmm0, DWORD PTR ty$[rsp]
	addss	xmm0, DWORD PTR th$[rsp]
	movss	xmm1, DWORD PTR tx$[rsp]
	addss	xmm1, DWORD PTR tw$[rsp]
	movss	xmm2, DWORD PTR y$[rsp]
	addss	xmm2, DWORD PTR __real@00000000
	movss	DWORD PTR tv89[rsp], xmm2
	movss	xmm3, DWORD PTR x$[rsp]
	addss	xmm3, DWORD PTR w$[rsp]
	movss	DWORD PTR tv91[rsp], xmm3
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv89[rsp]
	movaps	xmm1, xmm0
	movss	xmm0, DWORD PTR tv91[rsp]
	call	rxsubmit_vertex_tex
; Line 1019
	xor	ecx, ecx
	call	rxsubmit_index
	mov	ecx, 1
	call	rxsubmit_index
	mov	ecx, 2
	call	rxsubmit_index
; Line 1020
	xor	ecx, ecx
	call	rxsubmit_index
	mov	ecx, 2
	call	rxsubmit_index
	mov	ecx, 3
	call	rxsubmit_index
; Line 1021
	call	rxvertex_mode_end
; Line 1022
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_skinned_preset_unnormalized ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 64
x$ = 112
y$ = 120
xcoord$ = 128
ycoord$ = 136
rxsubmit_vertex_tex PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1003
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1004
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:rx+5768548
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR ycoord$[rsp]
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR xcoord$[rsp]
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@3f800000
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	rxsubmit_vertex_ex
; Line 1005
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rxsubmit_vertex_tex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 64
x$ = 112
y$ = 120
rxsubmit_vertex_xy PROC
; File W:\cpp\void\e\rx\rx.c
; Line 998
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 999
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:rx+5768548
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR rx+5768540
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR rx+5768544
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR __real@41200000
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	rxsubmit_vertex_ex
; Line 1000
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rxsubmit_vertex_xy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 64
x$ = 112
y$ = 120
z$ = 128
color$ = 136
rx_vertex_xyz_color PROC
; File W:\cpp\void\e\rx\rx.c
; Line 993
$LN3:
	mov	QWORD PTR [rsp+32], r9
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 994
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR rx+5768540
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR rx+5768544
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	rxsubmit_vertex_ex
; Line 995
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rx_vertex_xyz_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 64
x$ = 112
y$ = 120
z$ = 128
rx_vertex_xyz PROC
; File W:\cpp\void\e\rx\rx.c
; Line 988
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 989
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:rx+5768548
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	QWORD PTR [rsp+48], rax
	movss	xmm0, DWORD PTR rx+5768540
	movss	DWORD PTR [rsp+40], xmm0
	movss	xmm0, DWORD PTR rx+5768544
	movss	DWORD PTR [rsp+32], xmm0
	movss	xmm3, DWORD PTR __real@3f800000
	movss	xmm2, DWORD PTR z$[rsp]
	movss	xmm1, DWORD PTR y$[rsp]
	movss	xmm0, DWORD PTR x$[rsp]
	call	rxsubmit_vertex_ex
; Line 990
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rx_vertex_xyz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vertex$ = 48
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
x$ = 256
y$ = 264
z$ = 272
w$ = 280
xcoord$ = 288
ycoord$ = 296
rgba$ = 304
rxsubmit_vertex_ex PROC
; File W:\cpp\void\e\rx\rx.c
; Line 969
$LN11:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
$LN4@rxsubmit_v:
; Line 970
	cmp	DWORD PTR rx+5768536, 0
	jne	SHORT $LN8@rxsubmit_v
	lea	rax, OFFSET FLAT:$SG138942
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 970				; 000003caH
	lea	r8, OFFSET FLAT:$SG138943
	mov	edx, 192				; 000000c0H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138940
	lea	rdx, OFFSET FLAT:$SG138941
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN8@rxsubmit_v:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxsubmit_v
$LN7@rxsubmit_v:
; Line 971
	cmp	QWORD PTR rx+5768520, 0
	jne	SHORT $LN9@rxsubmit_v
	lea	rax, OFFSET FLAT:$SG138947
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 971				; 000003cbH
	lea	r8, OFFSET FLAT:$SG138948
	mov	edx, 193				; 000000c1H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138945
	lea	rdx, OFFSET FLAT:$SG138946
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN9@rxsubmit_v:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxsubmit_v
; Line 974
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR vertex$[rsp], xmm0
; Line 975
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR vertex$[rsp+4], xmm0
; Line 976
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR vertex$[rsp+8], xmm0
; Line 977
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR vertex$[rsp+12], xmm0
; Line 979
	movss	xmm0, DWORD PTR xcoord$[rsp]
	movss	DWORD PTR vertex$[rsp+16], xmm0
; Line 980
	movss	xmm0, DWORD PTR ycoord$[rsp]
	movss	DWORD PTR vertex$[rsp+20], xmm0
; Line 982
	lea	rax, QWORD PTR vertex$[rsp+24]
	mov	rdi, rax
	mov	rsi, QWORD PTR rgba$[rsp]
	mov	ecx, 16
	rep movsb
; Line 984
	movsxd	rax, DWORD PTR rx+1296
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR rx+1288
	lea	rdx, QWORD PTR vertex$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 40					; 00000028H
	rep movsb
	mov	eax, DWORD PTR rx+1296
	inc	eax
	mov	DWORD PTR rx+1296, eax
; Line 985
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
rxsubmit_vertex_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vertex$ = 24
rxsubmit_vertex PROC
; File W:\cpp\void\e\rx\rx.c
; Line 960
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
; Line 962
	movsxd	rax, DWORD PTR rx+1296
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR rx+1288
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR vertex$[rsp]
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 964
	mov	eax, DWORD PTR rx+1296
	inc	eax
	mov	DWORD PTR rx+1296, eax
; Line 965
	pop	rdi
	pop	rsi
	ret	0
rxsubmit_vertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
array$ = 48
tally$ = 56
rxsubmit_vertex_array PROC
; File W:\cpp\void\e\rx\rx.c
; Line 951
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 952
	movsxd	rax, DWORD PTR tally$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR rx+1296
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR rx+1288
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR array$[rsp]
	call	memcpy
; Line 956
	mov	eax, DWORD PTR tally$[rsp]
	mov	ecx, DWORD PTR rx+1296
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR rx+1296, eax
; Line 957
	add	rsp, 40					; 00000028H
	ret	0
rxsubmit_vertex_array ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
color$ = 24
rxvertex_color PROC
; File W:\cpp\void\e\rx\rx.c
; Line 946
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
; Line 947
	lea	rax, OFFSET FLAT:rx+5768548
	mov	rdi, rax
	mov	rsi, QWORD PTR color$[rsp]
	mov	ecx, 16
	rep movsb
; Line 948
	pop	rdi
	pop	rsi
	ret	0
rxvertex_color ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
color_r$ = 8
color_g$ = 16
color_b$ = 24
color_a$ = 32
rxvertex_color_rgba PROC
; File W:\cpp\void\e\rx\rx.c
; Line 938
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 939
	movzx	eax, BYTE PTR color_r$[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR rx+5768548, xmm0
; Line 940
	movzx	eax, BYTE PTR color_g$[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR rx+5768552, xmm0
; Line 941
	movzx	eax, BYTE PTR color_b$[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR rx+5768556, xmm0
; Line 942
	movzx	eax, BYTE PTR color_a$[rsp]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR rx+5768560, xmm0
; Line 943
	ret	0
rxvertex_color_rgba ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
value$ = 224
rxsubmit_index PROC
; File W:\cpp\void\e\rx\rx.c
; Line 927
$LN11:
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
$LN4@rxsubmit_i:
; Line 928
	cmp	DWORD PTR rx+5768536, 0
	jne	SHORT $LN8@rxsubmit_i
	lea	rax, OFFSET FLAT:$SG138881
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 928				; 000003a0H
	lea	r8, OFFSET FLAT:$SG138882
	mov	edx, 190				; 000000beH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138879
	lea	rdx, OFFSET FLAT:$SG138880
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN8@rxsubmit_i:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxsubmit_i
$LN7@rxsubmit_i:
; Line 929
	cmp	QWORD PTR rx+5768520, 0
	jne	SHORT $LN9@rxsubmit_i
	lea	rax, OFFSET FLAT:$SG138886
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 929				; 000003a1H
	lea	r8, OFFSET FLAT:$SG138887
	mov	edx, 191				; 000000bfH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138884
	lea	rdx, OFFSET FLAT:$SG138885
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN9@rxsubmit_i:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxsubmit_i
; Line 931
	movsxd	rax, DWORD PTR rx+1336
	mov	rcx, QWORD PTR rx+1328
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR index$[rsp], rax
	mov	eax, DWORD PTR rx+1336
	inc	eax
	mov	DWORD PTR rx+1336, eax
; Line 932
	mov	rax, QWORD PTR index$[rsp]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 934
	mov	rax, QWORD PTR rx+5768520
	mov	eax, DWORD PTR [rax+16]
	inc	eax
	mov	rcx, QWORD PTR rx+5768520
	mov	DWORD PTR [rcx+16], eax
; Line 935
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxsubmit_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$S8$ = 112
__$ArrayPad$ = 128
rxvertex_mode PROC
; File W:\cpp\void\e\rx\rx.c
; Line 915
$LN7:
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN4@rxvertex_m:
	cmp	DWORD PTR rx+5768536, 0
	je	SHORT $LN5@rxvertex_m
	lea	rax, OFFSET FLAT:$SG138865
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 915				; 00000393H
	lea	r8, OFFSET FLAT:$SG138866
	mov	edx, 189				; 000000bdH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138863
	lea	rdx, OFFSET FLAT:$SG138864
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@rxvertex_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxvertex_m
; Line 917
	xorps	xmm0, xmm0
	movss	DWORD PTR rx+5768540, xmm0
; Line 918
	xorps	xmm0, xmm0
	movss	DWORD PTR rx+5768544, xmm0
; Line 919
	xorps	xmm0, xmm0
	movss	DWORD PTR $S8$[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S8$[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR $S8$[rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR $S8$[rsp+12], xmm0
	lea	rax, OFFSET FLAT:rx+5768548
	lea	rcx, QWORD PTR $S8$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 920
	mov	ecx, 24
	call	rxcomadd
	mov	QWORD PTR rx+5768520, rax
; Line 921
	mov	rax, QWORD PTR rx+5768520
	mov	ecx, DWORD PTR rx+1296
	mov	DWORD PTR [rax+12], ecx
; Line 922
	mov	rax, QWORD PTR rx+5768520
	mov	DWORD PTR [rax+16], 0
; Line 923
	mov	DWORD PTR rx+5768536, 1
; Line 924
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
rxvertex_mode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
rxvertex_mode_end PROC
; File W:\cpp\void\e\rx\rx.c
; Line 907
$LN7:
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
$LN4@rxvertex_m:
; Line 908
	cmp	DWORD PTR rx+5768536, 0
	jne	SHORT $LN5@rxvertex_m
	lea	rax, OFFSET FLAT:$SG138852
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 908				; 0000038cH
	lea	r8, OFFSET FLAT:$SG138853
	mov	edx, 188				; 000000bcH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138850
	lea	rdx, OFFSET FLAT:$SG138851
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@rxvertex_m:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxvertex_m
; Line 910
	mov	DWORD PTR rx+5768536, 0
; Line 911
	mov	QWORD PTR rx+5768520, 0
; Line 912
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
rxvertex_mode_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
draw$ = 32
buffer$ = 64
rxqueue_uniform_command PROC
; File W:\cpp\void\e\rx\rx.c
; Line 901
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 902
	mov	ecx, 22
	call	rxcomadd
	mov	QWORD PTR draw$[rsp], rax
; Line 904
	add	rsp, 56					; 00000038H
	ret	0
rxqueue_uniform_command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
draw$ = 32
shader$ = 64
rxqueue_shader_command PROC
; File W:\cpp\void\e\rx\rx.c
; Line 895
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 896
	mov	ecx, 19
	call	rxcomadd
	mov	QWORD PTR draw$[rsp], rax
; Line 897
	mov	rax, QWORD PTR draw$[rsp]
	mov	rcx, QWORD PTR shader$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 898
	add	rsp, 56					; 00000038H
	ret	0
rxqueue_shader_command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
a$ = 32
rxclear	PROC
; File W:\cpp\void\e\rx\rx.c
; Line 886
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
; Line 887
	movss	xmm0, DWORD PTR r$[rsp]
	movss	DWORD PTR rx+5769000, xmm0
; Line 888
	movss	xmm0, DWORD PTR g$[rsp]
	movss	DWORD PTR rx+5769004, xmm0
; Line 889
	movss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR rx+5769008, xmm0
; Line 890
	movss	xmm0, DWORD PTR a$[rsp]
	movss	DWORD PTR rx+5769012, xmm0
; Line 891
	ret	0
rxclear	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
draw$ = 32
matrix$ = 80
rxdraw_matrix PROC
; File W:\cpp\void\e\rx\rx.c
; Line 879
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 880
	mov	ecx, 23
	call	rxcomadd
	mov	QWORD PTR draw$[rsp], rax
; Line 881
	mov	rax, QWORD PTR draw$[rsp]
	lea	rdi, QWORD PTR [rax+24]
	mov	rsi, QWORD PTR matrix$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 882
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxdraw_matrix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
draw$ = 32
custom$ = 64
rxqueue_custom_command PROC
; File W:\cpp\void\e\rx\rx.c
; Line 872
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 873
	mov	ecx, 15
	call	rxcomadd
	mov	QWORD PTR draw$[rsp], rax
; Line 874
	mov	rax, QWORD PTR draw$[rsp]
	mov	rcx, QWORD PTR custom$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 875
	add	rsp, 56					; 00000038H
	ret	0
rxqueue_custom_command ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rxdraw_end PROC
; File W:\cpp\void\e\rx\rx.c
; Line 867
$LN3:
	sub	rsp, 40					; 00000028H
; Line 868
	mov	ecx, 21
	call	rxcomadd
; Line 869
	add	rsp, 40					; 00000028H
	ret	0
rxdraw_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
result$ = 52
shader$1 = 56
$T2 = 64
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 224
$T8 = 256
$T9 = 288
$T10 = 320
$T11 = 352
$T12 = 384
$T13 = 448
$T14 = 512
$T15 = 576
$T16 = 640
$T17 = 704
$T18 = 768
$T19 = 832
the_clip_rect$20 = 896
t$21 = 912
matrix$22 = 1024
color$23 = 1088
__$ArrayPad$ = 1104
com$ = 1152
index_offset$ = 1160
rxcomexc PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 129
$LN38:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1128				; 00000468H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 130
	mov	DWORD PTR result$[rsp], 0
; Line 132
	mov	rax, QWORD PTR com$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv65[rsp], eax
	mov	eax, DWORD PTR tv65[rsp]
	sub	eax, 9
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 15
	ja	$LN2@rxcomexc
	movsxd	rax, DWORD PTR tv65[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN37@rxcomexc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN16@rxcomexc:
; Line 136
	mov	rax, QWORD PTR com$[rsp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN17@rxcomexc
; Line 137
	mov	rax, QWORD PTR rx+5769576
	mov	QWORD PTR rx+5769592, rax
	jmp	SHORT $LN18@rxcomexc
$LN17@rxcomexc:
; Line 139
	mov	rax, QWORD PTR rx+5769584
	mov	QWORD PTR rx+5769592, rax
$LN18@rxcomexc:
; Line 141
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	r8d, 1
	mov	rdx, QWORD PTR rx+5769592
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+288]
; Line 142
	jmp	$LN2@rxcomexc
$LN19@rxcomexc:
; Line 144
	lea	rcx, QWORD PTR $T14[rsp]
	call	rxmatrix_identity
	lea	rcx, OFFSET FLAT:rx+1176
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 145
	lea	rcx, QWORD PTR $T15[rsp]
	call	rxmatrix_identity
	lea	rcx, OFFSET FLAT:rx+1112
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 146
	cvtsi2sd xmm0, DWORD PTR rx+5768984
	movsd	xmm1, QWORD PTR __real@4000000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:rx+1112
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 147
	cvtsi2sd xmm0, DWORD PTR rx+5768988
	movsd	xmm1, QWORD PTR __real@4000000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:rx+1112
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 148
	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:rx+1112
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 149
	mov	eax, 16
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:rx+1112
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 150
	mov	eax, 16
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:rx+1112
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 151
	jmp	$LN2@rxcomexc
$LN20@rxcomexc:
; Line 154
	lea	rcx, QWORD PTR $T16[rsp]
	call	rxmatrix_identity
	lea	rcx, OFFSET FLAT:rx+1176
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 155
	lea	rcx, QWORD PTR $T17[rsp]
	call	rxmatrix_identity
	lea	rcx, OFFSET FLAT:rx+1112
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 156
	cvtsi2sd xmm0, DWORD PTR rx+5768988
	cvtsi2sd xmm1, DWORD PTR rx+5768984
	divsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [rsp+32], xmm1
	movsd	xmm3, QWORD PTR __real@3f847ae147ae147b
	movsd	xmm2, QWORD PTR __real@4056800000000000
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T18[rsp]
	call	rxmatrix_projection
	lea	rcx, OFFSET FLAT:rx+1112
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 158
	jmp	$LN2@rxcomexc
$LN21@rxcomexc:
; Line 163
	mov	rax, QWORD PTR com$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR the_clip_rect$20[rsp], eax
; Line 164
	mov	rax, QWORD PTR com$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	ecx, DWORD PTR rx+5768988
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR the_clip_rect$20[rsp+4], eax
; Line 165
	mov	rax, QWORD PTR com$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR the_clip_rect$20[rsp+8], eax
; Line 166
	mov	rax, QWORD PTR com$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	ecx, DWORD PTR rx+5768988
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR the_clip_rect$20[rsp+12], eax
; Line 167
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR the_clip_rect$20[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+360]
; Line 168
	jmp	$LN2@rxcomexc
$LN22@rxcomexc:
; Line 171
	mov	eax, DWORD PTR rx+5768888
	dec	eax
	mov	DWORD PTR rx+5768888, eax
	movsxd	rax, DWORD PTR rx+5768888
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:rx+5768792
	lea	rdx, OFFSET FLAT:rx+5768768
	mov	rdi, rdx
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 24
	rep movsb
; Line 172
	jmp	$LN2@rxcomexc
$LN23@rxcomexc:
; Line 175
	movsxd	rax, DWORD PTR rx+5768888
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:rx+5768792
	lea	rdx, OFFSET FLAT:rx+5768768
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR rx+5768888
	inc	eax
	mov	DWORD PTR rx+5768888, eax
; Line 176
	lea	rax, OFFSET FLAT:rx+5768768
	mov	rcx, QWORD PTR com$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+24]
	mov	ecx, 24
	rep movsb
; Line 178
	xorps	xmm0, xmm0
	movss	DWORD PTR color$23[rsp], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR color$23[rsp+4], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR color$23[rsp+8], xmm0
	xorps	xmm0, xmm0
	movss	DWORD PTR color$23[rsp+12], xmm0
; Line 179
	lea	rax, QWORD PTR $T2[rsp]
	mov	rcx, QWORD PTR com$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+24]
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR color$23[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxrender_target_apply
; Line 181
	jmp	$LN2@rxcomexc
$LN24@rxcomexc:
$LN6@rxcomexc:
; Line 189
	mov	rax, QWORD PTR com$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN25@rxcomexc
	lea	rax, OFFSET FLAT:$SG138787
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 189				; 000000bdH
	lea	r8, OFFSET FLAT:$SG138788
	mov	edx, 184				; 000000b8H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138785
	lea	rdx, OFFSET FLAT:$SG138786
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN25@rxcomexc:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN6@rxcomexc
; Line 190
	mov	rax, QWORD PTR com$[rsp]
	call	QWORD PTR [rax+24]
; Line 191
	jmp	$LN2@rxcomexc
$LN26@rxcomexc:
; Line 195
	lea	rax, OFFSET FLAT:rx+1176
	mov	rcx, QWORD PTR com$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+24]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 196
	jmp	$LN2@rxcomexc
$LN27@rxcomexc:
$LN9@rxcomexc:
; Line 199
	mov	rax, QWORD PTR com$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN28@rxcomexc
	lea	rax, OFFSET FLAT:$SG138794
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 199				; 000000c7H
	lea	r8, OFFSET FLAT:$SG138795
	mov	edx, 185				; 000000b9H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138792
	lea	rdx, OFFSET FLAT:$SG138793
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	int	3
$LN28@rxcomexc:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@rxcomexc
$LN12@rxcomexc:
; Line 201
	cmp	DWORD PTR rx+5768928, 4
	jb	SHORT $LN29@rxcomexc
	lea	rax, OFFSET FLAT:$SG138799
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 201				; 000000c9H
	lea	r8, OFFSET FLAT:$SG138800
	mov	edx, 186				; 000000baH
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138797
	lea	rdx, OFFSET FLAT:$SG138798
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN29@rxcomexc:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@rxcomexc
; Line 203
	movsxd	rax, DWORD PTR rx+5768928
	lea	rcx, OFFSET FLAT:rx+5768896
	mov	rdx, QWORD PTR rx+5768960
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR rx+5768928
	inc	eax
	mov	DWORD PTR rx+5768928, eax
; Line 204
	mov	rax, QWORD PTR com$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	rxshader_apply
; Line 205
	jmp	$LN2@rxcomexc
$LN30@rxcomexc:
$LN15@rxcomexc:
; Line 207
	cmp	DWORD PTR rx+5768928, 0
	jg	SHORT $LN31@rxcomexc
	lea	rax, OFFSET FLAT:$SG138805
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 207				; 000000cfH
	lea	r8, OFFSET FLAT:$SG138806
	mov	edx, 187				; 000000bbH
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138803
	lea	rdx, OFFSET FLAT:$SG138804
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN31@rxcomexc:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN15@rxcomexc
; Line 209
	mov	eax, DWORD PTR rx+5768928
	dec	eax
	mov	DWORD PTR rx+5768928, eax
	movsxd	rax, DWORD PTR rx+5768928
	lea	rcx, OFFSET FLAT:rx+5768896
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR shader$1[rsp], rax
; Line 210
	mov	rcx, QWORD PTR shader$1[rsp]
	call	rxshader_apply
; Line 211
	jmp	$LN2@rxcomexc
; Line 231
	jmp	$LN2@rxcomexc
$LN33@rxcomexc:
; Line 235
	mov	rax, QWORD PTR com$[rsp]
	mov	edx, DWORD PTR [rax+12]
	mov	rax, QWORD PTR com$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	rxsampler_apply
; Line 237
	jmp	$LN2@rxcomexc
$LN34@rxcomexc:
; Line 240
	lea	rax, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR com$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+24]
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR com$[rsp]
	mov	edx, DWORD PTR [rax+12]
	lea	rcx, QWORD PTR $T3[rsp]
	call	rxtexture_apply
; Line 241
	jmp	$LN2@rxcomexc
$LN35@rxcomexc:
; Line 244
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, OFFSET FLAT:rx+1112
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, OFFSET FLAT:rx+1176
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T12[rsp]
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	rxmatrix_multiply
	lea	rcx, QWORD PTR matrix$22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 247
	lea	rax, QWORD PTR t$21[rsp]
	lea	rcx, QWORD PTR matrix$22[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 248
	cvtsi2ss xmm0, DWORD PTR rx+5768984
	movss	DWORD PTR t$21[rsp+64], xmm0
; Line 249
	cvtsi2ss xmm0, DWORD PTR rx+5768988
	movss	DWORD PTR t$21[rsp+68], xmm0
; Line 250
	cvtsi2ss xmm0, DWORD PTR rx+40
	cvtsi2ss xmm1, DWORD PTR rx+5768984
	divss	xmm0, xmm1
	movss	DWORD PTR t$21[rsp+72], xmm0
; Line 251
	cvtsi2ss xmm0, DWORD PTR rx+44
	cvtsi2ss xmm1, DWORD PTR rx+5768988
	divss	xmm0, xmm1
	movss	DWORD PTR t$21[rsp+76], xmm0
; Line 252
	movsd	xmm0, QWORD PTR rx+664
	movsd	QWORD PTR t$21[rsp+80], xmm0
; Line 253
	movsd	xmm0, QWORD PTR rx+672
	movsd	QWORD PTR t$21[rsp+88], xmm0
; Line 254
	mov	eax, DWORD PTR rx+5768676
	mov	DWORD PTR t$21[rsp+96], eax
; Line 255
	mov	eax, DWORD PTR rx+5768724
	mov	DWORD PTR t$21[rsp+100], eax
; Line 257
	mov	r8d, 112				; 00000070H
	lea	rdx, QWORD PTR t$21[rsp]
	mov	rcx, QWORD PTR rx+1240
	call	rxuniform_buffer_update
; Line 259
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR com$[rsp]
	mov	r9d, DWORD PTR [rcx+12]
	mov	r8d, DWORD PTR index_offset$[rsp]
	mov	rcx, QWORD PTR com$[rsp]
	mov	edx, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+96]
; Line 260
	mov	rax, QWORD PTR com$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR result$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR result$[rsp], eax
$LN2@rxcomexc:
; Line 265
	mov	eax, DWORD PTR result$[rsp]
; Line 266
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1128				; 00000468H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN37@rxcomexc:
	DD	$LN33@rxcomexc
	DD	$LN34@rxcomexc
	DD	$LN2@rxcomexc
	DD	$LN19@rxcomexc
	DD	$LN20@rxcomexc
	DD	$LN16@rxcomexc
	DD	$LN24@rxcomexc
	DD	$LN21@rxcomexc
	DD	$LN23@rxcomexc
	DD	$LN22@rxcomexc
	DD	$LN27@rxcomexc
	DD	$LN30@rxcomexc
	DD	$LN2@rxcomexc
	DD	$LN2@rxcomexc
	DD	$LN26@rxcomexc
	DD	$LN35@rxcomexc
rxcomexc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
com$ = 32
texture$ = 80
offset$ = 88
rxtexture_bind_ex PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 117
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 118
	mov	ecx, 10
	call	rxcomadd
	mov	QWORD PTR com$[rsp], rax
; Line 119
	mov	rax, QWORD PTR com$[rsp]
	lea	rdi, QWORD PTR [rax+24]
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 24
	rep movsb
; Line 120
	mov	rax, QWORD PTR com$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 121
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_bind_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
com$ = 32
sampler$ = 64
offset$ = 72
rxsampler_bind_ex PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 105
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 106
	mov	ecx, 9
	call	rxcomadd
	mov	QWORD PTR com$[rsp], rax
; Line 107
	mov	rax, QWORD PTR com$[rsp]
	mov	rcx, QWORD PTR sampler$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 108
	mov	rax, QWORD PTR com$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 109
	add	rsp, 56					; 00000038H
	ret	0
rxsampler_bind_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
x0$ = 224
y0$ = 232
x1$ = 240
y1$ = 248
rxclip	PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 89
$LN11:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
$LN4@rxclip:
; Line 90
	mov	eax, DWORD PTR x1$[rsp]
	cmp	DWORD PTR x0$[rsp], eax
	jle	SHORT $LN8@rxclip
	lea	rax, OFFSET FLAT:$SG138715
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 90					; 0000005aH
	lea	r8, OFFSET FLAT:$SG138716
	mov	edx, 182				; 000000b6H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138713
	lea	rdx, OFFSET FLAT:$SG138714
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN8@rxclip:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxclip
$LN7@rxclip:
; Line 91
	mov	eax, DWORD PTR y1$[rsp]
	cmp	DWORD PTR y0$[rsp], eax
	jle	SHORT $LN9@rxclip
	lea	rax, OFFSET FLAT:$SG138720
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 91					; 0000005bH
	lea	r8, OFFSET FLAT:$SG138721
	mov	edx, 183				; 000000b7H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138718
	lea	rdx, OFFSET FLAT:$SG138719
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN9@rxclip:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxclip
; Line 94
	mov	r8d, DWORD PTR rx+5768984
	xor	edx, edx
	mov	ecx, DWORD PTR x0$[rsp]
	call	rxclampi
	mov	DWORD PTR x0$[rsp], eax
; Line 95
	mov	r8d, DWORD PTR rx+5768988
	xor	edx, edx
	mov	ecx, DWORD PTR y0$[rsp]
	call	rxclampi
	mov	DWORD PTR y0$[rsp], eax
; Line 96
	mov	r8d, DWORD PTR rx+5768984
	xor	edx, edx
	mov	ecx, DWORD PTR x1$[rsp]
	call	rxclampi
	mov	DWORD PTR x1$[rsp], eax
; Line 97
	mov	r8d, DWORD PTR rx+5768988
	xor	edx, edx
	mov	ecx, DWORD PTR y1$[rsp]
	call	rxclampi
	mov	DWORD PTR y1$[rsp], eax
; Line 99
	mov	ecx, 16
	call	rxcomadd
	mov	QWORD PTR c$[rsp], rax
; Line 100
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x0$[rsp]
	mov	DWORD PTR [rax+24], ecx
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y0$[rsp]
	mov	DWORD PTR [rax+28], ecx
; Line 101
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x1$[rsp]
	mov	DWORD PTR [rax+32], ecx
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y1$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 102
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxclip	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rx2d	PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 79
$LN3:
	sub	rsp, 40					; 00000028H
; Line 80
	lea	rcx, OFFSET FLAT:$SG138694
	call	rxcomtag
; Line 81
	mov	ecx, 12
	call	rxcomadd
; Line 84
	xor	ecx, ecx
	call	rxenable_ztesting
; Line 86
	add	rsp, 40					; 00000028H
	ret	0
rx2d	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rx3d	PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 69
$LN3:
	sub	rsp, 40					; 00000028H
; Line 70
	lea	rcx, OFFSET FLAT:$SG138691
	call	rxcomtag
; Line 71
	mov	ecx, 13
	call	rxcomadd
; Line 74
	mov	ecx, 1
	call	rxenable_ztesting
; Line 76
	add	rsp, 40					; 00000028H
	ret	0
rx3d	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_command$ = 48
$T1 = 64
$T2 = 96
type$ = 160
rxcomadd PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 37
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 38
	cmp	DWORD PTR rx+5768512, 65536		; 00010000H
	jl	SHORT $LN2@rxcomadd
; Line 40
	lea	rax, OFFSET FLAT:$SG138679
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:$SG138680
	mov	edx, 181				; 000000b5H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9d, DWORD PTR rx+5768512
	lea	r8, OFFSET FLAT:$SG138677
	lea	rdx, OFFSET FLAT:$SG138678
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
; Line 42
	mov	DWORD PTR rx+5768512, 65535		; 0000ffffH
$LN2@rxcomadd:
; Line 47
	movsxd	rax, DWORD PTR rx+5768512
	imul	rax, rax, 88				; 00000058H
	lea	rcx, OFFSET FLAT:rx+1344
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR the_command$[rsp], rax
; Line 50
	mov	eax, DWORD PTR rx+5768512
	inc	eax
	mov	DWORD PTR rx+5768512, eax
; Line 52
	mov	rax, QWORD PTR the_command$[rsp]
	mov	ecx, DWORD PTR type$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 53
	xor	ecx, ecx
	call	rxcomtag
	mov	rcx, QWORD PTR the_command$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 55
	mov	rax, QWORD PTR the_command$[rsp]
; Line 56
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxcomadd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
the_label$ = 8
label$ = 32
rxcomtag PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 26
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 27
	cmp	QWORD PTR label$[rsp], 0
	je	SHORT $LN3@rxcomtag
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN4@rxcomtag
$LN3@rxcomtag:
	mov	rax, QWORD PTR rx+5768528
	mov	QWORD PTR tv65[rsp], rax
$LN4@rxcomtag:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR the_label$[rsp], rax
; Line 29
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR rx+5768528, rax
; Line 31
	mov	rax, QWORD PTR the_label$[rsp]
; Line 32
	add	rsp, 24
	ret	0
rxcomtag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Viewport$ = 32
__$ArrayPad$ = 56
w$ = 80
h$ = 88
rxdriver_stage_viewport PROC
; File W:\cpp\void\e\rx\rx.c
; Line 853
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 854
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp], xmm0
; Line 855
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp+4], xmm0
; Line 856
	movss	xmm0, DWORD PTR w$[rsp]
	movss	DWORD PTR Viewport$[rsp+8], xmm0
; Line 857
	movss	xmm0, DWORD PTR h$[rsp]
	movss	DWORD PTR Viewport$[rsp+12], xmm0
; Line 858
	xorps	xmm0, xmm0
	movss	DWORD PTR Viewport$[rsp+16], xmm0
; Line 859
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR Viewport$[rsp+20], xmm0
; Line 860
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR Viewport$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+352]
; Line 861
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 72					; 00000048H
	ret	0
rxdriver_stage_viewport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_resource$ = 32
$T1 = 40
__$ReturnAddress$ = 96
buffer$ = 104
rxborrow_struct_buffer PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 215
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 218
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR the_resource$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR [rax+56]
; Line 220
	mov	rdx, QWORD PTR the_resource$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxbuffer_borrow
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 221
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxborrow_struct_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 96
buffer$ = 104
rxborrow_index_buffer PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 208
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 209
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxbuffer_borrow
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 210
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxborrow_index_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 96
buffer$ = 104
rxborrow_vertex_buffer PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 201
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 202
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxbuffer_borrow
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 203
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxborrow_vertex_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_buffer$ = 32
View$ = 40
result$ = 48
D$ = 56
the_buffer_info$ = 80
__$ArrayPad$ = 104
struct_size$ = 128
struct_count$ = 136
rxcreate_struct_buffer PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 162
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 164
	mov	DWORD PTR the_buffer_info$[rsp+4], 2
; Line 165
	mov	DWORD PTR the_buffer_info$[rsp+12], 65536 ; 00010000H
; Line 166
	mov	DWORD PTR the_buffer_info$[rsp+16], 64	; 00000040H
; Line 167
	mov	eax, DWORD PTR struct_size$[rsp]
	mov	DWORD PTR the_buffer_info$[rsp+20], eax
; Line 168
	mov	DWORD PTR the_buffer_info$[rsp+8], 8
; Line 169
	mov	rax, QWORD PTR struct_size$[rsp]
	imul	rax, QWORD PTR struct_count$[rsp]
	mov	DWORD PTR the_buffer_info$[rsp], eax
; Line 172
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR the_buffer_info$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+24]
; Line 175
	mov	DWORD PTR D$[rsp], 0
; Line 176
	mov	DWORD PTR D$[rsp+4], 1
; Line 177
	mov	DWORD PTR D$[rsp+8], 0
; Line 178
	mov	eax, DWORD PTR struct_count$[rsp]
	mov	DWORD PTR D$[rsp+12], eax
; Line 181
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR View$[rsp]
	lea	r8, QWORD PTR D$[rsp]
	mov	rdx, QWORD PTR the_buffer$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+56]
; Line 184
	mov	rax, QWORD PTR View$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 186
	mov	rax, QWORD PTR result$[rsp]
; Line 187
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
rxcreate_struct_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_buffer$ = 32
$S7$ = 40
the_buffer_info$ = 48
__$ArrayPad$ = 72
vertex_size$ = 96
vertex_count$ = 104
rxcreate_vertex_buffer PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 144
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 146
	mov	DWORD PTR the_buffer_info$[rsp+4], 2
; Line 147
	mov	DWORD PTR the_buffer_info$[rsp+12], 65536 ; 00010000H
; Line 148
	mov	DWORD PTR the_buffer_info$[rsp+16], 0
; Line 149
	mov	DWORD PTR the_buffer_info$[rsp+20], 0
; Line 150
	mov	DWORD PTR the_buffer_info$[rsp+8], 1
; Line 151
	mov	rax, QWORD PTR vertex_size$[rsp]
	imul	rax, QWORD PTR vertex_count$[rsp]
	mov	DWORD PTR the_buffer_info$[rsp], eax
; Line 154
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR the_buffer_info$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+24]
; Line 156
	mov	rax, QWORD PTR the_buffer$[rsp]
	mov	QWORD PTR $S7$[rsp], rax
	mov	rax, QWORD PTR $S7$[rsp]
; Line 157
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
rxcreate_vertex_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_buffer$ = 32
$S6$ = 40
the_buffer_info$ = 48
__$ArrayPad$ = 72
index_size$ = 96
index_count$ = 104
rxcreate_index_buffer PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 126
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 128
	mov	DWORD PTR the_buffer_info$[rsp+4], 2
; Line 129
	mov	DWORD PTR the_buffer_info$[rsp+12], 65536 ; 00010000H
; Line 130
	mov	DWORD PTR the_buffer_info$[rsp+16], 0
; Line 131
	mov	DWORD PTR the_buffer_info$[rsp+20], 0
; Line 132
	mov	DWORD PTR the_buffer_info$[rsp+8], 2
; Line 133
	mov	rax, QWORD PTR index_size$[rsp]
	imul	rax, QWORD PTR index_count$[rsp]
	mov	DWORD PTR the_buffer_info$[rsp], eax
; Line 136
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR the_buffer_info$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+24]
; Line 138
	mov	rax, QWORD PTR the_buffer$[rsp]
	mov	QWORD PTR $S6$[rsp], rax
	mov	rax, QWORD PTR $S6$[rsp]
; Line 139
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
rxcreate_index_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_buffer$ = 32
$S5$ = 40
the_buffer_info$ = 48
__$ArrayPad$ = 72
length$ = 96
memory$ = 104
rxuniform_buffer_create PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 107
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 110
	mov	DWORD PTR the_buffer_info$[rsp+4], 2
; Line 111
	mov	DWORD PTR the_buffer_info$[rsp+12], 65536 ; 00010000H
; Line 112
	mov	DWORD PTR the_buffer_info$[rsp+16], 0
; Line 113
	mov	DWORD PTR the_buffer_info$[rsp+20], 0
; Line 114
	mov	DWORD PTR the_buffer_info$[rsp+8], 4
; Line 115
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 15
	xor	edx, edx
	mov	ecx, 16
	div	ecx
	imul	eax, eax, 16
	mov	DWORD PTR the_buffer_info$[rsp], eax
; Line 118
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR the_buffer_info$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+24]
; Line 120
	mov	rax, QWORD PTR the_buffer$[rsp]
	mov	QWORD PTR $S5$[rsp], rax
	mov	rax, QWORD PTR $S5$[rsp]
; Line 121
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
rxuniform_buffer_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 96
buffer$ = 104
rxuniform_buffer_borrow PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 58
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 60
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxbuffer_borrow
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 61
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxuniform_buffer_borrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
borrowed$ = 48
rxreturn PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 24
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 25
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	rcx, QWORD PTR borrowed$[rsp]
	mov	rdx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+120]
; Line 26
	add	rsp, 40					; 00000028H
	ret	0
rxreturn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
rxdelete_index_buffer PROC
; File W:\cpp\void\e\rx\rx.c
; Line 842
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 843
	mov	rcx, QWORD PTR buffer$[rsp]
	call	rxdelete_unknown
; Line 844
	add	rsp, 40					; 00000028H
	ret	0
rxdelete_index_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
rxdelete_vertex_buffer PROC
; File W:\cpp\void\e\rx\rx.c
; Line 836
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 837
	mov	rcx, QWORD PTR buffer$[rsp]
	call	rxdelete_unknown
; Line 838
	add	rsp, 40					; 00000028H
	ret	0
rxdelete_vertex_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
unknown$ = 48
rxdelete_unknown PROC
; File W:\cpp\void\e\rx\rx.c
; Line 828
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 829
	cmp	QWORD PTR unknown$[rsp], 0
	je	SHORT $LN2@rxdelete_u
; Line 830
	mov	rax, QWORD PTR unknown$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR unknown$[rsp]
	call	QWORD PTR [rax+16]
$LN2@rxdelete_u:
; Line 831
	add	rsp, 40					; 00000028H
	ret	0
rxdelete_unknown ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ElementIndex$1 = 48
Element$2 = 56
tv183 = 64
Reflection$ = 72
Shader$ = 80
InputLayout$ = 88
BlobPart$ = 96
$S2$ = 104
ElemSig$ = 112
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 384
$T11 = 416
$T12 = 448
$T13 = 480
$T14 = 512
$T15 = 544
$T16 = 576
ShaderInfo$ = 608
ElementArray$ = 768
__$ArrayPad$ = 1792
type$ = 1840
bytecode_length$ = 1848
bytecode_memory$ = 1856
rxcreate_shader PROC
; File W:\cpp\void\e\rx\rx.c
; Line 654
$LN31:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 1816				; 00000718H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 655
	mov	QWORD PTR Shader$[rsp], 0
; Line 656
	mov	QWORD PTR BlobPart$[rsp], 0
; Line 657
	mov	QWORD PTR Reflection$[rsp], 0
; Line 658
	mov	QWORD PTR InputLayout$[rsp], 0
; Line 660
	cmp	DWORD PTR type$[rsp], 3
	jne	$LN13@rxcreate_s
; Line 661
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR Shader$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	mov	r8, QWORD PTR bytecode_length$[rsp]
	mov	rdx, QWORD PTR bytecode_memory$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+96]
	test	eax, eax
	jge	SHORT $LN15@rxcreate_s
; Line 664
	lea	rax, OFFSET FLAT:$SG138322
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 664				; 00000298H
	lea	r8, OFFSET FLAT:$SG138323
	mov	edx, 159				; 0000009fH
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG138320
	lea	rdx, OFFSET FLAT:$SG138321
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
; Line 665
	jmp	$leave$32
$LN15@rxcreate_s:
; Line 667
	jmp	$LN14@rxcreate_s
$LN13@rxcreate_s:
; Line 668
	cmp	DWORD PTR type$[rsp], 2
	jne	$LN16@rxcreate_s
; Line 669
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR Shader$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	xor	r9d, r9d
	mov	r8, QWORD PTR bytecode_length$[rsp]
	mov	rdx, QWORD PTR bytecode_memory$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+120]
	test	eax, eax
	jge	SHORT $LN17@rxcreate_s
; Line 672
	lea	rax, OFFSET FLAT:$SG138328
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 672				; 000002a0H
	lea	r8, OFFSET FLAT:$SG138329
	mov	edx, 160				; 000000a0H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG138326
	lea	rdx, OFFSET FLAT:$SG138327
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
; Line 673
	jmp	$leave$32
$LN17@rxcreate_s:
$LN16@rxcreate_s:
$LN14@rxcreate_s:
; Line 677
	lea	rax, QWORD PTR BlobPart$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR bytecode_length$[rsp]
	mov	rcx, QWORD PTR bytecode_memory$[rsp]
	call	D3DGetBlobPart
	test	eax, eax
	jge	SHORT $LN18@rxcreate_s
; Line 681
	lea	rax, OFFSET FLAT:$SG138333
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 681				; 000002a9H
	lea	r8, OFFSET FLAT:$SG138334
	mov	edx, 161				; 000000a1H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG138331
	lea	rdx, OFFSET FLAT:$SG138332
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
; Line 682
	jmp	$leave$32
$LN18@rxcreate_s:
; Line 685
	lea	r9, QWORD PTR Reflection$[rsp]
	lea	r8, OFFSET FLAT:IID_ID3D11ShaderReflection
	mov	rdx, QWORD PTR bytecode_length$[rsp]
	mov	rcx, QWORD PTR bytecode_memory$[rsp]
	call	D3DReflect
	test	eax, eax
	jge	SHORT $LN19@rxcreate_s
; Line 689
	lea	rax, OFFSET FLAT:$SG138338
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 689				; 000002b1H
	lea	r8, OFFSET FLAT:$SG138339
	mov	edx, 162				; 000000a2H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG138336
	lea	rdx, OFFSET FLAT:$SG138337
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
; Line 690
	jmp	$leave$32
$LN19@rxcreate_s:
; Line 694
	mov	rax, QWORD PTR Reflection$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	rdx, QWORD PTR ShaderInfo$[rsp]
	mov	rcx, QWORD PTR Reflection$[rsp]
	call	QWORD PTR [rax+24]
; Line 701
	mov	DWORD PTR ElementIndex$1[rsp], 0
	jmp	SHORT $LN4@rxcreate_s
$LN2@rxcreate_s:
	mov	eax, DWORD PTR ElementIndex$1[rsp]
	inc	eax
	mov	DWORD PTR ElementIndex$1[rsp], eax
$LN4@rxcreate_s:
	mov	eax, DWORD PTR ShaderInfo$[rsp+28]
	cmp	DWORD PTR ElementIndex$1[rsp], eax
	jae	$LN3@rxcreate_s
; Line 703
	mov	rax, QWORD PTR Reflection$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR ElemSig$[rsp]
	mov	edx, DWORD PTR ElementIndex$1[rsp]
	mov	rcx, QWORD PTR Reflection$[rsp]
	call	QWORD PTR [rax+56]
; Line 705
	movsxd	rax, DWORD PTR ElementIndex$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rax, QWORD PTR ElementArray$[rsp+rax]
	mov	QWORD PTR Element$2[rsp], rax
; Line 706
	mov	rax, QWORD PTR Element$2[rsp]
	mov	rcx, QWORD PTR ElemSig$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 707
	mov	rax, QWORD PTR Element$2[rsp]
	mov	ecx, DWORD PTR ElemSig$[rsp+8]
	mov	DWORD PTR [rax+8], ecx
; Line 714
	cmp	DWORD PTR ElemSig$[rsp+20], 3
	jne	$LN20@rxcreate_s
; Line 716
	movzx	eax, BYTE PTR ElemSig$[rsp+24]
	mov	BYTE PTR tv183[rsp], al
	cmp	BYTE PTR tv183[rsp], 1
	je	SHORT $LN22@rxcreate_s
	cmp	BYTE PTR tv183[rsp], 3
	je	SHORT $LN23@rxcreate_s
	cmp	BYTE PTR tv183[rsp], 7
	je	SHORT $LN24@rxcreate_s
	cmp	BYTE PTR tv183[rsp], 15
	je	SHORT $LN25@rxcreate_s
	jmp	SHORT $LN26@rxcreate_s
$LN22@rxcreate_s:
; Line 717
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+12], 0
	jmp	$LN5@rxcreate_s
$LN23@rxcreate_s:
; Line 718
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+12], 16
	jmp	$LN5@rxcreate_s
$LN24@rxcreate_s:
; Line 719
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+12], 0
	jmp	SHORT $LN5@rxcreate_s
$LN25@rxcreate_s:
; Line 720
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+12], 2
	jmp	SHORT $LN5@rxcreate_s
$LN26@rxcreate_s:
$LN9@rxcreate_s:
; Line 722
	lea	rax, OFFSET FLAT:$SG138348
	test	rax, rax
	je	SHORT $LN27@rxcreate_s
	lea	rax, OFFSET FLAT:$SG138351
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 722				; 000002d2H
	lea	r8, OFFSET FLAT:$SG138352
	mov	edx, 163				; 000000a3H
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138349
	lea	rdx, OFFSET FLAT:$SG138350
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN27@rxcreate_s:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN9@rxcreate_s
$LN5@rxcreate_s:
; Line 724
	jmp	SHORT $LN21@rxcreate_s
$LN20@rxcreate_s:
$LN12@rxcreate_s:
; Line 725
	lea	rax, OFFSET FLAT:$SG138354
	test	rax, rax
	je	SHORT $LN28@rxcreate_s
	lea	rax, OFFSET FLAT:$SG138357
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 725				; 000002d5H
	lea	r8, OFFSET FLAT:$SG138358
	mov	edx, 164				; 000000a4H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138355
	lea	rdx, OFFSET FLAT:$SG138356
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	int	3
$LN28@rxcreate_s:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@rxcreate_s
$LN21@rxcreate_s:
; Line 727
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 728
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+20], -1			; ffffffffH
; Line 729
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+24], 0
; Line 730
	mov	rax, QWORD PTR Element$2[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 731
	jmp	$LN2@rxcreate_s
$LN3@rxcreate_s:
; Line 733
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR InputLayout$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR bytecode_length$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR bytecode_memory$[rsp]
	mov	r8d, DWORD PTR ShaderInfo$[rsp+28]
	lea	rdx, QWORD PTR ElementArray$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+88]
	test	eax, eax
	jge	SHORT $LN29@rxcreate_s
; Line 738
	lea	rax, OFFSET FLAT:$SG138362
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 738				; 000002e2H
	lea	r8, OFFSET FLAT:$SG138363
	mov	edx, 165				; 000000a5H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG138360
	lea	rdx, OFFSET FLAT:$SG138361
	lea	rcx, QWORD PTR $T9[rsp]
	call	cctrace_
; Line 739
	jmp	SHORT $leave$32
$LN29@rxcreate_s:
; Line 742
	mov	rcx, QWORD PTR Shader$[rsp]
	call	rxarticle_create
	mov	r8, QWORD PTR InputLayout$[rsp]
	mov	edx, 2
	mov	rcx, rax
	call	rxarticle_attach
$leave$32:
; Line 748
	mov	rax, QWORD PTR Shader$[rsp]
	mov	QWORD PTR $S2$[rsp], rax
	mov	rax, QWORD PTR $S2$[rsp]
; Line 749
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1816				; 00000718H
	pop	rdi
	pop	rsi
	ret	0
rxcreate_shader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bytecode$ = 48
rxdelete_blobbler PROC
; File W:\cpp\void\e\rx\rx.c
; Line 610
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 611
	mov	rax, QWORD PTR bytecode$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN2@rxdelete_b
; Line 613
	mov	rax, QWORD PTR bytecode$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR bytecode$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax+16]
$LN2@rxdelete_b:
; Line 615
	add	rsp, 40					; 00000028H
	ret	0
rxdelete_blobbler ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
shader$ = 48
rxshader_typeof_pixel PROC
; File W:\cpp\void\e\rx\rx.c
; Line 603
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 604
	mov	rcx, QWORD PTR shader$[rsp]
	call	rxunknown_typeof_pixel_shader
; Line 605
	add	rsp, 40					; 00000028H
	ret	0
rxshader_typeof_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
shader$ = 48
rxshader_typeof_vertex PROC
; File W:\cpp\void\e\rx\rx.c
; Line 597
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 598
	mov	rcx, QWORD PTR shader$[rsp]
	call	rxunknown_typeof_vertex_shader
; Line 599
	add	rsp, 40					; 00000028H
	ret	0
rxshader_typeof_vertex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
shader$ = 48
rxshader_typeof_compute PROC
; File W:\cpp\void\e\rx\rx.c
; Line 591
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 592
	mov	rcx, QWORD PTR shader$[rsp]
	call	rxunknown_typeof_compute_shader
; Line 593
	add	rsp, 40					; 00000028H
	ret	0
rxshader_typeof_compute ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
I$ = 40
unknown$ = 64
rxunknown_typeof_pixel_shader PROC
; File W:\cpp\void\e\rx\rx.c
; Line 582
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 583
	mov	QWORD PTR I$[rsp], 0
; Line 584
	mov	rax, QWORD PTR unknown$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR I$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11PixelShader
	mov	rcx, QWORD PTR unknown$[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN2@rxunknown_
; Line 585
	mov	rax, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR [rax+16]
$LN2@rxunknown_:
; Line 586
	cmp	QWORD PTR I$[rsp], 0
	je	SHORT $LN4@rxunknown_
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN5@rxunknown_
$LN4@rxunknown_:
	mov	DWORD PTR tv75[rsp], 0
$LN5@rxunknown_:
	mov	eax, DWORD PTR tv75[rsp]
; Line 587
	add	rsp, 56					; 00000038H
	ret	0
rxunknown_typeof_pixel_shader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
I$ = 40
unknown$ = 64
rxunknown_typeof_vertex_shader PROC
; File W:\cpp\void\e\rx\rx.c
; Line 573
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 574
	mov	QWORD PTR I$[rsp], 0
; Line 575
	mov	rax, QWORD PTR unknown$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR I$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11VertexShader
	mov	rcx, QWORD PTR unknown$[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN2@rxunknown_
; Line 576
	mov	rax, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR [rax+16]
$LN2@rxunknown_:
; Line 577
	cmp	QWORD PTR I$[rsp], 0
	je	SHORT $LN4@rxunknown_
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN5@rxunknown_
$LN4@rxunknown_:
	mov	DWORD PTR tv75[rsp], 0
$LN5@rxunknown_:
	mov	eax, DWORD PTR tv75[rsp]
; Line 578
	add	rsp, 56					; 00000038H
	ret	0
rxunknown_typeof_vertex_shader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
I$ = 40
unknown$ = 64
rxunknown_typeof_compute_shader PROC
; File W:\cpp\void\e\rx\rx.c
; Line 564
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 565
	mov	QWORD PTR I$[rsp], 0
; Line 566
	mov	rax, QWORD PTR unknown$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR I$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11ComputeShader
	mov	rcx, QWORD PTR unknown$[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN2@rxunknown_
; Line 567
	mov	rax, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR [rax+16]
$LN2@rxunknown_:
; Line 568
	cmp	QWORD PTR I$[rsp], 0
	je	SHORT $LN4@rxunknown_
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN5@rxunknown_
$LN4@rxunknown_:
	mov	DWORD PTR tv75[rsp], 0
$LN5@rxunknown_:
	mov	eax, DWORD PTR tv75[rsp]
; Line 569
	add	rsp, 56					; 00000038H
	ret	0
rxunknown_typeof_compute_shader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Entry$ = 64
EntryCursor$ = 72
BytesRead$1 = 80
Overlapped$ = 88
FileName$2 = 128
__$ArrayPad$ = 400
rxinvalidate_contents PROC
; File W:\cpp\void\e\rx\rx.c
; Line 504
$LN14:
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 505
	cmp	QWORD PTR rx+8, 0
	jne	SHORT $LN5@rxinvalida
; Line 506
	jmp	$LN1@rxinvalida
$LN5@rxinvalida:
; Line 515
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	lea	rcx, QWORD PTR Overlapped$[rsp]
	call	memset
; Line 516
	mov	rax, QWORD PTR rx+16
	mov	QWORD PTR Overlapped$[rsp+24], rax
; Line 518
	cmp	DWORD PTR ?IsEventActive@?1??rxinvalidate_contents@@9@9, 0
	jne	SHORT $LN6@rxinvalida
; Line 520
	mov	r8d, 4416				; 00001140H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:?EntryBuffer@?1??rxinvalidate_contents@@9@9
	call	memset
; Line 522
	mov	QWORD PTR [rsp+56], 0
	lea	rax, QWORD PTR Overlapped$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, 1
	mov	r8d, 4416				; 00001140H
	lea	rdx, OFFSET FLAT:?EntryBuffer@?1??rxinvalidate_contents@@9@9
	mov	rcx, QWORD PTR rx+8
	call	QWORD PTR __imp_ReadDirectoryChangesW
	test	eax, eax
	je	SHORT $LN7@rxinvalida
; Line 527
	mov	DWORD PTR ?IsEventActive@?1??rxinvalidate_contents@@9@9, 1
$LN7@rxinvalida:
$LN6@rxinvalida:
; Line 531
	cmp	DWORD PTR ?IsEventActive@?1??rxinvalidate_contents@@9@9, 0
	je	$LN8@rxinvalida
; Line 532
	xor	edx, edx
	mov	rcx, QWORD PTR rx+16
	call	QWORD PTR __imp_WaitForSingleObject
	test	eax, eax
	jne	$LN9@rxinvalida
; Line 533
	mov	DWORD PTR BytesRead$1[rsp], 0
; Line 535
	xor	r9d, r9d
	lea	r8, QWORD PTR BytesRead$1[rsp]
	lea	rdx, QWORD PTR Overlapped$[rsp]
	mov	rcx, QWORD PTR rx+8
	call	QWORD PTR __imp_GetOverlappedResult
	test	eax, eax
	je	$LN10@rxinvalida
; Line 537
	lea	rax, OFFSET FLAT:?EntryBuffer@?1??rxinvalidate_contents@@9@9
	mov	QWORD PTR EntryCursor$[rsp], rax
$LN2@rxinvalida:
; Line 538
	lea	rax, OFFSET FLAT:?EntryBuffer@?1??rxinvalidate_contents@@9@9
	add	rax, 4416				; 00001140H
	cmp	QWORD PTR EntryCursor$[rsp], rax
	jae	$LN3@rxinvalida
; Line 539
	mov	rax, QWORD PTR EntryCursor$[rsp]
	mov	QWORD PTR Entry$[rsp], rax
; Line 542
	mov	r8d, 264				; 00000108H
	xor	edx, edx
	lea	rcx, QWORD PTR FileName$2[rsp]
	call	memset
; Line 544
	mov	rax, QWORD PTR Entry$[rsp]
	add	rax, 12
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 264			; 00000108H
	lea	rcx, QWORD PTR FileName$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR Entry$[rsp]
	mov	r9d, DWORD PTR [rcx+8]
	mov	r8, rax
	xor	edx, edx
	mov	ecx, 65001				; 0000fde9H
	call	QWORD PTR __imp_WideCharToMultiByte
	test	eax, eax
	je	SHORT $LN11@rxinvalida
; Line 547
	mov	edx, 4
	lea	rcx, QWORD PTR FileName$2[rsp]
	call	rxlinker_labelsadd_terminal
$LN11@rxinvalida:
; Line 550
	mov	rax, QWORD PTR Entry$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN12@rxinvalida
; Line 551
	jmp	SHORT $LN3@rxinvalida
$LN12@rxinvalida:
; Line 553
	mov	rax, QWORD PTR Entry$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR EntryCursor$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR EntryCursor$[rsp], rax
; Line 554
	jmp	$LN2@rxinvalida
$LN3@rxinvalida:
; Line 556
	mov	DWORD PTR ?IsEventActive@?1??rxinvalidate_contents@@9@9, 0
$LN10@rxinvalida:
$LN9@rxinvalida:
$LN8@rxinvalida:
$LN1@rxinvalida:
; Line 560
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	ret	0
rxinvalidate_contents ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tan$ = 8
lin$ = 16
unknown$ = 24
rxarticle_attach PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 15
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 16
	movsxd	rax, DWORD PTR lin$[rsp]
	mov	rcx, QWORD PTR tan$[rsp]
	mov	rdx, QWORD PTR unknown$[rsp]
	mov	QWORD PTR [rcx+rax*8+16], rdx
; Line 18
	mov	rax, QWORD PTR tan$[rsp]
; Line 19
	ret	0
rxarticle_attach ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tan$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
unknown$ = 224
rxarticle_create PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 4
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 5
	lea	rax, OFFSET FLAT:$SG138064
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5
	lea	r8, OFFSET FLAT:$SG138065
	mov	edx, 147				; 00000093H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR unknown$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -8
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:rx+1096
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctblputi_
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR rx+1096
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tan$[rsp], rax
$LN4@rxarticle_:
; Line 6
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 0
	je	SHORT $LN5@rxarticle_
	lea	rax, OFFSET FLAT:$SG138069
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6
	lea	r8, OFFSET FLAT:$SG138070
	mov	edx, 148				; 00000094H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138067
	lea	rdx, OFFSET FLAT:$SG138068
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN5@rxarticle_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxarticle_
; Line 8
	mov	rax, QWORD PTR tan$[rsp]
	mov	rcx, QWORD PTR unknown$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 10
	mov	rax, QWORD PTR tan$[rsp]
; Line 11
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxarticle_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
com$ = 32
enable$ = 64
rxenable_ztesting PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 59
$LN5:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 60
	cmp	DWORD PTR enable$[rsp], 0
	je	SHORT $LN2@rxenable_z
; Line 61
	lea	rcx, OFFSET FLAT:$SG138687
	call	rxcomtag
	jmp	SHORT $LN3@rxenable_z
$LN2@rxenable_z:
; Line 62
	lea	rcx, OFFSET FLAT:$SG138688
	call	rxcomtag
$LN3@rxenable_z:
; Line 64
	mov	ecx, 14
	call	rxcomadd
	mov	QWORD PTR com$[rsp], rax
; Line 65
	mov	rax, QWORD PTR com$[rsp]
	mov	ecx, DWORD PTR enable$[rsp]
	mov	DWORD PTR [rax+28], ecx
; Line 66
	add	rsp, 56					; 00000038H
	ret	0
rxenable_ztesting ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_buffer$ = 48
$T1 = 64
$T2 = 96
buffer$ = 160
offset$ = 168
rxuniform_buffer_bind_ex PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 68
$LN13:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
$LN4@rxuniform_:
; Line 69
	cmp	QWORD PTR buffer$[rsp], 0
	jne	SHORT $LN5@rxuniform_
	lea	rax, OFFSET FLAT:$SG138563
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 69					; 00000045H
	lea	r8, OFFSET FLAT:$SG138564
	mov	edx, 180				; 000000b4H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138561
	lea	rdx, OFFSET FLAT:$SG138562
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@rxuniform_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxuniform_
; Line 74
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR the_buffer$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11Buffer
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	$LN6@rxuniform_
; Line 75
	mov	rax, QWORD PTR the_buffer$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR the_buffer$[rsp]
	call	QWORD PTR [rax+16]
; Line 77
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_vertex
	test	eax, eax
	je	SHORT $LN7@rxuniform_
; Line 78
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+56]
	jmp	SHORT $LN8@rxuniform_
$LN7@rxuniform_:
; Line 80
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_pixel
	test	eax, eax
	je	SHORT $LN9@rxuniform_
; Line 81
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+128]
	jmp	SHORT $LN10@rxuniform_
$LN9@rxuniform_:
; Line 83
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_compute
	test	eax, eax
	je	SHORT $LN11@rxuniform_
; Line 84
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR the_buffer$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+568]
$LN11@rxuniform_:
$LN10@rxuniform_:
$LN8@rxuniform_:
$LN6@rxuniform_:
; Line 86
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxuniform_buffer_bind_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
$T1 = 64
$T2 = 96
uniform$ = 160
memory$ = 168
length$ = 176
rxuniform_buffer_update PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 192
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 193
	mov	rdx, QWORD PTR uniform$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxuniform_buffer_borrow
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 194
	mov	r8, QWORD PTR length$[rsp]
	mov	rdx, QWORD PTR memory$[rsp]
	mov	rcx, QWORD PTR b$[rsp+8]
	call	memcpy
; Line 195
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxreturn
; Line 196
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxuniform_buffer_update ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
the_buffer$1 = 32
buffer$ = 64
rxuniform_buffer_delete PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 91
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 92
	cmp	QWORD PTR buffer$[rsp], 0
	je	SHORT $LN2@rxuniform_
; Line 95
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR the_buffer$1[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11Buffer
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN3@rxuniform_
; Line 97
	mov	rax, QWORD PTR the_buffer$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR the_buffer$1[rsp]
	call	QWORD PTR [rax+16]
; Line 99
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR [rax+16]
$LN3@rxuniform_:
$LN2@rxuniform_:
; Line 102
	add	rsp, 56					; 00000038H
	ret	0
rxuniform_buffer_delete ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Resource$ = 48
result$ = 56
MappedAccess$1 = 80
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
__$ReturnAddress$ = 256
buffer$ = 264
rxbuffer_borrow PROC
; File W:\cpp\void\e\rx\rx.buffer.cc
; Line 31
$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 33
	mov	QWORD PTR result$[rsp], 0
; Line 34
	mov	DWORD PTR result$[rsp+16], 0
; Line 35
	mov	QWORD PTR result$[rsp+8], 0
; Line 39
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR Resource$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11Buffer
	mov	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	$LN8@rxbuffer_b
; Line 42
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR MappedAccess$1[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rdx, QWORD PTR Resource$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+112]
; Line 44
	mov	rax, QWORD PTR Resource$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 45
	mov	eax, DWORD PTR MappedAccess$1[rsp+8]
	mov	DWORD PTR result$[rsp+16], eax
; Line 46
	mov	rax, QWORD PTR MappedAccess$1[rsp]
	mov	QWORD PTR result$[rsp+8], rax
$LN4@rxbuffer_b:
; Line 48
	cmp	DWORD PTR result$[rsp+16], 0
	jne	SHORT $LN9@rxbuffer_b
	lea	rax, OFFSET FLAT:$SG138539
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 48					; 00000030H
	lea	r8, OFFSET FLAT:$SG138540
	mov	edx, 178				; 000000b2H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138537
	lea	rdx, OFFSET FLAT:$SG138538
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN9@rxbuffer_b:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxbuffer_b
$LN7@rxbuffer_b:
; Line 49
	cmp	QWORD PTR result$[rsp+8], 0
	jne	SHORT $LN10@rxbuffer_b
	lea	rax, OFFSET FLAT:$SG138544
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 49					; 00000031H
	lea	r8, OFFSET FLAT:$SG138545
	mov	edx, 179				; 000000b3H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138542
	lea	rdx, OFFSET FLAT:$SG138543
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN10@rxbuffer_b:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxbuffer_b
$LN8@rxbuffer_b:
; Line 52
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 53
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
rxbuffer_borrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 48
model$ = 56
r$ = 64
$S4$ = 72
b$1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
$T9 = 328
$T10 = 360
$T11 = 392
$T12 = 424
$T13 = 456
entry$ = 528
master$ = 536
rxload_pixel_shader PROC
; File W:\cpp\void\e\rx\rx.c
; Line 791
$LN25:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 504				; 000001f8H
; Line 794
	lea	rax, OFFSET FLAT:$SG138446
	mov	QWORD PTR model$[rsp], rax
$LN4@rxload_pix:
; Line 796
	cmp	QWORD PTR master$[rsp], 0
	jne	SHORT $LN17@rxload_pix
	lea	rax, OFFSET FLAT:$SG138450
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 796				; 0000031cH
	lea	r8, OFFSET FLAT:$SG138451
	mov	edx, 171				; 000000abH
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138448
	lea	rdx, OFFSET FLAT:$SG138449
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN17@rxload_pix:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxload_pix
$LN7@rxload_pix:
; Line 797
	cmp	QWORD PTR entry$[rsp], 0
	jne	SHORT $LN18@rxload_pix
	lea	rax, OFFSET FLAT:$SG138455
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 797				; 0000031dH
	lea	r8, OFFSET FLAT:$SG138456
	mov	edx, 172				; 000000acH
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138453
	lea	rdx, OFFSET FLAT:$SG138454
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN18@rxload_pix:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxload_pix
$LN10@rxload_pix:
; Line 798
	cmp	QWORD PTR model$[rsp], 0
	jne	SHORT $LN19@rxload_pix
	lea	rax, OFFSET FLAT:$SG138460
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 798				; 0000031eH
	lea	r8, OFFSET FLAT:$SG138461
	mov	edx, 173				; 000000adH
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138458
	lea	rdx, OFFSET FLAT:$SG138459
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	int	3
$LN19@rxload_pix:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@rxload_pix
; Line 800
	mov	QWORD PTR $S4$[rsp], 0
	mov	rax, QWORD PTR $S4$[rsp]
	mov	QWORD PTR r$[rsp], rax
; Line 802
	mov	rcx, QWORD PTR master$[rsp]
	call	rxlinker_resolve_terminal
	mov	QWORD PTR c$[rsp], rax
; Line 804
	cmp	QWORD PTR c$[rsp], 0
	je	$LN20@rxload_pix
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, 1
	test	eax, eax
	je	$LN20@rxload_pix
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	not	eax
	and	eax, 2
	test	eax, eax
	je	$LN20@rxload_pix
$LN13@rxload_pix:
; Line 806
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN21@rxload_pix
	lea	rax, OFFSET FLAT:$SG138466
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 806				; 00000326H
	lea	r8, OFFSET FLAT:$SG138467
	mov	edx, 174				; 000000aeH
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138464
	lea	rdx, OFFSET FLAT:$SG138465
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN21@rxload_pix:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@rxload_pix
$LN16@rxload_pix:
; Line 807
	mov	rax, QWORD PTR c$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN22@rxload_pix
	lea	rax, OFFSET FLAT:$SG138471
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 807				; 00000327H
	lea	r8, OFFSET FLAT:$SG138472
	mov	edx, 175				; 000000afH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138469
	lea	rdx, OFFSET FLAT:$SG138470
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN22@rxload_pix:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@rxload_pix
; Line 809
	mov	rax, QWORD PTR master$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR model$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR entry$[rsp]
	mov	rax, QWORD PTR c$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR c$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	rxcompile_shader_bytecode
	lea	rcx, QWORD PTR b$1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 811
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	or	eax, 2
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 813
	cmp	QWORD PTR b$1[rsp+8], 0
	je	SHORT $LN23@rxload_pix
	cmp	QWORD PTR b$1[rsp+16], 0
	je	SHORT $LN23@rxload_pix
; Line 815
	mov	r8, QWORD PTR b$1[rsp+8]
	mov	rdx, QWORD PTR b$1[rsp+16]
	mov	ecx, 2
	call	rxcreate_shader
	mov	QWORD PTR r$[rsp], rax
; Line 817
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR b$1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdelete_blobbler
; Line 819
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	xor	eax, 2
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+24], eax
$LN23@rxload_pix:
$LN20@rxload_pix:
; Line 822
	mov	rax, QWORD PTR r$[rsp]
; Line 823
	add	rsp, 504				; 000001f8H
	pop	rdi
	pop	rsi
	ret	0
rxload_pixel_shader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 48
model$ = 56
r$ = 64
$S3$ = 72
b$1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
$T9 = 328
$T10 = 360
$T11 = 392
$T12 = 424
$T13 = 456
entry$ = 528
master$ = 536
rxload_vertex_shader PROC
; File W:\cpp\void\e\rx\rx.c
; Line 754
$LN25:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 504				; 000001f8H
; Line 757
	lea	rax, OFFSET FLAT:$SG138391
	mov	QWORD PTR model$[rsp], rax
$LN4@rxload_ver:
; Line 759
	cmp	QWORD PTR master$[rsp], 0
	jne	SHORT $LN17@rxload_ver
	lea	rax, OFFSET FLAT:$SG138395
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 759				; 000002f7H
	lea	r8, OFFSET FLAT:$SG138396
	mov	edx, 166				; 000000a6H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138393
	lea	rdx, OFFSET FLAT:$SG138394
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN17@rxload_ver:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxload_ver
$LN7@rxload_ver:
; Line 760
	cmp	QWORD PTR entry$[rsp], 0
	jne	SHORT $LN18@rxload_ver
	lea	rax, OFFSET FLAT:$SG138400
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 760				; 000002f8H
	lea	r8, OFFSET FLAT:$SG138401
	mov	edx, 167				; 000000a7H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138398
	lea	rdx, OFFSET FLAT:$SG138399
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN18@rxload_ver:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxload_ver
$LN10@rxload_ver:
; Line 761
	cmp	QWORD PTR model$[rsp], 0
	jne	SHORT $LN19@rxload_ver
	lea	rax, OFFSET FLAT:$SG138405
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 761				; 000002f9H
	lea	r8, OFFSET FLAT:$SG138406
	mov	edx, 168				; 000000a8H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138403
	lea	rdx, OFFSET FLAT:$SG138404
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	int	3
$LN19@rxload_ver:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@rxload_ver
; Line 763
	mov	QWORD PTR $S3$[rsp], 0
	mov	rax, QWORD PTR $S3$[rsp]
	mov	QWORD PTR r$[rsp], rax
; Line 765
	mov	rcx, QWORD PTR master$[rsp]
	call	rxlinker_resolve_terminal
	mov	QWORD PTR c$[rsp], rax
; Line 767
	cmp	QWORD PTR c$[rsp], 0
	je	$LN20@rxload_ver
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, 1
	test	eax, eax
	je	$LN20@rxload_ver
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	not	eax
	and	eax, 2
	test	eax, eax
	je	$LN20@rxload_ver
$LN13@rxload_ver:
; Line 769
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN21@rxload_ver
	lea	rax, OFFSET FLAT:$SG138411
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 769				; 00000301H
	lea	r8, OFFSET FLAT:$SG138412
	mov	edx, 169				; 000000a9H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138409
	lea	rdx, OFFSET FLAT:$SG138410
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN21@rxload_ver:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@rxload_ver
$LN16@rxload_ver:
; Line 770
	mov	rax, QWORD PTR c$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN22@rxload_ver
	lea	rax, OFFSET FLAT:$SG138416
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 770				; 00000302H
	lea	r8, OFFSET FLAT:$SG138417
	mov	edx, 170				; 000000aaH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138414
	lea	rdx, OFFSET FLAT:$SG138415
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN22@rxload_ver:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@rxload_ver
; Line 772
	mov	rax, QWORD PTR master$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR model$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR entry$[rsp]
	mov	rax, QWORD PTR c$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR c$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	rxcompile_shader_bytecode
	lea	rcx, QWORD PTR b$1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 774
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	or	eax, 2
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 776
	cmp	QWORD PTR b$1[rsp+8], 0
	je	SHORT $LN23@rxload_ver
	cmp	QWORD PTR b$1[rsp+16], 0
	je	SHORT $LN23@rxload_ver
; Line 778
	mov	r8, QWORD PTR b$1[rsp+8]
	mov	rdx, QWORD PTR b$1[rsp+16]
	mov	ecx, 3
	call	rxcreate_shader
	mov	QWORD PTR r$[rsp], rax
; Line 780
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR b$1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxdelete_blobbler
; Line 782
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	xor	eax, 2
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+24], eax
$LN23@rxload_ver:
$LN20@rxload_ver:
; Line 785
	mov	rax, QWORD PTR r$[rsp]
; Line 786
	add	rsp, 504				; 000001f8H
	pop	rdi
	pop	rsi
	ret	0
rxload_vertex_shader ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
BytecodeBlob$1 = 96
MessagesBlob$2 = 104
blobber$ = 112
$S1$ = 136
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
__$ReturnAddress$ = 320
length$ = 328
memory$ = 336
entry$ = 344
model$ = 352
master$ = 360
rxcompile_shader_bytecode PROC
; File W:\cpp\void\e\rx\rx.c
; Line 624
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 625
	lea	rax, QWORD PTR $S1$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
	lea	rax, QWORD PTR blobber$[rsp]
	lea	rcx, QWORD PTR $S1$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 627
	cmp	DWORD PTR length$[rsp], 0
	je	$LN2@rxcompile_
	cmp	QWORD PTR memory$[rsp], 0
	je	$LN2@rxcompile_
; Line 631
	mov	eax, DWORD PTR length$[rsp]
	lea	rcx, QWORD PTR MessagesBlob$2[rsp]
	mov	QWORD PTR [rsp+80], rcx
	lea	rcx, QWORD PTR BytecodeBlob$1[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	DWORD PTR [rsp+64], 0
	mov	DWORD PTR [rsp+56], 262165		; 00040015H
	mov	rcx, QWORD PTR model$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR master$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR memory$[rsp]
	call	D3DCompile
	test	eax, eax
	jl	$LN3@rxcompile_
; Line 635
	mov	rax, QWORD PTR BytecodeBlob$1[rsp]
	mov	QWORD PTR blobber$[rsp], rax
; Line 636
	mov	rax, QWORD PTR BytecodeBlob$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR BytecodeBlob$1[rsp]
	call	QWORD PTR [rax+24]
	mov	QWORD PTR blobber$[rsp+8], rax
; Line 637
	mov	rax, QWORD PTR BytecodeBlob$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR BytecodeBlob$1[rsp]
	call	QWORD PTR [rax+32]
	mov	QWORD PTR blobber$[rsp+16], rax
; Line 639
	lea	rax, OFFSET FLAT:$SG138264
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 639				; 0000027fH
	lea	r8, OFFSET FLAT:$SG138265
	mov	edx, 157				; 0000009dH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9, QWORD PTR master$[rsp]
	lea	r8, OFFSET FLAT:$SG138262
	lea	rdx, OFFSET FLAT:$SG138263
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
; Line 640
	jmp	$LN4@rxcompile_
$LN3@rxcompile_:
; Line 642
	mov	rax, QWORD PTR MessagesBlob$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR MessagesBlob$2[rsp]
	call	QWORD PTR [rax+24]
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG138266
	call	ccprintf
; Line 644
	lea	rax, OFFSET FLAT:$SG138269
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 644				; 00000284H
	lea	r8, OFFSET FLAT:$SG138270
	mov	edx, 158				; 0000009eH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9, QWORD PTR master$[rsp]
	lea	r8, OFFSET FLAT:$SG138267
	lea	rdx, OFFSET FLAT:$SG138268
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
$LN4@rxcompile_:
$LN2@rxcompile_:
; Line 648
	lea	rax, QWORD PTR blobber$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 649
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
rxcompile_shader_bytecode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
should_reload$ = 48
tangible$1 = 56
Layout$2 = 64
$T3 = 80
$T4 = 112
$T5 = 144
$T6 = 176
shader$ = 240
rxshader_apply PROC
; File W:\cpp\void\e\rx\rx.shader.cc
; Line 24
$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 25
	mov	DWORD PTR should_reload$[rsp], 0
; Line 28
	mov	rcx, QWORD PTR shader$[rsp]
	call	rxunknown_typeof_vertex_shader
	test	eax, eax
	je	$LN5@rxshader_a
	mov	rax, QWORD PTR rx+5768936
	cmp	QWORD PTR shader$[rsp], rax
	jne	SHORT $LN6@rxshader_a
	cmp	DWORD PTR should_reload$[rsp], 0
	je	$LN5@rxshader_a
$LN6@rxshader_a:
; Line 31
	mov	rax, QWORD PTR shader$[rsp]
	mov	QWORD PTR rx+5768936, rax
	mov	rax, QWORD PTR rx+5768936
	mov	QWORD PTR rx+5768960, rax
; Line 33
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR shader$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+88]
; Line 35
	lea	rax, OFFSET FLAT:$SG138494
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 35					; 00000023H
	lea	r8, OFFSET FLAT:$SG138495
	mov	edx, 176				; 000000b0H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR shader$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -8
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:rx+1096
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctblgeti_
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR rx+1096
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tangible$1[rsp], rax
$LN4@rxshader_a:
; Line 36
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 0
	je	SHORT $LN7@rxshader_a
	lea	rax, OFFSET FLAT:$SG138499
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 36					; 00000024H
	lea	r8, OFFSET FLAT:$SG138500
	mov	edx, 177				; 000000b1H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138497
	lea	rdx, OFFSET FLAT:$SG138498
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN7@rxshader_a:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxshader_a
; Line 38
	mov	eax, 8
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tangible$1[rsp]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR Layout$2[rsp], rax
; Line 40
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	rdx, QWORD PTR Layout$2[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+136]
; Line 41
	jmp	SHORT $leave$12
$LN5@rxshader_a:
; Line 44
	mov	rcx, QWORD PTR shader$[rsp]
	call	rxunknown_typeof_pixel_shader
	test	eax, eax
	je	SHORT $LN8@rxshader_a
	mov	rax, QWORD PTR rx+5768944
	cmp	QWORD PTR shader$[rsp], rax
	jne	SHORT $LN9@rxshader_a
	cmp	DWORD PTR should_reload$[rsp], 0
	je	SHORT $LN8@rxshader_a
$LN9@rxshader_a:
; Line 47
	mov	rax, QWORD PTR shader$[rsp]
	mov	QWORD PTR rx+5768944, rax
	mov	rax, QWORD PTR rx+5768944
	mov	QWORD PTR rx+5768960, rax
; Line 49
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR shader$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+72]
$LN8@rxshader_a:
$leave$12:
; Line 54
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
rxshader_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sampler$ = 48
rxsampler_bind PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 112
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 113
	xor	edx, edx
	mov	rcx, QWORD PTR sampler$[rsp]
	call	rxsampler_bind_ex
; Line 114
	add	rsp, 40					; 00000028H
	ret	0
rxsampler_bind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sampler$ = 48
slot$ = 56
rxsampler_apply PROC
; File W:\cpp\void\e\rx\rx.sampler.cc
; Line 24
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 26
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_vertex
	test	eax, eax
	je	SHORT $LN2@rxsampler_
; Line 28
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR sampler$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+208]
; Line 29
	jmp	SHORT $LN3@rxsampler_
$LN2@rxsampler_:
; Line 30
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_pixel
	test	eax, eax
	je	SHORT $LN4@rxsampler_
; Line 32
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR sampler$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+80]
; Line 33
	jmp	SHORT $LN5@rxsampler_
$LN4@rxsampler_:
; Line 34
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_compute
	test	eax, eax
	je	SHORT $LN6@rxsampler_
; Line 36
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR sampler$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+560]
$LN6@rxsampler_:
$LN5@rxsampler_:
$LN3@rxsampler_:
; Line 38
	add	rsp, 40					; 00000028H
	ret	0
rxsampler_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
article$ = 48
View$ = 56
tv197 = 64
tv196 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
target$ = 368
ClearColor$ = 376
rxrender_target_apply PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1234
$LN18:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H
; Line 1235
	lea	rax, OFFSET FLAT:$SG139428
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1235				; 000004d3H
	lea	r8, OFFSET FLAT:$SG139429
	mov	edx, 203				; 000000cbH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR target$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -8
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:rx+1096
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctblgeti_
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR rx+1096
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR article$[rsp], rax
$LN4@rxrender_t:
; Line 1236
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 0
	je	SHORT $LN11@rxrender_t
	lea	rax, OFFSET FLAT:$SG139433
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1236				; 000004d4H
	lea	r8, OFFSET FLAT:$SG139434
	mov	edx, 204				; 000000ccH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139431
	lea	rdx, OFFSET FLAT:$SG139432
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN11@rxrender_t:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxrender_t
; Line 1240
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR View$[rsp+rax]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	rdi, QWORD PTR article$[rsp]
	mov	rdx, QWORD PTR [rdi+rdx+16]
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv197[rsp], rdx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:IID_ID3D11RenderTargetView
	mov	rax, QWORD PTR article$[rsp]
	mov	rcx, QWORD PTR [rax+rcx+16]
	mov	rax, QWORD PTR tv197[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	$LN12@rxrender_t
; Line 1243
	cmp	QWORD PTR ClearColor$[rsp], 0
	je	SHORT $LN14@rxrender_t
; Line 1245
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR rx+5769552
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv196[rsp], rcx
	mov	r8, QWORD PTR ClearColor$[rsp]
	mov	rdx, QWORD PTR View$[rsp+rax]
	mov	rcx, QWORD PTR rx+5769552
	mov	rax, QWORD PTR tv196[rsp]
	call	QWORD PTR [rax+400]
$LN14@rxrender_t:
$LN7@rxrender_t:
; Line 1251
	cmp	QWORD PTR rx+5769608, 0
	jne	SHORT $LN15@rxrender_t
	lea	rax, OFFSET FLAT:$SG139441
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1251				; 000004e3H
	lea	r8, OFFSET FLAT:$SG139442
	mov	edx, 205				; 000000cdH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139439
	lea	rdx, OFFSET FLAT:$SG139440
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN15@rxrender_t:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxrender_t
; Line 1252
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	BYTE PTR [rsp+32], 0
	movss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, 3
	mov	rdx, QWORD PTR rx+5769608
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+424]
; Line 1257
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	mov	r9, QWORD PTR rx+5769608
	lea	r8, QWORD PTR View$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+264]
; Line 1258
	jmp	SHORT $LN13@rxrender_t
$LN12@rxrender_t:
$LN10@rxrender_t:
; Line 1259
	lea	rax, OFFSET FLAT:$SG139444
	test	rax, rax
	je	SHORT $LN16@rxrender_t
	lea	rax, OFFSET FLAT:$SG139447
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1259				; 000004ebH
	lea	r8, OFFSET FLAT:$SG139448
	mov	edx, 206				; 000000ceH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139445
	lea	rdx, OFFSET FLAT:$SG139446
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN16@rxrender_t:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@rxrender_t
$LN13@rxrender_t:
; Line 1260
	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
rxrender_target_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv154 = 32
tv152 = 40
tv151 = 48
tv149 = 56
tv144 = 64
Resource$ = 72
l$ = 112
r$ = 120
rxrender_target_copy PROC
; File W:\cpp\void\e\rx\rx.c
; Line 1263
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1265
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR Resource$[rsp+rax], rcx
; Line 1266
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR Resource$[rsp+rax], rcx
; Line 1269
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR Resource$[rsp+rax]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv154[rsp], rcx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:IID_ID3D11Resource
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR tv154[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	$LN2@rxrender_t
; Line 1273
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR Resource$[rsp+rax]
	mov	rcx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv152[rsp], rcx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:IID_ID3D11Resource
	mov	rax, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR tv152[rsp]
	call	QWORD PTR [rax]
	test	eax, eax
	jl	SHORT $LN3@rxrender_t
; Line 1276
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR rx+5769552
	mov	rdx, QWORD PTR [rdx]
	mov	QWORD PTR tv151[rsp], rdx
	mov	r8, QWORD PTR Resource$[rsp+rax]
	mov	rdx, QWORD PTR Resource$[rsp+rcx]
	mov	rcx, QWORD PTR rx+5769552
	mov	rax, QWORD PTR tv151[rsp]
	call	QWORD PTR [rax+376]
; Line 1278
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	rcx, QWORD PTR Resource$[rsp+rcx]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv149[rsp], rcx
	mov	rcx, QWORD PTR Resource$[rsp+rax]
	mov	rax, QWORD PTR tv149[rsp]
	call	QWORD PTR [rax+16]
$LN3@rxrender_t:
; Line 1281
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	rcx, QWORD PTR Resource$[rsp+rcx]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR tv144[rsp], rcx
	mov	rcx, QWORD PTR Resource$[rsp+rax]
	mov	rax, QWORD PTR tv144[rsp]
	call	QWORD PTR [rax+16]
$LN2@rxrender_t:
; Line 1283
	add	rsp, 104				; 00000068H
	ret	0
rxrender_target_copy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Resource$ = 48
result$ = 56
MappedAccess$ = 80
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
__$ReturnAddress$ = 256
texture$ = 264
rxtexture_borrow PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 192
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 194
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 197
	mov	rax, QWORD PTR texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	lea	r8, QWORD PTR Resource$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11Resource
	mov	rcx, QWORD PTR texture$[rsp]
	mov	rcx, QWORD PTR [rcx]
	call	QWORD PTR [rax]
	test	eax, eax
	jge	SHORT $LN8@rxtexture_
; Line 198
	jmp	$error$13
$LN8@rxtexture_:
; Line 201
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	rcx, QWORD PTR MappedAccess$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rdx, QWORD PTR Resource$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+112]
	test	eax, eax
	jge	SHORT $LN9@rxtexture_
; Line 202
	jmp	$error$13
$LN9@rxtexture_:
; Line 204
	mov	rax, QWORD PTR Resource$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR Resource$[rsp]
	call	QWORD PTR [rax+16]
; Line 206
	mov	rax, QWORD PTR Resource$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 207
	mov	eax, DWORD PTR MappedAccess$[rsp+8]
	mov	DWORD PTR result$[rsp+16], eax
; Line 208
	mov	rax, QWORD PTR MappedAccess$[rsp]
	mov	QWORD PTR result$[rsp+8], rax
$LN4@rxtexture_:
; Line 210
	cmp	DWORD PTR result$[rsp+16], 0
	jne	SHORT $LN10@rxtexture_
	lea	rax, OFFSET FLAT:$SG139349
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 210				; 000000d2H
	lea	r8, OFFSET FLAT:$SG139350
	mov	edx, 199				; 000000c7H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139347
	lea	rdx, OFFSET FLAT:$SG139348
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN10@rxtexture_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxtexture_
$LN7@rxtexture_:
; Line 211
	cmp	QWORD PTR result$[rsp+8], 0
	jne	SHORT $LN11@rxtexture_
	lea	rax, OFFSET FLAT:$SG139354
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 211				; 000000d3H
	lea	r8, OFFSET FLAT:$SG139355
	mov	edx, 200				; 000000c8H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139352
	lea	rdx, OFFSET FLAT:$SG139353
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN11@rxtexture_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxtexture_
$error$13:
; Line 214
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 215
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_borrow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
texture$ = 96
rxtexture_bind PROC
; File W:\cpp\void\e\rx\rx.command.cc
; Line 124
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 125
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR texture$[rsp]
	mov	ecx, 24
	rep movsb
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxtexture_bind_ex
; Line 126
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_bind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
View$ = 48
tangible$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
texture$ = 224
slot$ = 232
rxtexture_apply PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 220
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 222
	lea	rax, OFFSET FLAT:$SG139370
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 222				; 000000deH
	lea	r8, OFFSET FLAT:$SG139371
	mov	edx, 201				; 000000c9H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, -8
	mov	r8d, 72					; 00000048H
	lea	rdx, OFFSET FLAT:rx+1096
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctblgeti_
	imul	rax, rax, 72				; 00000048H
	mov	rcx, QWORD PTR rx+1096
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tangible$[rsp], rax
$LN4@rxtexture_:
; Line 223
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 0
	je	SHORT $LN5@rxtexture_
	lea	rax, OFFSET FLAT:$SG139375
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 223				; 000000dfH
	lea	r8, OFFSET FLAT:$SG139376
	mov	edx, 202				; 000000caH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139373
	lea	rdx, OFFSET FLAT:$SG139374
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN5@rxtexture_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxtexture_
; Line 226
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tangible$[rsp]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR View$[rsp], rax
; Line 228
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_vertex
	test	eax, eax
	je	SHORT $LN6@rxtexture_
; Line 230
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR View$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+200]
; Line 231
	jmp	SHORT $LN7@rxtexture_
$LN6@rxtexture_:
; Line 232
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_pixel
	test	eax, eax
	je	SHORT $LN8@rxtexture_
; Line 234
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR View$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+64]
; Line 235
	jmp	SHORT $LN9@rxtexture_
$LN8@rxtexture_:
; Line 236
	mov	rcx, QWORD PTR rx+5768960
	call	rxshader_typeof_compute
	test	eax, eax
	je	SHORT $LN10@rxtexture_
; Line 238
	mov	rax, QWORD PTR rx+5769552
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR View$[rsp]
	mov	r8d, 1
	mov	edx, DWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR rx+5769552
	call	QWORD PTR [rax+536]
$LN10@rxtexture_:
$LN9@rxtexture_:
$LN7@rxtexture_:
; Line 240
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_apply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
__$ReturnAddress$ = 112
size_x$ = 120
size_y$ = 128
format$ = 136
rxtexture_create PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 186
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 187
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR format$[rsp]
	mov	r8d, DWORD PTR size_y$[rsp]
	mov	edx, DWORD PTR size_x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxtexture_create_ex
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 188
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_create ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 96
__$ReturnAddress$ = 160
size_x$ = 168
size_y$ = 176
format$ = 184
stride$ = 192
memory$ = 200
rxtexture_create_ex PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 178
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 179
	mov	DWORD PTR [rsp+80], 0
	mov	DWORD PTR [rsp+72], 1
	mov	DWORD PTR [rsp+64], 65536		; 00010000H
	mov	DWORD PTR [rsp+56], 8
	mov	DWORD PTR [rsp+48], 2
	mov	rax, QWORD PTR memory$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR format$[rsp]
	mov	r8d, DWORD PTR size_y$[rsp]
	mov	edx, DWORD PTR size_x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxtexture_create_untyped
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 182
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_create_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Texture$ = 48
tv152 = 56
article$1 = 64
View$2 = 72
View$3 = 80
SubresourceI$ = 88
ViewI$4 = 104
the_result$ = 128
ViewI$5 = 152
$S12$ = 176
$T6 = 208
$T7 = 240
$T8 = 272
$T9 = 304
$T10 = 336
$T11 = 368
$T12 = 400
$T13 = 432
TextureI$ = 464
__$ArrayPad$ = 512
__$ReturnAddress$ = 560
size_x$ = 568
size_y$ = 576
format$ = 584
stride$ = 592
memory$ = 600
usage$ = 608
bind_flags$ = 616
host_access_flags$ = 624
sample_count$ = 632
sample_quality$ = 640
rxtexture_create_untyped PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 100
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 536				; 00000218H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN4@rxtexture_:
; Line 101
	cmp	DWORD PTR size_x$[rsp], 1
	jl	SHORT $LN9@rxtexture_
	cmp	DWORD PTR size_x$[rsp], 16384		; 00004000H
	jle	$LN8@rxtexture_
$LN9@rxtexture_:
	lea	rax, OFFSET FLAT:$SG139290
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 101				; 00000065H
	lea	r8, OFFSET FLAT:$SG139291
	mov	edx, 195				; 000000c3H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9d, DWORD PTR size_x$[rsp]
	lea	r8, OFFSET FLAT:$SG139288
	lea	rdx, OFFSET FLAT:$SG139289
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN8@rxtexture_
	lea	rax, OFFSET FLAT:$SG139294
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 101				; 00000065H
	lea	r8, OFFSET FLAT:$SG139295
	mov	edx, 196				; 000000c4H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139292
	lea	rdx, OFFSET FLAT:$SG139293
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN8@rxtexture_:
	xor	eax, eax
	test	eax, eax
	jne	$LN4@rxtexture_
$LN7@rxtexture_:
; Line 102
	cmp	DWORD PTR size_y$[rsp], 1
	jl	SHORT $LN11@rxtexture_
	cmp	DWORD PTR size_y$[rsp], 16384		; 00004000H
	jle	$LN10@rxtexture_
$LN11@rxtexture_:
	lea	rax, OFFSET FLAT:$SG139300
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 102				; 00000066H
	lea	r8, OFFSET FLAT:$SG139301
	mov	edx, 197				; 000000c5H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9d, DWORD PTR size_y$[rsp]
	lea	r8, OFFSET FLAT:$SG139298
	lea	rdx, OFFSET FLAT:$SG139299
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@rxtexture_
	lea	rax, OFFSET FLAT:$SG139304
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 102				; 00000066H
	lea	r8, OFFSET FLAT:$SG139305
	mov	edx, 198				; 000000c6H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG139302
	lea	rdx, OFFSET FLAT:$SG139303
	lea	rcx, QWORD PTR $T9[rsp]
	call	cctrace_
	int	3
$LN10@rxtexture_:
	xor	eax, eax
	test	eax, eax
	jne	$LN7@rxtexture_
; Line 105
	mov	eax, DWORD PTR size_x$[rsp]
	mov	DWORD PTR TextureI$[rsp], eax
; Line 106
	mov	eax, DWORD PTR size_y$[rsp]
	mov	DWORD PTR TextureI$[rsp+4], eax
; Line 107
	mov	DWORD PTR TextureI$[rsp+8], 1
; Line 108
	mov	DWORD PTR TextureI$[rsp+12], 1
; Line 109
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR TextureI$[rsp+16], eax
; Line 110
	mov	eax, DWORD PTR sample_count$[rsp]
	mov	DWORD PTR TextureI$[rsp+20], eax
; Line 111
	mov	eax, DWORD PTR sample_quality$[rsp]
	mov	DWORD PTR TextureI$[rsp+24], eax
; Line 112
	mov	eax, DWORD PTR usage$[rsp]
	mov	DWORD PTR TextureI$[rsp+28], eax
; Line 113
	mov	eax, DWORD PTR bind_flags$[rsp]
	mov	DWORD PTR TextureI$[rsp+32], eax
; Line 114
	mov	eax, DWORD PTR host_access_flags$[rsp]
	mov	DWORD PTR TextureI$[rsp+36], eax
; Line 115
	mov	DWORD PTR TextureI$[rsp+40], 0
; Line 118
	mov	r8d, 16
	xor	edx, edx
	lea	rcx, QWORD PTR SubresourceI$[rsp]
	call	memset
; Line 119
	mov	rax, QWORD PTR memory$[rsp]
	mov	QWORD PTR SubresourceI$[rsp], rax
; Line 120
	mov	eax, DWORD PTR stride$[rsp]
	mov	DWORD PTR SubresourceI$[rsp+8], eax
; Line 122
	mov	QWORD PTR Texture$[rsp], 0
; Line 124
	cmp	QWORD PTR memory$[rsp], 0
	je	SHORT $LN18@rxtexture_
	lea	rax, QWORD PTR SubresourceI$[rsp]
	mov	QWORD PTR tv152[rsp], rax
	jmp	SHORT $LN19@rxtexture_
$LN18@rxtexture_:
	mov	QWORD PTR tv152[rsp], 0
$LN19@rxtexture_:
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR Texture$[rsp]
	mov	r8, QWORD PTR tv152[rsp]
	lea	rdx, QWORD PTR TextureI$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+40]
	test	eax, eax
	jl	$LN12@rxtexture_
; Line 127
	mov	rcx, QWORD PTR Texture$[rsp]
	call	rxarticle_create
	mov	QWORD PTR article$1[rsp], rax
; Line 129
	mov	eax, DWORD PTR bind_flags$[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN13@rxtexture_
; Line 132
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR ViewI$4[rsp]
	call	memset
; Line 133
	mov	DWORD PTR ViewI$4[rsp], 0
; Line 134
	mov	DWORD PTR ViewI$4[rsp+4], 4
; Line 135
	mov	DWORD PTR ViewI$4[rsp+8], 0
; Line 136
	mov	DWORD PTR ViewI$4[rsp+12], 1
; Line 139
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR View$2[rsp]
	lea	r8, QWORD PTR ViewI$4[rsp]
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+56]
	test	eax, eax
	jl	SHORT $LN14@rxtexture_
; Line 143
	mov	r8, QWORD PTR View$2[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR article$1[rsp]
	call	rxarticle_attach
$LN14@rxtexture_:
$LN13@rxtexture_:
; Line 147
	mov	eax, DWORD PTR bind_flags$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN15@rxtexture_
; Line 150
	mov	r8d, 20
	xor	edx, edx
	lea	rcx, QWORD PTR ViewI$5[rsp]
	call	memset
; Line 151
	mov	DWORD PTR ViewI$5[rsp], 0
; Line 152
	mov	DWORD PTR ViewI$5[rsp+4], 4
; Line 155
	mov	rax, QWORD PTR rx+5769544
	mov	rax, QWORD PTR [rax]
	lea	r9, QWORD PTR View$3[rsp]
	lea	r8, QWORD PTR ViewI$5[rsp]
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR rx+5769544
	call	QWORD PTR [rax+72]
	test	eax, eax
	jl	SHORT $LN16@rxtexture_
; Line 159
	mov	r8, QWORD PTR View$3[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR article$1[rsp]
	call	rxarticle_attach
$LN16@rxtexture_:
$LN15@rxtexture_:
$LN12@rxtexture_:
; Line 164
	mov	rax, QWORD PTR Texture$[rsp]
	mov	QWORD PTR $S12$[rsp], rax
	lea	rax, QWORD PTR $S12$[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, QWORD PTR the_result$[rsp]
	lea	rcx, QWORD PTR $S12$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 165
	mov	eax, DWORD PTR size_x$[rsp]
	mov	DWORD PTR the_result$[rsp+8], eax
; Line 166
	mov	eax, DWORD PTR size_y$[rsp]
	mov	DWORD PTR the_result$[rsp+12], eax
; Line 167
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR the_result$[rsp+16], eax
; Line 168
	lea	rax, QWORD PTR the_result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 169
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 536				; 00000218H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_create_untyped ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ext$ = 48
memory$ = 56
result$ = 64
__$ReturnAddress$ = 128
name$ = 136
rxtexture_load PROC
; File W:\cpp\void\e\rx\rx.texture.cc
; Line 25
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 26
	mov	rcx, QWORD PTR name$[rsp]
	call	ccfileext
	mov	QWORD PTR ext$[rsp], rax
; Line 29
	mov	r8d, 24
	xor	edx, edx
	lea	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 33
	lea	rdx, OFFSET FLAT:$SG139220
	mov	rcx, QWORD PTR ext$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN2@rxtexture_
	lea	rdx, OFFSET FLAT:$SG139221
	mov	rcx, QWORD PTR ext$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN2@rxtexture_
	lea	rdx, OFFSET FLAT:$SG139222
	mov	rcx, QWORD PTR ext$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN2@rxtexture_
; Line 34
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@rxtexture_
$LN2@rxtexture_:
; Line 37
	mov	DWORD PTR [rsp+32], 4
	xor	r9d, r9d
	lea	r8, QWORD PTR result$[rsp+4]
	lea	rdx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	stbi_load
	mov	QWORD PTR memory$[rsp], rax
; Line 39
	mov	DWORD PTR result$[rsp+8], 28
; Line 40
	mov	rax, QWORD PTR memory$[rsp]
	mov	QWORD PTR result$[rsp+16], rax
; Line 41
	mov	eax, DWORD PTR result$[rsp]
	shl	eax, 2
	mov	DWORD PTR result$[rsp+12], eax
; Line 42
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@rxtexture_:
; Line 43
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
rxtexture_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
contents$ = 48
length$1 = 56
memory$2 = 64
handle$3 = 72
$T4 = 80
$T5 = 112
$T6 = 144
$T7 = 176
$T8 = 208
$T9 = 240
$T10 = 272
$T11 = 304
$T12 = 336
$T13 = 368
master$ = 432
rxlinker_resolve_terminal PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 90
$LN18:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
$LN4@rxlinker_r:
; Line 91
	cmp	QWORD PTR master$[rsp], 0
	jne	SHORT $LN8@rxlinker_r
	lea	rax, OFFSET FLAT:$SG138144
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 91					; 0000005bH
	lea	r8, OFFSET FLAT:$SG138145
	mov	edx, 152				; 00000098H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138142
	lea	rdx, OFFSET FLAT:$SG138143
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN8@rxlinker_r:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxlinker_r
$LN7@rxlinker_r:
; Line 92
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR master$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN9@rxlinker_r
	lea	rax, OFFSET FLAT:$SG138149
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 92					; 0000005cH
	lea	r8, OFFSET FLAT:$SG138150
	mov	edx, 153				; 00000099H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138147
	lea	rdx, OFFSET FLAT:$SG138148
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	int	3
$LN9@rxlinker_r:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@rxlinker_r
; Line 94
	mov	rcx, QWORD PTR master$[rsp]
	call	rxlinker_register_terminal
	mov	QWORD PTR contents$[rsp], rax
; Line 96
	mov	rax, QWORD PTR contents$[rsp]
	mov	eax, DWORD PTR [rax+24]
	not	eax
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN11@rxlinker_r
	mov	rax, QWORD PTR contents$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, 4
	test	eax, eax
	je	$LN10@rxlinker_r
$LN11@rxlinker_r:
; Line 102
	mov	DWORD PTR length$1[rsp], 0
; Line 103
	lea	rdx, OFFSET FLAT:$SG138153
	mov	rcx, QWORD PTR master$[rsp]
	call	ccopenfile
	mov	QWORD PTR handle$3[rsp], rax
; Line 104
	lea	r8, QWORD PTR length$1[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR handle$3[rsp]
	call	ccpullfile
	mov	QWORD PTR memory$2[rsp], rax
; Line 107
	mov	rcx, QWORD PTR handle$3[rsp]
	call	ccclosefile
; Line 109
	cmp	DWORD PTR length$1[rsp], 0
	je	$LN12@rxlinker_r
	cmp	QWORD PTR memory$2[rsp], 0
	je	$LN12@rxlinker_r
; Line 111
	mov	rax, QWORD PTR contents$[rsp]
	mov	ecx, DWORD PTR length$1[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN15@rxlinker_r
	mov	eax, DWORD PTR length$1[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR contents$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR memory$2[rsp]
	call	memcmp
	test	eax, eax
	je	$LN14@rxlinker_r
$LN15@rxlinker_r:
; Line 113
	lea	rax, OFFSET FLAT:$SG138160
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 113				; 00000071H
	lea	r8, OFFSET FLAT:$SG138161
	mov	edx, 154				; 0000009aH
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9, QWORD PTR master$[rsp]
	lea	r8, OFFSET FLAT:$SG138158
	lea	rdx, OFFSET FLAT:$SG138159
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
; Line 115
	mov	rax, QWORD PTR contents$[rsp]
	mov	rcx, QWORD PTR rx+648
	mov	QWORD PTR [rax+16], rcx
; Line 116
	mov	rax, QWORD PTR contents$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, -3
	mov	rcx, QWORD PTR contents$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 117
	mov	rax, QWORD PTR contents$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, -5
	mov	rcx, QWORD PTR contents$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 118
	mov	rax, QWORD PTR contents$[rsp]
	mov	eax, DWORD PTR [rax+24]
	or	eax, 1
	mov	rcx, QWORD PTR contents$[rsp]
	mov	DWORD PTR [rcx+24], eax
$LN14@rxlinker_r:
; Line 121
	mov	rax, QWORD PTR contents$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN16@rxlinker_r
; Line 123
	lea	rax, OFFSET FLAT:$SG138163
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 123				; 0000007bH
	lea	r8, OFFSET FLAT:$SG138164
	mov	edx, 155				; 0000009bH
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR contents$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccuserallocator_
$LN16@rxlinker_r:
; Line 126
	mov	rax, QWORD PTR contents$[rsp]
	mov	rcx, QWORD PTR memory$2[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 127
	mov	rax, QWORD PTR contents$[rsp]
	mov	ecx, DWORD PTR length$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 128
	mov	rax, QWORD PTR contents$[rsp]
	mov	rcx, QWORD PTR master$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 130
	jmp	SHORT $LN13@rxlinker_r
$LN12@rxlinker_r:
; Line 131
	lea	rax, OFFSET FLAT:$SG138167
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 131				; 00000083H
	lea	r8, OFFSET FLAT:$SG138168
	mov	edx, 156				; 0000009cH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9, QWORD PTR master$[rsp]
	lea	r8, OFFSET FLAT:$SG138165
	lea	rdx, OFFSET FLAT:$SG138166
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
$LN13@rxlinker_r:
$LN10@rxlinker_r:
; Line 134
	mov	rax, QWORD PTR contents$[rsp]
; Line 135
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
rxlinker_resolve_terminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
contents$ = 40
master$ = 64
labels$ = 72
rxlinker_labelsrem_terminal PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 76
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 77
	mov	rcx, QWORD PTR master$[rsp]
	call	rxlinker_onlyquery_terminal
	mov	QWORD PTR contents$[rsp], rax
; Line 79
	cmp	QWORD PTR contents$[rsp], 0
	je	SHORT $LN2@rxlinker_l
; Line 81
	mov	rax, QWORD PTR contents$[rsp]
	mov	ecx, DWORD PTR labels$[rsp]
	mov	eax, DWORD PTR [rax+24]
	or	eax, ecx
	mov	rcx, QWORD PTR contents$[rsp]
	mov	DWORD PTR [rcx+24], eax
$LN2@rxlinker_l:
; Line 84
	cmp	QWORD PTR contents$[rsp], 0
	je	SHORT $LN4@rxlinker_l
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN5@rxlinker_l
$LN4@rxlinker_l:
	mov	DWORD PTR tv71[rsp], 0
$LN5@rxlinker_l:
	mov	eax, DWORD PTR tv71[rsp]
; Line 85
	add	rsp, 56					; 00000038H
	ret	0
rxlinker_labelsrem_terminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
contents$ = 40
master$ = 64
labels$ = 72
rxlinker_labelsadd_terminal PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 62
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 63
	mov	rcx, QWORD PTR master$[rsp]
	call	rxlinker_onlyquery_terminal
	mov	QWORD PTR contents$[rsp], rax
; Line 65
	cmp	QWORD PTR contents$[rsp], 0
	je	SHORT $LN2@rxlinker_l
; Line 67
	mov	rax, QWORD PTR contents$[rsp]
	mov	ecx, DWORD PTR labels$[rsp]
	mov	eax, DWORD PTR [rax+24]
	or	eax, ecx
	mov	rcx, QWORD PTR contents$[rsp]
	mov	DWORD PTR [rcx+24], eax
$LN2@rxlinker_l:
; Line 70
	cmp	QWORD PTR contents$[rsp], 0
	je	SHORT $LN4@rxlinker_l
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN5@rxlinker_l
$LN4@rxlinker_l:
	mov	DWORD PTR tv71[rsp], 0
$LN5@rxlinker_l:
	mov	eax, DWORD PTR tv71[rsp]
; Line 71
	add	rsp, 56					; 00000038H
	ret	0
rxlinker_labelsadd_terminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
contents$ = 32
master$ = 64
labels$ = 72
rxlinker_labelshas_terminal PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 48
$LN4:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 49
	mov	rcx, QWORD PTR master$[rsp]
	call	rxlinker_onlyquery_terminal
	mov	QWORD PTR contents$[rsp], rax
; Line 51
	cmp	QWORD PTR contents$[rsp], 0
	je	SHORT $LN2@rxlinker_l
; Line 53
	mov	rax, QWORD PTR contents$[rsp]
	mov	ecx, DWORD PTR labels$[rsp]
	mov	eax, DWORD PTR [rax+24]
	and	eax, ecx
	jmp	SHORT $LN1@rxlinker_l
$LN2@rxlinker_l:
; Line 56
	xor	eax, eax
$LN1@rxlinker_l:
; Line 57
	add	rsp, 56					; 00000038H
	ret	0
rxlinker_labelshas_terminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
contents$ = 48
tv66 = 56
$T1 = 64
$T2 = 96
master$ = 160
rxlinker_onlyquery_terminal PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 34
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 35
	mov	rcx, QWORD PTR master$[rsp]
	call	strlen
	mov	QWORD PTR tv66[rsp], rax
	lea	rcx, OFFSET FLAT:$SG138104
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 35					; 00000023H
	lea	r8, OFFSET FLAT:$SG138105
	mov	edx, 151				; 00000097H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR master$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR tv66[rsp]
	mov	r9d, eax
	mov	r8d, 40					; 00000028H
	lea	rdx, OFFSET FLAT:rx+1104
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctblgeti_
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR rx+1104
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR contents$[rsp], rax
; Line 37
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 1
	jne	SHORT $LN2@rxlinker_o
; Line 39
	mov	QWORD PTR contents$[rsp], 0
$LN2@rxlinker_o:
; Line 42
	mov	rax, QWORD PTR contents$[rsp]
; Line 43
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
rxlinker_onlyquery_terminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 48
contents$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
master$ = 224
rxlinker_register_terminal PROC
; File W:\cpp\void\e\rx\rxobject.cc
; Line 24
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 25
	mov	rcx, QWORD PTR master$[rsp]
	call	strlen
	mov	QWORD PTR tv66[rsp], rax
	lea	rcx, OFFSET FLAT:$SG138090
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 25
	lea	r8, OFFSET FLAT:$SG138091
	mov	edx, 149				; 00000095H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR master$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR tv66[rsp]
	mov	r9d, eax
	mov	r8d, 40					; 00000028H
	lea	rdx, OFFSET FLAT:rx+1104
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctblseti_
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR rx+1104
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR contents$[rsp], rax
$LN4@rxlinker_r:
; Line 26
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rcx+rax+36], 0
	je	SHORT $LN5@rxlinker_r
	lea	rax, OFFSET FLAT:$SG138095
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 26
	lea	r8, OFFSET FLAT:$SG138096
	mov	edx, 150				; 00000096H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG138093
	lea	rdx, OFFSET FLAT:$SG138094
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN5@rxlinker_r:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@rxlinker_r
; Line 28
	mov	rax, QWORD PTR contents$[rsp]
; Line 29
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxlinker_register_terminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
v$ = 32
rxvec2i_vec2 PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 454
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 456
	cvtsi2ss xmm0, DWORD PTR v$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 457
	cvtsi2ss xmm0, DWORD PTR v$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 458
	mov	rax, QWORD PTR r$[rsp]
; Line 459
	add	rsp, 24
	ret	0
rxvec2i_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
x$ = 32
y$ = 40
rxvec2_xy PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 444
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 447
	cvtsi2ss xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 448
	cvtsi2ss xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 450
	mov	rax, QWORD PTR r$[rsp]
; Line 451
	add	rsp, 24
	ret	0
rxvec2_xy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
v0$ = 32
v1$ = 40
rxmul_vec2 PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 436
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 438
	movss	xmm0, DWORD PTR v0$[rsp]
	mulss	xmm0, DWORD PTR v1$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 439
	movss	xmm0, DWORD PTR v0$[rsp+4]
	mulss	xmm0, DWORD PTR v1$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 440
	mov	rax, QWORD PTR r$[rsp]
; Line 441
	add	rsp, 24
	ret	0
rxmul_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
v0$ = 32
v1$ = 40
rxadd_vec2 PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 428
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 430
	movss	xmm0, DWORD PTR v0$[rsp]
	addss	xmm0, DWORD PTR v1$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 431
	movss	xmm0, DWORD PTR v0$[rsp+4]
	addss	xmm0, DWORD PTR v1$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 432
	mov	rax, QWORD PTR r$[rsp]
; Line 433
	add	rsp, 24
	ret	0
rxadd_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ReturnAddress$ = 48
m$ = 56
v$ = 64
rxmul_matvec PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 418
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24
; Line 420
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+rcx]
	mulss	xmm0, DWORD PTR [rdx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+8]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	addss	xmm0, DWORD PTR [rax+rcx]
	movss	DWORD PTR r$[rsp], xmm0
; Line 421
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+rcx]
	mulss	xmm0, DWORD PTR [rdx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+8]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	addss	xmm0, DWORD PTR [rax+rcx]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 422
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+rcx]
	mulss	xmm0, DWORD PTR [rdx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+8]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	addss	xmm0, DWORD PTR [rax+rcx]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 423
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm0, DWORD PTR [rax+rcx]
	mulss	xmm0, DWORD PTR [rdx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+4]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR v$[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+8]
	addss	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR m$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	addss	xmm0, DWORD PTR [rax+rcx]
	movss	DWORD PTR r$[rsp+12], xmm0
; Line 424
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 425
	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
rxmul_matvec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
result$ = 96
__$ArrayPad$ = 160
__$ReturnAddress$ = 208
rxmatrix_flip_vertically PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 410
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxmatrix_identity
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 411
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR __real@bf800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 412
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 413
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_flip_vertically ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
result$ = 96
__$ArrayPad$ = 160
__$ReturnAddress$ = 208
x$ = 216
y$ = 224
z$ = 232
rxmatrix_translate_xyz PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 402
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxmatrix_identity
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 403
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 404
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 405
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 406
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 407
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_translate_xyz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sinres$ = 32
cosres$ = 36
$T1 = 40
result$ = 112
__$ArrayPad$ = 176
__$ReturnAddress$ = 224
angle$ = 232
rxmatrix_rotX PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 388
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 389
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxmatrix_identity
	lea	rcx, QWORD PTR result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 390
	movss	xmm0, DWORD PTR angle$[rsp]
	call	cosf
	movss	DWORD PTR cosres$[rsp], xmm0
; Line 391
	movss	xmm0, DWORD PTR angle$[rsp]
	call	sinf
	movss	DWORD PTR sinres$[rsp], xmm0
; Line 392
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR cosres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 393
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR sinres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 394
	movss	xmm0, DWORD PTR sinres$[rsp]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	DWORD PTR [rax+rcx], xmm0
; Line 395
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR cosres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 396
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 397
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_rotX ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sinres$ = 32
cosres$ = 40
$T1 = 48
r$ = 112
__$ArrayPad$ = 176
__$ReturnAddress$ = 224
angle$ = 232
rxmatrix_rotY PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 376
$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 377
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxmatrix_identity
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 378
	movsd	xmm0, QWORD PTR angle$[rsp]
	call	cos
	movsd	QWORD PTR cosres$[rsp], xmm0
; Line 379
	movsd	xmm0, QWORD PTR angle$[rsp]
	call	sin
	movsd	QWORD PTR sinres$[rsp], xmm0
; Line 380
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	cvtsd2ss xmm0, QWORD PTR cosres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 381
	movsd	xmm0, QWORD PTR sinres$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 382
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	cvtsd2ss xmm0, QWORD PTR sinres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 383
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	cvtsd2ss xmm0, QWORD PTR cosres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 384
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 385
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_rotY ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sinres$ = 32
cosres$ = 40
$T1 = 48
r$ = 112
__$ArrayPad$ = 176
__$ReturnAddress$ = 224
angle$ = 232
rxmatrix_rotZ PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 364
$LN3:
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 365
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxmatrix_identity
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 366
	movsd	xmm0, QWORD PTR angle$[rsp]
	call	cos
	movsd	QWORD PTR cosres$[rsp], xmm0
; Line 367
	movsd	xmm0, QWORD PTR angle$[rsp]
	call	sin
	movsd	QWORD PTR sinres$[rsp], xmm0
; Line 368
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	cvtsd2ss xmm0, QWORD PTR cosres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 369
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	cvtsd2ss xmm0, QWORD PTR sinres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 370
	movsd	xmm0, QWORD PTR sinres$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 371
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	cvtsd2ss xmm0, QWORD PTR cosres$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 372
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 373
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_rotZ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
m$ = 96
__$ArrayPad$ = 160
__$ReturnAddress$ = 208
r$ = 216
v$ = 224
zmin$ = 232
zmax$ = 240
rxmatrix_projection PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 322
$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 323
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxmatrix_identity
	lea	rcx, QWORD PTR m$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 325
	movsd	xmm0, QWORD PTR v$[rsp]
	divsd	xmm0, QWORD PTR __real@4066800000000000
	mulsd	xmm0, QWORD PTR __real@400921fb60000000
	mulsd	xmm0, QWORD PTR __real@3fe0000000000000
	call	tan
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR v$[rsp], xmm0
; Line 327
	movsd	xmm0, QWORD PTR v$[rsp]
	mulsd	xmm0, QWORD PTR r$[rsp]
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR m$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 328
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR m$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	cvtsd2ss xmm0, QWORD PTR v$[rsp]
	movss	DWORD PTR [rax+rcx], xmm0
; Line 329
	movsd	xmm0, QWORD PTR zmax$[rsp]
	subsd	xmm0, QWORD PTR zmin$[rsp]
	movsd	xmm1, QWORD PTR zmax$[rsp]
	divsd	xmm1, xmm0
	movaps	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR m$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 330
	movsd	xmm0, QWORD PTR zmax$[rsp]
	mulsd	xmm0, QWORD PTR zmin$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR zmax$[rsp]
	subsd	xmm1, QWORD PTR zmin$[rsp]
	divsd	xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR m$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 331
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR m$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 332
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR m$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 333
	lea	rax, QWORD PTR m$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 334
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_projection ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 32
$T1 = 48
$T2 = 64
$T3 = 80
__$ReturnAddress$ = 128
a$ = 136
rxvector_normalize PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 312
$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 313
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR a$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvector_length
	movss	DWORD PTR length$[rsp], xmm0
; Line 315
	movss	xmm0, DWORD PTR length$[rsp]
	ucomiss	xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@rxvector_n
	je	SHORT $LN2@rxvector_n
$LN4@rxvector_n:
; Line 316
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR length$[rsp]
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR a$[rsp]
	mov	ecx, 12
	rep movsb
	movaps	xmm2, xmm0
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	rxvector_scale
	mov	rdi, QWORD PTR a$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
$LN2@rxvector_n:
; Line 318
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, QWORD PTR a$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 319
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
rxvector_normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
tv75 = 4
tv81 = 8
r$ = 16
__$ArrayPad$ = 32
__$ReturnAddress$ = 80
a$ = 88
rxvector_abs PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 302
$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 304
	mov	rax, QWORD PTR a$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN3@rxvector_a
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv69[rsp], xmm0
	jmp	SHORT $LN4@rxvector_a
$LN3@rxvector_a:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv69[rsp], xmm0
$LN4@rxvector_a:
	movss	xmm0, DWORD PTR tv69[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 305
	mov	rax, QWORD PTR a$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+4]
	jbe	SHORT $LN5@rxvector_a
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv75[rsp], xmm0
	jmp	SHORT $LN6@rxvector_a
$LN5@rxvector_a:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv75[rsp], xmm0
$LN6@rxvector_a:
	movss	xmm0, DWORD PTR tv75[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 306
	mov	rax, QWORD PTR a$[rsp]
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR [rax+8]
	jbe	SHORT $LN7@rxvector_a
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR tv81[rsp], xmm0
	jmp	SHORT $LN8@rxvector_a
$LN7@rxvector_a:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR tv81[rsp], xmm0
$LN8@rxvector_a:
	movss	xmm0, DWORD PTR tv81[rsp]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 307
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 308
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvector_abs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
tv71 = 4
tv75 = 8
r$ = 16
__$ArrayPad$ = 32
__$ReturnAddress$ = 80
a$ = 88
max$ = 96
rxvector_max PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 293
$LN9:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 295
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR max$[rsp]
	comiss	xmm0, DWORD PTR [rax]
	jbe	SHORT $LN3@rxvector_m
	movss	xmm0, DWORD PTR max$[rsp]
	movss	DWORD PTR tv67[rsp], xmm0
	jmp	SHORT $LN4@rxvector_m
$LN3@rxvector_m:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv67[rsp], xmm0
$LN4@rxvector_m:
	movss	xmm0, DWORD PTR tv67[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 296
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR max$[rsp]
	comiss	xmm0, DWORD PTR [rax+4]
	jbe	SHORT $LN5@rxvector_m
	movss	xmm0, DWORD PTR max$[rsp]
	movss	DWORD PTR tv71[rsp], xmm0
	jmp	SHORT $LN6@rxvector_m
$LN5@rxvector_m:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rsp], xmm0
$LN6@rxvector_m:
	movss	xmm0, DWORD PTR tv71[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 297
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR max$[rsp]
	comiss	xmm0, DWORD PTR [rax+8]
	jbe	SHORT $LN7@rxvector_m
	movss	xmm0, DWORD PTR max$[rsp]
	movss	DWORD PTR tv75[rsp], xmm0
	jmp	SHORT $LN8@rxvector_m
$LN7@rxvector_m:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR tv75[rsp], xmm0
$LN8@rxvector_m:
	movss	xmm0, DWORD PTR tv75[rsp]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 298
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 299
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvector_max ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
tv71 = 4
tv75 = 8
r$ = 16
__$ArrayPad$ = 32
__$ReturnAddress$ = 80
a$ = 88
min$ = 96
rxvector_min PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 284
$LN9:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 286
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	comiss	xmm0, DWORD PTR min$[rsp]
	jbe	SHORT $LN3@rxvector_m
	movss	xmm0, DWORD PTR min$[rsp]
	movss	DWORD PTR tv67[rsp], xmm0
	jmp	SHORT $LN4@rxvector_m
$LN3@rxvector_m:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR tv67[rsp], xmm0
$LN4@rxvector_m:
	movss	xmm0, DWORD PTR tv67[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 287
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	comiss	xmm0, DWORD PTR min$[rsp]
	jbe	SHORT $LN5@rxvector_m
	movss	xmm0, DWORD PTR min$[rsp]
	movss	DWORD PTR tv71[rsp], xmm0
	jmp	SHORT $LN6@rxvector_m
$LN5@rxvector_m:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	movss	DWORD PTR tv71[rsp], xmm0
$LN6@rxvector_m:
	movss	xmm0, DWORD PTR tv71[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 288
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	comiss	xmm0, DWORD PTR min$[rsp]
	jbe	SHORT $LN7@rxvector_m
	movss	xmm0, DWORD PTR min$[rsp]
	movss	DWORD PTR tv75[rsp], xmm0
	jmp	SHORT $LN8@rxvector_m
$LN7@rxvector_m:
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	movss	DWORD PTR tv75[rsp], xmm0
$LN8@rxvector_m:
	movss	xmm0, DWORD PTR tv75[rsp]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 289
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 290
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvector_min ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
a$ = 72
rxvector_negate PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 275
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 277
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR r$[rsp], xmm0
; Line 278
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 279
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	xorps	xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 280
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 281
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvector_negate ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
a$ = 72
b$ = 80
rxvector_scale PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 266
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 268
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 269
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 270
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 271
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 272
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvector_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
a$ = 72
b$ = 80
rxvector_downscale PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 257
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 259
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax]
	divss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 260
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	divss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 261
	mov	rax, QWORD PTR a$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	divss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 262
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 263
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvector_downscale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
a$ = 72
b$ = 80
rxvector_mul PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 248
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 250
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR r$[rsp], xmm0
; Line 251
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	mulss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 252
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	mulss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 253
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 254
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvector_mul ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
a$ = 72
b$ = 80
rxvector_sub PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 239
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 241
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	subss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR r$[rsp], xmm0
; Line 242
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	subss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 243
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	subss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 244
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 245
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvector_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
a$ = 72
b$ = 80
rxvector_add PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 230
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 232
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	addss	xmm0, DWORD PTR [rcx]
	movss	DWORD PTR r$[rsp], xmm0
; Line 233
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+4]
	addss	xmm0, DWORD PTR [rcx+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 234
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax+8]
	addss	xmm0, DWORD PTR [rcx+8]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 235
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 236
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvector_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
a$ = 32
b$ = 40
rxvec2_sub PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 222
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 224
	movss	xmm0, DWORD PTR a$[rsp]
	subss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 225
	movss	xmm0, DWORD PTR a$[rsp+4]
	subss	xmm0, DWORD PTR b$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 226
	mov	rax, QWORD PTR r$[rsp]
; Line 227
	add	rsp, 24
	ret	0
rxvec2_sub ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
a$ = 32
b$ = 40
rxvec2_add PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 214
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 216
	movss	xmm0, DWORD PTR a$[rsp]
	addss	xmm0, DWORD PTR b$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 217
	movss	xmm0, DWORD PTR a$[rsp+4]
	addss	xmm0, DWORD PTR b$[rsp+4]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 218
	mov	rax, QWORD PTR r$[rsp]
; Line 219
	add	rsp, 24
	ret	0
rxvec2_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
rxvec2_len PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 209
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 210
	mov	rdx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	rxvec2_dot
	call	sqrtf
; Line 211
	add	rsp, 40					; 00000028H
	ret	0
rxvec2_len ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
b$ = 16
rxvec2_dot PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 204
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 205
	movss	xmm0, DWORD PTR a$[rsp]
	mulss	xmm0, DWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR a$[rsp+4]
	mulss	xmm1, DWORD PTR b$[rsp+4]
	addss	xmm0, xmm1
; Line 206
	ret	0
rxvec2_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
a$ = 96
rxvector_length PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 199
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 200
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR a$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR a$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	rxvector_dot
	call	sqrtf
; Line 201
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxvector_length ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv87 = 32
$T1 = 40
__$ReturnAddress$ = 96
a$ = 104
b$ = 112
rxvector_cross PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 190
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 192
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx+4]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx]
	subss	xmm0, xmm1
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax]
	mulss	xmm2, DWORD PTR [rcx+8]
	subss	xmm1, xmm2
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm2, DWORD PTR [rax+4]
	mulss	xmm2, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm3, DWORD PTR [rax+8]
	mulss	xmm3, DWORD PTR [rcx+4]
	subss	xmm2, xmm3
	movss	DWORD PTR tv87[rsp], xmm2
	movaps	xmm3, xmm0
	movaps	xmm2, xmm1
	movss	xmm0, DWORD PTR tv87[rsp]
	movaps	xmm1, xmm0
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvec3_xyz
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 196
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
rxvector_cross ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
b$ = 16
rxvector_dot PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 185
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 186
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm0, DWORD PTR [rax]
	mulss	xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+4]
	mulss	xmm1, DWORD PTR [rcx+4]
	addss	xmm0, xmm1
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	movss	xmm1, DWORD PTR [rax+8]
	mulss	xmm1, DWORD PTR [rcx+8]
	addss	xmm0, xmm1
; Line 187
	ret	0
rxvector_dot ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
rxmini	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 146
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 147
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN3@rxmini
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@rxmini
$LN3@rxmini:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@rxmini:
	mov	eax, DWORD PTR tv65[rsp]
; Line 148
	add	rsp, 24
	ret	0
rxmini	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
rxmaxi	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 141
$LN5:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 142
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jle	SHORT $LN3@rxmaxi
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	jmp	SHORT $LN4@rxmaxi
$LN3@rxmaxi:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv65[rsp], eax
$LN4@rxmaxi:
	mov	eax, DWORD PTR tv65[rsp]
; Line 143
	add	rsp, 24
	ret	0
rxmaxi	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
rxmin	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 136
$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 137
	movss	xmm0, DWORD PTR y$[rsp]
	comiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN3@rxmin
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@rxmin
$LN3@rxmin:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@rxmin:
	movss	xmm0, DWORD PTR tv65[rsp]
; Line 138
	add	rsp, 24
	ret	0
rxmin	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
x$ = 32
y$ = 40
rxmax	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 131
$LN5:
	movss	DWORD PTR [rsp+16], xmm1
	movss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 132
	movss	xmm0, DWORD PTR x$[rsp]
	comiss	xmm0, DWORD PTR y$[rsp]
	jbe	SHORT $LN3@rxmax
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@rxmax
$LN3@rxmax:
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR tv65[rsp], xmm0
$LN4@rxmax:
	movss	xmm0, DWORD PTR tv65[rsp]
; Line 133
	add	rsp, 24
	ret	0
rxmax	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
tv67 = 4
val$ = 32
min$ = 40
max$ = 48
rxclampi PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 125
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 126
	mov	eax, DWORD PTR min$[rsp]
	cmp	DWORD PTR val$[rsp], eax
	jge	SHORT $LN5@rxclampi
	mov	eax, DWORD PTR min$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	jmp	SHORT $LN6@rxclampi
$LN5@rxclampi:
	mov	eax, DWORD PTR max$[rsp]
	cmp	DWORD PTR val$[rsp], eax
	jle	SHORT $LN3@rxclampi
	mov	eax, DWORD PTR max$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN4@rxclampi
$LN3@rxclampi:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN4@rxclampi:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tv67[rsp], eax
$LN6@rxclampi:
	mov	eax, DWORD PTR tv67[rsp]
; Line 128
	add	rsp, 24
	ret	0
rxclampi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
rxpow2i	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 120
	mov	DWORD PTR [rsp+8], ecx
; Line 121
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR x$[rsp]
; Line 122
	ret	0
rxpow2i	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
tv67 = 8
val$ = 32
min$ = 40
max$ = 48
rxclamp	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 115
$LN7:
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	sub	rsp, 24
; Line 116
	movsd	xmm0, QWORD PTR min$[rsp]
	comisd	xmm0, QWORD PTR val$[rsp]
	jbe	SHORT $LN5@rxclamp
	movsd	xmm0, QWORD PTR min$[rsp]
	movsd	QWORD PTR tv67[rsp], xmm0
	jmp	SHORT $LN6@rxclamp
$LN5@rxclamp:
	movsd	xmm0, QWORD PTR val$[rsp]
	comisd	xmm0, QWORD PTR max$[rsp]
	jbe	SHORT $LN3@rxclamp
	movsd	xmm0, QWORD PTR max$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN4@rxclamp
$LN3@rxclamp:
	movsd	xmm0, QWORD PTR val$[rsp]
	movsd	QWORD PTR tv66[rsp], xmm0
$LN4@rxclamp:
	movsd	xmm0, QWORD PTR tv66[rsp]
	movsd	QWORD PTR tv67[rsp], xmm0
$LN6@rxclamp:
	movsd	xmm0, QWORD PTR tv67[rsp]
; Line 117
	add	rsp, 24
	ret	0
rxclamp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 48
val_min$ = 56
val_max$ = 64
min$ = 72
max$ = 80
rxremix	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 108
$LN3:
	movsd	QWORD PTR [rsp+32], xmm3
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 109
	movsd	xmm2, QWORD PTR val_max$[rsp]
	movsd	xmm1, QWORD PTR val_min$[rsp]
	movsd	xmm0, QWORD PTR val$[rsp]
	call	rxunmix
	movsd	xmm2, QWORD PTR max$[rsp]
	movsd	xmm1, QWORD PTR min$[rsp]
	call	rxmix
; Line 110
	add	rsp, 40					; 00000028H
	ret	0
rxremix	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 8
min$ = 16
max$ = 24
rxunmix	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 102
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
; Line 103
	movsd	xmm0, QWORD PTR val$[rsp]
	subsd	xmm0, QWORD PTR min$[rsp]
	movsd	xmm1, QWORD PTR max$[rsp]
	subsd	xmm1, QWORD PTR min$[rsp]
	divsd	xmm0, xmm1
; Line 104
	ret	0
rxunmix	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 8
min$ = 16
max$ = 24
rxmix	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 96
	movsd	QWORD PTR [rsp+24], xmm2
	movsd	QWORD PTR [rsp+16], xmm1
	movsd	QWORD PTR [rsp+8], xmm0
; Line 97
	movsd	xmm0, QWORD PTR max$[rsp]
	subsd	xmm0, QWORD PTR min$[rsp]
	mulsd	xmm0, QWORD PTR val$[rsp]
	movsd	xmm1, QWORD PTR min$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 98
	ret	0
rxmix	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 0
c$2 = 4
result$ = 16
__$ArrayPad$ = 80
__$ReturnAddress$ = 128
a$ = 136
b$ = 144
rxmatrix_multiply PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 350
$LN9:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 351
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN4@rxmatrix_m
$LN2@rxmatrix_m:
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
$LN4@rxmatrix_m:
	cmp	DWORD PTR r$1[rsp], 4
	jge	$LN3@rxmatrix_m
; Line 352
	mov	DWORD PTR c$2[rsp], 0
	jmp	SHORT $LN7@rxmatrix_m
$LN5@rxmatrix_m:
	mov	eax, DWORD PTR c$2[rsp]
	inc	eax
	mov	DWORD PTR c$2[rsp], eax
$LN7@rxmatrix_m:
	cmp	DWORD PTR c$2[rsp], 4
	jge	$LN6@rxmatrix_m
; Line 353
	movsxd	rax, DWORD PTR r$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 16
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR b$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR c$2[rsp]
	movss	xmm0, DWORD PTR [rax+rcx]
	mulss	xmm0, DWORD PTR [rdx+r8*4]
	movsxd	rax, DWORD PTR r$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 16
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR b$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR c$2[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+r8*4]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR r$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 16
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR b$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR c$2[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+r8*4]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR r$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 16
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR b$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR c$2[rsp]
	movss	xmm1, DWORD PTR [rax+rcx]
	mulss	xmm1, DWORD PTR [rdx+r8*4]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR r$1[rsp]
	imul	rax, rax, 16
	lea	rax, QWORD PTR result$[rsp+rax]
	movsxd	rcx, DWORD PTR c$2[rsp]
	movss	DWORD PTR [rax+rcx*4], xmm0
; Line 358
	jmp	$LN5@rxmatrix_m
$LN6@rxmatrix_m:
; Line 359
	jmp	$LN2@rxmatrix_m
$LN3@rxmatrix_m:
; Line 360
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 361
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_multiply ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 64
__$ReturnAddress$ = 112
rxmatrix_identity PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 337
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 339
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 340
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 341
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
; Line 342
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	xorps	xmm0, xmm0
	movss	DWORD PTR [rax+rcx], xmm0
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR r$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rax+rcx], xmm0
; Line 343
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 344
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
rxmatrix_identity ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
z$ = 88
rxvec3_z PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 175
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 176
	movss	xmm3, DWORD PTR z$[rsp]
	xorps	xmm2, xmm2
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvec3_xyz
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 177
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvec3_z ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
y$ = 88
rxvec3_y PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 170
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 171
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR y$[rsp]
	xorps	xmm1, xmm1
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvec3_xyz
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 172
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvec3_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
x$ = 88
rxvec3_x PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 165
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 166
	xorps	xmm3, xmm3
	xorps	xmm2, xmm2
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvec3_xyz
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 167
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvec3_x ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
x$ = 88
y$ = 96
rxvec3_xy PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 160
$LN3:
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 161
	xorps	xmm3, xmm3
	movss	xmm2, DWORD PTR y$[rsp]
	movss	xmm1, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvec3_xyz
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 162
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvec3_xy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
x$ = 72
y$ = 80
z$ = 88
rxvec3_xyz PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 151
$LN3:
	movss	DWORD PTR [rsp+32], xmm3
	movss	DWORD PTR [rsp+24], xmm2
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 153
	movss	xmm0, DWORD PTR x$[rsp]
	movss	DWORD PTR r$[rsp], xmm0
; Line 154
	movss	xmm0, DWORD PTR y$[rsp]
	movss	DWORD PTR r$[rsp+4], xmm0
; Line 155
	movss	xmm0, DWORD PTR z$[rsp]
	movss	DWORD PTR r$[rsp+8], xmm0
; Line 156
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 157
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
rxvec3_xyz ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
xyz$ = 88
rxvec3	PROC
; File W:\cpp\void\e\rx\rxm.cc
; Line 180
$LN3:
	movss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 181
	movss	xmm3, DWORD PTR xyz$[rsp]
	movss	xmm2, DWORD PTR xyz$[rsp]
	movss	xmm1, DWORD PTR xyz$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	rxvec3_xyz
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 182
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
rxvec3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 80
col$ = 84
pos$1 = 88
y$2 = 92
x$3 = 96
DCY$4 = 100
bitCnt$5 = 104
bitBuf$6 = 108
j$7 = 112
i$ = 116
k$ = 120
yy$8 = 124
xx$9 = 128
DCU$10 = 132
DCV$11 = 136
yti$12 = 140
uvti$13 = 144
p$14 = 148
r$15 = 152
g$16 = 156
b$17 = 160
p$18 = 164
r$19 = 168
g$20 = 172
b$21 = 176
tv70 = 180
tv72 = 184
tv75 = 188
tv76 = 192
tv81 = 196
tv130 = 200
tv131 = 204
tv147 = 208
tv148 = 212
tv206 = 216
tv350 = 220
tv352 = 224
subsample$ = 228
tv367 = 232
clamped_row$22 = 236
tv371 = 240
tv380 = 244
tv551 = 248
clamped_row$23 = 252
tv555 = 256
tv564 = 260
dataR$24 = 264
ofsG$25 = 272
ofsB$26 = 276
base_p$27 = 280
base_p$28 = 284
dataG$29 = 288
dataB$30 = 296
fdtbl_Y$ = 304
fdtbl_UV$ = 560
subU$31 = 816
subV$32 = 1072
Y$33 = 1328
U$34 = 1584
V$35 = 1840
Y$36 = 2096
U$37 = 3120
V$38 = 4144
head1$39 = 5168
YTable$ = 5200
UVTable$ = 5264
__$ArrayPad$ = 5328
s$ = 5360
width$ = 5368
height$ = 5376
comp$ = 5384
data$ = 5392
quality$ = 5400
stbi_write_jpg_core PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1399
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 5352				; 000014e8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1475
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR width$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR height$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	jg	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 1
	jge	SHORT $LN41@stbi_write
$LN42@stbi_write:
; Line 1476
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN41@stbi_write:
; Line 1479
	cmp	DWORD PTR quality$[rsp], 0
	je	SHORT $LN46@stbi_write
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN47@stbi_write
$LN46@stbi_write:
	mov	DWORD PTR tv70[rsp], 90			; 0000005aH
$LN47@stbi_write:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1480
	cmp	DWORD PTR quality$[rsp], 90		; 0000005aH
	jg	SHORT $LN48@stbi_write
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN49@stbi_write
$LN48@stbi_write:
	mov	DWORD PTR tv72[rsp], 0
$LN49@stbi_write:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR subsample$[rsp], eax
; Line 1481
	cmp	DWORD PTR quality$[rsp], 1
	jge	SHORT $LN52@stbi_write
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN53@stbi_write
$LN52@stbi_write:
	cmp	DWORD PTR quality$[rsp], 100		; 00000064H
	jle	SHORT $LN50@stbi_write
	mov	DWORD PTR tv75[rsp], 100		; 00000064H
	jmp	SHORT $LN51@stbi_write
$LN50@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN51@stbi_write:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR tv76[rsp], eax
$LN53@stbi_write:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1482
	cmp	DWORD PTR quality$[rsp], 50		; 00000032H
	jge	SHORT $LN54@stbi_write
	mov	eax, 5000				; 00001388H
	cdq
	idiv	DWORD PTR quality$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN55@stbi_write
$LN54@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	shl	eax, 1
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv81[rsp], eax
$LN55@stbi_write:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1484
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_write:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	$LN3@stbi_write
; Line 1485
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?YQT@?1??stbi_write_jpg_core@@9@9
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR yti$12[rsp], eax
; Line 1486
	cmp	DWORD PTR yti$12[rsp], 1
	jge	SHORT $LN58@stbi_write
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN59@stbi_write
$LN58@stbi_write:
	cmp	DWORD PTR yti$12[rsp], 255		; 000000ffH
	jle	SHORT $LN56@stbi_write
	mov	DWORD PTR tv130[rsp], 255		; 000000ffH
	jmp	SHORT $LN57@stbi_write
$LN56@stbi_write:
	mov	eax, DWORD PTR yti$12[rsp]
	mov	DWORD PTR tv130[rsp], eax
$LN57@stbi_write:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR tv131[rsp], eax
$LN59@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv131[rsp]
	mov	BYTE PTR YTable$[rsp+rax], cl
; Line 1487
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?UVQT@?1??stbi_write_jpg_core@@9@9
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR uvti$13[rsp], eax
; Line 1488
	cmp	DWORD PTR uvti$13[rsp], 1
	jge	SHORT $LN62@stbi_write
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN63@stbi_write
$LN62@stbi_write:
	cmp	DWORD PTR uvti$13[rsp], 255		; 000000ffH
	jle	SHORT $LN60@stbi_write
	mov	DWORD PTR tv147[rsp], 255		; 000000ffH
	jmp	SHORT $LN61@stbi_write
$LN60@stbi_write:
	mov	eax, DWORD PTR uvti$13[rsp]
	mov	DWORD PTR tv147[rsp], eax
$LN61@stbi_write:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN63@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv148[rsp]
	mov	BYTE PTR UVTable$[rsp+rax], cl
; Line 1489
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1491
	mov	DWORD PTR row$[rsp], 0
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR row$[rsp], 8
	jge	$LN6@stbi_write
; Line 1492
	mov	DWORD PTR col$[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi_write:
	cmp	DWORD PTR col$[rsp], 8
	jge	$LN9@stbi_write
; Line 1493
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR YTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_Y$[rsp+rax*4], xmm0
; Line 1494
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR UVTable$[rsp+rax]
	cvtsi2ss xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@9@9
	mulss	xmm0, DWORD PTR [rcx+rax*4]
	movss	xmm1, DWORD PTR __real@3f800000
	divss	xmm1, xmm0
	movaps	xmm0, xmm1
	movsxd	rax, DWORD PTR k$[rsp]
	movss	DWORD PTR fdtbl_UV$[rsp+rax*4], xmm0
; Line 1495
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 1496
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1502
	mov	BYTE PTR head1$39[rsp], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+1], 192		; 000000c0H
	mov	BYTE PTR head1$39[rsp+2], 0
	mov	BYTE PTR head1$39[rsp+3], 17
	mov	BYTE PTR head1$39[rsp+4], 8
	mov	eax, DWORD PTR height$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+5], al
	mov	eax, DWORD PTR height$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+6], al
	mov	eax, DWORD PTR width$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+7], al
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+8], al
	mov	BYTE PTR head1$39[rsp+9], 3
	mov	BYTE PTR head1$39[rsp+10], 1
	cmp	DWORD PTR subsample$[rsp], 0
	je	SHORT $LN64@stbi_write
	mov	DWORD PTR tv206[rsp], 34		; 00000022H
	jmp	SHORT $LN65@stbi_write
$LN64@stbi_write:
	mov	DWORD PTR tv206[rsp], 17
$LN65@stbi_write:
	movzx	eax, BYTE PTR tv206[rsp]
	mov	BYTE PTR head1$39[rsp+11], al
	mov	BYTE PTR head1$39[rsp+12], 0
	mov	BYTE PTR head1$39[rsp+13], 2
	mov	BYTE PTR head1$39[rsp+14], 17
	mov	BYTE PTR head1$39[rsp+15], 1
	mov	BYTE PTR head1$39[rsp+16], 3
	mov	BYTE PTR head1$39[rsp+17], 17
	mov	BYTE PTR head1$39[rsp+18], 1
	mov	BYTE PTR head1$39[rsp+19], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+20], 196		; 000000c4H
	mov	BYTE PTR head1$39[rsp+21], 1
	mov	BYTE PTR head1$39[rsp+22], 162		; 000000a2H
	mov	BYTE PTR head1$39[rsp+23], 0
; Line 1504
	mov	r8d, 25
	lea	rdx, OFFSET FLAT:?head0@?9??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1505
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR YTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1506
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1507
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR UVTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1508
	mov	r8d, 24
	lea	rdx, QWORD PTR head1$39[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1509
	lea	rax, OFFSET FLAT:?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1510
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_luminance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1511
	mov	dl, 16
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1512
	lea	rax, OFFSET FLAT:?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1513
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_luminance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1514
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1515
	lea	rax, OFFSET FLAT:?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1516
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_chrominance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1517
	mov	dl, 17
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1518
	lea	rax, OFFSET FLAT:?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@9@9
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1519
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_chrominance_values@?1??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1520
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:?head2@?9??stbi_write_jpg_core@@9@9
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 1526
	mov	DWORD PTR DCY$4[rsp], 0
	mov	DWORD PTR DCU$10[rsp], 0
	mov	DWORD PTR DCV$11[rsp], 0
; Line 1527
	mov	DWORD PTR bitBuf$6[rsp], 0
	mov	DWORD PTR bitCnt$5[rsp], 0
; Line 1529
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN66@stbi_write
	mov	DWORD PTR tv350[rsp], 1
	jmp	SHORT $LN67@stbi_write
$LN66@stbi_write:
	mov	DWORD PTR tv350[rsp], 0
$LN67@stbi_write:
	mov	eax, DWORD PTR tv350[rsp]
	mov	DWORD PTR ofsG$25[rsp], eax
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN68@stbi_write
	mov	DWORD PTR tv352[rsp], 2
	jmp	SHORT $LN69@stbi_write
$LN68@stbi_write:
	mov	DWORD PTR tv352[rsp], 0
$LN69@stbi_write:
	mov	eax, DWORD PTR tv352[rsp]
	mov	DWORD PTR ofsB$26[rsp], eax
; Line 1530
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR dataR$24[rsp], rax
; Line 1531
	movsxd	rax, DWORD PTR ofsG$25[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataG$29[rsp], rax
; Line 1532
	movsxd	rax, DWORD PTR ofsB$26[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataB$30[rsp], rax
; Line 1534
	cmp	DWORD PTR subsample$[rsp], 0
	je	$LN43@stbi_write
; Line 1535
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	mov	DWORD PTR y$2[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN12@stbi_write
; Line 1536
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	mov	DWORD PTR x$3[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN15@stbi_write
; Line 1538
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN19@stbi_write
$LN17@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN19@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN18@stbi_write
; Line 1540
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN70@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv367[rsp], eax
	jmp	SHORT $LN71@stbi_write
$LN70@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv367[rsp], eax
$LN71@stbi_write:
	mov	eax, DWORD PTR tv367[rsp]
	mov	DWORD PTR clamped_row$22[rsp], eax
; Line 1541
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN72@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv371[rsp], eax
	jmp	SHORT $LN73@stbi_write
$LN72@stbi_write:
	mov	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv371[rsp], eax
$LN73@stbi_write:
	mov	eax, DWORD PTR tv371[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$27[rsp], eax
; Line 1542
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN22@stbi_write
$LN20@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN22@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN21@stbi_write
; Line 1544
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN74@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv380[rsp], eax
	jmp	SHORT $LN75@stbi_write
$LN74@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv380[rsp], eax
$LN75@stbi_write:
	mov	eax, DWORD PTR tv380[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$14[rsp], eax
; Line 1545
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$15[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$16[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$17[rsp], xmm0
; Line 1546
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$16[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$36[rsp+rax*4], xmm0
; Line 1547
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$17[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$37[rsp+rax*4], xmm0
; Line 1548
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$15[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$16[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$17[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$38[rsp+rax*4], xmm0
; Line 1549
	jmp	$LN20@stbi_write
$LN21@stbi_write:
; Line 1550
	jmp	$LN17@stbi_write
$LN18@stbi_write:
; Line 1551
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 16
	lea	r9, QWORD PTR Y$36[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1552
	lea	rax, QWORD PTR Y$36[rsp+32]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1553
	lea	rax, QWORD PTR Y$36[rsp+512]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1554
	lea	rax, QWORD PTR Y$36[rsp+544]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1560
	mov	DWORD PTR yy$8[rsp], 0
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN25@stbi_write
$LN23@stbi_write:
	mov	eax, DWORD PTR yy$8[rsp]
	inc	eax
	mov	DWORD PTR yy$8[rsp], eax
$LN25@stbi_write:
	cmp	DWORD PTR yy$8[rsp], 8
	jge	$LN24@stbi_write
; Line 1561
	mov	DWORD PTR xx$9[rsp], 0
	jmp	SHORT $LN28@stbi_write
$LN26@stbi_write:
	mov	eax, DWORD PTR xx$9[rsp]
	inc	eax
	mov	DWORD PTR xx$9[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN28@stbi_write:
	cmp	DWORD PTR xx$9[rsp], 8
	jge	$LN27@stbi_write
; Line 1562
	imul	eax, DWORD PTR yy$8[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR xx$9[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR j$7[rsp], eax
; Line 1563
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR U$37[rsp+rax*4]
	addss	xmm0, DWORD PTR U$37[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR U$37[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subU$31[rsp+rax*4], xmm0
; Line 1564
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movss	xmm0, DWORD PTR V$38[rsp+rax*4]
	addss	xmm0, DWORD PTR V$38[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	addss	xmm0, DWORD PTR V$38[rsp+rax*4]
	mulss	xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR subV$32[rsp+rax*4], xmm0
; Line 1565
	jmp	$LN26@stbi_write
$LN27@stbi_write:
; Line 1566
	jmp	$LN23@stbi_write
$LN24@stbi_write:
; Line 1567
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subU$31[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1568
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subV$32[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1570
	jmp	$LN14@stbi_write
$LN15@stbi_write:
; Line 1571
	jmp	$LN11@stbi_write
$LN12@stbi_write:
; Line 1572
	jmp	$LN44@stbi_write
$LN43@stbi_write:
; Line 1573
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN31@stbi_write
$LN29@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	mov	DWORD PTR y$2[rsp], eax
$LN31@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN30@stbi_write
; Line 1574
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN32@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	mov	DWORD PTR x$3[rsp], eax
$LN34@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN33@stbi_write
; Line 1576
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN37@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN37@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN36@stbi_write
; Line 1578
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN76@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv551[rsp], eax
	jmp	SHORT $LN77@stbi_write
$LN76@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv551[rsp], eax
$LN77@stbi_write:
	mov	eax, DWORD PTR tv551[rsp]
	mov	DWORD PTR clamped_row$23[rsp], eax
; Line 1579
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN78@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv555[rsp], eax
	jmp	SHORT $LN79@stbi_write
$LN78@stbi_write:
	mov	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv555[rsp], eax
$LN79@stbi_write:
	mov	eax, DWORD PTR tv555[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$28[rsp], eax
; Line 1580
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN40@stbi_write
$LN38@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN40@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN39@stbi_write
; Line 1582
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN80@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv564[rsp], eax
	jmp	SHORT $LN81@stbi_write
$LN80@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv564[rsp], eax
$LN81@stbi_write:
	mov	eax, DWORD PTR tv564[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$28[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$18[rsp], eax
; Line 1583
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR r$19[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR g$20[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	movss	DWORD PTR b$21[rsp], xmm0
; Line 1584
	movss	xmm0, DWORD PTR __real@3e991687
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3f1645a2
	mulss	xmm1, DWORD PTR g$20[rsp]
	addss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3de978d5
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	subss	xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR Y$33[rsp+rax*4], xmm0
; Line 1585
	movss	xmm0, DWORD PTR __real@be2cca2e
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ea99ae9
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3f000000
	mulss	xmm1, DWORD PTR b$21[rsp]
	addss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR U$34[rsp+rax*4], xmm0
; Line 1586
	movss	xmm0, DWORD PTR __real@3f000000
	mulss	xmm0, DWORD PTR r$19[rsp]
	movss	xmm1, DWORD PTR __real@3ed65e89
	mulss	xmm1, DWORD PTR g$20[rsp]
	subss	xmm0, xmm1
	movss	xmm1, DWORD PTR __real@3da685db
	mulss	xmm1, DWORD PTR b$21[rsp]
	subss	xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	movss	DWORD PTR V$35[rsp+rax*4], xmm0
; Line 1587
	jmp	$LN38@stbi_write
$LN39@stbi_write:
; Line 1588
	jmp	$LN35@stbi_write
$LN36@stbi_write:
; Line 1590
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR Y$33[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1591
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR U$34[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1592
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@9@9
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR V$35[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1593
	jmp	$LN32@stbi_write
$LN33@stbi_write:
; Line 1594
	jmp	$LN29@stbi_write
$LN30@stbi_write:
$LN44@stbi_write:
; Line 1598
	lea	r9, OFFSET FLAT:?fillBits@?L@??stbi_write_jpg_core@@9@9
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1602
	mov	dl, 255					; 000000ffH
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1603
	mov	dl, 217					; 000000d9H
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1605
	mov	eax, 1
$LN1@stbi_write:
; Line 1606
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 5352				; 000014e8H
	ret	0
stbi_write_jpg_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dataOff$ = 64
i$ = 68
end0pos$ = 72
nrzeroes$1 = 76
y$ = 80
x$ = 84
j$ = 88
v$2 = 92
nrmarker$3 = 96
EOB$ = 100
tv224 = 104
diff$ = 108
bits$4 = 112
M16zeroes$ = 116
bits$5 = 120
n$ = 124
startpos$6 = 128
lng$7 = 132
tv195 = 136
DU$ = 144
__$ArrayPad$ = 400
s$ = 448
bitBuf$ = 456
bitCnt$ = 464
CDU$ = 472
du_stride$ = 480
fdtbl$ = 488
DC$ = 496
HTDC$ = 504
HTAC$ = 512
stbiw__jpg_processDU PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1329
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1330
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp+2], ax
; Line 1331
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp+2], ax
; Line 1336
	mov	DWORD PTR dataOff$[rsp], 0
	mov	eax, DWORD PTR du_stride$[rsp]
	shl	eax, 3
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN4@stbiw__jpg
$LN2@stbiw__jpg:
	mov	eax, DWORD PTR du_stride$[rsp]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dataOff$[rsp], eax
$LN4@stbiw__jpg:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR dataOff$[rsp], eax
	jge	$LN3@stbiw__jpg
; Line 1337
	mov	eax, DWORD PTR dataOff$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, 6
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, 5
	movsxd	rdx, edx
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [r8+rdx*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, 4
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR dataOff$[rsp]
	add	r9d, 3
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, 2
	movsxd	r10, r10d
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	r11d, DWORD PTR dataOff$[rsp]
	inc	r11d
	movsxd	r11, r11d
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rbx+r11*4]
	movsxd	r11, DWORD PTR dataOff$[rsp]
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [rdi+r11*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], r8
	mov	r8, r10
	mov	rdx, rbx
	mov	rcx, rdi
	call	stbiw__jpg_DCT
; Line 1338
	jmp	$LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1340
	mov	DWORD PTR dataOff$[rsp], 0
	jmp	SHORT $LN7@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR dataOff$[rsp]
	inc	eax
	mov	DWORD PTR dataOff$[rsp], eax
$LN7@stbiw__jpg:
	cmp	DWORD PTR dataOff$[rsp], 8
	jge	$LN6@stbiw__jpg
; Line 1341
	imul	eax, DWORD PTR du_stride$[rsp], 7
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	imul	ecx, DWORD PTR du_stride$[rsp], 6
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	imul	edx, DWORD PTR du_stride$[rsp], 5
	mov	ebx, DWORD PTR dataOff$[rsp]
	add	ebx, edx
	mov	edx, ebx
	movsxd	rdx, edx
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [rbx+rdx*4]
	mov	ebx, DWORD PTR dataOff$[rsp]
	mov	edi, DWORD PTR du_stride$[rsp]
	lea	ebx, DWORD PTR [rbx+rdi*4]
	movsxd	rbx, ebx
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rdi+rbx*4]
	imul	edi, DWORD PTR du_stride$[rsp], 3
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, edi
	mov	edi, r8d
	movsxd	rdi, edi
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [r8+rdi*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	mov	r9d, DWORD PTR du_stride$[rsp]
	lea	r8d, DWORD PTR [r8+r9*2]
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR du_stride$[rsp]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, r9d
	mov	r9d, r10d
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	QWORD PTR tv195[rsp], r9
	movsxd	r10, DWORD PTR dataOff$[rsp]
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], rbx
	mov	r9, rdi
	mov	rax, QWORD PTR tv195[rsp]
	mov	rdx, rax
	mov	rcx, r10
	call	stbiw__jpg_DCT
; Line 1343
	jmp	$LN5@stbiw__jpg
$LN6@stbiw__jpg:
; Line 1345
	mov	DWORD PTR y$[rsp], 0
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stbiw__jpg
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN10@stbiw__jpg:
	cmp	DWORD PTR y$[rsp], 8
	jge	$LN9@stbiw__jpg
; Line 1346
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN13@stbiw__jpg
$LN11@stbiw__jpg:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbiw__jpg:
	cmp	DWORD PTR x$[rsp], 8
	jge	$LN12@stbiw__jpg
; Line 1348
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR du_stride$[rsp]
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 1349
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR CDU$[rsp]
	mov	rbx, QWORD PTR fdtbl$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	mulss	xmm0, DWORD PTR [rbx+rcx*4]
	movss	DWORD PTR v$2[rsp], xmm0
; Line 1352
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR v$2[rsp]
	jbe	SHORT $LN32@stbiw__jpg
	movss	xmm0, DWORD PTR v$2[rsp]
	subss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
	jmp	SHORT $LN33@stbiw__jpg
$LN32@stbiw__jpg:
	movss	xmm0, DWORD PTR v$2[rsp]
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR tv224[rsp], xmm0
$LN33@stbiw__jpg:
	cvttss2si eax, DWORD PTR tv224[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	lea	rdx, OFFSET FLAT:stbiw__jpg_ZigZag
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR DU$[rsp+rcx*4], eax
; Line 1353
	jmp	$LN11@stbiw__jpg
$LN12@stbiw__jpg:
; Line 1354
	jmp	$LN8@stbiw__jpg
$LN9@stbiw__jpg:
; Line 1357
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR DC$[rsp]
	mov	eax, DWORD PTR DU$[rsp+rax]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 1358
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN26@stbiw__jpg
; Line 1359
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTDC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1360
	jmp	SHORT $LN27@stbiw__jpg
$LN26@stbiw__jpg:
; Line 1362
	lea	rdx, QWORD PTR bits$4[rsp]
	mov	ecx, DWORD PTR diff$[rsp]
	call	stbiw__jpg_calcBits
; Line 1363
	mov	eax, 2
	imul	rax, rax, 1
	movzx	eax, WORD PTR bits$4[rsp+rax]
	mov	rcx, QWORD PTR HTDC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1364
	lea	r9, QWORD PTR bits$4[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
$LN27@stbiw__jpg:
; Line 1367
	mov	DWORD PTR end0pos$[rsp], 63		; 0000003fH
; Line 1368
	jmp	SHORT $LN16@stbiw__jpg
$LN14@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	dec	eax
	mov	DWORD PTR end0pos$[rsp], eax
$LN16@stbiw__jpg:
	cmp	DWORD PTR end0pos$[rsp], 0
	jle	SHORT $LN15@stbiw__jpg
	movsxd	rax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN15@stbiw__jpg
; Line 1369
	jmp	SHORT $LN14@stbiw__jpg
$LN15@stbiw__jpg:
; Line 1371
	cmp	DWORD PTR end0pos$[rsp], 0
	jne	SHORT $LN28@stbiw__jpg
; Line 1372
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1373
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
	jmp	$LN1@stbiw__jpg
$LN28@stbiw__jpg:
; Line 1375
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN19@stbiw__jpg
$LN17@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	$LN18@stbiw__jpg
; Line 1376
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR startpos$6[rsp], eax
; Line 1379
	jmp	SHORT $LN22@stbiw__jpg
$LN20@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbiw__jpg:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN21@stbiw__jpg
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN21@stbiw__jpg
; Line 1380
	jmp	SHORT $LN20@stbiw__jpg
$LN21@stbiw__jpg:
; Line 1381
	mov	eax, DWORD PTR startpos$6[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nrzeroes$1[rsp], eax
; Line 1382
	cmp	DWORD PTR nrzeroes$1[rsp], 16
	jl	SHORT $LN29@stbiw__jpg
; Line 1383
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	sar	eax, 4
	mov	DWORD PTR lng$7[rsp], eax
; Line 1385
	mov	DWORD PTR nrmarker$3[rsp], 1
	jmp	SHORT $LN25@stbiw__jpg
$LN23@stbiw__jpg:
	mov	eax, DWORD PTR nrmarker$3[rsp]
	inc	eax
	mov	DWORD PTR nrmarker$3[rsp], eax
$LN25@stbiw__jpg:
	mov	eax, DWORD PTR lng$7[rsp]
	cmp	DWORD PTR nrmarker$3[rsp], eax
	jg	SHORT $LN24@stbiw__jpg
; Line 1386
	lea	r9, QWORD PTR M16zeroes$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
	jmp	SHORT $LN23@stbiw__jpg
$LN24@stbiw__jpg:
; Line 1387
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	and	eax, 15
	mov	DWORD PTR nrzeroes$1[rsp], eax
$LN29@stbiw__jpg:
; Line 1389
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rdx, QWORD PTR bits$5[rsp]
	mov	ecx, DWORD PTR DU$[rsp+rax*4]
	call	stbiw__jpg_calcBits
; Line 1390
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	shl	eax, 4
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	ecx, WORD PTR bits$5[rsp+rcx]
	add	eax, ecx
	cdqe
	mov	rcx, QWORD PTR HTAC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1391
	lea	r9, QWORD PTR bits$5[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
; Line 1392
	jmp	$LN17@stbiw__jpg
$LN18@stbiw__jpg:
; Line 1393
	cmp	DWORD PTR end0pos$[rsp], 63		; 0000003fH
	je	SHORT $LN30@stbiw__jpg
; Line 1394
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__jpg_writeBits
$LN30@stbiw__jpg:
; Line 1396
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
$LN1@stbiw__jpg:
; Line 1397
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rbx
	ret	0
stbiw__jpg_processDU ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp1$ = 0
tv66 = 4
tv69 = 8
tv140 = 12
val$ = 32
bits$ = 40
stbiw__jpg_calcBits PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1319
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1320
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN5@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	neg	eax
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN6@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN6@stbiw__jpg:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tmp1$[rsp], eax
; Line 1321
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN7@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN8@stbiw__jpg
$LN7@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR val$[rsp], eax
; Line 1322
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN2@stbiw__jpg:
; Line 1323
	mov	eax, DWORD PTR tmp1$[rsp]
	sar	eax, 1
	mov	DWORD PTR tmp1$[rsp], eax
	cmp	DWORD PTR tmp1$[rsp], 0
	je	SHORT $LN3@stbiw__jpg
; Line 1324
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	inc	ax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1325
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1326
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 1
	mov	DWORD PTR tv140[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv140[rsp]
	shl	eax, cl
	dec	eax
	mov	ecx, DWORD PTR val$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1327
	add	rsp, 24
	ret	0
stbiw__jpg_calcBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp10$ = 0
tmp12$ = 4
tmp11$ = 8
d0$ = 12
d2$ = 16
d4$ = 20
d6$ = 24
tmp13$ = 28
tmp7$ = 32
d7$ = 36
d1$ = 40
d5$ = 44
d3$ = 48
tmp0$ = 52
tmp3$ = 56
tmp1$ = 60
tmp2$ = 64
z1$ = 68
tmp5$ = 72
tmp6$ = 76
z5$ = 80
z3$ = 84
z13$ = 88
z2$ = 92
z11$ = 96
z4$ = 100
tmp4$ = 104
d0p$ = 128
d1p$ = 136
d2p$ = 144
d3p$ = 152
d4p$ = 160
d5p$ = 168
d6p$ = 176
d7p$ = 184
stbiw__jpg_DCT PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1271
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1272
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d0$[rsp], xmm0
	mov	rax, QWORD PTR d1p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d1$[rsp], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d2$[rsp], xmm0
	mov	rax, QWORD PTR d3p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d3$[rsp], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d4$[rsp], xmm0
	mov	rax, QWORD PTR d5p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d5$[rsp], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d6$[rsp], xmm0
	mov	rax, QWORD PTR d7p$[rsp]
	movss	xmm0, DWORD PTR [rax]
	movss	DWORD PTR d7$[rsp], xmm0
; Line 1275
	movss	xmm0, DWORD PTR d0$[rsp]
	addss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp0$[rsp], xmm0
; Line 1276
	movss	xmm0, DWORD PTR d0$[rsp]
	subss	xmm0, DWORD PTR d7$[rsp]
	movss	DWORD PTR tmp7$[rsp], xmm0
; Line 1277
	movss	xmm0, DWORD PTR d1$[rsp]
	addss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp1$[rsp], xmm0
; Line 1278
	movss	xmm0, DWORD PTR d1$[rsp]
	subss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR tmp6$[rsp], xmm0
; Line 1279
	movss	xmm0, DWORD PTR d2$[rsp]
	addss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp2$[rsp], xmm0
; Line 1280
	movss	xmm0, DWORD PTR d2$[rsp]
	subss	xmm0, DWORD PTR d5$[rsp]
	movss	DWORD PTR tmp5$[rsp], xmm0
; Line 1281
	movss	xmm0, DWORD PTR d3$[rsp]
	addss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp3$[rsp], xmm0
; Line 1282
	movss	xmm0, DWORD PTR d3$[rsp]
	subss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR tmp4$[rsp], xmm0
; Line 1285
	movss	xmm0, DWORD PTR tmp0$[rsp]
	addss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1286
	movss	xmm0, DWORD PTR tmp0$[rsp]
	subss	xmm0, DWORD PTR tmp3$[rsp]
	movss	DWORD PTR tmp13$[rsp], xmm0
; Line 1287
	movss	xmm0, DWORD PTR tmp1$[rsp]
	addss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1288
	movss	xmm0, DWORD PTR tmp1$[rsp]
	subss	xmm0, DWORD PTR tmp2$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1290
	movss	xmm0, DWORD PTR tmp10$[rsp]
	addss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d0$[rsp], xmm0
; Line 1291
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp11$[rsp]
	movss	DWORD PTR d4$[rsp], xmm0
; Line 1293
	movss	xmm0, DWORD PTR tmp12$[rsp]
	addss	xmm0, DWORD PTR tmp13$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z1$[rsp], xmm0
; Line 1294
	movss	xmm0, DWORD PTR tmp13$[rsp]
	addss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d2$[rsp], xmm0
; Line 1295
	movss	xmm0, DWORD PTR tmp13$[rsp]
	subss	xmm0, DWORD PTR z1$[rsp]
	movss	DWORD PTR d6$[rsp], xmm0
; Line 1298
	movss	xmm0, DWORD PTR tmp4$[rsp]
	addss	xmm0, DWORD PTR tmp5$[rsp]
	movss	DWORD PTR tmp10$[rsp], xmm0
; Line 1299
	movss	xmm0, DWORD PTR tmp5$[rsp]
	addss	xmm0, DWORD PTR tmp6$[rsp]
	movss	DWORD PTR tmp11$[rsp], xmm0
; Line 1300
	movss	xmm0, DWORD PTR tmp6$[rsp]
	addss	xmm0, DWORD PTR tmp7$[rsp]
	movss	DWORD PTR tmp12$[rsp], xmm0
; Line 1303
	movss	xmm0, DWORD PTR tmp10$[rsp]
	subss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3ec3ef15
	movss	DWORD PTR z5$[rsp], xmm0
; Line 1304
	movss	xmm0, DWORD PTR tmp10$[rsp]
	mulss	xmm0, DWORD PTR __real@3f0a8bd4
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z2$[rsp], xmm0
; Line 1305
	movss	xmm0, DWORD PTR tmp12$[rsp]
	mulss	xmm0, DWORD PTR __real@3fa73d75
	addss	xmm0, DWORD PTR z5$[rsp]
	movss	DWORD PTR z4$[rsp], xmm0
; Line 1306
	movss	xmm0, DWORD PTR tmp11$[rsp]
	mulss	xmm0, DWORD PTR __real@3f3504f3
	movss	DWORD PTR z3$[rsp], xmm0
; Line 1308
	movss	xmm0, DWORD PTR tmp7$[rsp]
	addss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z11$[rsp], xmm0
; Line 1309
	movss	xmm0, DWORD PTR tmp7$[rsp]
	subss	xmm0, DWORD PTR z3$[rsp]
	movss	DWORD PTR z13$[rsp], xmm0
; Line 1311
	movss	xmm0, DWORD PTR z13$[rsp]
	addss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d5p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1312
	movss	xmm0, DWORD PTR z13$[rsp]
	subss	xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d3p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1313
	movss	xmm0, DWORD PTR z11$[rsp]
	addss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d1p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1314
	movss	xmm0, DWORD PTR z11$[rsp]
	subss	xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d7p$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1316
	mov	rax, QWORD PTR d0p$[rsp]
	movss	xmm0, DWORD PTR d0$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	movss	xmm0, DWORD PTR d2$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	movss	xmm0, DWORD PTR d4$[rsp]
	movss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	movss	xmm0, DWORD PTR d6$[rsp]
	movss	DWORD PTR [rax], xmm0
; Line 1317
	add	rsp, 120				; 00000078H
	ret	0
stbiw__jpg_DCT ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
bitCnt$ = 36
bitBuf$ = 40
s$ = 64
bitBufP$ = 72
bitCntP$ = 80
bs$ = 88
stbiw__jpg_writeBits PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1254
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1255
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitBuf$[rsp], eax
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1256
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1257
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 24
	sub	ecx, DWORD PTR bitCnt$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitBuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitBuf$[rsp], eax
$LN2@stbiw__jpg:
; Line 1258
	cmp	DWORD PTR bitCnt$[rsp], 8
	jl	SHORT $LN3@stbiw__jpg
; Line 1259
	mov	eax, DWORD PTR bitBuf$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c$1[rsp], al
; Line 1260
	movzx	edx, BYTE PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
; Line 1261
	movzx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@stbiw__jpg
; Line 1262
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__putc
$LN4@stbiw__jpg:
; Line 1264
	mov	eax, DWORD PTR bitBuf$[rsp]
	shl	eax, 8
	mov	DWORD PTR bitBuf$[rsp], eax
; Line 1265
	mov	eax, DWORD PTR bitCnt$[rsp]
	sub	eax, 8
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1266
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1267
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	ecx, DWORD PTR bitBuf$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1268
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1269
	add	rsp, 56					; 00000038H
	ret	0
stbiw__jpg_writeBits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$ = 64
filter_type$1 = 72
zlen$ = 76
j$ = 80
force_filter$ = 84
i$2 = 88
est$3 = 92
best_filter$4 = 96
line_buffer$ = 104
filt$ = 112
best_filter_val$5 = 120
out$ = 128
zlib$ = 136
tv72 = 144
tv85 = 152
tv257 = 160
$T6 = 176
$T7 = 208
$T8 = 240
$T9 = 272
$T10 = 304
$T11 = 336
$T12 = 368
$T13 = 400
$T14 = 432
$T15 = 464
$T16 = 496
$T17 = 528
$T18 = 560
$T19 = 592
ctype$ = 624
sig$ = 648
__$ArrayPad$ = 656
pixels$ = 704
stride_bytes$ = 712
x$ = 720
y$ = 728
n$ = 736
out_len$ = 744
stbi_write_png_to_mem PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1130
$LN23:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 680				; 000002a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1131
	mov	eax, DWORD PTR stbi_write_force_png_filter
	mov	DWORD PTR force_filter$[rsp], eax
; Line 1132
	mov	DWORD PTR ctype$[rsp], -1
	mov	DWORD PTR ctype$[rsp+4], 0
	mov	DWORD PTR ctype$[rsp+8], 4
	mov	DWORD PTR ctype$[rsp+12], 2
	mov	DWORD PTR ctype$[rsp+16], 6
; Line 1133
	mov	BYTE PTR sig$[rsp], 137			; 00000089H
	mov	BYTE PTR sig$[rsp+1], 80		; 00000050H
	mov	BYTE PTR sig$[rsp+2], 78		; 0000004eH
	mov	BYTE PTR sig$[rsp+3], 71		; 00000047H
	mov	BYTE PTR sig$[rsp+4], 13
	mov	BYTE PTR sig$[rsp+5], 10
	mov	BYTE PTR sig$[rsp+6], 26
	mov	BYTE PTR sig$[rsp+7], 10
; Line 1138
	cmp	DWORD PTR stride_bytes$[rsp], 0
	jne	SHORT $LN11@stbi_write
; Line 1139
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR stride_bytes$[rsp], eax
$LN11@stbi_write:
; Line 1141
	cmp	DWORD PTR force_filter$[rsp], 5
	jl	SHORT $LN12@stbi_write
; Line 1142
	mov	DWORD PTR force_filter$[rsp], -1
$LN12@stbi_write:
; Line 1145
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	cdqe
	mov	QWORD PTR tv72[rsp], rax
	lea	rcx, OFFSET FLAT:$SG136656
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1145				; 00000479H
	lea	r8, OFFSET FLAT:$SG136657
	mov	edx, 137				; 00000089H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv72[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
	mov	QWORD PTR filt$[rsp], rax
	cmp	QWORD PTR filt$[rsp], 0
	jne	SHORT $LN13@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN13@stbi_write:
; Line 1146
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	QWORD PTR tv85[rsp], rax
	lea	rcx, OFFSET FLAT:$SG136659
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1146				; 0000047aH
	lea	r8, OFFSET FLAT:$SG136660
	mov	edx, 138				; 0000008aH
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv85[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccuserallocator_
	mov	QWORD PTR line_buffer$[rsp], rax
	cmp	QWORD PTR line_buffer$[rsp], 0
	jne	SHORT $LN14@stbi_write
	lea	rax, OFFSET FLAT:$SG136662
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1146				; 0000047aH
	lea	r8, OFFSET FLAT:$SG136663
	mov	edx, 139				; 0000008bH
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR filt$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN14@stbi_write:
; Line 1147
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi_write
; Line 1149
	cmp	DWORD PTR force_filter$[rsp], -1
	jle	SHORT $LN15@stbi_write
; Line 1150
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
; Line 1151
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	stbiw__encode_png_line
; Line 1152
	jmp	$LN16@stbi_write
$LN15@stbi_write:
; Line 1153
	mov	DWORD PTR best_filter$4[rsp], 0
	mov	DWORD PTR best_filter_val$5[rsp], 2147483647 ; 7fffffffH
; Line 1154
	mov	DWORD PTR filter_type$1[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR filter_type$1[rsp]
	inc	eax
	mov	DWORD PTR filter_type$1[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR filter_type$1[rsp], 5
	jge	$LN6@stbi_write
; Line 1155
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	stbiw__encode_png_line
; Line 1158
	mov	DWORD PTR est$3[rsp], 0
; Line 1159
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN9@stbi_write
; Line 1160
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	abs
	mov	ecx, DWORD PTR est$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR est$3[rsp], eax
; Line 1161
	jmp	SHORT $LN8@stbi_write
$LN9@stbi_write:
; Line 1162
	mov	eax, DWORD PTR best_filter_val$5[rsp]
	cmp	DWORD PTR est$3[rsp], eax
	jge	SHORT $LN17@stbi_write
; Line 1163
	mov	eax, DWORD PTR est$3[rsp]
	mov	DWORD PTR best_filter_val$5[rsp], eax
; Line 1164
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR best_filter$4[rsp], eax
$LN17@stbi_write:
; Line 1166
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1167
	mov	eax, DWORD PTR best_filter$4[rsp]
	cmp	DWORD PTR filter_type$1[rsp], eax
	je	SHORT $LN18@stbi_write
; Line 1168
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	stbiw__encode_png_line
; Line 1169
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
$LN18@stbi_write:
$LN16@stbi_write:
; Line 1173
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR filt$[rsp]
	movzx	edx, BYTE PTR filter_type$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 1174
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR n$[rsp]
	inc	ecx
	mov	edx, DWORD PTR j$[rsp]
	imul	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR filt$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	mov	r8, rax
	mov	rdx, QWORD PTR line_buffer$[rsp]
	call	memmove
; Line 1175
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1176
	lea	rax, OFFSET FLAT:$SG136668
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1176				; 00000498H
	lea	r8, OFFSET FLAT:$SG136669
	mov	edx, 140				; 0000008cH
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR line_buffer$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
; Line 1177
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR stbi_write_png_compression_level
	lea	r8, QWORD PTR zlen$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR filt$[rsp]
	call	stbi_zlib_compress
	mov	QWORD PTR zlib$[rsp], rax
; Line 1178
	lea	rax, OFFSET FLAT:$SG136670
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1178				; 0000049aH
	lea	r8, OFFSET FLAT:$SG136671
	mov	edx, 141				; 0000008dH
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR filt$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
; Line 1179
	cmp	QWORD PTR zlib$[rsp], 0
	jne	SHORT $LN19@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN19@stbi_write:
; Line 1182
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	cdqe
	mov	QWORD PTR tv257[rsp], rax
	lea	rcx, OFFSET FLAT:$SG136673
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 1182				; 0000049eH
	lea	r8, OFFSET FLAT:$SG136674
	mov	edx, 142				; 0000008eH
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv257[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
	mov	QWORD PTR out$[rsp], rax
; Line 1183
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN20@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN20@stbi_write:
; Line 1184
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1186
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
; Line 1187
	mov	r8d, 8
	lea	rdx, QWORD PTR sig$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 8
	mov	QWORD PTR o$[rsp], rax
; Line 1188
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 13
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1189
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG136676
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG136677
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG136678
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG136679
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1191
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1192
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 8
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1193
	movsxd	rax, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR ctype$[rsp+rax*4]
	and	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1194
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1195
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1196
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1197
	mov	edx, 13
	lea	rcx, QWORD PTR o$[rsp]
	call	stbiw__wpcrc
; Line 1199
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1200
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG136680
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG136681
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG136682
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG136683
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1201
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR zlib$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
; Line 1202
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
; Line 1203
	lea	rax, OFFSET FLAT:$SG136684
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1203				; 000004b3H
	lea	r8, OFFSET FLAT:$SG136685
	mov	edx, 143				; 0000008fH
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR zlib$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
; Line 1204
	mov	edx, DWORD PTR zlen$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	stbiw__wpcrc
; Line 1206
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1207
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG136686
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG136687
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG136688
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG136689
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1208
	xor	edx, edx
	lea	rcx, QWORD PTR o$[rsp]
	call	stbiw__wpcrc
; Line 1210
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR o$[rsp], rax
	je	SHORT $LN22@stbi_write
	mov	r8d, 1210				; 000004baH
	lea	rdx, OFFSET FLAT:$SG136690
	lea	rcx, OFFSET FLAT:$SG136691
	call	_wassert
	xor	eax, eax
$LN22@stbi_write:
; Line 1212
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi_write:
; Line 1213
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 680				; 000002a8H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_png_to_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 40
signed_stride$ = 48
tv87 = 52
tv188 = 56
type$ = 60
tv72 = 64
tv78 = 68
tv161 = 72
tv275 = 76
tv256 = 80
tv307 = 84
tv65 = 88
mymap$ = 96
pixels$ = 128
stride_bytes$ = 136
width$ = 144
height$ = 152
y$ = 160
n$ = 168
filter_type$ = 176
line_buffer$ = 184
stbiw__encode_png_line PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1094
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1097
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN41@stbiw__enc
	lea	rax, OFFSET FLAT:?mapping@?1??stbiw__encode_png_line@@9@9
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN42@stbiw__enc
$LN41@stbiw__enc:
	lea	rax, OFFSET FLAT:?firstmap@?1??stbiw__encode_png_line@@9@9
	mov	QWORD PTR tv65[rsp], rax
$LN42@stbiw__enc:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR mymap$[rsp], rax
; Line 1099
	movsxd	rax, DWORD PTR filter_type$[rsp]
	mov	rcx, QWORD PTR mymap$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR type$[rsp], eax
; Line 1100
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN43@stbiw__enc
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN44@stbiw__enc
$LN43@stbiw__enc:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN44@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	imul	eax, DWORD PTR tv72[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
; Line 1101
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN45@stbiw__enc
	mov	eax, DWORD PTR stride_bytes$[rsp]
	neg	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN46@stbiw__enc
$LN45@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN46@stbiw__enc:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR signed_stride$[rsp], eax
; Line 1103
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN27@stbiw__enc
; Line 1104
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	memcpy
; Line 1105
	jmp	$LN1@stbiw__enc
$LN27@stbiw__enc:
; Line 1109
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__enc
$LN2@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__enc:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbiw__enc
; Line 1110
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	dec	eax
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 5
	ja	$LN5@stbiw__enc
	movsxd	rax, DWORD PTR tv87[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN48@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN28@stbiw__enc:
; Line 1111
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN29@stbiw__enc:
; Line 1112
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN30@stbiw__enc:
; Line 1113
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN31@stbiw__enc:
; Line 1114
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv161[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv161[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN32@stbiw__enc:
; Line 1115
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN33@stbiw__enc:
; Line 1116
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbiw__enc:
; Line 1118
	jmp	$LN2@stbiw__enc
$LN3@stbiw__enc:
; Line 1119
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	dec	eax
	mov	DWORD PTR tv188[rsp], eax
	cmp	DWORD PTR tv188[rsp], 5
	ja	$LN7@stbiw__enc
	movsxd	rax, DWORD PTR tv188[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN47@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN34@stbiw__enc:
; Line 1120
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN11@stbiw__enc
$LN9@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN11@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN10@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN9@stbiw__enc
$LN10@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN35@stbiw__enc:
; Line 1121
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN14@stbiw__enc
$LN12@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN14@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN13@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbiw__enc
$LN13@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN36@stbiw__enc:
; Line 1122
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN17@stbiw__enc
$LN15@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN16@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbiw__enc
$LN16@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN37@stbiw__enc:
; Line 1123
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN20@stbiw__enc
$LN18@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN19@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv256[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR n$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR n$[rsp]
	mov	r9d, DWORD PTR i$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR z$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv275[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv275[rsp]
	call	stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv256[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN18@stbiw__enc
$LN19@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN38@stbiw__enc:
; Line 1124
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN23@stbiw__enc
$LN21@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN23@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN22@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN21@stbiw__enc
$LN22@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN39@stbiw__enc:
; Line 1125
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN26@stbiw__enc
$LN24@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN25@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv307[rsp], eax
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv307[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbiw__enc
$LN25@stbiw__enc:
$LN7@stbiw__enc:
$LN1@stbiw__enc:
; Line 1127
	add	rsp, 120				; 00000078H
	ret	0
	npad	1
$LN48@stbiw__enc:
	DD	$LN28@stbiw__enc
	DD	$LN29@stbiw__enc
	DD	$LN30@stbiw__enc
	DD	$LN31@stbiw__enc
	DD	$LN32@stbiw__enc
	DD	$LN33@stbiw__enc
$LN47@stbiw__enc:
	DD	$LN34@stbiw__enc
	DD	$LN35@stbiw__enc
	DD	$LN36@stbiw__enc
	DD	$LN37@stbiw__enc
	DD	$LN38@stbiw__enc
	DD	$LN39@stbiw__enc
stbiw__encode_png_line ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
stbiw__paeth PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1085
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1086
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 1087
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN2@stbiw__pae:
; Line 1088
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbiw__pae
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN3@stbiw__pae:
; Line 1089
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 255				; 000000ffH
$LN1@stbiw__pae:
; Line 1090
	add	rsp, 56					; 00000038H
	ret	0
stbiw__paeth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
crc$ = 32
data$ = 64
len$ = 72
stbiw__wpcrc PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1079
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1080
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 4
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rcx
	mov	rcx, rdx
	sub	rcx, 4
	mov	edx, eax
	call	stbiw__crc32
	mov	DWORD PTR crc$[rsp], eax
; Line 1081
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1082
	add	rsp, 56					; 00000038H
	ret	0
stbiw__wpcrc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
crc$ = 4
buffer$ = 32
len$ = 40
stbiw__crc32 PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1026
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1066
	mov	DWORD PTR crc$[rsp], -1			; ffffffffH
; Line 1068
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__crc
$LN2@stbiw__crc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__crc:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__crc
; Line 1069
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR crc$[rsp]
	and	edx, 255				; 000000ffH
	xor	ecx, edx
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?crc_table@?1??stbiw__crc32@@9@9
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	DWORD PTR crc$[rsp], eax
	jmp	SHORT $LN2@stbiw__crc
$LN3@stbiw__crc:
; Line 1070
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
; Line 1072
	add	rsp, 24
	ret	0
stbiw__crc32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
bitcount$ = 56
j$ = 60
bitbuf$ = 64
i$ = 68
h$1 = 72
blocklen$2 = 76
hash_table$ = 80
best$3 = 88
s1$4 = 92
s2$5 = 96
hlist$6 = 104
n$7 = 112
d$8 = 116
blocklen$9 = 120
tv195 = 124
d$10 = 128
tv318 = 132
tv649 = 136
bestloc$11 = 144
tv1104 = 152
tv1109 = 156
e$12 = 160
tv1276 = 164
tv595 = 168
tv417 = 176
tv418 = 184
tv89 = 192
tv148 = 200
tv211 = 208
tv242 = 216
tv276 = 224
tv336 = 232
tv419 = 240
tv517 = 248
tv557 = 256
tv585 = 264
tv606 = 272
tv633 = 280
tv664 = 288
tv693 = 296
tv723 = 304
tv753 = 312
tv781 = 320
tv817 = 328
tv847 = 336
tv876 = 344
tv906 = 352
$T13 = 368
$T14 = 400
$T15 = 432
$T16 = 464
$T17 = 496
$T18 = 528
data$ = 592
data_len$ = 600
out_len$ = 608
quality$ = 616
stbi_zlib_compress PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 897
$LN94:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 568				; 00000238H
; Line 906
	mov	DWORD PTR bitbuf$[rsp], 0
; Line 907
	mov	DWORD PTR bitcount$[rsp], 0
; Line 908
	mov	QWORD PTR out$[rsp], 0
; Line 909
	lea	rax, OFFSET FLAT:$SG136444
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 909				; 0000038dH
	lea	r8, OFFSET FLAT:$SG136445
	mov	edx, 134				; 00000086H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 131072				; 00020000H
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccuserallocator_
	mov	QWORD PTR hash_table$[rsp], rax
; Line 910
	cmp	QWORD PTR hash_table$[rsp], 0
	jne	SHORT $LN35@stbi_zlib_
; Line 911
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN35@stbi_zlib_:
; Line 912
	cmp	DWORD PTR quality$[rsp], 5
	jge	SHORT $LN36@stbi_zlib_
	mov	DWORD PTR quality$[rsp], 5
$LN36@stbi_zlib_:
; Line 914
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN50@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN50@stbi_zlib_
	mov	QWORD PTR tv89[rsp], 0
	jmp	SHORT $LN51@stbi_zlib_
$LN50@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv89[rsp], rax
$LN51@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 120			; 00000078H
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 915
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN52@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN52@stbi_zlib_
	mov	QWORD PTR tv148[rsp], 0
	jmp	SHORT $LN53@stbi_zlib_
$LN52@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv148[rsp], rax
$LN53@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 94			; 0000005eH
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 916
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1104[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1104[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 917
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1109[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1109[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 2
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 919
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_zlib_
$LN2@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN3@stbi_zlib_
; Line 920
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stbi_zlib_
$LN3@stbi_zlib_:
; Line 922
	mov	DWORD PTR i$[rsp], 0
$LN5@stbi_zlib_:
; Line 923
	mov	eax, DWORD PTR data_len$[rsp]
	sub	eax, 3
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi_zlib_
; Line 925
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
	mov	DWORD PTR best$3[rsp], 3
; Line 926
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 927
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 928
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN54@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv195[rsp], eax
	jmp	SHORT $LN55@stbi_zlib_
$LN54@stbi_zlib_:
	mov	DWORD PTR tv195[rsp], 0
$LN55@stbi_zlib_:
	mov	eax, DWORD PTR tv195[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 929
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi_zlib_
$LN7@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi_zlib_
; Line 930
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32768				; 00008000H
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	$LN37@stbi_zlib_
; Line 931
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv211[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv211[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	stbiw__zlib_countm
	mov	DWORD PTR d$10[rsp], eax
; Line 932
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR d$10[rsp], eax
	jl	SHORT $LN38@stbi_zlib_
	mov	eax, DWORD PTR d$10[rsp]
	mov	DWORD PTR best$3[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR bestloc$11[rsp], rax
$LN38@stbi_zlib_:
$LN37@stbi_zlib_:
; Line 934
	jmp	$LN7@stbi_zlib_
$LN8@stbi_zlib_:
; Line 936
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN39@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	shl	edx, 1
	cmp	DWORD PTR [rax+rcx-8], edx
	jne	SHORT $LN39@stbi_zlib_
; Line 937
	movsxd	rax, DWORD PTR quality$[rsp]
	shl	rax, 3
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR quality$[rsp]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdi+rcx*8]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	QWORD PTR tv242[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR tv242[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	memmove
; Line 938
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN39@stbi_zlib_:
; Line 940
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN56@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN56@stbi_zlib_
	mov	QWORD PTR tv276[rsp], 0
	jmp	SHORT $LN57@stbi_zlib_
$LN56@stbi_zlib_:
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 8
	mov	edx, 1
	mov	rcx, rax
	call	stbiw__sbgrowf
	mov	QWORD PTR tv276[rsp], rax
$LN57@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	edi, 4
	imul	rdi, rdi, 1
	movsxd	rdx, DWORD PTR [rdx+rdi-8]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdi+rcx*8]
	mov	QWORD PTR [rcx+rdx*8], rax
	mov	eax, 4
	imul	rax, rax, 1
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	rdi, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 942
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN40@stbi_zlib_
; Line 944
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	rcx, rax
	call	stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
; Line 945
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 946
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN58@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv318[rsp], eax
	jmp	SHORT $LN59@stbi_zlib_
$LN58@stbi_zlib_:
	mov	DWORD PTR tv318[rsp], 0
$LN59@stbi_zlib_:
	mov	eax, DWORD PTR tv318[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 947
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN12@stbi_zlib_
$LN10@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN12@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN11@stbi_zlib_
; Line 948
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32767				; 00007fffH
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN41@stbi_zlib_
; Line 949
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv336[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv336[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	stbiw__zlib_countm
	mov	DWORD PTR e$12[rsp], eax
; Line 950
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR e$12[rsp], eax
	jle	SHORT $LN42@stbi_zlib_
; Line 951
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 952
	jmp	SHORT $LN11@stbi_zlib_
$LN42@stbi_zlib_:
$LN41@stbi_zlib_:
; Line 955
	jmp	$LN10@stbi_zlib_
$LN11@stbi_zlib_:
$LN40@stbi_zlib_:
; Line 958
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN43@stbi_zlib_
; Line 959
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR bestloc$11[rsp]
	mov	DWORD PTR d$8[rsp], eax
; Line 960
	cmp	DWORD PTR d$8[rsp], 32767		; 00007fffH
	jg	SHORT $LN60@stbi_zlib_
	cmp	DWORD PTR best$3[rsp], 258		; 00000102H
	jle	SHORT $LN61@stbi_zlib_
$LN60@stbi_zlib_:
	mov	r8d, 960				; 000003c0H
	lea	rdx, OFFSET FLAT:$SG136456
	lea	rcx, OFFSET FLAT:$SG136457
	call	_wassert
	xor	eax, eax
$LN61@stbi_zlib_:
; Line 961
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi_zlib_
$LN13@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR best$3[rsp], eax
	jle	SHORT $LN14@stbi_zlib_
	jmp	SHORT $LN13@stbi_zlib_
$LN14@stbi_zlib_:
; Line 962
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 143				; 0000008fH
	jg	SHORT $LN66@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 305				; 00000131H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv419[rsp], rax
	jmp	$LN67@stbi_zlib_
$LN66@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 255				; 000000ffH
	jg	SHORT $LN64@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 513				; 00000201H
	mov	edx, 9
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv418[rsp], rax
	jmp	$LN65@stbi_zlib_
$LN64@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 279				; 00000117H
	jg	SHORT $LN62@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	edx, 7
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv417[rsp], rax
	jmp	SHORT $LN63@stbi_zlib_
$LN62@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 169				; 000000a9H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv417[rsp], rax
$LN63@stbi_zlib_:
	mov	rax, QWORD PTR tv417[rsp]
	mov	QWORD PTR tv418[rsp], rax
$LN65@stbi_zlib_:
	mov	rax, QWORD PTR tv418[rsp]
	mov	QWORD PTR tv419[rsp], rax
$LN67@stbi_zlib_:
; Line 963
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN45@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR best$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN45@stbi_zlib_:
; Line 964
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi_zlib_
$LN16@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR d$8[rsp], eax
	jle	SHORT $LN17@stbi_zlib_
	jmp	SHORT $LN16@stbi_zlib_
$LN17@stbi_zlib_:
; Line 965
	mov	edx, 5
	mov	ecx, DWORD PTR j$[rsp]
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 5
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 966
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN46@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@9
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR d$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN46@stbi_zlib_:
; Line 967
	mov	eax, DWORD PTR best$3[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
; Line 968
	jmp	$LN44@stbi_zlib_
$LN43@stbi_zlib_:
; Line 969
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	SHORT $LN68@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv517[rsp], rax
	jmp	SHORT $LN69@stbi_zlib_
$LN68@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv517[rsp], rax
$LN69@stbi_zlib_:
; Line 970
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN44@stbi_zlib_:
; Line 972
	jmp	$LN5@stbi_zlib_
$LN6@stbi_zlib_:
; Line 974
	jmp	SHORT $LN21@stbi_zlib_
$LN19@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN20@stbi_zlib_
; Line 975
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	SHORT $LN70@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv557[rsp], rax
	jmp	SHORT $LN71@stbi_zlib_
$LN70@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv557[rsp], rax
$LN71@stbi_zlib_:
	jmp	$LN19@stbi_zlib_
$LN20@stbi_zlib_:
; Line 976
	mov	edx, 7
	xor	ecx, ecx
	call	stbiw__zlib_bitrev
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN22@stbi_zlib_:
; Line 978
	cmp	DWORD PTR bitcount$[rsp], 0
	je	SHORT $LN23@stbi_zlib_
; Line 979
	mov	eax, DWORD PTR bitcount$[rsp]
	xor	ecx, ecx
	mov	DWORD PTR tv1276[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1276[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN22@stbi_zlib_
$LN23@stbi_zlib_:
; Line 981
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN26@stbi_zlib_
$LN24@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	$LN25@stbi_zlib_
; Line 982
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN72@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, 8
	mov	QWORD PTR tv585[rsp], rax
	lea	rcx, OFFSET FLAT:$SG136460
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 982				; 000003d6H
	lea	r8, OFFSET FLAT:$SG136461
	mov	edx, 135				; 00000087H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tv585[rsp]
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
	mov	DWORD PTR tv595[rsp], 0
	jmp	SHORT $LN73@stbi_zlib_
$LN72@stbi_zlib_:
	mov	DWORD PTR tv595[rsp], 0
$LN73@stbi_zlib_:
	jmp	$LN24@stbi_zlib_
$LN25@stbi_zlib_:
; Line 983
	lea	rax, OFFSET FLAT:$SG136462
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 983				; 000003d7H
	lea	r8, OFFSET FLAT:$SG136463
	mov	edx, 136				; 00000088H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hash_table$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccuserallocator_
; Line 986
	mov	eax, 4
	imul	rax, rax, 1
	mov	QWORD PTR tv606[rsp], rax
	mov	ecx, DWORD PTR data_len$[rsp]
	add	ecx, 32766				; 00007ffeH
	mov	eax, ecx
	cdq
	mov	ecx, 32767				; 00007fffH
	idiv	ecx
	imul	eax, eax, 5
	mov	ecx, DWORD PTR data_len$[rsp]
	lea	eax, DWORD PTR [rcx+rax+2]
	mov	rcx, QWORD PTR out$[rsp]
	mov	rdx, QWORD PTR tv606[rsp]
	cmp	DWORD PTR [rcx+rdx-8], eax
	jle	$LN47@stbi_zlib_
; Line 987
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rcx+rax-8], 2
; Line 988
	mov	DWORD PTR j$[rsp], 0
$LN27@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN28@stbi_zlib_
; Line 989
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR blocklen$2[rsp], eax
; Line 990
	cmp	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
	jle	SHORT $LN48@stbi_zlib_
	mov	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
$LN48@stbi_zlib_:
; Line 991
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN74@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN74@stbi_zlib_
	mov	QWORD PTR tv633[rsp], 0
	jmp	SHORT $LN75@stbi_zlib_
$LN74@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv633[rsp], rax
$LN75@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR blocklen$2[rsp]
	jne	SHORT $LN76@stbi_zlib_
	mov	DWORD PTR tv649[rsp], 1
	jmp	SHORT $LN77@stbi_zlib_
$LN76@stbi_zlib_:
	mov	DWORD PTR tv649[rsp], 0
$LN77@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv649[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 992
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN78@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN78@stbi_zlib_
	mov	QWORD PTR tv664[rsp], 0
	jmp	SHORT $LN79@stbi_zlib_
$LN78@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv664[rsp], rax
$LN79@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 993
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN80@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN80@stbi_zlib_
	mov	QWORD PTR tv693[rsp], 0
	jmp	SHORT $LN81@stbi_zlib_
$LN80@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv693[rsp], rax
$LN81@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 994
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN82@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN82@stbi_zlib_
	mov	QWORD PTR tv723[rsp], 0
	jmp	SHORT $LN83@stbi_zlib_
$LN82@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv723[rsp], rax
$LN83@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 995
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN84@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN84@stbi_zlib_
	mov	QWORD PTR tv753[rsp], 0
	jmp	SHORT $LN85@stbi_zlib_
$LN84@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv753[rsp], rax
$LN85@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 996
	movsxd	rax, DWORD PTR blocklen$2[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	rdi, QWORD PTR out$[rsp]
	movsxd	rdx, DWORD PTR [rdi+rdx-8]
	mov	rdi, QWORD PTR out$[rsp]
	add	rdi, rdx
	mov	rdx, rdi
	mov	QWORD PTR tv781[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv781[rsp]
	mov	rcx, rax
	call	memcpy
; Line 997
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	add	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 998
	mov	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 999
	jmp	$LN27@stbi_zlib_
$LN28@stbi_zlib_:
$LN47@stbi_zlib_:
; Line 1004
	mov	DWORD PTR s1$4[rsp], 1
	mov	DWORD PTR s2$5[rsp], 0
; Line 1005
	mov	eax, DWORD PTR data_len$[rsp]
	cdq
	mov	ecx, 5552				; 000015b0H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$9[rsp], eax
; Line 1006
	mov	DWORD PTR j$[rsp], 0
$LN30@stbi_zlib_:
; Line 1007
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN31@stbi_zlib_
; Line 1008
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi_zlib_
$LN32@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$9[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi_zlib_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$4[rsp], eax
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, DWORD PTR s2$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$5[rsp], eax
	jmp	SHORT $LN32@stbi_zlib_
$LN33@stbi_zlib_:
; Line 1009
	xor	edx, edx
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$4[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$5[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$5[rsp], eax
; Line 1010
	mov	eax, DWORD PTR blocklen$9[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 1011
	mov	DWORD PTR blocklen$9[rsp], 5552		; 000015b0H
; Line 1012
	jmp	$LN30@stbi_zlib_
$LN31@stbi_zlib_:
; Line 1013
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN86@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN86@stbi_zlib_
	mov	QWORD PTR tv817[rsp], 0
	jmp	SHORT $LN87@stbi_zlib_
$LN86@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv817[rsp], rax
$LN87@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1014
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN88@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN88@stbi_zlib_
	mov	QWORD PTR tv847[rsp], 0
	jmp	SHORT $LN89@stbi_zlib_
$LN88@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv847[rsp], rax
$LN89@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1015
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN90@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN90@stbi_zlib_
	mov	QWORD PTR tv876[rsp], 0
	jmp	SHORT $LN91@stbi_zlib_
$LN90@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv876[rsp], rax
$LN91@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1016
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN92@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN92@stbi_zlib_
	mov	QWORD PTR tv906[rsp], 0
	jmp	SHORT $LN93@stbi_zlib_
$LN92@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv906[rsp], rax
$LN93@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1018
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rdx+rax-8]
	mov	DWORD PTR [rcx], eax
; Line 1020
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	sub	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR out$[rsp]
	call	memmove
; Line 1021
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
$LN1@stbi_zlib_:
; Line 1023
	add	rsp, 568				; 00000238H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
data$ = 32
stbiw__zhash PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 869
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 870
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 871
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 872
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 873
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 874
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 875
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 876
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 877
	mov	eax, DWORD PTR hash$[rsp]
; Line 878
	add	rsp, 24
	ret	0
stbiw__zhash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
a$ = 32
b$ = 40
limit$ = 48
stbiw__zlib_countm PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 861
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 863
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__zli
$LN2@stbiw__zli:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__zli:
	mov	eax, DWORD PTR limit$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__zli
	cmp	DWORD PTR i$[rsp], 258			; 00000102H
	jge	SHORT $LN3@stbiw__zli
; Line 864
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbiw__zli
	jmp	SHORT $LN3@stbiw__zli
$LN5@stbiw__zli:
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 865
	mov	eax, DWORD PTR i$[rsp]
; Line 866
	add	rsp, 24
	ret	0
stbiw__zlib_countm ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 0
tv66 = 4
code$ = 32
codebits$ = 40
stbiw__zlib_bitrev PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 851
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 852
	mov	DWORD PTR res$[rsp], 0
$LN2@stbiw__zli:
; Line 853
	mov	eax, DWORD PTR codebits$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR codebits$[rsp]
	dec	eax
	mov	DWORD PTR codebits$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN3@stbiw__zli
; Line 854
	mov	eax, DWORD PTR res$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR code$[rsp]
	and	ecx, 1
	or	eax, ecx
	mov	DWORD PTR res$[rsp], eax
; Line 855
	mov	eax, DWORD PTR code$[rsp]
	sar	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 856
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 857
	mov	eax, DWORD PTR res$[rsp]
; Line 858
	add	rsp, 24
	ret	0
stbiw__zlib_bitrev ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
data$ = 64
bitbuffer$ = 72
bitcount$ = 80
stbiw__zlib_flushf PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 841
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@stbiw__zli:
; Line 842
	mov	rax, QWORD PTR bitcount$[rsp]
	cmp	DWORD PTR [rax], 8
	jl	$LN3@stbiw__zli
; Line 843
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN5@stbiw__zli
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN5@stbiw__zli
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbiw__zli
$LN5@stbiw__zli:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR data$[rsp]
	call	stbiw__sbgrowf
	mov	QWORD PTR tv78[rsp], rax
$LN6@stbiw__zli:
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 844
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 8
	mov	rcx, QWORD PTR bitbuffer$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 845
	mov	rax, QWORD PTR bitcount$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 8
	mov	rcx, QWORD PTR bitcount$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 846
	jmp	$LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 847
	mov	rax, QWORD PTR data$[rsp]
; Line 848
	add	rsp, 56					; 00000038H
	ret	0
stbiw__zlib_flushf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
m$ = 52
p$ = 56
tv75 = 64
tv79 = 72
$T1 = 80
$T2 = 112
arr$ = 176
increment$ = 184
itemsize$ = 192
stbiw__sbgrowf PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 828
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 829
	mov	rax, QWORD PTR arr$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stbiw__sbg
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	ecx, DWORD PTR increment$[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN6@stbiw__sbg
$LN5@stbiw__sbg:
	mov	eax, DWORD PTR increment$[rsp]
	inc	eax
	mov	DWORD PTR tv71[rsp], eax
$LN6@stbiw__sbg:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR m$[rsp], eax
; Line 830
	mov	rax, QWORD PTR arr$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stbiw__sbg
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 8
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN8@stbiw__sbg
$LN7@stbiw__sbg:
	mov	QWORD PTR tv75[rsp], 0
$LN8@stbiw__sbg:
	mov	eax, DWORD PTR itemsize$[rsp]
	imul	eax, DWORD PTR m$[rsp]
	cdqe
	add	rax, 8
	mov	QWORD PTR tv79[rsp], rax
	lea	rcx, OFFSET FLAT:$SG136195
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 830				; 0000033eH
	lea	r8, OFFSET FLAT:$SG136196
	mov	edx, 133				; 00000085H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tv75[rsp]
	mov	rax, QWORD PTR tv79[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR p$[rsp], rax
; Line 831
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN9@stbiw__sbg
	mov	r8d, 831				; 0000033fH
	lea	rdx, OFFSET FLAT:$SG136197
	lea	rcx, OFFSET FLAT:$SG136198
	call	_wassert
	xor	eax, eax
$LN9@stbiw__sbg:
; Line 832
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stbiw__sbg
; Line 833
	mov	rax, QWORD PTR arr$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN3@stbiw__sbg
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx+rax], 0
$LN3@stbiw__sbg:
; Line 834
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR arr$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 835
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, DWORD PTR m$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN2@stbiw__sbg:
; Line 837
	mov	rax, QWORD PTR arr$[rsp]
	mov	rax, QWORD PTR [rax]
; Line 838
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbiw__sbgrowf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv139 = 52
len$2 = 56
scratch$3 = 64
tv70 = 72
$T4 = 80
$T5 = 112
$T6 = 144
$T7 = 176
header$8 = 208
buffer$9 = 288
__$ArrayPad$ = 416
s$ = 464
x$ = 472
y$ = 480
comp$ = 488
data$ = 496
stbi_write_hdr_core PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 762
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 440				; 000001b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 763
	cmp	DWORD PTR y$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN5@stbi_write
$LN7@stbi_write:
; Line 764
	xor	eax, eax
	jmp	$LN1@stbi_write
	jmp	$LN6@stbi_write
$LN5@stbi_write:
; Line 767
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	cdqe
	mov	QWORD PTR tv70[rsp], rax
	lea	rcx, OFFSET FLAT:$SG136136
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 767				; 000002ffH
	lea	r8, OFFSET FLAT:$SG136137
	mov	edx, 131				; 00000083H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv70[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	mov	QWORD PTR scratch$3[rsp], rax
; Line 770
	lea	rax, QWORD PTR header$8[rsp]
	lea	rcx, OFFSET FLAT:$SG136138
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 66					; 00000042H
	rep movsb
; Line 771
	mov	r8d, 65					; 00000041H
	lea	rdx, QWORD PTR header$8[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 777
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	lea	rdx, OFFSET FLAT:$SG136139
	lea	rcx, QWORD PTR buffer$9[rsp]
	call	stbsp_sprintf
	mov	DWORD PTR len$2[rsp], eax
; Line 779
	mov	r8d, DWORD PTR len$2[rsp]
	lea	rdx, QWORD PTR buffer$9[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 781
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stbi_write
; Line 782
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN9@stbi_write
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	sub	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv139[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN9@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv139[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR tv139[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR scratch$3[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_hdr_scanline
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 783
	lea	rax, OFFSET FLAT:$SG136140
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 783				; 0000030fH
	lea	r8, OFFSET FLAT:$SG136141
	mov	edx, 132				; 00000084H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scratch$3[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
; Line 784
	mov	eax, 1
$LN6@stbi_write:
$LN1@stbi_write:
; Line 786
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 440				; 000001b8H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_hdr_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
r$1 = 36
rgbe$ = 40
scanlineheader$ = 44
c$2 = 48
len$3 = 52
len$4 = 56
comp$5 = 64
tv77 = 72
tv157 = 76
linear$ = 80
__$ArrayPad$ = 96
s$ = 128
width$ = 136
ncomp$ = 144
scratch$ = 152
scanline$ = 160
stbiw__write_hdr_scanline PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 673
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 674
	mov	BYTE PTR scanlineheader$[rsp], 2
	mov	BYTE PTR scanlineheader$[rsp+1], 2
	mov	BYTE PTR scanlineheader$[rsp+2], 0
	mov	BYTE PTR scanlineheader$[rsp+3], 0
; Line 679
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 680
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 683
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN27@stbiw__wri
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN25@stbiw__wri
$LN27@stbiw__wri:
; Line 684
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbiw__wri
; Line 685
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 3
	je	SHORT $LN29@stbiw__wri
	cmp	DWORD PTR tv77[rsp], 4
	je	SHORT $LN28@stbiw__wri
	jmp	$LN30@stbiw__wri
$LN28@stbiw__wri:
$LN29@stbiw__wri:
; Line 687
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 688
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 689
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 690
	jmp	SHORT $LN5@stbiw__wri
$LN30@stbiw__wri:
; Line 692
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN5@stbiw__wri:
; Line 695
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	stbiw__linear_to_rgbe
; Line 696
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 697
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
; Line 698
	jmp	$LN26@stbiw__wri
$LN25@stbiw__wri:
; Line 701
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbiw__wri
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN8@stbiw__wri
; Line 702
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv157[rsp], eax
	cmp	DWORD PTR tv157[rsp], 3
	je	SHORT $LN32@stbiw__wri
	cmp	DWORD PTR tv157[rsp], 4
	je	SHORT $LN31@stbiw__wri
	jmp	$LN33@stbiw__wri
$LN31@stbiw__wri:
$LN32@stbiw__wri:
; Line 704
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 705
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 706
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 707
	jmp	SHORT $LN10@stbiw__wri
$LN33@stbiw__wri:
; Line 709
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	movss	xmm0, DWORD PTR [rdx+rax*4]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	movss	xmm0, DWORD PTR linear$[rsp+rax]
	movss	DWORD PTR linear$[rsp+rcx], xmm0
$LN10@stbiw__wri:
; Line 712
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	stbiw__linear_to_rgbe
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	imul	ecx, DWORD PTR width$[rsp], 0
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 714
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, DWORD PTR width$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 715
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR width$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 716
	mov	eax, 1
	imul	rax, rax, 3
	imul	ecx, DWORD PTR width$[rsp], 3
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 717
	jmp	$LN7@stbiw__wri
$LN8@stbiw__wri:
; Line 719
	mov	r8d, 4
	lea	rdx, QWORD PTR scanlineheader$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 722
	mov	DWORD PTR c$2[rsp], 0
	jmp	SHORT $LN14@stbiw__wri
$LN12@stbiw__wri:
	mov	eax, DWORD PTR c$2[rsp]
	inc	eax
	mov	DWORD PTR c$2[rsp], eax
$LN14@stbiw__wri:
	cmp	DWORD PTR c$2[rsp], 4
	jge	$LN13@stbiw__wri
; Line 723
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR c$2[rsp]
	cdqe
	mov	rcx, QWORD PTR scratch$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR comp$5[rsp], rax
; Line 725
	mov	DWORD PTR x$[rsp], 0
$LN15@stbiw__wri:
; Line 726
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN16@stbiw__wri
; Line 728
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN17@stbiw__wri:
; Line 729
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	SHORT $LN18@stbiw__wri
; Line 730
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
; Line 731
	jmp	SHORT $LN18@stbiw__wri
$LN34@stbiw__wri:
; Line 732
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
; Line 733
	jmp	SHORT $LN17@stbiw__wri
$LN18@stbiw__wri:
; Line 734
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jl	SHORT $LN35@stbiw__wri
; Line 735
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN35@stbiw__wri:
$LN19@stbiw__wri:
; Line 737
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN20@stbiw__wri
; Line 738
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
; Line 739
	cmp	DWORD PTR len$3[rsp], 128		; 00000080H
	jle	SHORT $LN36@stbiw__wri
	mov	DWORD PTR len$3[rsp], 128		; 00000080H
$LN36@stbiw__wri:
; Line 740
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_dump_data
; Line 741
	mov	eax, DWORD PTR len$3[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 742
	jmp	SHORT $LN19@stbiw__wri
$LN20@stbiw__wri:
; Line 744
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	$LN37@stbiw__wri
$LN21@stbiw__wri:
; Line 746
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR r$1[rsp], eax
	jge	SHORT $LN22@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR x$[rsp]
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN22@stbiw__wri
; Line 747
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
	jmp	SHORT $LN21@stbiw__wri
$LN22@stbiw__wri:
$LN23@stbiw__wri:
; Line 749
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN24@stbiw__wri
; Line 750
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$4[rsp], eax
; Line 751
	cmp	DWORD PTR len$4[rsp], 127		; 0000007fH
	jle	SHORT $LN38@stbiw__wri
	mov	DWORD PTR len$4[rsp], 127		; 0000007fH
$LN38@stbiw__wri:
; Line 752
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	edx, DWORD PTR len$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_run_data
; Line 753
	mov	eax, DWORD PTR len$4[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 754
	jmp	SHORT $LN23@stbiw__wri
$LN24@stbiw__wri:
$LN37@stbiw__wri:
; Line 756
	jmp	$LN15@stbiw__wri
$LN16@stbiw__wri:
; Line 757
	jmp	$LN12@stbiw__wri
$LN13@stbiw__wri:
$LN26@stbiw__wri:
; Line 759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
stbiw__write_hdr_scanline ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
s$ = 64
length$ = 72
data$ = 80
stbiw__write_dump_data PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 665
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 666
	mov	eax, DWORD PTR length$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 667
	cmp	DWORD PTR length$[rsp], 128		; 00000080H
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 667				; 0000029bH
	lea	rdx, OFFSET FLAT:$SG136051
	lea	rcx, OFFSET FLAT:$SG136052
	call	_wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 668
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 669
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 670
	add	rsp, 56					; 00000038H
	ret	0
stbiw__write_dump_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
s$ = 64
length$ = 72
databyte$ = 80
stbiw__write_run_data PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 657
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 658
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 659
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:$SG136037
	lea	rcx, OFFSET FLAT:$SG136038
	call	_wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 660
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 661
	mov	r8d, 1
	lea	rdx, QWORD PTR databyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 662
	add	rsp, 56					; 00000038H
	ret	0
stbiw__write_run_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
maxcomp$ = 32
normalize$1 = 36
tv80 = 40
tv130 = 44
tv131 = 48
exponent$ = 52
rgbe$ = 80
linear$ = 88
stbiw__linear_to_rgbe PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 640
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 642
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	comiss	xmm0, xmm1
	jbe	SHORT $LN5@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv80[rsp], xmm0
	jmp	SHORT $LN6@stbiw__lin
$LN5@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv80[rsp], xmm0
$LN6@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	comiss	xmm0, DWORD PTR tv80[rsp]
	jbe	SHORT $LN9@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv131[rsp], xmm0
	jmp	SHORT $LN10@stbiw__lin
$LN9@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax]
	comiss	xmm0, xmm1
	jbe	SHORT $LN7@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv130[rsp], xmm0
	jmp	SHORT $LN8@stbiw__lin
$LN7@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	movss	DWORD PTR tv130[rsp], xmm0
$LN8@stbiw__lin:
	movss	xmm0, DWORD PTR tv130[rsp]
	movss	DWORD PTR tv131[rsp], xmm0
$LN10@stbiw__lin:
	movss	xmm0, DWORD PTR tv131[rsp]
	movss	DWORD PTR maxcomp$[rsp], xmm0
; Line 644
	movss	xmm0, DWORD PTR __real@0a4fb11f
	comiss	xmm0, DWORD PTR maxcomp$[rsp]
	jbe	SHORT $LN2@stbiw__lin
; Line 645
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 646
	jmp	$LN3@stbiw__lin
$LN2@stbiw__lin:
; Line 647
	cvtss2sd xmm0, DWORD PTR maxcomp$[rsp]
	lea	rdx, QWORD PTR exponent$[rsp]
	call	frexp
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@43800000
	divss	xmm0, DWORD PTR maxcomp$[rsp]
	movss	DWORD PTR normalize$1[rsp], xmm0
; Line 649
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 650
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 651
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax]
	mulss	xmm0, DWORD PTR normalize$1[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 652
	mov	eax, DWORD PTR exponent$[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN3@stbiw__lin:
; Line 654
	add	rsp, 72					; 00000048H
	ret	0
stbiw__linear_to_rgbe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$1 = 192
len$2 = 196
i$3 = 200
has_alpha$ = 204
header$4 = 208
header$5 = 209
j$6 = 212
colorbytes$ = 216
diff$7 = 220
tv66 = 224
tv69 = 228
tv71 = 232
format$ = 236
jdir$8 = 240
jend$9 = 244
begin$10 = 248
row$11 = 256
prev$12 = 264
s$ = 288
x$ = 296
y$ = 304
comp$ = 312
data$ = 320
stbi_write_tga_core PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 533
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
; Line 534
	cmp	DWORD PTR comp$[rsp], 2
	je	SHORT $LN33@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	je	SHORT $LN33@stbi_write
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN33@stbi_write:
	mov	DWORD PTR tv66[rsp], 1
$LN34@stbi_write:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR has_alpha$[rsp], eax
; Line 535
	cmp	DWORD PTR has_alpha$[rsp], 0
	je	SHORT $LN35@stbi_write
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN36@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN36@stbi_write:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR colorbytes$[rsp], eax
; Line 536
	cmp	DWORD PTR colorbytes$[rsp], 2
	jge	SHORT $LN37@stbi_write
	mov	DWORD PTR tv71[rsp], 3
	jmp	SHORT $LN38@stbi_write
$LN37@stbi_write:
	mov	DWORD PTR tv71[rsp], 2
$LN38@stbi_write:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR format$[rsp], eax
; Line 538
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN18@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN17@stbi_write
$LN18@stbi_write:
; Line 539
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN17@stbi_write:
; Line 541
	cmp	DWORD PTR stbi_write_tga_with_rle, 0
	jne	$LN19@stbi_write
; Line 542
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	DWORD PTR [rsp+176], eax
	mov	DWORD PTR [rsp+168], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	QWORD PTR [rsp+144], 0
	mov	QWORD PTR [rsp+136], 0
	mov	QWORD PTR [rsp+128], 0
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR [rsp+104], eax
	mov	QWORD PTR [rsp+96], 0
	mov	QWORD PTR [rsp+88], 0
	lea	rax, OFFSET FLAT:$SG135965
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	eax, DWORD PTR has_alpha$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__outfile
	jmp	$LN1@stbi_write
; Line 544
	jmp	$LN20@stbi_write
$LN19@stbi_write:
; Line 548
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	edx, DWORD PTR format$[rsp]
	add	edx, 8
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+88], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], edx
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG135966
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__writef
; Line 550
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN21@stbi_write
; Line 551
	mov	DWORD PTR j$6[rsp], 0
; Line 552
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR jend$9[rsp], eax
; Line 553
	mov	DWORD PTR jdir$8[rsp], 1
; Line 554
	jmp	SHORT $LN22@stbi_write
$LN21@stbi_write:
; Line 555
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$6[rsp], eax
; Line 556
	mov	DWORD PTR jend$9[rsp], -1
; Line 557
	mov	DWORD PTR jdir$8[rsp], -1
$LN22@stbi_write:
; Line 559
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR jdir$8[rsp]
	mov	ecx, DWORD PTR j$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$6[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR jend$9[rsp]
	cmp	DWORD PTR j$6[rsp], eax
	je	$LN3@stbi_write
; Line 560
	mov	eax, DWORD PTR j$6[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row$11[rsp], rax
; Line 563
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$3[rsp], eax
$LN7@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN6@stbi_write
; Line 564
	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR row$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR begin$10[rsp], rax
; Line 565
	mov	DWORD PTR diff$7[rsp], 1
; Line 566
	mov	DWORD PTR len$2[rsp], 1
; Line 568
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN23@stbi_write
; Line 569
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 570
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	inc	ecx
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	mov	DWORD PTR diff$7[rsp], eax
; Line 571
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN24@stbi_write
; Line 572
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR prev$12[rsp], rax
; Line 573
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	$LN9@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	$LN9@stbi_write
; Line 574
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR prev$12[rsp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN26@stbi_write
; Line 575
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR prev$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prev$12[rsp], rax
; Line 576
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 577
	jmp	SHORT $LN27@stbi_write
$LN26@stbi_write:
; Line 578
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 579
	jmp	SHORT $LN9@stbi_write
$LN27@stbi_write:
; Line 581
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 582
	jmp	$LN25@stbi_write
$LN24@stbi_write:
; Line 583
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN12@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	SHORT $LN12@stbi_write
; Line 584
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN28@stbi_write
; Line 585
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 586
	jmp	SHORT $LN29@stbi_write
$LN28@stbi_write:
; Line 587
	jmp	SHORT $LN12@stbi_write
$LN29@stbi_write:
; Line 589
	jmp	$LN11@stbi_write
$LN12@stbi_write:
$LN25@stbi_write:
$LN23@stbi_write:
; Line 593
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN30@stbi_write
; Line 594
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$4[rsp], al
; Line 595
	movzx	edx, BYTE PTR header$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
; Line 596
	mov	DWORD PTR k$1[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN15@stbi_write
; Line 597
	mov	eax, DWORD PTR k$1[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR begin$10[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixel
; Line 598
	jmp	SHORT $LN14@stbi_write
$LN15@stbi_write:
; Line 599
	jmp	SHORT $LN31@stbi_write
$LN30@stbi_write:
; Line 600
	mov	eax, DWORD PTR len$2[rsp]
	sub	eax, 129				; 00000081H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$5[rsp], al
; Line 601
	movzx	edx, BYTE PTR header$5[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
; Line 602
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixel
$LN31@stbi_write:
; Line 604
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 605
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 606
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
$LN20@stbi_write:
; Line 608
	mov	eax, 1
$LN1@stbi_write:
; Line 609
	add	rsp, 280				; 00000118H
	ret	0
stbi_write_tga_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pad$1 = 368
s$ = 400
x$ = 408
y$ = 416
comp$ = 424
data$ = 432
stbi_write_bmp_core PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 493
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
; Line 494
	cmp	DWORD PTR comp$[rsp], 4
	je	$LN2@stbi_write
; Line 496
	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	imul	eax, eax, 3
	and	eax, 3
	mov	DWORD PTR pad$1[rsp], eax
; Line 497
	imul	eax, DWORD PTR x$[rsp], 3
	add	eax, DWORD PTR pad$1[rsp]
	imul	eax, DWORD PTR y$[rsp]
	add	eax, 54					; 00000036H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	QWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 24
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 40			; 00000028H
	mov	DWORD PTR [rsp+128], 54			; 00000036H
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG135884
	mov	QWORD PTR [rsp+80], rax
	mov	eax, DWORD PTR pad$1[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	QWORD PTR [rsp+64], 0
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__outfile
	jmp	$LN1@stbi_write
; Line 501
	jmp	$LN3@stbi_write
$LN2@stbi_write:
; Line 505
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	lea	eax, DWORD PTR [rax*4+122]
	mov	QWORD PTR [rsp+352], 0
	mov	QWORD PTR [rsp+344], 0
	mov	QWORD PTR [rsp+336], 0
	mov	QWORD PTR [rsp+328], 0
	mov	QWORD PTR [rsp+320], 0
	mov	QWORD PTR [rsp+312], 0
	mov	QWORD PTR [rsp+304], 0
	mov	QWORD PTR [rsp+296], 0
	mov	QWORD PTR [rsp+288], 0
	mov	QWORD PTR [rsp+280], 0
	mov	QWORD PTR [rsp+272], 0
	mov	QWORD PTR [rsp+264], 0
	mov	QWORD PTR [rsp+256], 0
	mov	DWORD PTR [rsp+248], -16777216		; ff000000H
	mov	DWORD PTR [rsp+240], 255		; 000000ffH
	mov	DWORD PTR [rsp+232], 65280		; 0000ff00H
	mov	DWORD PTR [rsp+224], 16711680		; 00ff0000H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	DWORD PTR [rsp+176], 3
	mov	DWORD PTR [rsp+168], 32			; 00000020H
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 108		; 0000006cH
	mov	DWORD PTR [rsp+128], 122		; 0000007aH
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG135885
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	DWORD PTR [rsp+64], 1
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__outfile
$LN3@stbi_write:
$LN1@stbi_write:
; Line 510
	add	rsp, 392				; 00000188H
	ret	0
stbi_write_bmp_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 80
s$ = 112
rgb_dir$ = 120
vdir$ = 128
x$ = 136
y$ = 144
comp$ = 152
expand_mono$ = 160
data$ = 168
alpha$ = 176
pad$ = 184
fmt$ = 192
stbiw__outfile PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 479
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 480
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN4@stbiw__out
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN2@stbiw__out
$LN4@stbiw__out:
; Line 481
	xor	eax, eax
	jmp	$LN1@stbiw__out
; Line 482
	jmp	$LN3@stbiw__out
$LN2@stbiw__out:
; Line 484
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$1[rsp], rax
; Line 485
	mov	r8, QWORD PTR v$1[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__writefv
; Line 486
	mov	QWORD PTR v$1[rsp], 0
; Line 487
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR pad$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR alpha$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR vdir$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixels
; Line 488
	mov	eax, 1
$LN3@stbiw__out:
$LN1@stbiw__out:
; Line 490
	add	rsp, 104				; 00000068H
	ret	0
stbiw__outfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
i$ = 52
j_end$ = 56
zero$ = 60
d$1 = 64
s$ = 96
rgb_dir$ = 104
vdir$ = 112
x$ = 120
y$ = 128
comp$ = 136
data$ = 144
write_alpha$ = 152
scanline_pad$ = 160
expand_mono$ = 168
stbiw__write_pixels PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 452
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 453
	mov	DWORD PTR zero$[rsp], 0
; Line 456
	cmp	DWORD PTR y$[rsp], 0
	jg	SHORT $LN8@stbiw__wri
; Line 457
	jmp	$LN1@stbiw__wri
$LN8@stbiw__wri:
; Line 459
	cmp	DWORD PTR stbi__flip_vertically_on_write, 0
	je	SHORT $LN9@stbiw__wri
; Line 460
	imul	eax, DWORD PTR vdir$[rsp], -1
	mov	DWORD PTR vdir$[rsp], eax
$LN9@stbiw__wri:
; Line 462
	cmp	DWORD PTR vdir$[rsp], 0
	jge	SHORT $LN10@stbiw__wri
; Line 463
	mov	DWORD PTR j_end$[rsp], -1
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 464
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 465
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR j_end$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
$LN11@stbiw__wri:
; Line 468
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR vdir$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR j_end$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	je	$LN3@stbiw__wri
; Line 469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbiw__wri
$LN5@stbiw__wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbiw__wri
; Line 470
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	add	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR d$1[rsp], rax
; Line 471
	mov	rax, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR write_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_pixel
; Line 472
	jmp	SHORT $LN5@stbiw__wri
$LN6@stbiw__wri:
; Line 473
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
; Line 474
	mov	r8d, DWORD PTR scanline_pad$[rsp]
	lea	rdx, QWORD PTR zero$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 475
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 476
	add	rsp, 88					; 00000058H
	ret	0
stbiw__write_pixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bg$ = 32
px$ = 36
k$ = 40
tv71 = 44
tv128 = 48
s$ = 80
rgb_dir$ = 88
comp$ = 96
write_alpha$ = 104
expand_mono$ = 112
d$ = 120
stbiw__write_pixel PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 419
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 420
	mov	BYTE PTR bg$[rsp], 255			; 000000ffH
	mov	BYTE PTR bg$[rsp+1], 0
	mov	BYTE PTR bg$[rsp+2], 255		; 000000ffH
; Line 423
	cmp	DWORD PTR write_alpha$[rsp], 0
	jge	SHORT $LN7@stbiw__wri
; Line 424
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
$LN7@stbiw__wri:
; Line 426
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	cmp	DWORD PTR tv71[rsp], 1
	je	SHORT $LN9@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 2
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 3
	je	$LN14@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 4
	je	SHORT $LN12@stbiw__wri
	jmp	$LN2@stbiw__wri
$LN8@stbiw__wri:
$LN9@stbiw__wri:
; Line 429
	cmp	DWORD PTR expand_mono$[rsp], 0
	je	SHORT $LN10@stbiw__wri
; Line 430
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write3
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 432
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
$LN11@stbiw__wri:
; Line 433
	jmp	$LN2@stbiw__wri
$LN12@stbiw__wri:
; Line 435
	cmp	DWORD PTR write_alpha$[rsp], 0
	jne	$LN13@stbiw__wri
; Line 437
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN6@stbiw__wri
$LN4@stbiw__wri:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN6@stbiw__wri:
	cmp	DWORD PTR k$[rsp], 3
	jge	SHORT $LN5@stbiw__wri
; Line 438
	movsxd	rax, DWORD PTR k$[rsp]
	movzx	eax, BYTE PTR bg$[rsp+rax]
	mov	DWORD PTR tv128[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR d$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	movzx	edx, BYTE PTR bg$[rsp+rdx]
	sub	ecx, edx
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	imul	ecx, edx
	mov	eax, ecx
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	ecx, DWORD PTR tv128[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR px$[rsp+rcx], al
	jmp	SHORT $LN4@stbiw__wri
$LN5@stbiw__wri:
; Line 439
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	movzx	r9d, BYTE PTR px$[rsp+rax]
	movzx	r8d, BYTE PTR px$[rsp+rcx]
	movzx	edx, BYTE PTR px$[rsp+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write3
; Line 440
	jmp	SHORT $LN2@stbiw__wri
$LN13@stbiw__wri:
$LN14@stbiw__wri:
; Line 444
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write3
$LN2@stbiw__wri:
; Line 447
	cmp	DWORD PTR write_alpha$[rsp], 0
	jle	SHORT $LN15@stbiw__wri
; Line 448
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write1
$LN15@stbiw__wri:
; Line 449
	add	rsp, 72					; 00000048H
	ret	0
stbiw__write_pixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
a$ = 72
b$ = 80
c$ = 88
stbiw__write3 PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 407
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 409
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	add	rax, 3
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 410
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
$LN2@stbiw__wri:
; Line 411
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR n$[rsp], eax
; Line 412
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 3
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 413
	mov	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 414
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 415
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 416
	add	rsp, 56					; 00000038H
	ret	0
stbiw__write3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
a$ = 56
stbiw__write1 PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 400
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 401
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	inc	rax
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 402
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__write_flush
$LN2@stbiw__wri:
; Line 403
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 404
	add	rsp, 40					; 00000028H
	ret	0
stbiw__write1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
stbiw__putc PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 395
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 396
	mov	r8d, 1
	lea	rdx, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 397
	add	rsp, 40					; 00000028H
	ret	0
stbiw__putc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbiw__write_flush PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 387
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 388
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+80], 0
	je	SHORT $LN2@stbiw__wri
; Line 389
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+80]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 390
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+80], 0
$LN2@stbiw__wri:
; Line 392
	add	rsp, 40					; 00000028H
	ret	0
stbiw__write_flush ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
s$ = 64
fmt$ = 72
stbiw__writef PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 379
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 381
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 382
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbiw__writefv
; Line 383
	mov	QWORD PTR v$[rsp], 0
; Line 384
	add	rsp, 56					; 00000038H
	ret	0
stbiw__writef ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
b$2 = 36
tv69 = 40
x$3 = 44
b$4 = 48
x$5 = 52
tv68 = 56
s$ = 80
fmt$ = 88
v$ = 96
stbiw__writefv PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 350
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN2@stbiw__wri:
; Line 351
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stbiw__wri
; Line 352
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	rax, QWORD PTR fmt$[rsp]
	inc	rax
	mov	QWORD PTR fmt$[rsp], rax
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 32			; 00000020H
	je	SHORT $LN6@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 49			; 00000031H
	je	SHORT $LN7@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 50			; 00000032H
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 52			; 00000034H
	je	$LN9@stbiw__wri
	jmp	$LN10@stbiw__wri
$LN6@stbiw__wri:
; Line 353
	jmp	$LN4@stbiw__wri
$LN7@stbiw__wri:
; Line 354
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR x$1[rsp], al
; Line 355
	mov	r8d, 1
	lea	rdx, QWORD PTR x$1[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 356
	jmp	$LN4@stbiw__wri
$LN8@stbiw__wri:
; Line 357
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR x$5[rsp], eax
; Line 359
	mov	eax, DWORD PTR x$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 360
	mov	eax, DWORD PTR x$5[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 361
	mov	r8d, 2
	lea	rdx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 362
	jmp	$LN4@stbiw__wri
$LN9@stbiw__wri:
; Line 363
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR x$3[rsp], eax
; Line 365
	mov	eax, DWORD PTR x$3[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 366
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 367
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 368
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 369
	mov	r8d, 4
	lea	rdx, QWORD PTR b$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax]
; Line 370
	jmp	SHORT $LN4@stbiw__wri
$LN10@stbiw__wri:
; Line 372
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbiw__wri
	mov	r8d, 372				; 00000174H
	lea	rdx, OFFSET FLAT:$SG135723
	lea	rcx, OFFSET FLAT:$SG135724
	call	_wassert
	xor	eax, eax
$LN12@stbiw__wri:
; Line 373
	jmp	SHORT $LN1@stbiw__wri
$LN4@stbiw__wri:
; Line 375
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 376
	add	rsp, 72					; 00000048H
	ret	0
stbiw__writefv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbi__end_write_file PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 341
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	fclose
; Line 342
	add	rsp, 40					; 00000028H
	ret	0
stbi__end_write_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
f$ = 40
s$ = 64
filename$ = 72
stbi__start_write_file PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 333
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 334
	lea	rdx, OFFSET FLAT:$SG135653
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 335
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:stbi__stdio_write
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 336
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stbi__star
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@stbi__star
$LN3@stbi__star:
	mov	DWORD PTR tv71[rsp], 0
$LN4@stbi__star:
	mov	eax, DWORD PTR tv71[rsp]
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
stbi__start_write_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
stbiw__fopen PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 305
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 324
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN2@stbiw__fop
; Line 325
	mov	QWORD PTR f$[rsp], 0
$LN2@stbiw__fop:
; Line 329
	mov	rax, QWORD PTR f$[rsp]
; Line 330
	add	rsp, 56					; 00000038H
	ret	0
stbiw__fopen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
data$ = 56
size$ = 64
stbi__stdio_write PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 285
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 286
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR context$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	fwrite
; Line 287
	add	rsp, 40					; 00000028H
	ret	0
stbi__stdio_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
c$ = 16
context$ = 24
stbi__start_write_callbacks PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 277
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 278
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 279
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 280
	ret	0
stbi__start_write_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag$ = 8
stbi_flip_vertically_on_write PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 263
	mov	DWORD PTR [rsp+8], ecx
; Line 264
	mov	eax, DWORD PTR flag$[rsp]
	mov	DWORD PTR stbi__flip_vertically_on_write, eax
; Line 265
	ret	0
stbi_flip_vertically_on_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
quality$ = 224
stbi_write_jpg_to_func PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1609
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1610
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1611
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 1612
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_jpg_core
; Line 1613
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_jpg_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_hdr_to_func PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 789
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 790
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 791
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 792
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_hdr_core
; Line 793
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_hdr_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_tga_to_func PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 612
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 613
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 614
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 615
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_tga_core
; Line 616
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_tga_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_bmp_to_func PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 514
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 515
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_callbacks
; Line 516
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_bmp_core
; Line 517
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_bmp_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
$T1 = 64
$T2 = 96
func$ = 160
context$ = 168
x$ = 176
y$ = 184
comp$ = 192
data$ = 200
stride_bytes$ = 208
stbi_write_png_to_func PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1233
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1235
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1236
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1237
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR png$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR func$[rsp]
; Line 1238
	lea	rax, OFFSET FLAT:$SG136737
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1238				; 000004d6H
	lea	r8, OFFSET FLAT:$SG136738
	mov	edx, 146				; 00000092H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR png$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1239
	mov	eax, 1
$LN1@stbi_write:
; Line 1240
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_png_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
quality$ = 232
stbi_write_jpg PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1618
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1619
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1620
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 1621
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_jpg_core
	mov	DWORD PTR r$1[rsp], eax
; Line 1622
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 1623
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 1624
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 1625
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 1626
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_jpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_hdr PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 796
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 797
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 798
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 799
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_hdr_core
	mov	DWORD PTR r$1[rsp], eax
; Line 800
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 801
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 802
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 803
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 804
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_tga PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 620
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 621
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 622
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 623
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_tga_core
	mov	DWORD PTR r$1[rsp], eax
; Line 624
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 625
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 626
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 627
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 628
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_tga ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_bmp PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 521
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 522
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 523
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 524
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi_write_bmp_core
	mov	DWORD PTR r$1[rsp], eax
; Line 525
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__end_write_file
; Line 526
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 527
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 528
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 529
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_bmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
png$ = 48
len$ = 56
f$ = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
filename$ = 240
x$ = 248
y$ = 256
comp$ = 264
data$ = 272
stride_bytes$ = 280
stbi_write_png PROC
; File W:\cpp\void\e\rx\stb_image_write.h
; Line 1217
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 1220
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1221
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN2@stbi_write:
; Line 1223
	lea	rdx, OFFSET FLAT:$SG136711
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1224
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN3@stbi_write
	lea	rax, OFFSET FLAT:$SG136713
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1224				; 000004c8H
	lea	r8, OFFSET FLAT:$SG136714
	mov	edx, 144				; 00000090H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR png$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN3@stbi_write:
; Line 1225
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR png$[rsp]
	call	fwrite
; Line 1226
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1227
	lea	rax, OFFSET FLAT:$SG136715
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1227				; 000004cbH
	lea	r8, OFFSET FLAT:$SG136716
	mov	edx, 145				; 00000091H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR png$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 1228
	mov	eax, 1
$LN1@stbi_write:
; Line 1229
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbi_write_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbi__is_16_main PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7584
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7586
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_is16
	test	eax, eax
	je	SHORT $LN2@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN2@stbi__is_1:
; Line 7590
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_is16
	test	eax, eax
	je	SHORT $LN3@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN3@stbi__is_1:
; Line 7594
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_is16
	test	eax, eax
	je	SHORT $LN4@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN4@stbi__is_1:
; Line 7596
	xor	eax, eax
$LN1@stbi__is_1:
; Line 7597
	add	rsp, 40					; 00000028H
	ret	0
stbi__is_16_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
stbi__info_main PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7542
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7544
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__jpeg_info
	test	eax, eax
	je	SHORT $LN2@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN2@stbi__info:
; Line 7548
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_info
	test	eax, eax
	je	SHORT $LN3@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN3@stbi__info:
; Line 7552
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_info
	test	eax, eax
	je	SHORT $LN4@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN4@stbi__info:
; Line 7556
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_info
	test	eax, eax
	je	SHORT $LN5@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN5@stbi__info:
; Line 7560
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_info
	test	eax, eax
	je	SHORT $LN6@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN6@stbi__info:
; Line 7564
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_info
	test	eax, eax
	je	SHORT $LN7@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN7@stbi__info:
; Line 7568
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_info
	test	eax, eax
	je	SHORT $LN8@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN8@stbi__info:
; Line 7572
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_info
	test	eax, eax
	je	SHORT $LN9@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN9@stbi__info:
; Line 7577
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_info
	test	eax, eax
	je	SHORT $LN10@stbi__info
; Line 7578
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN10@stbi__info:
; Line 7580
	lea	rcx, OFFSET FLAT:$SG135375
	call	stbi__err
$LN1@stbi__info:
; Line 7581
	add	rsp, 40					; 00000028H
	ret	0
stbi__info_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
s$ = 64
c$ = 72
stbi__pnm_getinteger PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7483
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7484
	mov	DWORD PTR value$[rsp], 0
$LN2@stbi__pnm_:
; Line 7486
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	stbi__pnm_isdigit
	test	eax, eax
	je	SHORT $LN3@stbi__pnm_
; Line 7487
	imul	eax, DWORD PTR value$[rsp], 10
	mov	rcx, QWORD PTR c$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR value$[rsp], eax
; Line 7488
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
; Line 7489
	jmp	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7491
	mov	eax, DWORD PTR value$[rsp]
; Line 7492
	add	rsp, 56					; 00000038H
	ret	0
stbi__pnm_getinteger ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 0
c$ = 32
stbi__pnm_isdigit PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7478
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7479
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv68[rsp]
; Line 7480
	add	rsp, 24
	ret	0
stbi__pnm_isdigit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
stbi__pnm_skip_whitespace PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7464
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stbi__pnm_:
$LN5@stbi__pnm_:
; Line 7466
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	stbi__pnm_isspace
	test	eax, eax
	je	SHORT $LN6@stbi__pnm_
; Line 7467
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7469
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN10@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN9@stbi__pnm_
$LN10@stbi__pnm_:
; Line 7470
	jmp	SHORT $LN3@stbi__pnm_
$LN9@stbi__pnm_:
$LN7@stbi__pnm_:
; Line 7472
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN8@stbi__pnm_
; Line 7473
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN7@stbi__pnm_
$LN8@stbi__pnm_:
; Line 7474
	jmp	$LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7475
	add	rsp, 40					; 00000028H
	ret	0
stbi__pnm_skip_whitespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
c$ = 32
stbi__pnm_isspace PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7459
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7460
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 9
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 11
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 12
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	je	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv76[rsp], 1
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv76[rsp]
; Line 7461
	add	rsp, 24
	ret	0
stbi__pnm_isspace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f1$1 = 32
tv152 = 36
output$ = 64
input$ = 72
req_comp$ = 80
stbi__hdr_convert PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7054
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7055
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN4@stbi__hdr_
; Line 7058
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 136				; 00000088H
	mov	edx, eax
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	call	ldexp
	cvtsd2ss xmm0, xmm0
	movss	DWORD PTR f1$1[rsp], xmm0
; Line 7059
	cmp	DWORD PTR req_comp$[rsp], 2
	jg	SHORT $LN6@stbi__hdr_
; Line 7060
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	divss	xmm0, DWORD PTR __real@40400000
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
	jmp	$LN7@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7062
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7063
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7064
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax], xmm0
$LN7@stbi__hdr_:
; Line 7066
	cmp	DWORD PTR req_comp$[rsp], 2
	jne	SHORT $LN8@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN8@stbi__hdr_:
; Line 7067
	cmp	DWORD PTR req_comp$[rsp], 4
	jne	SHORT $LN9@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN9@stbi__hdr_:
; Line 7068
	jmp	$LN5@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7069
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	cmp	DWORD PTR tv152[rsp], 1
	je	$LN13@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 2
	je	SHORT $LN12@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 3
	je	SHORT $LN11@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 4
	je	SHORT $LN10@stbi__hdr_
	jmp	$LN2@stbi__hdr_
$LN10@stbi__hdr_:
; Line 7070
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN11@stbi__hdr_:
; Line 7071
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
; Line 7072
	jmp	SHORT $LN2@stbi__hdr_
$LN12@stbi__hdr_:
; Line 7073
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR [rcx+rax], xmm0
$LN13@stbi__hdr_:
; Line 7074
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	xorps	xmm0, xmm0
	movss	DWORD PTR [rcx+rax], xmm0
$LN2@stbi__hdr_:
$LN5@stbi__hdr_:
; Line 7078
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_convert ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
len$ = 36
z$ = 64
buffer$ = 72
stbi__hdr_gettoken PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7032
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7033
	mov	DWORD PTR len$[rsp], 0
; Line 7034
	mov	BYTE PTR c$[rsp], 0
; Line 7036
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get8
	mov	BYTE PTR c$[rsp], al
$LN2@stbi__hdr_:
; Line 7038
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__hdr_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__hdr_
; Line 7039
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 7040
	cmp	DWORD PTR len$[rsp], 1023		; 000003ffH
	jne	SHORT $LN6@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7042
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN5@stbi__hdr_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 10
	je	SHORT $LN5@stbi__hdr_
; Line 7043
	jmp	SHORT $LN4@stbi__hdr_
$LN5@stbi__hdr_:
; Line 7044
	jmp	SHORT $LN3@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7046
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7047
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7049
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7050
	mov	rax, QWORD PTR buffer$[rsp]
; Line 7051
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_gettoken ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
signature$ = 72
stbi__hdr_test_core PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7010
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR signature$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@stbi__hdr_
; Line 7013
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR signature$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__hdr_
; Line 7014
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN5@stbi__hdr_:
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7015
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7016
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7017
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_test_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv150 = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
g$ = 416
out$ = 424
delays$ = 432
stbi__load_gif_main_outofmem PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6875
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 6876
	lea	rax, OFFSET FLAT:$SG134756
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6876				; 00001adcH
	lea	r8, OFFSET FLAT:$SG134757
	mov	edx, 109				; 0000006dH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 6877
	lea	rax, OFFSET FLAT:$SG134758
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6877				; 00001addH
	lea	r8, OFFSET FLAT:$SG134759
	mov	edx, 110				; 0000006eH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 6878
	lea	rax, OFFSET FLAT:$SG134760
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6878				; 00001adeH
	lea	r8, OFFSET FLAT:$SG134761
	mov	edx, 111				; 0000006fH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR g$[rsp]
	mov	r8, QWORD PTR [rax+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 6880
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN2@stbi__load
	lea	rax, OFFSET FLAT:$SG134763
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6880				; 00001ae0H
	lea	r8, OFFSET FLAT:$SG134764
	mov	edx, 112				; 00000070H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
$LN2@stbi__load:
; Line 6881
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stbi__load
	lea	rax, OFFSET FLAT:$SG134766
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6881				; 00001ae1H
	lea	r8, OFFSET FLAT:$SG134767
	mov	edx, 113				; 00000071H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR delays$[rsp]
	mov	r8, QWORD PTR [rax]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
$LN3@stbi__load:
; Line 6882
	lea	rcx, OFFSET FLAT:$SG134768
	call	stbi__err
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	QWORD PTR tv150[rsp], 0
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
	mov	QWORD PTR tv150[rsp], 0
$LN6@stbi__load:
	mov	rax, QWORD PTR tv150[rsp]
; Line 6883
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
stbi__load_gif_main_outofmem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pi$ = 32
pcount$ = 36
len$1 = 40
dispose$ = 44
tv232 = 48
w$2 = 52
x$3 = 56
y$4 = 60
h$5 = 64
tv296 = 68
first_frame$ = 72
tag$6 = 76
tv577 = 80
ext$7 = 84
tv83 = 88
tv142 = 96
tv250 = 104
tv315 = 112
o$8 = 120
tv409 = 128
s$ = 160
g$ = 168
comp$ = 176
req_comp$ = 184
two_back$ = 192
stbi__gif_load_next PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6701
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 6709
	mov	DWORD PTR first_frame$[rsp], 0
; Line 6710
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	$LN18@stbi__gif_
; Line 6711
	xor	r9d, r9d
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_header
	test	eax, eax
	jne	SHORT $LN20@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN20@stbi__gif_:
; Line 6712
	xor	r9d, r9d
	mov	rax, QWORD PTR g$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR g$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, 4
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN21@stbi__gif_
; Line 6713
	lea	rcx, OFFSET FLAT:$SG134707
	call	stbi__err
	test	eax, eax
	je	SHORT $LN55@stbi__gif_
	mov	QWORD PTR tv83[rsp], 0
	jmp	SHORT $LN56@stbi__gif_
$LN55@stbi__gif_:
	mov	QWORD PTR tv83[rsp], 0
$LN56@stbi__gif_:
	mov	rax, QWORD PTR tv83[rsp]
	jmp	$LN1@stbi__gif_
$LN21@stbi__gif_:
; Line 6714
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6715
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 6716
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 6717
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 6718
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN22@stbi__gif_
$LN23@stbi__gif_:
; Line 6719
	lea	rcx, OFFSET FLAT:$SG134710
	call	stbi__err
	test	eax, eax
	je	SHORT $LN57@stbi__gif_
	mov	QWORD PTR tv142[rsp], 0
	jmp	SHORT $LN58@stbi__gif_
$LN57@stbi__gif_:
	mov	QWORD PTR tv142[rsp], 0
$LN58@stbi__gif_:
	mov	rax, QWORD PTR tv142[rsp]
	jmp	$LN1@stbi__gif_
$LN22@stbi__gif_:
; Line 6724
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
; Line 6725
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 6726
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 6727
	mov	DWORD PTR first_frame$[rsp], 1
; Line 6728
	jmp	$LN19@stbi__gif_
$LN18@stbi__gif_:
; Line 6730
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 28
	sar	eax, 2
	mov	DWORD PTR dispose$[rsp], eax
; Line 6731
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6733
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN24@stbi__gif_
	cmp	QWORD PTR two_back$[rsp], 0
	jne	SHORT $LN24@stbi__gif_
; Line 6734
	mov	DWORD PTR dispose$[rsp], 2
$LN24@stbi__gif_:
; Line 6737
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN25@stbi__gif_
; Line 6738
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN3@stbi__gif_
; Line 6739
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN27@stbi__gif_
; Line 6740
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR two_back$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN27@stbi__gif_:
; Line 6742
	jmp	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6743
	jmp	$LN26@stbi__gif_
$LN25@stbi__gif_:
	cmp	DWORD PTR dispose$[rsp], 2
	jne	SHORT $LN28@stbi__gif_
; Line 6745
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN5@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN7@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN6@stbi__gif_
; Line 6746
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN30@stbi__gif_
; Line 6747
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN30@stbi__gif_:
; Line 6749
	jmp	SHORT $LN5@stbi__gif_
$LN6@stbi__gif_:
$LN28@stbi__gif_:
$LN26@stbi__gif_:
; Line 6758
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	mov	rax, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcpy
$LN19@stbi__gif_:
; Line 6762
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
$LN8@stbi__gif_:
; Line 6765
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tag$6[rsp], eax
; Line 6766
	mov	eax, DWORD PTR tag$6[rsp]
	mov	DWORD PTR tv232[rsp], eax
	cmp	DWORD PTR tv232[rsp], 33		; 00000021H
	je	$LN44@stbi__gif_
	cmp	DWORD PTR tv232[rsp], 44		; 0000002cH
	je	SHORT $LN31@stbi__gif_
	cmp	DWORD PTR tv232[rsp], 59		; 0000003bH
	je	$LN52@stbi__gif_
	jmp	$LN53@stbi__gif_
$LN31@stbi__gif_:
; Line 6772
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR x$3[rsp], eax
; Line 6773
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR y$4[rsp], eax
; Line 6774
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR w$2[rsp], eax
; Line 6775
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR h$5[rsp], eax
; Line 6776
	mov	eax, DWORD PTR w$2[rsp]
	mov	ecx, DWORD PTR x$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jg	SHORT $LN33@stbi__gif_
	mov	eax, DWORD PTR h$5[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN32@stbi__gif_
$LN33@stbi__gif_:
; Line 6777
	lea	rcx, OFFSET FLAT:$SG134721
	call	stbi__err
	test	eax, eax
	je	SHORT $LN59@stbi__gif_
	mov	QWORD PTR tv250[rsp], 0
	jmp	SHORT $LN60@stbi__gif_
$LN59@stbi__gif_:
	mov	QWORD PTR tv250[rsp], 0
$LN60@stbi__gif_:
	mov	rax, QWORD PTR tv250[rsp]
	jmp	$LN1@stbi__gif_
$LN32@stbi__gif_:
; Line 6779
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34916], eax
; Line 6780
	mov	eax, DWORD PTR x$3[rsp]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34892], eax
; Line 6781
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34896], eax
; Line 6782
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34892]
	mov	ecx, DWORD PTR w$2[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34900], eax
; Line 6783
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR h$5[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34904], eax
; Line 6784
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6785
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34896]
	mov	DWORD PTR [rax+34912], ecx
; Line 6791
	cmp	DWORD PTR w$2[rsp], 0
	jne	SHORT $LN34@stbi__gif_
; Line 6792
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	mov	DWORD PTR [rax+34912], ecx
$LN34@stbi__gif_:
; Line 6794
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34888], eax
; Line 6796
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN35@stbi__gif_
; Line 6797
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34916]
	shl	eax, 3
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6798
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 3
; Line 6799
	jmp	SHORT $LN36@stbi__gif_
$LN35@stbi__gif_:
; Line 6800
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34916]
	mov	DWORD PTR [rax+34884], ecx
; Line 6801
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 0
$LN36@stbi__gif_:
; Line 6804
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN37@stbi__gif_
; Line 6805
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN61@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR tv296[rsp], eax
	jmp	SHORT $LN62@stbi__gif_
$LN61@stbi__gif_:
	mov	DWORD PTR tv296[rsp], -1
$LN62@stbi__gif_:
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv577[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv577[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 1076				; 00000434H
	mov	r9d, DWORD PTR tv296[rsp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_parse_colortable
; Line 6806
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 1076				; 00000434H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
	jmp	SHORT $LN38@stbi__gif_
$LN37@stbi__gif_:
; Line 6807
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN39@stbi__gif_
; Line 6808
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 52					; 00000034H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
; Line 6809
	jmp	SHORT $LN40@stbi__gif_
$LN39@stbi__gif_:
; Line 6810
	lea	rcx, OFFSET FLAT:$SG134729
	call	stbi__err
	test	eax, eax
	je	SHORT $LN63@stbi__gif_
	mov	QWORD PTR tv315[rsp], 0
	jmp	SHORT $LN64@stbi__gif_
$LN63@stbi__gif_:
	mov	QWORD PTR tv315[rsp], 0
$LN64@stbi__gif_:
	mov	rax, QWORD PTR tv315[rsp]
	jmp	$LN1@stbi__gif_
$LN40@stbi__gif_:
$LN38@stbi__gif_:
; Line 6812
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__process_gif_raster
	mov	QWORD PTR o$8[rsp], rax
; Line 6813
	cmp	QWORD PTR o$8[rsp], 0
	jne	SHORT $LN41@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN41@stbi__gif_:
; Line 6816
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6817
	cmp	DWORD PTR first_frame$[rsp], 0
	je	$LN42@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+36], 0
	jle	$LN42@stbi__gif_
; Line 6819
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN15@stbi__gif_
$LN13@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN15@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	$LN14@stbi__gif_
; Line 6820
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN43@stbi__gif_
; Line 6821
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 6822
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN43@stbi__gif_:
; Line 6824
	jmp	$LN13@stbi__gif_
$LN14@stbi__gif_:
$LN42@stbi__gif_:
; Line 6827
	mov	rax, QWORD PTR o$8[rsp]
	jmp	$LN1@stbi__gif_
$LN44@stbi__gif_:
; Line 6833
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR ext$7[rsp], eax
; Line 6834
	cmp	DWORD PTR ext$7[rsp], 249		; 000000f9H
	jne	$LN45@stbi__gif_
; Line 6835
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
; Line 6836
	cmp	DWORD PTR len$1[rsp], 4
	jne	$LN46@stbi__gif_
; Line 6837
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 6838
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	imul	eax, eax, 10
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34920], eax
; Line 6841
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN48@stbi__gif_
; Line 6842
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
$LN48@stbi__gif_:
; Line 6844
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN49@stbi__gif_
; Line 6845
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 6846
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN51@stbi__gif_
; Line 6847
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 0
$LN51@stbi__gif_:
; Line 6849
	jmp	SHORT $LN50@stbi__gif_
$LN49@stbi__gif_:
; Line 6851
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6852
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
$LN50@stbi__gif_:
; Line 6854
	jmp	SHORT $LN47@stbi__gif_
$LN46@stbi__gif_:
; Line 6855
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6856
	jmp	SHORT $LN11@stbi__gif_
$LN47@stbi__gif_:
$LN45@stbi__gif_:
$LN16@stbi__gif_:
; Line 6859
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
	cmp	DWORD PTR len$1[rsp], 0
	je	SHORT $LN17@stbi__gif_
; Line 6860
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6861
	jmp	SHORT $LN16@stbi__gif_
$LN17@stbi__gif_:
; Line 6862
	jmp	SHORT $LN11@stbi__gif_
$LN52@stbi__gif_:
; Line 6866
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN53@stbi__gif_:
; Line 6869
	lea	rcx, OFFSET FLAT:$SG134743
	call	stbi__err
	test	eax, eax
	je	SHORT $LN65@stbi__gif_
	mov	QWORD PTR tv409[rsp], 0
	jmp	SHORT $LN66@stbi__gif_
$LN65@stbi__gif_:
	mov	QWORD PTR tv409[rsp], 0
$LN66@stbi__gif_:
	mov	rax, QWORD PTR tv409[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN11@stbi__gif_:
; Line 6871
	jmp	$LN8@stbi__gif_
$LN1@stbi__gif_:
; Line 6872
	add	rsp, 152				; 00000098H
	ret	0
stbi__gif_load_next ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lzw_cs$ = 32
avail$ = 36
len$ = 40
codesize$ = 44
init_code$ = 48
code$1 = 52
valid_bits$ = 56
bits$ = 60
clear$ = 64
oldcode$ = 68
codemask$ = 72
first$ = 76
tv192 = 80
p$ = 88
tv241 = 96
tv245 = 100
tv272 = 104
tv296 = 108
tv163 = 112
tv174 = 120
tv198 = 128
tv210 = 136
s$ = 160
g$ = 168
stbi__process_gif_raster PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6614
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 6621
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR lzw_cs$[rsp], al
; Line 6622
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	cmp	eax, 12
	jle	SHORT $LN10@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 6623
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv241[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv241[rsp]
	shl	eax, cl
	mov	DWORD PTR clear$[rsp], eax
; Line 6624
	mov	DWORD PTR first$[rsp], 1
; Line 6625
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6626
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv245[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv245[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6627
	mov	DWORD PTR bits$[rsp], 0
; Line 6628
	mov	DWORD PTR valid_bits$[rsp], 0
; Line 6629
	mov	DWORD PTR init_code$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR init_code$[rsp]
	inc	eax
	mov	DWORD PTR init_code$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR init_code$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 6630
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	ecx, -1
	mov	rdx, QWORD PTR g$[rsp]
	mov	WORD PTR [rdx+rax*4+2100], cx
; Line 6631
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2102], dl
; Line 6632
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2103], dl
; Line 6633
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 6636
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6637
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6639
	mov	DWORD PTR len$[rsp], 0
$LN5@stbi__proc:
; Line 6641
	mov	eax, DWORD PTR codesize$[rsp]
	cmp	DWORD PTR valid_bits$[rsp], eax
	jge	SHORT $LN11@stbi__proc
; Line 6642
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN13@stbi__proc
; Line 6643
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6644
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN14@stbi__proc
; Line 6645
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
$LN13@stbi__proc:
; Line 6647
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6648
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR valid_bits$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bits$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bits$[rsp], eax
; Line 6649
	mov	eax, DWORD PTR valid_bits$[rsp]
	add	eax, 8
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6650
	jmp	$LN12@stbi__proc
$LN11@stbi__proc:
; Line 6651
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR bits$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$1[rsp], eax
; Line 6652
	mov	eax, DWORD PTR codesize$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR bits$[rsp]
	sar	eax, cl
	mov	DWORD PTR bits$[rsp], eax
; Line 6653
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, DWORD PTR valid_bits$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6655
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN15@stbi__proc
; Line 6656
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6657
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv272[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv272[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6658
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6659
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6660
	mov	DWORD PTR first$[rsp], 0
	jmp	$LN16@stbi__proc
$LN15@stbi__proc:
; Line 6661
	mov	eax, DWORD PTR clear$[rsp]
	inc	eax
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN17@stbi__proc
; Line 6662
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN8@stbi__proc:
; Line 6663
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN9@stbi__proc
; Line 6664
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
	jmp	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
; Line 6665
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
	jmp	$LN18@stbi__proc
$LN17@stbi__proc:
; Line 6666
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jg	$LN19@stbi__proc
; Line 6667
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN21@stbi__proc
; Line 6668
	lea	rcx, OFFSET FLAT:$SG134626
	call	stbi__err
	test	eax, eax
	je	SHORT $LN28@stbi__proc
	mov	QWORD PTR tv163[rsp], 0
	jmp	SHORT $LN29@stbi__proc
$LN28@stbi__proc:
	mov	QWORD PTR tv163[rsp], 0
$LN29@stbi__proc:
	mov	rax, QWORD PTR tv163[rsp]
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 6671
	cmp	DWORD PTR oldcode$[rsp], 0
	jl	$LN22@stbi__proc
; Line 6672
	movsxd	rax, DWORD PTR avail$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+2100]
	mov	QWORD PTR p$[rsp], rax
	mov	eax, DWORD PTR avail$[rsp]
	inc	eax
	mov	DWORD PTR avail$[rsp], eax
; Line 6673
	cmp	DWORD PTR avail$[rsp], 8192		; 00002000H
	jle	SHORT $LN24@stbi__proc
; Line 6674
	lea	rcx, OFFSET FLAT:$SG134630
	call	stbi__err
	test	eax, eax
	je	SHORT $LN30@stbi__proc
	mov	QWORD PTR tv174[rsp], 0
	jmp	SHORT $LN31@stbi__proc
$LN30@stbi__proc:
	mov	QWORD PTR tv174[rsp], 0
$LN31@stbi__proc:
	mov	rax, QWORD PTR tv174[rsp]
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 6677
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR oldcode$[rsp]
	mov	WORD PTR [rax], cx
; Line 6678
	movsxd	rax, DWORD PTR oldcode$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rdx+rax*4+2102]
	mov	BYTE PTR [rcx+2], al
; Line 6679
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN32@stbi__proc
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	DWORD PTR tv192[rsp], eax
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
	movsxd	rax, DWORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2102]
	mov	DWORD PTR tv192[rsp], eax
$LN33@stbi__proc:
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR tv192[rsp]
	mov	BYTE PTR [rax+3], cl
	jmp	SHORT $LN23@stbi__proc
$LN22@stbi__proc:
; Line 6680
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN25@stbi__proc
; Line 6681
	lea	rcx, OFFSET FLAT:$SG134632
	call	stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__proc
	mov	QWORD PTR tv198[rsp], 0
	jmp	SHORT $LN35@stbi__proc
$LN34@stbi__proc:
	mov	QWORD PTR tv198[rsp], 0
$LN35@stbi__proc:
	mov	rax, QWORD PTR tv198[rsp]
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
$LN23@stbi__proc:
; Line 6683
	movzx	edx, WORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	call	stbi__out_gif_code
; Line 6685
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR avail$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN26@stbi__proc
	cmp	DWORD PTR avail$[rsp], 4095		; 00000fffH
	jg	SHORT $LN26@stbi__proc
; Line 6686
	mov	eax, DWORD PTR codesize$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6687
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv296[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv296[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
$LN26@stbi__proc:
; Line 6690
	mov	eax, DWORD PTR code$1[rsp]
	mov	DWORD PTR oldcode$[rsp], eax
; Line 6691
	jmp	SHORT $LN20@stbi__proc
$LN19@stbi__proc:
; Line 6692
	lea	rcx, OFFSET FLAT:$SG134634
	call	stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	mov	QWORD PTR tv210[rsp], 0
	jmp	SHORT $LN37@stbi__proc
$LN36@stbi__proc:
	mov	QWORD PTR tv210[rsp], 0
$LN37@stbi__proc:
	mov	rax, QWORD PTR tv210[rsp]
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
$LN18@stbi__proc:
$LN16@stbi__proc:
$LN12@stbi__proc:
; Line 6695
	jmp	$LN5@stbi__proc
$LN1@stbi__proc:
; Line 6696
	add	rsp, 152				; 00000098H
	ret	0
stbi__process_gif_raster ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
idx$ = 32
tv256 = 36
c$ = 40
p$ = 48
g$ = 80
code$ = 88
stbi__out_gif_code PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6577
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6583
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movsx	eax, WORD PTR [rcx+rax*4+2100]
	test	eax, eax
	jl	SHORT $LN4@stbi__out_
; Line 6584
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, WORD PTR [rcx+rax*4+2100]
	mov	rcx, QWORD PTR g$[rsp]
	call	stbi__out_gif_code
$LN4@stbi__out_:
; Line 6586
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	SHORT $LN5@stbi__out_
	jmp	$LN1@stbi__out_
$LN5@stbi__out_:
; Line 6588
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34912]
	mov	DWORD PTR idx$[rsp], eax
; Line 6589
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 6590
	mov	eax, DWORD PTR idx$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax], 1
; Line 6592
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2103]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+34872]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR c$[rsp], rax
; Line 6593
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 128				; 00000080H
	jle	$LN6@stbi__out_
; Line 6594
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6595
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6596
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6597
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN6@stbi__out_:
; Line 6599
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	add	eax, 4
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34908], eax
; Line 6601
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34900]
	cmp	DWORD PTR [rax+34908], ecx
	jl	$LN7@stbi__out_
; Line 6602
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6603
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34912]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34884]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
$LN2@stbi__out_:
; Line 6605
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	$LN3@stbi__out_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+34880], 0
	jle	SHORT $LN3@stbi__out_
; Line 6606
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	mov	ecx, 1
	mov	DWORD PTR tv256[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv256[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+34916]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6607
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34884]
	sar	eax, 1
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
; Line 6608
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	dec	eax
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34880], eax
; Line 6609
	jmp	$LN2@stbi__out_
$LN3@stbi__out_:
$LN7@stbi__out_:
$LN1@stbi__out_:
; Line 6611
	add	rsp, 72					; 00000048H
	ret	0
stbi__out_gif_code ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
s$ = 224
x$ = 232
y$ = 240
comp$ = 248
stbi__gif_info_raw PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6562
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 6563
	mov	ecx, 34928				; 00008870H
	call	stbi__malloc
	mov	QWORD PTR g$[rsp], rax
; Line 6564
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG134542
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6565
	mov	r9d, 1
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_header
	test	eax, eax
	jne	SHORT $LN3@stbi__gif_
; Line 6566
	lea	rax, OFFSET FLAT:$SG134544
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6566				; 000019a6H
	lea	r8, OFFSET FLAT:$SG134545
	mov	edx, 107				; 0000006bH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 6567
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6568
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN3@stbi__gif_:
; Line 6570
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN4@stbi__gif_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__gif_:
; Line 6571
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__gif_:
; Line 6572
	lea	rax, OFFSET FLAT:$SG134548
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6572				; 000019acH
	lea	r8, OFFSET FLAT:$SG134549
	mov	edx, 108				; 0000006cH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 6573
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6574
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
stbi__gif_info_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
version$ = 32
tv224 = 36
s$ = 64
g$ = 72
comp$ = 80
is_info$ = 88
stbi__gif_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6531
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6533
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6534
	lea	rcx, OFFSET FLAT:$SG134515
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6536
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR version$[rsp], al
; Line 6537
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 55					; 00000037H
	je	SHORT $LN4@stbi__gif_
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 57					; 00000039H
	je	SHORT $LN4@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG134517
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6538
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG134519
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6540
	mov	eax, OFFSET FLAT:stbi__g_failure_reason
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:$SG134520
	mov	QWORD PTR [rax+rcx], rdx
; Line 6541
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 6542
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 6543
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 6544
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 6545
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 6546
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
; Line 6548
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG134522
	call	stbi__err
	jmp	$LN1@stbi__gif_
$LN6@stbi__gif_:
; Line 6549
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG134524
	call	stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN7@stbi__gif_:
; Line 6551
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN8@stbi__gif_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN8@stbi__gif_:
; Line 6553
	cmp	DWORD PTR is_info$[rsp], 0
	je	SHORT $LN9@stbi__gif_
	mov	eax, 1
	jmp	SHORT $LN1@stbi__gif_
$LN9@stbi__gif_:
; Line 6555
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN10@stbi__gif_
; Line 6556
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv224[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv224[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 52					; 00000034H
	mov	r9d, -1
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_parse_colortable
$LN10@stbi__gif_:
; Line 6558
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6559
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv93 = 36
s$ = 64
pal$ = 72
num_entries$ = 80
transp$ = 88
stbi__gif_parse_colortable PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6520
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6522
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR num_entries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__gif_
; Line 6523
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 6524
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 6525
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 6526
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR transp$[rsp], eax
	jne	SHORT $LN6@stbi__gif_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN6@stbi__gif_:
	mov	DWORD PTR tv93[rsp], 255		; 000000ffH
$LN7@stbi__gif_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pal$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	edx, BYTE PTR tv93[rsp]
	mov	BYTE PTR [rax+rcx], dl
; Line 6527
	jmp	$LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6528
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_parse_colortable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
s$ = 64
stbi__gif_test_raw PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6503
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6505
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6506
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 6507
	cmp	DWORD PTR sz$[rsp], 57			; 00000039H
	je	SHORT $LN4@stbi__gif_
	cmp	DWORD PTR sz$[rsp], 55			; 00000037H
	je	SHORT $LN4@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6508
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6509
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6510
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_test_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$1 = 32
count$2 = 36
i$3 = 40
dest$4 = 48
num_packets$ = 56
left$5 = 60
left$6 = 64
packet_idx$7 = 68
y$ = 72
act_comp$ = 76
tv152 = 80
x$8 = 84
i$9 = 88
packet$10 = 96
tv138 = 104
packet$11 = 112
chained$ = 120
value$12 = 124
value$13 = 128
tv69 = 136
tv95 = 144
tv134 = 152
tv156 = 160
tv176 = 168
tv207 = 176
tv217 = 184
tv238 = 192
packets$ = 200
__$ArrayPad$ = 232
s$ = 256
width$ = 264
height$ = 272
comp$ = 280
result$ = 288
stbi__pic_load_core PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6313
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6314
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
$LN4@stbi__pic_:
; Line 6322
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN29@stbi__pic_
; Line 6323
	lea	rcx, OFFSET FLAT:$SG134354
	call	stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__pic_
	mov	QWORD PTR tv69[rsp], 0
	jmp	SHORT $LN51@stbi__pic_
$LN50@stbi__pic_:
	mov	QWORD PTR tv69[rsp], 0
$LN51@stbi__pic_:
	mov	rax, QWORD PTR tv69[rsp]
	jmp	$LN1@stbi__pic_
$LN29@stbi__pic_:
; Line 6325
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$11[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
; Line 6327
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 6328
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx], al
; Line 6329
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 6330
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 6332
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 6334
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN30@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134356
	call	stbi__err
	test	eax, eax
	je	SHORT $LN52@stbi__pic_
	mov	QWORD PTR tv95[rsp], 0
	jmp	SHORT $LN53@stbi__pic_
$LN52@stbi__pic_:
	mov	QWORD PTR tv95[rsp], 0
$LN53@stbi__pic_:
	mov	rax, QWORD PTR tv95[rsp]
	jmp	$LN1@stbi__pic_
$LN30@stbi__pic_:
; Line 6335
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN31@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134358
	call	stbi__err
	test	eax, eax
	je	SHORT $LN54@stbi__pic_
	mov	QWORD PTR tv134[rsp], 0
	jmp	SHORT $LN55@stbi__pic_
$LN54@stbi__pic_:
	mov	QWORD PTR tv134[rsp], 0
$LN55@stbi__pic_:
	mov	rax, QWORD PTR tv134[rsp]
	jmp	$LN1@stbi__pic_
$LN31@stbi__pic_:
; Line 6336
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 6338
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN56@stbi__pic_
	mov	DWORD PTR tv138[rsp], 4
	jmp	SHORT $LN57@stbi__pic_
$LN56@stbi__pic_:
	mov	DWORD PTR tv138[rsp], 3
$LN57@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv138[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6340
	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN7@stbi__pic_
$LN5@stbi__pic_:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN7@stbi__pic_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN6@stbi__pic_
; Line 6343
	mov	DWORD PTR packet_idx$7[rsp], 0
	jmp	SHORT $LN10@stbi__pic_
$LN8@stbi__pic_:
	mov	eax, DWORD PTR packet_idx$7[rsp]
	inc	eax
	mov	DWORD PTR packet_idx$7[rsp], eax
$LN10@stbi__pic_:
	mov	eax, DWORD PTR num_packets$[rsp]
	cmp	DWORD PTR packet_idx$7[rsp], eax
	jge	$LN9@stbi__pic_
; Line 6344
	movsxd	rax, DWORD PTR packet_idx$7[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$10[rsp], rax
; Line 6345
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$4[rsp], rax
; Line 6347
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	BYTE PTR tv152[rsp], al
	cmp	BYTE PTR tv152[rsp], 0
	je	SHORT $LN33@stbi__pic_
	cmp	BYTE PTR tv152[rsp], 1
	je	$LN35@stbi__pic_
	cmp	BYTE PTR tv152[rsp], 2
	je	$LN39@stbi__pic_
; Line 6349
	lea	rcx, OFFSET FLAT:$SG134360
	call	stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__pic_
	mov	QWORD PTR tv156[rsp], 0
	jmp	SHORT $LN59@stbi__pic_
$LN58@stbi__pic_:
	mov	QWORD PTR tv156[rsp], 0
$LN59@stbi__pic_:
	mov	rax, QWORD PTR tv156[rsp]
	jmp	$LN1@stbi__pic_
$LN33@stbi__pic_:
; Line 6354
	mov	DWORD PTR x$8[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN13@stbi__pic_:
	mov	eax, DWORD PTR x$8[rsp]
	inc	eax
	mov	DWORD PTR x$8[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN15@stbi__pic_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$8[rsp], eax
	jge	SHORT $LN14@stbi__pic_
; Line 6355
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN34@stbi__pic_
; Line 6356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN34@stbi__pic_:
	jmp	SHORT $LN13@stbi__pic_
$LN14@stbi__pic_:
; Line 6357
	jmp	$LN11@stbi__pic_
$LN35@stbi__pic_:
; Line 6362
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$5[rsp], eax
$LN16@stbi__pic_:
; Line 6364
	cmp	DWORD PTR left$5[rsp], 0
	jle	$LN17@stbi__pic_
; Line 6367
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR count$1[rsp], al
; Line 6368
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN36@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134365
	call	stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__pic_
	mov	QWORD PTR tv176[rsp], 0
	jmp	SHORT $LN61@stbi__pic_
$LN60@stbi__pic_:
	mov	QWORD PTR tv176[rsp], 0
$LN61@stbi__pic_:
	mov	rax, QWORD PTR tv176[rsp]
	jmp	$LN1@stbi__pic_
$LN36@stbi__pic_:
; Line 6370
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	eax, DWORD PTR left$5[rsp]
	jle	SHORT $LN37@stbi__pic_
; Line 6371
	movzx	eax, BYTE PTR left$5[rsp]
	mov	BYTE PTR count$1[rsp], al
$LN37@stbi__pic_:
; Line 6373
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN38@stbi__pic_
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN38@stbi__pic_:
; Line 6375
	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN20@stbi__pic_
$LN18@stbi__pic_:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN20@stbi__pic_:
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jge	SHORT $LN19@stbi__pic_
; Line 6376
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	stbi__copyval
	jmp	SHORT $LN18@stbi__pic_
$LN19@stbi__pic_:
; Line 6377
	movzx	eax, BYTE PTR count$1[rsp]
	mov	ecx, DWORD PTR left$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$5[rsp], eax
; Line 6378
	jmp	$LN16@stbi__pic_
$LN17@stbi__pic_:
; Line 6380
	jmp	$LN11@stbi__pic_
$LN39@stbi__pic_:
; Line 6383
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$6[rsp], eax
$LN21@stbi__pic_:
; Line 6384
	cmp	DWORD PTR left$6[rsp], 0
	jle	$LN22@stbi__pic_
; Line 6385
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR count$2[rsp], eax
; Line 6386
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN40@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134370
	call	stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__pic_
	mov	QWORD PTR tv207[rsp], 0
	jmp	SHORT $LN63@stbi__pic_
$LN62@stbi__pic_:
	mov	QWORD PTR tv207[rsp], 0
$LN63@stbi__pic_:
	mov	rax, QWORD PTR tv207[rsp]
	jmp	$LN1@stbi__pic_
$LN40@stbi__pic_:
; Line 6388
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jl	$LN41@stbi__pic_
; Line 6391
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jne	SHORT $LN43@stbi__pic_
; Line 6392
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR count$2[rsp], eax
	jmp	SHORT $LN44@stbi__pic_
$LN43@stbi__pic_:
; Line 6394
	mov	eax, DWORD PTR count$2[rsp]
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR count$2[rsp], eax
$LN44@stbi__pic_:
; Line 6395
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN45@stbi__pic_
; Line 6396
	lea	rcx, OFFSET FLAT:$SG134376
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__pic_
	mov	QWORD PTR tv217[rsp], 0
	jmp	SHORT $LN65@stbi__pic_
$LN64@stbi__pic_:
	mov	QWORD PTR tv217[rsp], 0
$LN65@stbi__pic_:
	mov	rax, QWORD PTR tv217[rsp]
	jmp	$LN1@stbi__pic_
$LN45@stbi__pic_:
; Line 6398
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN46@stbi__pic_
; Line 6399
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN46@stbi__pic_:
; Line 6401
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN25@stbi__pic_
$LN23@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN25@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN24@stbi__pic_
; Line 6402
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	stbi__copyval
	jmp	SHORT $LN23@stbi__pic_
$LN24@stbi__pic_:
; Line 6403
	jmp	$LN42@stbi__pic_
$LN41@stbi__pic_:
; Line 6404
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
; Line 6405
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN47@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134379
	call	stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__pic_
	mov	QWORD PTR tv238[rsp], 0
	jmp	SHORT $LN67@stbi__pic_
$LN66@stbi__pic_:
	mov	QWORD PTR tv238[rsp], 0
$LN67@stbi__pic_:
	mov	rax, QWORD PTR tv238[rsp]
	jmp	SHORT $LN1@stbi__pic_
$LN47@stbi__pic_:
; Line 6407
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN28@stbi__pic_
$LN26@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN28@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN27@stbi__pic_
; Line 6408
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__readval
	test	rax, rax
	jne	SHORT $LN48@stbi__pic_
; Line 6409
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN48@stbi__pic_:
	jmp	SHORT $LN26@stbi__pic_
$LN27@stbi__pic_:
$LN42@stbi__pic_:
; Line 6411
	mov	eax, DWORD PTR count$2[rsp]
	mov	ecx, DWORD PTR left$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$6[rsp], eax
; Line 6412
	jmp	$LN21@stbi__pic_
$LN22@stbi__pic_:
$LN11@stbi__pic_:
; Line 6416
	jmp	$LN8@stbi__pic_
$LN9@stbi__pic_:
; Line 6417
	jmp	$LN5@stbi__pic_
$LN6@stbi__pic_:
; Line 6419
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6420
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 248				; 000000f8H
	ret	0
stbi__pic_load_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
mask$ = 4
channel$ = 32
dest$ = 40
src$ = 48
stbi__copyval PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6304
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 6305
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__copy
$LN2@stbi__copy:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__copy:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__copy
; Line 6308
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__copy
; Line 6309
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	r8, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__copy:
	jmp	SHORT $LN2@stbi__copy
$LN3@stbi__copy:
; Line 6310
	add	rsp, 24
	ret	0
stbi__copyval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
mask$ = 36
tv75 = 40
s$ = 64
channel$ = 72
dest$ = 80
stbi__readval PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6290
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6291
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6293
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__read
$LN2@stbi__read:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__read:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__read
; Line 6294
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__read
; Line 6295
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN6@stbi__read
	lea	rcx, OFFSET FLAT:$SG134248
	call	stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__read
	mov	QWORD PTR tv75[rsp], 0
	jmp	SHORT $LN9@stbi__read
$LN8@stbi__read:
	mov	QWORD PTR tv75[rsp], 0
$LN9@stbi__read:
	mov	rax, QWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbi__read
$LN6@stbi__read:
; Line 6296
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__read:
; Line 6298
	jmp	SHORT $LN2@stbi__read
$LN3@stbi__read:
; Line 6300
	mov	rax, QWORD PTR dest$[rsp]
$LN1@stbi__read:
; Line 6301
	add	rsp, 56					; 00000038H
	ret	0
stbi__readval ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
stbi__pic_test_core PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6269
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6272
	lea	rdx, OFFSET FLAT:$SG134221
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN5@stbi__pic_
; Line 6273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
; Line 6275
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 84			; 00000054H
	jge	SHORT $LN3@stbi__pic_
; Line 6276
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6278
	lea	rdx, OFFSET FLAT:$SG134223
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN6@stbi__pic_
; Line 6279
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6281
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6282
	add	rsp, 56					; 00000038H
	ret	0
stbi__pic_test_core ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
str$ = 72
stbi__pic_is4 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6259
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6261
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__pic_
; Line 6262
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__pic_
; Line 6263
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6265
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6266
	add	rsp, 56					; 00000038H
	ret	0
stbi__pic_is4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$1 = 32
len$ = 36
count$ = 40
nleft$ = 44
s$ = 64
p$ = 72
pixelCount$ = 80
stbi__psd_decode_rle PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6011
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6014
	mov	DWORD PTR count$[rsp], 0
$LN2@stbi__psd_:
; Line 6015
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR pixelCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$[rsp], eax
	cmp	DWORD PTR nleft$[rsp], 0
	jle	$LN3@stbi__psd_
; Line 6016
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6017
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jne	SHORT $LN8@stbi__psd_
	jmp	$LN9@stbi__psd_
$LN8@stbi__psd_:
; Line 6019
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jge	SHORT $LN10@stbi__psd_
; Line 6021
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6022
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN12@stbi__psd_
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN12@stbi__psd_:
; Line 6023
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN4@stbi__psd_:
; Line 6024
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN5@stbi__psd_
; Line 6025
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx], al
; Line 6026
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6027
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6028
	jmp	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 6029
	jmp	SHORT $LN11@stbi__psd_
$LN10@stbi__psd_:
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jle	SHORT $LN13@stbi__psd_
; Line 6033
	mov	eax, 257				; 00000101H
	sub	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR len$[rsp], eax
; Line 6034
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN14@stbi__psd_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN14@stbi__psd_:
; Line 6035
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR val$1[rsp], al
; Line 6036
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN6@stbi__psd_:
; Line 6037
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN7@stbi__psd_
; Line 6038
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
; Line 6039
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6040
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6041
	jmp	SHORT $LN6@stbi__psd_
$LN7@stbi__psd_:
$LN13@stbi__psd_:
$LN11@stbi__psd_:
$LN9@stbi__psd_:
; Line 6043
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6045
	mov	eax, 1
$LN1@stbi__psd_:
; Line 6046
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_decode_rle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
px$ = 32
fiveBitMask$ = 36
r$ = 40
g$ = 44
b$ = 48
s$ = 80
out$ = 88
stbi__tga_read_rgb16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5775
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5776
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	WORD PTR px$[rsp], ax
; Line 5777
	mov	eax, 31
	mov	WORD PTR fiveBitMask$[rsp], ax
; Line 5779
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 10
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 5780
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 5
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR g$[rsp], eax
; Line 5781
	movzx	eax, WORD PTR px$[rsp]
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 5783
	imul	eax, DWORD PTR r$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5784
	imul	eax, DWORD PTR g$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5785
	imul	eax, DWORD PTR b$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5791
	add	rsp, 72					; 00000048H
	ret	0
stbi__tga_read_rgb16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
bits_per_pixel$ = 32
is_grey$ = 40
is_rgb16$ = 48
stbi__tga_get_comp PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5662
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5664
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN4@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbi__tga_:
; Line 5665
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 8
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 24
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $LN12@stbi__tga_
$LN5@stbi__tga_:
; Line 5666
	mov	eax, 1
	jmp	SHORT $LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5667
	cmp	DWORD PTR is_grey$[rsp], 0
	je	SHORT $LN7@stbi__tga_
	mov	eax, 2
	jmp	SHORT $LN1@stbi__tga_
$LN7@stbi__tga_:
$LN8@stbi__tga_:
; Line 5669
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN9@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 1
$LN9@stbi__tga_:
; Line 5670
	mov	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN10@stbi__tga_:
$LN11@stbi__tga_:
; Line 5672
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5673
	xor	eax, eax
$LN1@stbi__tga_:
; Line 5675
	add	rsp, 24
	ret	0
stbi__tga_get_comp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsz$ = 32
compress$1 = 36
i$2 = 40
tv75 = 48
tv95 = 56
tv136 = 64
tv156 = 72
tv168 = 80
tv173 = 88
tv182 = 96
tv224 = 104
tv228 = 112
tv234 = 120
s$ = 144
info$ = 152
stbi__bmp_parse_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5385
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 5387
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN6@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN5@stbi__bmp_
$LN6@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG133485
	call	stbi__err
	test	eax, eax
	je	SHORT $LN32@stbi__bmp_
	mov	QWORD PTR tv75[rsp], 0
	jmp	SHORT $LN33@stbi__bmp_
$LN32@stbi__bmp_:
	mov	QWORD PTR tv75[rsp], 0
$LN33@stbi__bmp_:
	mov	rax, QWORD PTR tv75[rsp]
	jmp	$LN1@stbi__bmp_
$LN5@stbi__bmp_:
; Line 5388
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5389
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5390
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5391
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5392
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR hsz$[rsp], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR hsz$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 5393
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 5394
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+32], 14
; Line 5396
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jge	SHORT $LN7@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133487
	call	stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__bmp_
	mov	QWORD PTR tv95[rsp], 0
	jmp	SHORT $LN35@stbi__bmp_
$LN34@stbi__bmp_:
	mov	QWORD PTR tv95[rsp], 0
$LN35@stbi__bmp_:
	mov	rax, QWORD PTR tv95[rsp]
	jmp	$LN1@stbi__bmp_
$LN7@stbi__bmp_:
; Line 5398
	cmp	DWORD PTR hsz$[rsp], 12
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN8@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133489
	call	stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__bmp_
	mov	QWORD PTR tv136[rsp], 0
	jmp	SHORT $LN37@stbi__bmp_
$LN36@stbi__bmp_:
	mov	QWORD PTR tv136[rsp], 0
$LN37@stbi__bmp_:
	mov	rax, QWORD PTR tv136[rsp]
	jmp	$LN1@stbi__bmp_
$LN8@stbi__bmp_:
; Line 5399
	cmp	DWORD PTR hsz$[rsp], 12
	jne	SHORT $LN9@stbi__bmp_
; Line 5400
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5401
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5402
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5403
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5404
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN10@stbi__bmp_:
; Line 5406
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	cmp	eax, 1
	je	SHORT $LN11@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133493
	call	stbi__err
	test	eax, eax
	je	SHORT $LN38@stbi__bmp_
	mov	QWORD PTR tv156[rsp], 0
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
	mov	QWORD PTR tv156[rsp], 0
$LN39@stbi__bmp_:
	mov	rax, QWORD PTR tv156[rsp]
	jmp	$LN1@stbi__bmp_
$LN11@stbi__bmp_:
; Line 5407
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5408
	cmp	DWORD PTR hsz$[rsp], 12
	je	$LN12@stbi__bmp_
; Line 5409
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR compress$1[rsp], eax
; Line 5410
	cmp	DWORD PTR compress$1[rsp], 1
	je	SHORT $LN14@stbi__bmp_
	cmp	DWORD PTR compress$1[rsp], 2
	jne	SHORT $LN13@stbi__bmp_
$LN14@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG133497
	call	stbi__err
	test	eax, eax
	je	SHORT $LN40@stbi__bmp_
	mov	QWORD PTR tv168[rsp], 0
	jmp	SHORT $LN41@stbi__bmp_
$LN40@stbi__bmp_:
	mov	QWORD PTR tv168[rsp], 0
$LN41@stbi__bmp_:
	mov	rax, QWORD PTR tv168[rsp]
	jmp	$LN1@stbi__bmp_
$LN13@stbi__bmp_:
; Line 5411
	cmp	DWORD PTR compress$1[rsp], 4
	jl	SHORT $LN15@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133499
	call	stbi__err
	test	eax, eax
	je	SHORT $LN42@stbi__bmp_
	mov	QWORD PTR tv173[rsp], 0
	jmp	SHORT $LN43@stbi__bmp_
$LN42@stbi__bmp_:
	mov	QWORD PTR tv173[rsp], 0
$LN43@stbi__bmp_:
	mov	rax, QWORD PTR tv173[rsp]
	jmp	$LN1@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5412
	cmp	DWORD PTR compress$1[rsp], 3
	jne	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	je	SHORT $LN16@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133501
	call	stbi__err
	test	eax, eax
	je	SHORT $LN44@stbi__bmp_
	mov	QWORD PTR tv182[rsp], 0
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
	mov	QWORD PTR tv182[rsp], 0
$LN45@stbi__bmp_:
	mov	rax, QWORD PTR tv182[rsp]
	jmp	$LN1@stbi__bmp_
$LN16@stbi__bmp_:
; Line 5413
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5414
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5415
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5416
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5417
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5418
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN19@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	$LN17@stbi__bmp_
$LN19@stbi__bmp_:
; Line 5419
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	SHORT $LN20@stbi__bmp_
; Line 5420
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5421
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5422
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5423
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
$LN20@stbi__bmp_:
; Line 5425
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN22@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	$LN21@stbi__bmp_
$LN22@stbi__bmp_:
; Line 5426
	cmp	DWORD PTR compress$1[rsp], 0
	jne	SHORT $LN23@stbi__bmp_
; Line 5427
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbi__bmp_set_mask_defaults
	jmp	$LN24@stbi__bmp_
$LN23@stbi__bmp_:
; Line 5428
	cmp	DWORD PTR compress$1[rsp], 3
	jne	$LN25@stbi__bmp_
; Line 5429
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5430
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5431
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5432
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, 12
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 5434
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN27@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN27@stbi__bmp_
; Line 5436
	lea	rcx, OFFSET FLAT:$SG133513
	call	stbi__err
	test	eax, eax
	je	SHORT $LN46@stbi__bmp_
	mov	QWORD PTR tv224[rsp], 0
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
	mov	QWORD PTR tv224[rsp], 0
$LN47@stbi__bmp_:
	mov	rax, QWORD PTR tv224[rsp]
	jmp	$LN1@stbi__bmp_
$LN27@stbi__bmp_:
; Line 5438
	jmp	SHORT $LN26@stbi__bmp_
$LN25@stbi__bmp_:
; Line 5439
	lea	rcx, OFFSET FLAT:$SG133514
	call	stbi__err
	test	eax, eax
	je	SHORT $LN48@stbi__bmp_
	mov	QWORD PTR tv228[rsp], 0
	jmp	SHORT $LN49@stbi__bmp_
$LN48@stbi__bmp_:
	mov	QWORD PTR tv228[rsp], 0
$LN49@stbi__bmp_:
	mov	rax, QWORD PTR tv228[rsp]
	jmp	$LN1@stbi__bmp_
$LN26@stbi__bmp_:
$LN24@stbi__bmp_:
$LN21@stbi__bmp_:
; Line 5441
	jmp	$LN18@stbi__bmp_
$LN17@stbi__bmp_:
; Line 5444
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN28@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN28@stbi__bmp_
; Line 5445
	lea	rcx, OFFSET FLAT:$SG133516
	call	stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__bmp_
	mov	QWORD PTR tv234[rsp], 0
	jmp	SHORT $LN51@stbi__bmp_
$LN50@stbi__bmp_:
	mov	QWORD PTR tv234[rsp], 0
$LN51@stbi__bmp_:
	mov	rax, QWORD PTR tv234[rsp]
	jmp	$LN1@stbi__bmp_
$LN28@stbi__bmp_:
; Line 5446
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5447
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5448
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5449
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 5450
	cmp	DWORD PTR compress$1[rsp], 3
	je	SHORT $LN29@stbi__bmp_
; Line 5451
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbi__bmp_set_mask_defaults
$LN29@stbi__bmp_:
; Line 5452
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5453
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbi__bmp_:
	cmp	DWORD PTR i$2[rsp], 12
	jge	SHORT $LN3@stbi__bmp_
; Line 5454
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	jmp	SHORT $LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5455
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	jne	SHORT $LN30@stbi__bmp_
; Line 5456
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5457
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5458
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5459
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
$LN30@stbi__bmp_:
$LN18@stbi__bmp_:
$LN12@stbi__bmp_:
; Line 5463
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 5464
	add	rsp, 136				; 00000088H
	ret	0
stbi__bmp_parse_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
compress$ = 16
stbi__bmp_set_mask_defaults PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5359
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 5361
	cmp	DWORD PTR compress$[rsp], 3
	jne	SHORT $LN2@stbi__bmp_
; Line 5362
	mov	eax, 1
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5364
	cmp	DWORD PTR compress$[rsp], 0
	jne	$LN3@stbi__bmp_
; Line 5365
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN4@stbi__bmp_
; Line 5366
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 31744		; 00007c00H
; Line 5367
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 992			; 000003e0H
; Line 5368
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 31
	jmp	SHORT $LN5@stbi__bmp_
$LN4@stbi__bmp_:
; Line 5369
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	SHORT $LN6@stbi__bmp_
; Line 5370
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 16711680		; 00ff0000H
; Line 5371
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 65280		; 0000ff00H
; Line 5372
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 255			; 000000ffH
; Line 5373
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], -16777216		; ff000000H
; Line 5374
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 5375
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 5379
	mov	eax, 1
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5381
	xor	eax, eax
$LN1@stbi__bmp_:
; Line 5382
	ret	0
stbi__bmp_set_mask_defaults ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
shift$ = 56
bits$ = 64
stbi__shiftsigned PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5332
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 5341
	cmp	DWORD PTR shift$[rsp], 0
	jge	SHORT $LN2@stbi__shif
; Line 5342
	mov	eax, DWORD PTR shift$[rsp]
	neg	eax
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, cl
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN3@stbi__shif
$LN2@stbi__shif:
; Line 5344
	mov	eax, DWORD PTR shift$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
$LN3@stbi__shif:
; Line 5345
	cmp	DWORD PTR v$[rsp], 256			; 00000100H
	jb	SHORT $LN5@stbi__shif
	mov	r8d, 5345				; 000014e1H
	lea	rdx, OFFSET FLAT:$SG133403
	lea	rcx, OFFSET FLAT:$SG133404
	call	_wassert
	xor	eax, eax
$LN5@stbi__shif:
; Line 5346
	mov	eax, 8
	sub	eax, DWORD PTR bits$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
; Line 5347
	cmp	DWORD PTR bits$[rsp], 0
	jl	SHORT $LN6@stbi__shif
	cmp	DWORD PTR bits$[rsp], 8
	jle	SHORT $LN7@stbi__shif
$LN6@stbi__shif:
	mov	r8d, 5347				; 000014e3H
	lea	rdx, OFFSET FLAT:$SG133405
	lea	rcx, OFFSET FLAT:$SG133406
	call	_wassert
	xor	eax, eax
$LN7@stbi__shif:
; Line 5348
	movsxd	rax, DWORD PTR bits$[rsp]
	lea	rcx, OFFSET FLAT:?mul_table@?1??stbi__shiftsigned@@9@9
	mov	edx, DWORD PTR v$[rsp]
	imul	edx, DWORD PTR [rcx+rax*4]
	mov	eax, edx
	movsxd	rcx, DWORD PTR bits$[rsp]
	lea	rdx, OFFSET FLAT:?shift_table@?1??stbi__shiftsigned@@9@9
	mov	ecx, DWORD PTR [rdx+rcx*4]
	sar	eax, cl
; Line 5349
	add	rsp, 40					; 00000028H
	ret	0
stbi__shiftsigned ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
stbi__bitcount PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5319
	mov	DWORD PTR [rsp+8], ecx
; Line 5320
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5321
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5322
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR a$[rsp], eax
; Line 5323
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5324
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5325
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
; Line 5326
	ret	0
stbi__bitcount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
z$ = 32
stbi__high_bit PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5307
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5308
	mov	DWORD PTR n$[rsp], 0
; Line 5309
	cmp	DWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbi__high
	mov	eax, -1
	jmp	$LN1@stbi__high
$LN2@stbi__high:
; Line 5310
	cmp	DWORD PTR z$[rsp], 65536		; 00010000H
	jb	SHORT $LN3@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 16
	mov	DWORD PTR z$[rsp], eax
$LN3@stbi__high:
; Line 5311
	cmp	DWORD PTR z$[rsp], 256			; 00000100H
	jb	SHORT $LN4@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 8
	mov	DWORD PTR z$[rsp], eax
$LN4@stbi__high:
; Line 5312
	cmp	DWORD PTR z$[rsp], 16
	jb	SHORT $LN5@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 4
	mov	DWORD PTR z$[rsp], eax
$LN5@stbi__high:
; Line 5313
	cmp	DWORD PTR z$[rsp], 4
	jb	SHORT $LN6@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 2
	mov	DWORD PTR z$[rsp], eax
$LN6@stbi__high:
; Line 5314
	cmp	DWORD PTR z$[rsp], 2
	jb	SHORT $LN7@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbi__high:
; Line 5315
	mov	eax, DWORD PTR n$[rsp]
$LN1@stbi__high:
; Line 5316
	add	rsp, 24
	ret	0
stbi__high_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tv83 = 36
r$ = 40
s$ = 64
stbi__bmp_test_raw PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5286
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	je	SHORT $LN2@stbi__bmp_
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5287
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN3@stbi__bmp_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5288
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5289
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5290
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
; Line 5291
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
; Line 5292
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR sz$[rsp], eax
; Line 5293
	cmp	DWORD PTR sz$[rsp], 12
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 40			; 00000028H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 56			; 00000038H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 108			; 0000006cH
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 124			; 0000007cH
	je	SHORT $LN5@stbi__bmp_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@stbi__bmp_
$LN5@stbi__bmp_:
	mov	DWORD PTR tv83[rsp], 1
$LN6@stbi__bmp_:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 5294
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__bmp_:
; Line 5295
	add	rsp, 56					; 00000038H
	ret	0
stbi__bmp_test_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
x$ = 56
y$ = 64
comp$ = 72
stbi__png_info_raw PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5247
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5248
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR p$[rsp]
	call	stbi__parse_png_file
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5249
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__rewind
; Line 5250
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5252
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__png_:
; Line 5253
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__png_:
; Line 5254
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__png_:
; Line 5255
	mov	eax, 1
$LN1@stbi__png_:
; Line 5256
	add	rsp, 40					; 00000028H
	ret	0
stbi__png_info_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv69 = 56
tv84 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
p$ = 304
x$ = 312
y$ = 320
n$ = 328
req_comp$ = 336
ri$ = 344
stbi__do_png PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5200
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
; Line 5201
	mov	QWORD PTR result$[rsp], 0
; Line 5202
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN3@stbi__do_p
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN2@stbi__do_p
$LN3@stbi__do_p:
	lea	rcx, OFFSET FLAT:$SG133287
	call	stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__do_p
	mov	QWORD PTR tv69[rsp], 0
	jmp	SHORT $LN16@stbi__do_p
$LN15@stbi__do_p:
	mov	QWORD PTR tv69[rsp], 0
$LN16@stbi__do_p:
	mov	rax, QWORD PTR tv69[rsp]
	jmp	$LN1@stbi__do_p
$LN2@stbi__do_p:
; Line 5203
	mov	r8d, DWORD PTR req_comp$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rsp]
	call	stbi__parse_png_file
	test	eax, eax
	je	$LN4@stbi__do_p
; Line 5204
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 8
	jg	SHORT $LN5@stbi__do_p
; Line 5205
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
	jmp	SHORT $LN6@stbi__do_p
$LN5@stbi__do_p:
; Line 5206
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN7@stbi__do_p
; Line 5207
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
	jmp	SHORT $LN8@stbi__do_p
$LN7@stbi__do_p:
; Line 5209
	lea	rcx, OFFSET FLAT:$SG133293
	call	stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__do_p
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN18@stbi__do_p
$LN17@stbi__do_p:
	mov	QWORD PTR tv84[rsp], 0
$LN18@stbi__do_p:
	mov	rax, QWORD PTR tv84[rsp]
	jmp	$LN1@stbi__do_p
$LN8@stbi__do_p:
$LN6@stbi__do_p:
; Line 5210
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR result$[rsp], rax
; Line 5211
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5212
	cmp	DWORD PTR req_comp$[rsp], 0
	je	$LN9@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	$LN9@stbi__do_p
; Line 5213
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 8
	jne	SHORT $LN10@stbi__do_p
; Line 5214
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN11@stbi__do_p
$LN10@stbi__do_p:
; Line 5216
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_format16
	mov	QWORD PTR result$[rsp], rax
$LN11@stbi__do_p:
; Line 5217
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 5218
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN12@stbi__do_p
	mov	rax, QWORD PTR result$[rsp]
	jmp	$LN1@stbi__do_p
$LN12@stbi__do_p:
$LN9@stbi__do_p:
; Line 5220
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 5221
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 5222
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN13@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN13@stbi__do_p:
$LN4@stbi__do_p:
; Line 5224
	lea	rax, OFFSET FLAT:$SG133299
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5224				; 00001468H
	lea	r8, OFFSET FLAT:$SG133300
	mov	edx, 93					; 0000005dH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5225
	lea	rax, OFFSET FLAT:$SG133301
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5225				; 00001469H
	lea	r8, OFFSET FLAT:$SG133302
	mov	edx, 94					; 0000005eH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR [rax+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5226
	lea	rax, OFFSET FLAT:$SG133303
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5226				; 0000146aH
	lea	r8, OFFSET FLAT:$SG133304
	mov	edx, 95					; 0000005fH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5228
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__do_p:
; Line 5229
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
stbi__do_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pal_img_n$ = 64
s$ = 72
has_trans$ = 80
i$ = 84
c$1 = 88
k$ = 96
idata_limit$ = 100
ioff$ = 104
color$ = 108
tv78 = 112
pal_len$ = 116
first$ = 120
tc$ = 124
interlace$ = 128
raw_len$2 = 132
is_iphone$ = 136
tv337 = 140
tv390 = 144
tv497 = 148
tv197 = 152
tv194 = 156
bpl$3 = 160
comp$4 = 164
filter$5 = 168
p$6 = 176
idata_limit_old$7 = 184
tv344 = 192
$T8 = 208
$T9 = 240
$T10 = 272
$T11 = 304
$T12 = 336
$T13 = 368
tc16$ = 400
palette$ = 416
__$ArrayPad$ = 1440
z$ = 1488
scan$ = 1496
req_comp$ = 1504
stbi__parse_png_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5024
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1464				; 000005b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5025
	mov	BYTE PTR pal_img_n$[rsp], 0
; Line 5026
	mov	BYTE PTR has_trans$[rsp], 0
	lea	rax, QWORD PTR tc$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 3
	rep stosb
; Line 5028
	mov	DWORD PTR ioff$[rsp], 0
	mov	DWORD PTR idata_limit$[rsp], 0
	mov	DWORD PTR pal_len$[rsp], 0
; Line 5029
	mov	DWORD PTR first$[rsp], 1
	mov	DWORD PTR interlace$[rsp], 0
	mov	DWORD PTR color$[rsp], 0
	mov	DWORD PTR is_iphone$[rsp], 0
; Line 5030
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 5032
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5033
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5034
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5036
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__check_png_header
	test	eax, eax
	jne	SHORT $LN21@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN21@stbi__pars:
; Line 5038
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN22@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
$LN2@stbi__pars:
; Line 5041
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get_chunk_header
	mov	QWORD PTR c$1[rsp], rax
; Line 5042
	mov	eax, DWORD PTR c$1[rsp+4]
	mov	DWORD PTR tv78[rsp], eax
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	ja	SHORT $LN105@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	je	SHORT $LN24@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1130840649		; 43674249H
	je	SHORT $LN23@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229209940		; 49444154H
	je	$LN61@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229278788		; 49454e44H
	je	$LN70@stbi__pars
	jmp	$LN91@stbi__pars
$LN105@stbi__pars:
	cmp	DWORD PTR tv78[rsp], 1347179589		; 504c5445H
	je	$LN45@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1951551059		; 74524e53H
	je	$LN49@stbi__pars
	jmp	$LN91@stbi__pars
$LN23@stbi__pars:
; Line 5044
	mov	DWORD PTR is_iphone$[rsp], 1
; Line 5045
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5046
	jmp	$LN5@stbi__pars
$LN24@stbi__pars:
; Line 5049
	cmp	DWORD PTR first$[rsp], 0
	jne	SHORT $LN25@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133150
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN25@stbi__pars:
; Line 5050
	mov	DWORD PTR first$[rsp], 0
; Line 5051
	cmp	DWORD PTR c$1[rsp], 13
	je	SHORT $LN26@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133152
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN26@stbi__pars:
; Line 5052
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5053
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5054
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN27@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133154
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN27@stbi__pars:
; Line 5055
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN28@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133156
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN28@stbi__pars:
; Line 5056
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+32], eax
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 1
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 4
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 8
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	je	SHORT $LN29@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133158
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN29@stbi__pars:
; Line 5057
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR color$[rsp], eax
	cmp	DWORD PTR color$[rsp], 6
	jle	SHORT $LN30@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133160
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN30@stbi__pars:
; Line 5058
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN31@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN31@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133162
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN31@stbi__pars:
; Line 5059
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN32@stbi__pars
	mov	BYTE PTR pal_img_n$[rsp], 3
	jmp	SHORT $LN33@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN34@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133166
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN34@stbi__pars:
$LN33@stbi__pars:
; Line 5060
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR comp$4[rsp], eax
	cmp	DWORD PTR comp$4[rsp], 0
	je	SHORT $LN35@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133168
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN35@stbi__pars:
; Line 5061
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR filter$5[rsp], eax
	cmp	DWORD PTR filter$5[rsp], 0
	je	SHORT $LN36@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133170
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN36@stbi__pars:
; Line 5062
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR interlace$[rsp], eax
	cmp	DWORD PTR interlace$[rsp], 1
	jle	SHORT $LN37@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133172
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN37@stbi__pars:
; Line 5063
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN39@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN38@stbi__pars
$LN39@stbi__pars:
	lea	rcx, OFFSET FLAT:$SG133175
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN38@stbi__pars:
; Line 5064
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	jne	$LN40@stbi__pars
; Line 5065
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN95@stbi__pars
	mov	DWORD PTR tv194[rsp], 3
	jmp	SHORT $LN96@stbi__pars
$LN95@stbi__pars:
	mov	DWORD PTR tv194[rsp], 1
$LN96@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN97@stbi__pars
	mov	DWORD PTR tv197[rsp], 1
	jmp	SHORT $LN98@stbi__pars
$LN97@stbi__pars:
	mov	DWORD PTR tv197[rsp], 0
$LN98@stbi__pars:
	mov	eax, DWORD PTR tv197[rsp]
	mov	ecx, DWORD PTR tv194[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5066
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN42@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133179
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN42@stbi__pars:
; Line 5067
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN43@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN43@stbi__pars:
; Line 5068
	jmp	SHORT $LN41@stbi__pars
$LN40@stbi__pars:
; Line 5071
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 5072
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN44@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133182
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN44@stbi__pars:
$LN41@stbi__pars:
; Line 5075
	jmp	$LN5@stbi__pars
$LN45@stbi__pars:
; Line 5079
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN46@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133185
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN46@stbi__pars:
; Line 5080
	cmp	DWORD PTR c$1[rsp], 768			; 00000300H
	jbe	SHORT $LN47@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133187
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 5081
	xor	edx, edx
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, 3
	div	ecx
	mov	DWORD PTR pal_len$[rsp], eax
; Line 5082
	imul	eax, DWORD PTR pal_len$[rsp], 3
	cmp	eax, DWORD PTR c$1[rsp]
	je	SHORT $LN48@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133189
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 5083
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stbi__pars
$LN7@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stbi__pars:
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@stbi__pars
; Line 5084
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5085
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5086
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5087
	mov	eax, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	mov	eax, eax
	mov	BYTE PTR palette$[rsp+rax], 255		; 000000ffH
; Line 5088
	jmp	$LN7@stbi__pars
$LN8@stbi__pars:
; Line 5089
	jmp	$LN5@stbi__pars
$LN49@stbi__pars:
; Line 5093
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN50@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133192
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN50@stbi__pars:
; Line 5094
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN51@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133194
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 5095
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	$LN52@stbi__pars
; Line 5096
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN54@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 4
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN54@stbi__pars:
; Line 5097
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN55@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133199
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN55@stbi__pars:
; Line 5098
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR c$1[rsp], eax
	jbe	SHORT $LN56@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133201
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 5099
	mov	BYTE PTR pal_img_n$[rsp], 4
; Line 5100
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__pars
$LN10@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__pars:
	mov	eax, DWORD PTR c$1[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN11@stbi__pars
; Line 5101
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
	jmp	SHORT $LN10@stbi__pars
$LN11@stbi__pars:
; Line 5102
	jmp	$LN53@stbi__pars
$LN52@stbi__pars:
; Line 5103
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN57@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133203
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN57@stbi__pars:
; Line 5104
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, 1
	cmp	DWORD PTR c$1[rsp], eax
	je	SHORT $LN58@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133205
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN58@stbi__pars:
; Line 5105
	mov	BYTE PTR has_trans$[rsp], 1
; Line 5106
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN59@stbi__pars
; Line 5107
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN15@stbi__pars
$LN13@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	WORD PTR tc16$[rsp+rcx*2], ax
	jmp	SHORT $LN13@stbi__pars
$LN14@stbi__pars:
; Line 5108
	jmp	SHORT $LN60@stbi__pars
$LN59@stbi__pars:
; Line 5109
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__pars
$LN16@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN17@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	and	eax, 255				; 000000ffH
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rcx, DWORD PTR [rcx+32]
	lea	rdx, OFFSET FLAT:stbi__depth_scale_table
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR tc$[rsp+rcx], al
	jmp	SHORT $LN16@stbi__pars
$LN17@stbi__pars:
$LN60@stbi__pars:
$LN53@stbi__pars:
; Line 5112
	jmp	$LN5@stbi__pars
$LN61@stbi__pars:
; Line 5116
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN62@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133210
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 5117
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN63@stbi__pars
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN63@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133212
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
; Line 5118
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN64@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN64@stbi__pars:
; Line 5119
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ioff$[rsp]
	jge	SHORT $LN65@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN65@stbi__pars:
; Line 5120
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	$LN66@stbi__pars
; Line 5121
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	DWORD PTR idata_limit_old$7[rsp], eax
; Line 5123
	cmp	DWORD PTR idata_limit$[rsp], 0
	jne	SHORT $LN67@stbi__pars
	cmp	DWORD PTR c$1[rsp], 4096		; 00001000H
	jbe	SHORT $LN99@stbi__pars
	mov	eax, DWORD PTR c$1[rsp]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN100@stbi__pars
$LN99@stbi__pars:
	mov	DWORD PTR tv337[rsp], 4096		; 00001000H
$LN100@stbi__pars:
	mov	eax, DWORD PTR tv337[rsp]
	mov	DWORD PTR idata_limit$[rsp], eax
$LN67@stbi__pars:
$LN19@stbi__pars:
; Line 5124
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	SHORT $LN20@stbi__pars
; Line 5125
	mov	eax, DWORD PTR idata_limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR idata_limit$[rsp], eax
	jmp	SHORT $LN19@stbi__pars
$LN20@stbi__pars:
; Line 5127
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	QWORD PTR tv344[rsp], rax
	lea	rcx, OFFSET FLAT:$SG133217
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 5127				; 00001407H
	lea	r8, OFFSET FLAT:$SG133218
	mov	edx, 90					; 0000005aH
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR tv344[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
	mov	QWORD PTR p$6[rsp], rax
	cmp	QWORD PTR p$6[rsp], 0
	jne	SHORT $LN68@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133220
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 5128
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN66@stbi__pars:
; Line 5130
	mov	eax, DWORD PTR ioff$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	r8d, DWORD PTR c$1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
	test	eax, eax
	jne	SHORT $LN69@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133222
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN69@stbi__pars:
; Line 5131
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ioff$[rsp], eax
; Line 5132
	jmp	$LN5@stbi__pars
$LN70@stbi__pars:
; Line 5137
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN71@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133225
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN71@stbi__pars:
; Line 5138
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN72@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN72@stbi__pars:
; Line 5139
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN73@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133228
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN73@stbi__pars:
; Line 5141
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+32]
	add	eax, 7
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR bpl$3[rsp], eax
; Line 5142
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR bpl$3[rsp]
	imul	ecx, DWORD PTR [rax+4]
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR raw_len$2[rsp], eax
; Line 5143
	cmp	DWORD PTR is_iphone$[rsp], 0
	jne	SHORT $LN101@stbi__pars
	mov	DWORD PTR tv390[rsp], 1
	jmp	SHORT $LN102@stbi__pars
$LN101@stbi__pars:
	mov	DWORD PTR tv390[rsp], 0
$LN102@stbi__pars:
	mov	eax, DWORD PTR tv390[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR raw_len$2[rsp]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	edx, DWORD PTR ioff$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbi_zlib_decode_malloc_guesssize_headerflag
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 5144
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN74@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN74@stbi__pars:
; Line 5145
	lea	rax, OFFSET FLAT:$SG133230
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5145				; 00001419H
	lea	r8, OFFSET FLAT:$SG133231
	mov	edx, 91					; 0000005bH
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5146
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN78@stbi__pars
	cmp	DWORD PTR req_comp$[rsp], 3
	je	SHORT $LN78@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN77@stbi__pars
$LN78@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN75@stbi__pars
$LN77@stbi__pars:
; Line 5147
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
	jmp	SHORT $LN76@stbi__pars
$LN75@stbi__pars:
; Line 5149
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+12], ecx
$LN76@stbi__pars:
; Line 5150
	mov	eax, DWORD PTR interlace$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__create_png_image
	test	eax, eax
	jne	SHORT $LN79@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN79@stbi__pars:
; Line 5151
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN80@stbi__pars
; Line 5152
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN81@stbi__pars
; Line 5153
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc16$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__compute_transparency16
	test	eax, eax
	jne	SHORT $LN83@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN83@stbi__pars:
; Line 5154
	jmp	SHORT $LN82@stbi__pars
$LN81@stbi__pars:
; Line 5155
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__compute_transparency
	test	eax, eax
	jne	SHORT $LN84@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN84@stbi__pars:
$LN82@stbi__pars:
$LN80@stbi__pars:
; Line 5158
	cmp	DWORD PTR is_iphone$[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN103@stbi__pars
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv497[rsp], eax
	jmp	SHORT $LN104@stbi__pars
$LN103@stbi__pars:
	mov	eax, DWORD PTR stbi__de_iphone_flag_global
	mov	DWORD PTR tv497[rsp], eax
$LN104@stbi__pars:
	cmp	DWORD PTR tv497[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 2
	jle	SHORT $LN85@stbi__pars
; Line 5159
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__de_iphone
$LN85@stbi__pars:
; Line 5160
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN86@stbi__pars
; Line 5162
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5163
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5164
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN88@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
$LN88@stbi__pars:
; Line 5165
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR pal_len$[rsp]
	lea	rdx, QWORD PTR palette$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__expand_png_palette
	test	eax, eax
	jne	SHORT $LN89@stbi__pars
; Line 5166
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN89@stbi__pars:
; Line 5167
	jmp	SHORT $LN87@stbi__pars
$LN86@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN90@stbi__pars
; Line 5169
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN90@stbi__pars:
$LN87@stbi__pars:
; Line 5171
	lea	rax, OFFSET FLAT:$SG133248
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5171				; 00001433H
	lea	r8, OFFSET FLAT:$SG133249
	mov	edx, 92					; 0000005cH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5173
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 5174
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN91@stbi__pars:
; Line 5179
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN92@stbi__pars
	lea	rcx, OFFSET FLAT:$SG133252
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN92@stbi__pars:
; Line 5180
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 536870912				; 20000000H
	test	eax, eax
	jne	$LN93@stbi__pars
; Line 5184
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5185
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5186
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5187
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	mov	BYTE PTR [rdx+rcx], al
; Line 5189
	lea	rcx, OFFSET FLAT:?invalid_chunk@?BO@??stbi__parse_png_file@@9@9
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN93@stbi__pars:
; Line 5191
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN5@stbi__pars:
; Line 5195
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 5196
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 5197
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1464				; 000005b8H
	pop	rdi
	pop	rsi
	ret	0
stbi__parse_png_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$1 = 32
half$2 = 33
p$ = 40
t$3 = 48
i$ = 52
t$4 = 56
t$5 = 57
pixel_count$ = 60
tv133 = 64
s$ = 72
z$ = 96
stbi__de_iphone PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4979
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4980
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4981
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4982
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4984
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 3
	jne	$LN11@stbi__de_i
; Line 4985
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__de_i
$LN2@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__de_i
; Line 4986
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$4[rsp], al
; Line 4987
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4988
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$4[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4989
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4990
	jmp	SHORT $LN2@stbi__de_i
$LN3@stbi__de_i:
; Line 4991
	jmp	$LN12@stbi__de_i
$LN11@stbi__de_i:
; Line 4992
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 4
	je	SHORT $LN18@stbi__de_i
	mov	r8d, 4992				; 00001380H
	lea	rdx, OFFSET FLAT:$SG133042
	lea	rcx, OFFSET FLAT:$SG133043
	call	_wassert
	xor	eax, eax
$LN18@stbi__de_i:
; Line 4993
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN19@stbi__de_i
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN20@stbi__de_i
$LN19@stbi__de_i:
	mov	eax, DWORD PTR stbi__unpremultiply_on_load_global
	mov	DWORD PTR tv133[rsp], eax
$LN20@stbi__de_i:
	cmp	DWORD PTR tv133[rsp], 0
	je	$LN13@stbi__de_i
; Line 4995
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__de_i
$LN5@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__de_i
; Line 4996
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR a$1[rsp], al
; Line 4997
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$3[rsp], al
; Line 4998
	movzx	eax, BYTE PTR a$1[rsp]
	test	eax, eax
	je	$LN15@stbi__de_i
; Line 4999
	movzx	eax, BYTE PTR a$1[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR half$2[rsp], al
; Line 5000
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5001
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5002
	movzx	eax, BYTE PTR t$3[rsp]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5003
	jmp	SHORT $LN16@stbi__de_i
$LN15@stbi__de_i:
; Line 5004
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5005
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN16@stbi__de_i:
; Line 5007
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5008
	jmp	$LN5@stbi__de_i
$LN6@stbi__de_i:
; Line 5009
	jmp	SHORT $LN14@stbi__de_i
$LN13@stbi__de_i:
; Line 5011
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__de_i
$LN8@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN9@stbi__de_i
; Line 5012
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
; Line 5013
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5014
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5015
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5016
	jmp	SHORT $LN8@stbi__de_i
$LN9@stbi__de_i:
$LN14@stbi__de_i:
$LN12@stbi__de_i:
; Line 5019
	add	rsp, 88					; 00000058H
	ret	0
stbi__de_iphone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi__unpremultiply_on_load_thread PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4959
	mov	DWORD PTR [rsp+8], ecx
; Line 4960
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4961
	mov	eax, OFFSET FLAT:stbi__unpremultiply_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4962
	ret	0
stbi__unpremultiply_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
p$ = 56
n$1 = 64
n$2 = 68
pixel_count$ = 72
orig$ = 80
temp_out$ = 88
$T3 = 96
$T4 = 128
a$ = 192
palette$ = 200
len$ = 208
pal_img_n$ = 216
stbi__expand_png_palette PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4902
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 4903
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4904
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR orig$[rsp], rax
; Line 4906
	xor	r8d, r8d
	mov	edx, DWORD PTR pal_img_n$[rsp]
	mov	ecx, DWORD PTR pixel_count$[rsp]
	call	stbi__malloc_mad2
	mov	QWORD PTR p$[rsp], rax
; Line 4907
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN8@stbi__expa
	lea	rcx, OFFSET FLAT:$SG132992
	call	stbi__err
	jmp	$LN1@stbi__expa
$LN8@stbi__expa:
; Line 4910
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR temp_out$[rsp], rax
; Line 4912
	cmp	DWORD PTR pal_img_n$[rsp], 3
	jne	$LN9@stbi__expa
; Line 4913
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__expa
$LN2@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN3@stbi__expa
; Line 4914
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$2[rsp], eax
; Line 4915
	movsxd	rax, DWORD PTR n$2[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4916
	mov	eax, DWORD PTR n$2[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4917
	mov	eax, DWORD PTR n$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4918
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4919
	jmp	$LN2@stbi__expa
$LN3@stbi__expa:
; Line 4920
	jmp	$LN10@stbi__expa
$LN9@stbi__expa:
; Line 4921
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__expa
$LN5@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__expa
; Line 4922
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 4923
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4924
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4925
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4926
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4927
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4928
	jmp	$LN5@stbi__expa
$LN6@stbi__expa:
$LN10@stbi__expa:
; Line 4930
	lea	rax, OFFSET FLAT:$SG132995
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4930				; 00001342H
	lea	r8, OFFSET FLAT:$SG132996
	mov	edx, 89					; 00000059H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 4931
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR temp_out$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4935
	mov	eax, 1
$LN1@stbi__expa:
; Line 4936
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
stbi__expand_png_palette ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
stbi__compute_transparency16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4877
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4878
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4879
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4880
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4884
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4884				; 00001314H
	lea	rdx, OFFSET FLAT:$SG132960
	lea	rcx, OFFSET FLAT:$SG132961
	call	_wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4886
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4887
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4888
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 65535		; 0000ffffH
$LN14@stbi__comp:
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, WORD PTR tv87[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 4889
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4890
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4891
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4893
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4894
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN10@stbi__comp:
; Line 4895
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
; Line 4896
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4898
	mov	eax, 1
; Line 4899
	add	rsp, 72					; 00000048H
	ret	0
stbi__compute_transparency16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
stbi__compute_transparency PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4852
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4853
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4854
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4855
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4859
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4859				; 000012fbH
	lea	rdx, OFFSET FLAT:$SG132934
	lea	rcx, OFFSET FLAT:$SG132935
	call	_wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4861
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4863
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 255		; 000000ffH
$LN14@stbi__comp:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR tv87[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4864
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
; Line 4865
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4866
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4867
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4868
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4869
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN10@stbi__comp:
; Line 4870
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4871
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4873
	mov	eax, 1
; Line 4874
	add	rsp, 72					; 00000048H
	ret	0
stbi__compute_transparency ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 64
j$1 = 68
x$2 = 72
i$3 = 76
out_bytes$ = 80
y$4 = 84
tv65 = 88
img_len$5 = 92
final$ = 96
bytes$ = 104
out_y$6 = 108
out_x$7 = 112
tv288 = 120
$T8 = 128
$T9 = 160
$T10 = 192
$T11 = 224
yspc$12 = 256
xspc$13 = 288
yorig$14 = 320
xorig$15 = 352
__$ArrayPad$ = 384
a$ = 432
image_data$ = 440
image_data_len$ = 448
out_n$ = 456
depth$ = 464
color$ = 472
interlaced$ = 480
stbi__create_png_image PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4807
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4808
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN16@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN17@stbi__crea
$LN16@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN17@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4809
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR out_bytes$[rsp], eax
; Line 4812
	cmp	DWORD PTR interlaced$[rsp], 0
	jne	SHORT $LN11@stbi__crea
; Line 4813
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], edx
	mov	edx, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__create_png_image_raw
	jmp	$LN1@stbi__crea
$LN11@stbi__crea:
; Line 4816
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	xor	r9d, r9d
	mov	r8d, DWORD PTR out_bytes$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR [rcx]
	call	stbi__malloc_mad3
	mov	QWORD PTR final$[rsp], rax
; Line 4817
	cmp	QWORD PTR final$[rsp], 0
	jne	SHORT $LN12@stbi__crea
	lea	rcx, OFFSET FLAT:$SG132907
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN12@stbi__crea:
; Line 4818
	mov	DWORD PTR p$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR p$[rsp]
	inc	eax
	mov	DWORD PTR p$[rsp], eax
$LN4@stbi__crea:
	cmp	DWORD PTR p$[rsp], 7
	jge	$LN3@stbi__crea
; Line 4819
	mov	DWORD PTR xorig$15[rsp], 0
	mov	DWORD PTR xorig$15[rsp+4], 4
	mov	DWORD PTR xorig$15[rsp+8], 0
	mov	DWORD PTR xorig$15[rsp+12], 2
	mov	DWORD PTR xorig$15[rsp+16], 0
	mov	DWORD PTR xorig$15[rsp+20], 1
	mov	DWORD PTR xorig$15[rsp+24], 0
; Line 4820
	mov	DWORD PTR yorig$14[rsp], 0
	mov	DWORD PTR yorig$14[rsp+4], 0
	mov	DWORD PTR yorig$14[rsp+8], 4
	mov	DWORD PTR yorig$14[rsp+12], 0
	mov	DWORD PTR yorig$14[rsp+16], 2
	mov	DWORD PTR yorig$14[rsp+20], 0
	mov	DWORD PTR yorig$14[rsp+24], 1
; Line 4821
	mov	DWORD PTR xspc$13[rsp], 8
	mov	DWORD PTR xspc$13[rsp+4], 8
	mov	DWORD PTR xspc$13[rsp+8], 4
	mov	DWORD PTR xspc$13[rsp+12], 4
	mov	DWORD PTR xspc$13[rsp+16], 2
	mov	DWORD PTR xspc$13[rsp+20], 2
	mov	DWORD PTR xspc$13[rsp+24], 1
; Line 4822
	mov	DWORD PTR yspc$12[rsp], 8
	mov	DWORD PTR yspc$12[rsp+4], 8
	mov	DWORD PTR yspc$12[rsp+8], 8
	mov	DWORD PTR yspc$12[rsp+12], 4
	mov	DWORD PTR yspc$12[rsp+16], 4
	mov	DWORD PTR yspc$12[rsp+20], 2
	mov	DWORD PTR yspc$12[rsp+24], 2
; Line 4825
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xorig$15[rsp+rcx*4]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xspc$13[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR xspc$13[rsp+rcx*4]
	mov	DWORD PTR x$2[rsp], eax
; Line 4826
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yorig$14[rsp+rcx*4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yspc$12[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR yspc$12[rsp+rcx*4]
	mov	DWORD PTR y$4[rsp], eax
; Line 4827
	cmp	DWORD PTR x$2[rsp], 0
	je	$LN13@stbi__crea
	cmp	DWORD PTR y$4[rsp], 0
	je	$LN13@stbi__crea
; Line 4828
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR x$2[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	sar	eax, 3
	inc	eax
	imul	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR img_len$5[rsp], eax
; Line 4829
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR x$2[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__create_png_image_raw
	test	eax, eax
	jne	SHORT $LN14@stbi__crea
; Line 4830
	lea	rax, OFFSET FLAT:$SG132910
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4830				; 000012deH
	lea	r8, OFFSET FLAT:$SG132911
	mov	edx, 87					; 00000057H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR final$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
; Line 4831
	xor	eax, eax
	jmp	$LN1@stbi__crea
$LN14@stbi__crea:
; Line 4833
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR y$4[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN6@stbi__crea
; Line 4834
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__crea
$LN8@stbi__crea:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__crea:
	mov	eax, DWORD PTR x$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__crea
; Line 4835
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR yspc$12[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR yorig$14[rsp+rcx*4]
	mov	DWORD PTR out_y$6[rsp], eax
; Line 4836
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR xspc$13[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR xorig$15[rsp+rcx*4]
	mov	DWORD PTR out_x$7[rsp], eax
; Line 4837
	movsxd	rax, DWORD PTR out_bytes$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR x$2[rsp]
	add	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR out_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR a$[rsp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	edi, DWORD PTR out_y$6[rsp]
	imul	edi, DWORD PTR [rdx]
	mov	edx, edi
	imul	edx, DWORD PTR out_bytes$[rsp]
	mov	edx, edx
	mov	rdi, QWORD PTR final$[rsp]
	add	rdi, rdx
	mov	rdx, rdi
	mov	edi, DWORD PTR out_x$7[rsp]
	imul	edi, DWORD PTR out_bytes$[rsp]
	movsxd	rdi, edi
	add	rdx, rdi
	mov	QWORD PTR tv288[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv288[rsp]
	mov	rcx, rax
	call	memcpy
; Line 4839
	jmp	$LN8@stbi__crea
$LN9@stbi__crea:
; Line 4840
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4841
	lea	rax, OFFSET FLAT:$SG132912
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4841				; 000012e9H
	lea	r8, OFFSET FLAT:$SG132913
	mov	edx, 88					; 00000058H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR [rax+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
; Line 4842
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	rcx, QWORD PTR image_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR image_data$[rsp], rax
; Line 4843
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	ecx, DWORD PTR image_data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR image_data_len$[rsp], eax
$LN13@stbi__crea:
; Line 4845
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4846
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR final$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4848
	mov	eax, 1
$LN1@stbi__crea:
; Line 4849
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
stbi__create_png_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
scale$1 = 36
cur$2 = 40
i$ = 48
filter_bytes$ = 52
cur$3 = 56
output_bytes$ = 64
q$4 = 68
img_n$ = 72
prior$5 = 80
in$6 = 88
j$ = 96
nk$7 = 100
filter$8 = 104
stride$ = 108
img_width_bytes$ = 112
bytes$ = 116
tv413 = 120
tv666 = 124
tv65 = 128
tv168 = 132
width$ = 136
tv274 = 140
cur$9 = 144
tv563 = 152
tv546 = 156
tv618 = 160
img_len$ = 164
tv216 = 168
tv360 = 172
tv343 = 176
tv391 = 180
s$ = 184
cur16$10 = 192
a$ = 224
raw$ = 232
raw_len$ = 240
out_n$ = 248
x$ = 256
y$ = 264
depth$ = 272
color$ = 280
stbi__create_png_image_raw PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 4596
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN159@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN160@stbi__crea
$LN159@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN160@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4597
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4598
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR stride$[rsp], eax
; Line 4601
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR img_n$[rsp], eax
; Line 4603
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR output_bytes$[rsp], eax
; Line 4604
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR filter_bytes$[rsp], eax
; Line 4605
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR width$[rsp], eax
; Line 4607
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	r8d, 4607				; 000011ffH
	lea	rdx, OFFSET FLAT:$SG132793
	lea	rcx, OFFSET FLAT:$SG132794
	call	_wassert
	xor	eax, eax
$LN161@stbi__crea:
; Line 4608
	xor	r9d, r9d
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad3
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4609
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN98@stbi__crea
	lea	rcx, OFFSET FLAT:$SG132796
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN98@stbi__crea:
; Line 4611
	mov	r9d, 7
	mov	r8d, DWORD PTR depth$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN99@stbi__crea
	lea	rcx, OFFSET FLAT:$SG132798
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN99@stbi__crea:
; Line 4612
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR img_width_bytes$[rsp], eax
; Line 4613
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 4618
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR raw_len$[rsp], eax
	jae	SHORT $LN100@stbi__crea
	lea	rcx, OFFSET FLAT:$SG132800
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN100@stbi__crea:
; Line 4620
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN3@stbi__crea
; Line 4621
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4623
	mov	rax, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR filter$8[rsp], eax
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4625
	cmp	DWORD PTR filter$8[rsp], 4
	jle	SHORT $LN101@stbi__crea
; Line 4626
	lea	rcx, OFFSET FLAT:$SG132802
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN101@stbi__crea:
; Line 4628
	cmp	DWORD PTR depth$[rsp], 8
	jge	SHORT $LN102@stbi__crea
; Line 4629
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR img_width_bytes$[rsp], eax
	jbe	SHORT $LN103@stbi__crea
	lea	rcx, OFFSET FLAT:$SG132805
	call	stbi__err
	jmp	$LN1@stbi__crea
$LN103@stbi__crea:
; Line 4630
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	sub	eax, DWORD PTR img_width_bytes$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4631
	mov	DWORD PTR filter_bytes$[rsp], 1
; Line 4632
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	mov	DWORD PTR width$[rsp], eax
$LN102@stbi__crea:
; Line 4634
	mov	eax, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4637
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN104@stbi__crea
	movsxd	rax, DWORD PTR filter$8[rsp]
	lea	rcx, OFFSET FLAT:first_row_filter
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR filter$8[rsp], eax
$LN104@stbi__crea:
; Line 4640
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__crea
; Line 4641
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv168[rsp], eax
	cmp	DWORD PTR tv168[rsp], 6
	ja	$LN8@stbi__crea
	movsxd	rax, DWORD PTR tv168[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN168@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN105@stbi__crea:
; Line 4642
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN106@stbi__crea:
; Line 4643
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN107@stbi__crea:
; Line 4644
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN108@stbi__crea:
; Line 4645
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN109@stbi__crea:
; Line 4646
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv216[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	stbi__paeth
	mov	ecx, DWORD PTR tv216[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN110@stbi__crea:
; Line 4647
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN111@stbi__crea:
; Line 4648
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN8@stbi__crea:
; Line 4650
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4652
	cmp	DWORD PTR depth$[rsp], 8
	jne	SHORT $LN112@stbi__crea
; Line 4653
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN114@stbi__crea
; Line 4654
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN114@stbi__crea:
; Line 4655
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4656
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4657
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
	jmp	$LN113@stbi__crea
$LN112@stbi__crea:
; Line 4658
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN115@stbi__crea
; Line 4659
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN117@stbi__crea
; Line 4660
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4661
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN117@stbi__crea:
; Line 4663
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4664
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4665
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4666
	jmp	SHORT $LN116@stbi__crea
$LN115@stbi__crea:
; Line 4667
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4668
	mov	rax, QWORD PTR cur$3[rsp]
	inc	rax
	mov	QWORD PTR cur$3[rsp], rax
; Line 4669
	mov	rax, QWORD PTR prior$5[rsp]
	inc	rax
	mov	QWORD PTR prior$5[rsp], rax
$LN116@stbi__crea:
$LN113@stbi__crea:
; Line 4673
	cmp	DWORD PTR depth$[rsp], 8
	jl	SHORT $LN120@stbi__crea
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	jne	$LN118@stbi__crea
$LN120@stbi__crea:
; Line 4674
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	imul	eax, DWORD PTR filter_bytes$[rsp]
	mov	DWORD PTR nk$7[rsp], eax
; Line 4678
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv274[rsp], eax
	cmp	DWORD PTR tv274[rsp], 6
	ja	$LN10@stbi__crea
	movsxd	rax, DWORD PTR tv274[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN167@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN121@stbi__crea:
; Line 4680
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR raw$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	call	memcpy
	jmp	$LN10@stbi__crea
$LN122@stbi__crea:
; Line 4681
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN14@stbi__crea
$LN12@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN14@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN13@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbi__crea
$LN13@stbi__crea:
	jmp	$LN10@stbi__crea
$LN123@stbi__crea:
; Line 4682
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN17@stbi__crea
$LN15@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN17@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN16@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbi__crea
$LN16@stbi__crea:
	jmp	$LN10@stbi__crea
$LN124@stbi__crea:
; Line 4683
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN20@stbi__crea
$LN18@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN20@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN19@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR filter_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN18@stbi__crea
$LN19@stbi__crea:
	jmp	$LN10@stbi__crea
$LN125@stbi__crea:
; Line 4684
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN23@stbi__crea
$LN21@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN23@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN22@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv343[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR filter_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv360[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv360[rsp]
	call	stbi__paeth
	mov	ecx, DWORD PTR tv343[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN21@stbi__crea
$LN22@stbi__crea:
	jmp	$LN10@stbi__crea
$LN126@stbi__crea:
; Line 4685
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN26@stbi__crea
$LN24@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN26@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN25@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbi__crea
$LN25@stbi__crea:
	jmp	SHORT $LN10@stbi__crea
$LN127@stbi__crea:
; Line 4686
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN29@stbi__crea
$LN27@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN29@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN28@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv391[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	stbi__paeth
	mov	ecx, DWORD PTR tv391[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN27@stbi__crea
$LN28@stbi__crea:
$LN10@stbi__crea:
; Line 4689
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4690
	jmp	$LN119@stbi__crea
$LN118@stbi__crea:
; Line 4691
	mov	eax, DWORD PTR img_n$[rsp]
	inc	eax
	cmp	eax, DWORD PTR out_n$[rsp]
	je	SHORT $LN162@stbi__crea
	mov	r8d, 4691				; 00001253H
	lea	rdx, OFFSET FLAT:$SG132830
	lea	rcx, OFFSET FLAT:$SG132831
	call	_wassert
	xor	eax, eax
$LN162@stbi__crea:
; Line 4696
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv413[rsp], eax
	cmp	DWORD PTR tv413[rsp], 6
	ja	$LN30@stbi__crea
	movsxd	rax, DWORD PTR tv413[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN166@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN128@stbi__crea:
; Line 4697
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN34@stbi__crea
$LN32@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN34@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN33@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN37@stbi__crea
$LN35@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN37@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN36@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@stbi__crea
$LN36@stbi__crea:
	jmp	$LN32@stbi__crea
$LN33@stbi__crea:
	jmp	$LN30@stbi__crea
$LN129@stbi__crea:
; Line 4698
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN40@stbi__crea
$LN38@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN40@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN39@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN43@stbi__crea
$LN41@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN43@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN42@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN41@stbi__crea
$LN42@stbi__crea:
	jmp	$LN38@stbi__crea
$LN39@stbi__crea:
	jmp	$LN30@stbi__crea
$LN130@stbi__crea:
; Line 4699
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN46@stbi__crea
$LN44@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN46@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN45@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN49@stbi__crea
$LN47@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN49@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN48@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN47@stbi__crea
$LN48@stbi__crea:
	jmp	$LN44@stbi__crea
$LN45@stbi__crea:
	jmp	$LN30@stbi__crea
$LN131@stbi__crea:
; Line 4700
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN52@stbi__crea
$LN50@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN52@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN51@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN55@stbi__crea
$LN53@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN55@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN54@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR output_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN53@stbi__crea
$LN54@stbi__crea:
	jmp	$LN50@stbi__crea
$LN51@stbi__crea:
	jmp	$LN30@stbi__crea
$LN132@stbi__crea:
; Line 4701
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN58@stbi__crea
$LN56@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN58@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	$LN57@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN61@stbi__crea
$LN59@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN61@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN60@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv546[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv563[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv563[rsp]
	call	stbi__paeth
	mov	ecx, DWORD PTR tv546[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN59@stbi__crea
$LN60@stbi__crea:
	jmp	$LN56@stbi__crea
$LN57@stbi__crea:
	jmp	$LN30@stbi__crea
$LN133@stbi__crea:
; Line 4702
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN64@stbi__crea
$LN62@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN64@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN63@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN67@stbi__crea
$LN65@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN67@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN66@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN65@stbi__crea
$LN66@stbi__crea:
	jmp	$LN62@stbi__crea
$LN63@stbi__crea:
	jmp	$LN30@stbi__crea
$LN134@stbi__crea:
; Line 4703
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN70@stbi__crea
$LN68@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN70@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN69@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN73@stbi__crea
$LN71@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN73@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN72@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv618[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	stbi__paeth
	mov	ecx, DWORD PTR tv618[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN71@stbi__crea
$LN72@stbi__crea:
	jmp	$LN68@stbi__crea
$LN69@stbi__crea:
$LN30@stbi__crea:
; Line 4709
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN135@stbi__crea
; Line 4710
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4711
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN76@stbi__crea
$LN74@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
$LN76@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN75@stbi__crea
; Line 4712
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4713
	jmp	SHORT $LN74@stbi__crea
$LN75@stbi__crea:
$LN135@stbi__crea:
$LN119@stbi__crea:
; Line 4716
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4721
	cmp	DWORD PTR depth$[rsp], 8
	jge	$LN136@stbi__crea
; Line 4722
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN79@stbi__crea
$LN77@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN79@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN78@stbi__crea
; Line 4723
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4724
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR out_n$[rsp]
	mov	ecx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR img_width_bytes$[rsp]
	sub	rax, rcx
	mov	QWORD PTR in$6[rsp], rax
; Line 4727
	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN163@stbi__crea
	movsxd	rax, DWORD PTR depth$[rsp]
	lea	rcx, OFFSET FLAT:stbi__depth_scale_table
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv666[rsp], eax
	jmp	SHORT $LN164@stbi__crea
$LN163@stbi__crea:
	mov	DWORD PTR tv666[rsp], 1
$LN164@stbi__crea:
	movzx	eax, BYTE PTR tv666[rsp]
	mov	BYTE PTR scale$1[rsp], al
; Line 4735
	cmp	DWORD PTR depth$[rsp], 4
	jne	$LN138@stbi__crea
; Line 4736
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN82@stbi__crea
$LN80@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 2
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN82@stbi__crea:
	cmp	DWORD PTR k$[rsp], 2
	jl	SHORT $LN81@stbi__crea
; Line 4737
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4738
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 15
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4739
	jmp	SHORT $LN80@stbi__crea
$LN81@stbi__crea:
; Line 4740
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN140@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN140@stbi__crea:
; Line 4741
	jmp	$LN139@stbi__crea
$LN138@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 2
	jne	$LN141@stbi__crea
; Line 4742
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN85@stbi__crea
$LN83@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 4
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN85@stbi__crea:
	cmp	DWORD PTR k$[rsp], 4
	jl	$LN84@stbi__crea
; Line 4743
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4744
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4745
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4746
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4747
	jmp	$LN83@stbi__crea
$LN84@stbi__crea:
; Line 4748
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN143@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN143@stbi__crea:
; Line 4749
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN144@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN144@stbi__crea:
; Line 4750
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN145@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN145@stbi__crea:
; Line 4751
	jmp	$LN142@stbi__crea
$LN141@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 1
	jne	$LN146@stbi__crea
; Line 4752
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN88@stbi__crea
$LN86@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 8
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN88@stbi__crea:
	cmp	DWORD PTR k$[rsp], 8
	jl	$LN87@stbi__crea
; Line 4753
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4754
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4755
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4756
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4757
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4758
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4759
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4760
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4761
	jmp	$LN86@stbi__crea
$LN87@stbi__crea:
; Line 4762
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN147@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN147@stbi__crea:
; Line 4763
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN148@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN148@stbi__crea:
; Line 4764
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN149@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN149@stbi__crea:
; Line 4765
	cmp	DWORD PTR k$[rsp], 3
	jle	SHORT $LN150@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN150@stbi__crea:
; Line 4766
	cmp	DWORD PTR k$[rsp], 4
	jle	SHORT $LN151@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN151@stbi__crea:
; Line 4767
	cmp	DWORD PTR k$[rsp], 5
	jle	SHORT $LN152@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN152@stbi__crea:
; Line 4768
	cmp	DWORD PTR k$[rsp], 6
	jle	SHORT $LN153@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN153@stbi__crea:
$LN146@stbi__crea:
$LN142@stbi__crea:
$LN139@stbi__crea:
; Line 4770
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	$LN154@stbi__crea
; Line 4773
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4774
	cmp	DWORD PTR img_n$[rsp], 1
	jne	SHORT $LN155@stbi__crea
; Line 4775
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN91@stbi__crea
$LN89@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN91@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	SHORT $LN90@stbi__crea
; Line 4776
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4777
	movsxd	rax, DWORD PTR q$4[rsp]
	mov	ecx, DWORD PTR q$4[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4778
	jmp	SHORT $LN89@stbi__crea
$LN90@stbi__crea:
; Line 4779
	jmp	$LN156@stbi__crea
$LN155@stbi__crea:
; Line 4780
	cmp	DWORD PTR img_n$[rsp], 3
	je	SHORT $LN165@stbi__crea
	mov	r8d, 4780				; 000012acH
	lea	rdx, OFFSET FLAT:$SG132861
	lea	rcx, OFFSET FLAT:$SG132862
	call	_wassert
	xor	eax, eax
$LN165@stbi__crea:
; Line 4781
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN94@stbi__crea
$LN92@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN94@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	$LN93@stbi__crea
; Line 4782
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4783
	imul	eax, DWORD PTR q$4[rsp], 3
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4784
	imul	eax, DWORD PTR q$4[rsp], 3
	inc	eax
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4785
	imul	eax, DWORD PTR q$4[rsp], 3
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4786
	jmp	$LN92@stbi__crea
$LN93@stbi__crea:
$LN156@stbi__crea:
$LN154@stbi__crea:
; Line 4789
	jmp	$LN77@stbi__crea
$LN78@stbi__crea:
; Line 4790
	jmp	$LN137@stbi__crea
$LN136@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 16
	jne	$LN157@stbi__crea
; Line 4795
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$9[rsp], rax
; Line 4796
	mov	rax, QWORD PTR cur$9[rsp]
	mov	QWORD PTR cur16$10[rsp], rax
; Line 4798
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN97@stbi__crea
$LN95@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR cur16$10[rsp]
	add	rax, 2
	mov	QWORD PTR cur16$10[rsp], rax
	mov	rax, QWORD PTR cur$9[rsp]
	add	rax, 2
	mov	QWORD PTR cur$9[rsp], rax
$LN97@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN96@stbi__crea
; Line 4799
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cur$9[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR cur$9[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	or	eax, ecx
	mov	rcx, QWORD PTR cur16$10[rsp]
	mov	WORD PTR [rcx], ax
; Line 4800
	jmp	$LN95@stbi__crea
$LN96@stbi__crea:
$LN157@stbi__crea:
$LN137@stbi__crea:
; Line 4803
	mov	eax, 1
$LN1@stbi__crea:
; Line 4804
	add	rsp, 216				; 000000d8H
	ret	0
	npad	2
$LN168@stbi__crea:
	DD	$LN105@stbi__crea
	DD	$LN106@stbi__crea
	DD	$LN107@stbi__crea
	DD	$LN108@stbi__crea
	DD	$LN109@stbi__crea
	DD	$LN110@stbi__crea
	DD	$LN111@stbi__crea
$LN167@stbi__crea:
	DD	$LN121@stbi__crea
	DD	$LN122@stbi__crea
	DD	$LN123@stbi__crea
	DD	$LN124@stbi__crea
	DD	$LN125@stbi__crea
	DD	$LN126@stbi__crea
	DD	$LN127@stbi__crea
$LN166@stbi__crea:
	DD	$LN128@stbi__crea
	DD	$LN129@stbi__crea
	DD	$LN130@stbi__crea
	DD	$LN131@stbi__crea
	DD	$LN132@stbi__crea
	DD	$LN133@stbi__crea
	DD	$LN134@stbi__crea
stbi__create_png_image_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
stbi__paeth PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4581
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4582
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
; Line 4583
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
; Line 4584
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
; Line 4585
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 4586
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR a$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN2@stbi__paet:
; Line 4587
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbi__paet
	mov	eax, DWORD PTR b$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN3@stbi__paet:
; Line 4588
	mov	eax, DWORD PTR c$[rsp]
$LN1@stbi__paet:
; Line 4589
	add	rsp, 56					; 00000038H
	ret	0
stbi__paeth ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
stbi__check_png_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4544
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4547
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__chec
$LN2@stbi__chec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__chec:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@stbi__chec
; Line 4548
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?png_sig@?1??stbi__check_png_header@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__chec
	lea	rcx, OFFSET FLAT:$SG132602
	call	stbi__err
	jmp	SHORT $LN1@stbi__chec
$LN5@stbi__chec:
	jmp	SHORT $LN2@stbi__chec
$LN3@stbi__chec:
; Line 4549
	mov	eax, 1
$LN1@stbi__chec:
; Line 4550
	add	rsp, 56					; 00000038H
	ret	0
stbi__check_png_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
s$ = 64
stbi__get_chunk_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4536
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4538
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR c$[rsp], eax
; Line 4539
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR c$[rsp+4], eax
; Line 4540
	mov	rax, QWORD PTR c$[rsp]
; Line 4541
	add	rsp, 56					; 00000038H
	ret	0
stbi__get_chunk_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
obuf$ = 56
olen$ = 64
exp$ = 72
parse_header$ = 80
stbi__do_zlib PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4433
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4434
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4435
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4436
	movsxd	rax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4437
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR exp$[rsp]
	mov	DWORD PTR [rax+48], ecx
; Line 4439
	mov	edx, DWORD PTR parse_header$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_zlib
; Line 4440
	add	rsp, 40					; 00000028H
	ret	0
stbi__do_zlib ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
final$ = 36
a$ = 64
parse_header$ = 72
stbi__parse_zlib PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4405
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4407
	cmp	DWORD PTR parse_header$[rsp], 0
	je	SHORT $LN5@stbi__pars
; Line 4408
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_zlib_header
	test	eax, eax
	jne	SHORT $LN6@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN6@stbi__pars:
$LN5@stbi__pars:
; Line 4409
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 4410
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], 0
$LN4@stbi__pars:
; Line 4412
	mov	edx, 1
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	DWORD PTR final$[rsp], eax
; Line 4413
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	DWORD PTR type$[rsp], eax
; Line 4414
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN7@stbi__pars
; Line 4415
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_uncompressed_block
	test	eax, eax
	jne	SHORT $LN9@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4416
	jmp	$LN8@stbi__pars
$LN7@stbi__pars:
	cmp	DWORD PTR type$[rsp], 3
	jne	SHORT $LN10@stbi__pars
; Line 4417
	xor	eax, eax
	jmp	$LN1@stbi__pars
; Line 4418
	jmp	SHORT $LN11@stbi__pars
$LN10@stbi__pars:
; Line 4419
	cmp	DWORD PTR type$[rsp], 1
	jne	SHORT $LN12@stbi__pars
; Line 4421
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, 288				; 00000120H
	lea	rdx, OFFSET FLAT:stbi__zdefault_length
	mov	rcx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN14@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN14@stbi__pars:
; Line 4422
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:stbi__zdefault_distance
	mov	rcx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN15@stbi__pars:
; Line 4423
	jmp	SHORT $LN13@stbi__pars
$LN12@stbi__pars:
; Line 4424
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__compute_huffman_codes
	test	eax, eax
	jne	SHORT $LN16@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN16@stbi__pars:
$LN13@stbi__pars:
; Line 4426
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__parse_huffman_block
	test	eax, eax
	jne	SHORT $LN17@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN17@stbi__pars:
$LN11@stbi__pars:
$LN8@stbi__pars:
; Line 4428
	cmp	DWORD PTR final$[rsp], 0
	je	$LN4@stbi__pars
; Line 4429
	mov	eax, 1
$LN1@stbi__pars:
; Line 4430
	add	rsp, 56					; 00000038H
	ret	0
stbi__parse_zlib ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmf$ = 32
flg$ = 36
cm$ = 40
a$ = 64
stbi__parse_zlib_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4362
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4363
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zget8
	movzx	eax, al
	mov	DWORD PTR cmf$[rsp], eax
; Line 4364
	mov	eax, DWORD PTR cmf$[rsp]
	and	eax, 15
	mov	DWORD PTR cm$[rsp], eax
; Line 4366
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zget8
	movzx	eax, al
	mov	DWORD PTR flg$[rsp], eax
; Line 4367
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zeof
	test	eax, eax
	je	SHORT $LN2@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132428
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN2@stbi__pars:
; Line 4368
	imul	eax, DWORD PTR cmf$[rsp], 256		; 00000100H
	add	eax, DWORD PTR flg$[rsp]
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN3@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132430
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN3@stbi__pars:
; Line 4369
	mov	eax, DWORD PTR flg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132432
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN4@stbi__pars:
; Line 4370
	cmp	DWORD PTR cm$[rsp], 8
	je	SHORT $LN5@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132434
	call	stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN5@stbi__pars:
; Line 4372
	mov	eax, 1
$LN1@stbi__pars:
; Line 4373
	add	rsp, 56					; 00000038H
	ret	0
stbi__parse_zlib_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
len$ = 36
header$ = 40
nlen$ = 44
a$ = 64
stbi__parse_uncompressed_block PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4333
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4336
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN6@stbi__pars
; Line 4337
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
$LN6@stbi__pars:
; Line 4339
	mov	DWORD PTR k$[rsp], 0
$LN2@stbi__pars:
; Line 4340
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jle	SHORT $LN3@stbi__pars
; Line 4341
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4342
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4343
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4344
	jmp	SHORT $LN2@stbi__pars
$LN3@stbi__pars:
; Line 4345
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jge	SHORT $LN7@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132413
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN7@stbi__pars:
$LN4@stbi__pars:
; Line 4347
	cmp	DWORD PTR k$[rsp], 4
	jge	SHORT $LN5@stbi__pars
; Line 4348
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zget8
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN4@stbi__pars
$LN5@stbi__pars:
; Line 4349
	mov	eax, 1
	imul	rax, rax, 1
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 4350
	mov	eax, 1
	imul	rax, rax, 3
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR nlen$[rsp], eax
; Line 4351
	mov	eax, DWORD PTR len$[rsp]
	xor	eax, 65535				; 0000ffffH
	cmp	DWORD PTR nlen$[rsp], eax
	je	SHORT $LN8@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132415
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN8@stbi__pars:
; Line 4352
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jbe	SHORT $LN9@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132417
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4353
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN10@stbi__pars
; Line 4354
	mov	r8d, DWORD PTR len$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zexpand
	test	eax, eax
	jne	SHORT $LN11@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN11@stbi__pars:
$LN10@stbi__pars:
; Line 4355
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memcpy
; Line 4356
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 4357
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4358
	mov	eax, 1
$LN1@stbi__pars:
; Line 4359
	add	rsp, 56					; 00000038H
	ret	0
stbi__parse_uncompressed_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
fill$2 = 36
n$ = 40
i$ = 44
ntot$ = 48
hlit$ = 52
hdist$ = 56
hclen$ = 60
s$3 = 64
tv175 = 72
z_codelength$ = 80
codelength_sizes$ = 2112
lencodes$ = 2144
__$ArrayPad$ = 2608
a$ = 2640
stbi__compute_huffman_codes PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2632				; 00000a48H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4290
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 257				; 00000101H
	mov	DWORD PTR hlit$[rsp], eax
; Line 4291
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	inc	eax
	mov	DWORD PTR hdist$[rsp], eax
; Line 4292
	mov	edx, 4
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 4
	mov	DWORD PTR hclen$[rsp], eax
; Line 4293
	mov	eax, DWORD PTR hdist$[rsp]
	mov	ecx, DWORD PTR hlit$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ntot$[rsp], eax
; Line 4295
	mov	r8d, 19
	xor	edx, edx
	lea	rcx, QWORD PTR codelength_sizes$[rsp]
	call	memset
; Line 4296
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR hclen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__comp
; Line 4297
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	DWORD PTR s$3[rsp], eax
; Line 4298
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?length_dezigzag@?1??stbi__compute_huffman_codes@@9@9
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR s$3[rsp]
	mov	BYTE PTR codelength_sizes$[rsp+rax], cl
; Line 4299
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4300
	mov	r8d, 19
	lea	rdx, QWORD PTR codelength_sizes$[rsp]
	lea	rcx, QWORD PTR z_codelength$[rsp]
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN7@stbi__comp
	xor	eax, eax
	jmp	$LN1@stbi__comp
$LN7@stbi__comp:
; Line 4302
	mov	DWORD PTR n$[rsp], 0
$LN5@stbi__comp:
; Line 4303
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN6@stbi__comp
; Line 4304
	lea	rdx, QWORD PTR z_codelength$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode
	mov	DWORD PTR c$1[rsp], eax
; Line 4305
	cmp	DWORD PTR c$1[rsp], 0
	jl	SHORT $LN9@stbi__comp
	cmp	DWORD PTR c$1[rsp], 19
	jl	SHORT $LN8@stbi__comp
$LN9@stbi__comp:
	lea	rcx, OFFSET FLAT:$SG132380
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN8@stbi__comp:
; Line 4306
	cmp	DWORD PTR c$1[rsp], 16
	jge	SHORT $LN10@stbi__comp
; Line 4307
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR lencodes$[rsp+rax], cl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
	jmp	$LN11@stbi__comp
$LN10@stbi__comp:
; Line 4309
	mov	BYTE PTR fill$2[rsp], 0
; Line 4310
	cmp	DWORD PTR c$1[rsp], 16
	jne	SHORT $LN12@stbi__comp
; Line 4311
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
; Line 4312
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbi__comp
	lea	rcx, OFFSET FLAT:$SG132386
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN14@stbi__comp:
; Line 4313
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	cdqe
	movzx	eax, BYTE PTR lencodes$[rsp+rax]
	mov	BYTE PTR fill$2[rsp], al
	jmp	SHORT $LN13@stbi__comp
$LN12@stbi__comp:
; Line 4314
	cmp	DWORD PTR c$1[rsp], 17
	jne	SHORT $LN15@stbi__comp
; Line 4315
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN16@stbi__comp
$LN15@stbi__comp:
; Line 4316
	cmp	DWORD PTR c$1[rsp], 18
	jne	SHORT $LN17@stbi__comp
; Line 4317
	mov	edx, 7
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	add	eax, 11
	mov	DWORD PTR c$1[rsp], eax
; Line 4318
	jmp	SHORT $LN18@stbi__comp
$LN17@stbi__comp:
; Line 4319
	lea	rcx, OFFSET FLAT:$SG132391
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN18@stbi__comp:
$LN16@stbi__comp:
$LN13@stbi__comp:
; Line 4321
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR ntot$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR c$1[rsp]
	jge	SHORT $LN19@stbi__comp
	lea	rcx, OFFSET FLAT:$SG132393
	call	stbi__err
	jmp	$LN1@stbi__comp
$LN19@stbi__comp:
; Line 4322
	movsxd	rax, DWORD PTR c$1[rsp]
	movzx	ecx, BYTE PTR fill$2[rsp]
	movsxd	rdx, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp+rdx]
	mov	QWORD PTR tv175[rsp], rdx
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv175[rsp]
	mov	rcx, rax
	call	memset
; Line 4323
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__comp:
; Line 4325
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
; Line 4326
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN20@stbi__comp
	lea	rcx, OFFSET FLAT:$SG132395
	call	stbi__err
	jmp	SHORT $LN1@stbi__comp
$LN20@stbi__comp:
; Line 4327
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, DWORD PTR hlit$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp]
	mov	rcx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN21@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN21@stbi__comp:
; Line 4328
	movsxd	rax, DWORD PTR hlit$[rsp]
	lea	rax, QWORD PTR lencodes$[rsp+rax]
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, 2072				; 00000818H
	mov	r8d, DWORD PTR hdist$[rsp]
	mov	rdx, rax
	call	stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN22@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN22@stbi__comp:
; Line 4329
	mov	eax, 1
$LN1@stbi__comp:
; Line 4330
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2632				; 00000a48H
	ret	0
stbi__compute_huffman_codes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 32
z$2 = 36
len$3 = 40
dist$4 = 44
zout$ = 48
p$5 = 56
a$ = 80
stbi__parse_huffman_block PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4241
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4242
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN2@stbi__pars:
; Line 4244
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4245
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jge	SHORT $LN11@stbi__pars
; Line 4246
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN13@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132336
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN13@stbi__pars:
; Line 4247
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+40]
	cmp	QWORD PTR zout$[rsp], rax
	jb	SHORT $LN14@stbi__pars
; Line 4248
	mov	r8d, 1
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zexpand
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN15@stbi__pars:
; Line 4249
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN14@stbi__pars:
; Line 4251
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR z$2[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
; Line 4252
	jmp	$LN12@stbi__pars
$LN11@stbi__pars:
; Line 4255
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jne	SHORT $LN16@stbi__pars
; Line 4256
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4257
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN16@stbi__pars:
; Line 4259
	mov	eax, DWORD PTR z$2[rsp]
	sub	eax, 257				; 00000101H
	mov	DWORD PTR z$2[rsp], eax
; Line 4260
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zlength_base
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR len$3[rsp], eax
; Line 4261
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zlength_extra
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN17@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zlength_extra
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	ecx, DWORD PTR len$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
$LN17@stbi__pars:
; Line 4262
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4263
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN18@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132342
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN18@stbi__pars:
; Line 4264
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zdist_base
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR dist$4[rsp], eax
; Line 4265
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zdist_extra
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN19@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:stbi__zdist_extra
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zreceive
	mov	ecx, DWORD PTR dist$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dist$4[rsp], eax
$LN19@stbi__pars:
; Line 4266
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR dist$4[rsp]
	cmp	rax, rcx
	jge	SHORT $LN20@stbi__pars
	lea	rcx, OFFSET FLAT:$SG132345
	call	stbi__err
	jmp	$LN1@stbi__pars
$LN20@stbi__pars:
; Line 4267
	movsxd	rax, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN21@stbi__pars
; Line 4268
	mov	r8d, DWORD PTR len$3[rsp]
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zexpand
	test	eax, eax
	jne	SHORT $LN22@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
; Line 4269
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN21@stbi__pars:
; Line 4271
	movsxd	rax, DWORD PTR dist$4[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$5[rsp], rax
; Line 4272
	cmp	DWORD PTR dist$4[rsp], 1
	jne	SHORT $LN23@stbi__pars
; Line 4273
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR v$1[rsp], al
; Line 4274
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN25@stbi__pars
$LN7@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR v$1[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN7@stbi__pars
$LN25@stbi__pars:
; Line 4275
	jmp	SHORT $LN24@stbi__pars
$LN23@stbi__pars:
; Line 4276
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN26@stbi__pars
$LN10@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR p$5[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	rax, QWORD PTR p$5[rsp]
	inc	rax
	mov	QWORD PTR p$5[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN10@stbi__pars
$LN26@stbi__pars:
$LN24@stbi__pars:
$LN12@stbi__pars:
; Line 4279
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 4280
	add	rsp, 72					; 00000048H
	ret	0
stbi__parse_huffman_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
limit$ = 48
cur$ = 52
q$ = 56
old_limit$ = 64
tv90 = 72
$T1 = 80
$T2 = 112
z$ = 176
zout$ = 184
n$ = 192
stbi__zexpand PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4205
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 4208
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4209
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG132299
	call	stbi__err
	jmp	$LN1@stbi__zexp
$LN4@stbi__zexp:
; Line 4210
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	DWORD PTR cur$[rsp], eax
; Line 4211
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+40]
	sub	rax, rcx
	mov	DWORD PTR old_limit$[rsp], eax
	mov	eax, DWORD PTR old_limit$[rsp]
	mov	DWORD PTR limit$[rsp], eax
; Line 4212
	mov	eax, -1					; ffffffffH
	sub	eax, DWORD PTR cur$[rsp]
	cmp	eax, DWORD PTR n$[rsp]
	jae	SHORT $LN5@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG132301
	call	stbi__err
	jmp	$LN1@stbi__zexp
$LN5@stbi__zexp:
$LN2@stbi__zexp:
; Line 4213
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR cur$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR limit$[rsp]
	jbe	SHORT $LN3@stbi__zexp
; Line 4214
	cmp	DWORD PTR limit$[rsp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG132303
	call	stbi__err
	jmp	$LN1@stbi__zexp
$LN6@stbi__zexp:
; Line 4215
	mov	eax, DWORD PTR limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR limit$[rsp], eax
; Line 4216
	jmp	SHORT $LN2@stbi__zexp
$LN3@stbi__zexp:
; Line 4217
	mov	eax, DWORD PTR limit$[rsp]
	mov	QWORD PTR tv90[rsp], rax
	lea	rcx, OFFSET FLAT:$SG132304
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 4217				; 00001079H
	lea	r8, OFFSET FLAT:$SG132305
	mov	edx, 83					; 00000053H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR [rax+32]
	mov	rax, QWORD PTR tv90[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR q$[rsp], rax
; Line 4219
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG132307
	call	stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN7@stbi__zexp:
; Line 4220
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4221
	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4222
	mov	eax, DWORD PTR limit$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4223
	mov	eax, 1
$LN1@stbi__zexp:
; Line 4224
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__zexpand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
s$ = 36
tv132 = 40
a$ = 64
z$ = 72
stbi__zhuffman_decode PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4186
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4188
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 16
	jge	SHORT $LN2@stbi__zhuf
; Line 4189
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zhuf
; Line 4190
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4192
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__fill_bits
$LN2@stbi__zhuf:
; Line 4194
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 511				; 000001ffH
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR b$[rsp], eax
; Line 4195
	cmp	DWORD PTR b$[rsp], 0
	je	SHORT $LN4@stbi__zhuf
; Line 4196
	mov	eax, DWORD PTR b$[rsp]
	sar	eax, 9
	mov	DWORD PTR s$[rsp], eax
; Line 4197
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv132[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv132[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4198
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4199
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 511				; 000001ffH
	jmp	SHORT $LN1@stbi__zhuf
$LN4@stbi__zhuf:
; Line 4201
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	stbi__zhuffman_decode_slowpath
$LN1@stbi__zhuf:
; Line 4202
	add	rsp, 56					; 00000038H
	ret	0
stbi__zhuffman_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
b$ = 36
k$ = 40
tv158 = 48
a$ = 80
z$ = 88
stbi__zhuffman_decode_slowpath PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4171
	mov	edx, 16
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+20]
	call	stbi__bit_reverse
	mov	DWORD PTR k$[rsp], eax
; Line 4172
	mov	DWORD PTR s$[rsp], 10
	jmp	SHORT $LN4@stbi__zhuf
$LN2@stbi__zhuf:
	mov	eax, DWORD PTR s$[rsp]
	inc	eax
	mov	DWORD PTR s$[rsp], eax
$LN4@stbi__zhuf:
; Line 4173
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1056]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN5@stbi__zhuf
; Line 4174
	jmp	SHORT $LN3@stbi__zhuf
$LN5@stbi__zhuf:
	jmp	SHORT $LN2@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4175
	cmp	DWORD PTR s$[rsp], 16
	jl	SHORT $LN6@stbi__zhuf
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN6@stbi__zhuf:
; Line 4177
	mov	eax, 16
	sub	eax, DWORD PTR s$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR k$[rsp]
	sar	eax, cl
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 4178
	cmp	DWORD PTR b$[rsp], 288			; 00000120H
	jl	SHORT $LN7@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN7@stbi__zhuf:
; Line 4179
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1156]
	cmp	eax, DWORD PTR s$[rsp]
	je	SHORT $LN8@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN8@stbi__zhuf:
; Line 4180
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv158[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv158[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4181
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4182
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+1444]
$LN1@stbi__zhuf:
; Line 4183
	add	rsp, 72					; 00000048H
	ret	0
stbi__zhuffman_decode_slowpath ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
k$ = 36
tv89 = 40
z$ = 64
n$ = 72
stbi__zreceive PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4157
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4159
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jge	SHORT $LN2@stbi__zrec
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__fill_bits
$LN2@stbi__zrec:
; Line 4160
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv83[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4161
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR tv89[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv89[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4162
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4163
	mov	eax, DWORD PTR k$[rsp]
; Line 4164
	add	rsp, 56					; 00000038H
	ret	0
stbi__zreceive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 32
z$ = 64
stbi__fill_bits PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4145
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__fill:
; Line 4147
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, 1
	mov	DWORD PTR tv91[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv91[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+20], eax
	jb	SHORT $LN5@stbi__fill
; Line 4148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 4149
	jmp	SHORT $LN1@stbi__fill
$LN5@stbi__fill:
; Line 4151
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__zget8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4152
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, 8
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4153
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+16], 24
	jle	SHORT $LN4@stbi__fill
$LN1@stbi__fill:
; Line 4154
	add	rsp, 56					; 00000038H
	ret	0
stbi__fill_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
z$ = 64
stbi__zget8 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4140
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4141
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zget
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@stbi__zget
$LN3@stbi__zget:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx], rax
$LN4@stbi__zget:
	movzx	eax, BYTE PTR tv73[rsp]
; Line 4142
	add	rsp, 56					; 00000038H
	ret	0
stbi__zget8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
z$ = 32
stbi__zeof PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4135
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4136
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax], rcx
	jb	SHORT $LN3@stbi__zeof
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__zeof
$LN3@stbi__zeof:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__zeof:
	mov	eax, DWORD PTR tv67[rsp]
; Line 4137
	add	rsp, 24
	ret	0
stbi__zeof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$1 = 36
code$ = 40
j$2 = 44
fastv$3 = 48
k$ = 52
c$4 = 56
tv288 = 60
sizes$ = 64
next_code$ = 144
__$ArrayPad$ = 208
z$ = 240
sizelist$ = 248
num$ = 256
stbi__zbuild_huffman PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4068
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4069
	mov	DWORD PTR k$[rsp], 0
; Line 4073
	mov	r8d, 68					; 00000044H
	xor	edx, edx
	lea	rcx, QWORD PTR sizes$[rsp]
	call	memset
; Line 4074
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1024				; 00000400H
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 4075
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__zbui
$LN2@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__zbui
; Line 4076
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR sizelist$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR sizes$[rsp+rcx*4], eax
	jmp	SHORT $LN2@stbi__zbui
$LN3@stbi__zbui:
; Line 4077
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR sizes$[rsp+rax], 0
; Line 4078
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN7@stbi__zbui
$LN5@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@stbi__zbui
; Line 4079
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	DWORD PTR sizes$[rsp+rax*4], ecx
	jle	SHORT $LN16@stbi__zbui
; Line 4080
	lea	rcx, OFFSET FLAT:$SG132208
	call	stbi__err
	jmp	$LN1@stbi__zbui
$LN16@stbi__zbui:
	jmp	SHORT $LN5@stbi__zbui
$LN6@stbi__zbui:
; Line 4081
	mov	DWORD PTR code$[rsp], 0
; Line 4082
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN10@stbi__zbui
$LN8@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	$LN9@stbi__zbui
; Line 4083
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR code$[rsp]
	mov	DWORD PTR next_code$[rsp+rax*4], ecx
; Line 4084
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+1024], dx
; Line 4085
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR k$[rsp]
	mov	WORD PTR [rcx+rax*2+1124], dx
; Line 4086
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR code$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$[rsp], eax
; Line 4087
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR sizes$[rsp+rax*4], 0
	je	SHORT $LN17@stbi__zbui
; Line 4088
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN18@stbi__zbui
	lea	rcx, OFFSET FLAT:$SG132211
	call	stbi__err
	jmp	$LN1@stbi__zbui
$LN18@stbi__zbui:
$LN17@stbi__zbui:
; Line 4089
	mov	eax, 16
	sub	eax, DWORD PTR i$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1056], eax
; Line 4090
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 4091
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4092
	jmp	$LN8@stbi__zbui
$LN9@stbi__zbui:
; Line 4093
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+rax+1056], 65536		; 00010000H
; Line 4094
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__zbui
$LN11@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN12@stbi__zbui
; Line 4095
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR s$1[rsp], eax
; Line 4096
	cmp	DWORD PTR s$1[rsp], 0
	je	$LN19@stbi__zbui
; Line 4097
	movsxd	rax, DWORD PTR s$1[rsp]
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR c$4[rsp], eax
; Line 4098
	mov	eax, DWORD PTR s$1[rsp]
	shl	eax, 9
	or	eax, DWORD PTR i$[rsp]
	mov	WORD PTR fastv$3[rsp], ax
; Line 4099
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR s$1[rsp]
	mov	BYTE PTR [rcx+rax+1156], dl
; Line 4100
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR i$[rsp]
	mov	WORD PTR [rcx+rax*2+1444], dx
; Line 4101
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN20@stbi__zbui
; Line 4102
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	edx, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR next_code$[rsp+rax*4]
	call	stbi__bit_reverse
	mov	DWORD PTR j$2[rsp], eax
$LN14@stbi__zbui:
; Line 4103
	cmp	DWORD PTR j$2[rsp], 512			; 00000200H
	jge	SHORT $LN15@stbi__zbui
; Line 4104
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR fastv$3[rsp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 4105
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv288[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv288[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR j$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rsp], eax
; Line 4106
	jmp	SHORT $LN14@stbi__zbui
$LN15@stbi__zbui:
$LN20@stbi__zbui:
; Line 4108
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	DWORD PTR next_code$[rsp+rcx*4], eax
$LN19@stbi__zbui:
; Line 4110
	jmp	$LN11@stbi__zbui
$LN12@stbi__zbui:
; Line 4111
	mov	eax, 1
$LN1@stbi__zbui:
; Line 4112
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
stbi__zbuild_huffman ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
bits$ = 56
stbi__bit_reverse PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4060
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4061
	cmp	DWORD PTR bits$[rsp], 16
	jle	SHORT $LN3@stbi__bit_
	mov	r8d, 4061				; 00000fddH
	lea	rdx, OFFSET FLAT:$SG132169
	lea	rcx, OFFSET FLAT:$SG132170
	call	_wassert
	xor	eax, eax
$LN3@stbi__bit_:
; Line 4064
	mov	ecx, DWORD PTR v$[rsp]
	call	stbi__bitreverse16
	mov	ecx, 16
	sub	ecx, DWORD PTR bits$[rsp]
	sar	eax, cl
; Line 4065
	add	rsp, 40					; 00000028H
	ret	0
stbi__bit_reverse ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
stbi__bitreverse16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4051
	mov	DWORD PTR [rsp+8], ecx
; Line 4052
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 43690				; 0000aaaaH
	sar	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 21845				; 00005555H
	shl	ecx, 1
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4053
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 52428				; 0000ccccH
	sar	eax, 2
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 13107				; 00003333H
	shl	ecx, 2
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4054
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 61680				; 0000f0f0H
	sar	eax, 4
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 3855				; 00000f0fH
	shl	ecx, 4
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4055
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4056
	mov	eax, DWORD PTR n$[rsp]
; Line 4057
	ret	0
stbi__bitreverse16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
j$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi__jpeg_info_raw PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4001
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4002
	mov	edx, 2
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN2@stbi__jpeg
; Line 4003
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__rewind
; Line 4004
	xor	eax, eax
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4006
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__jpeg:
; Line 4007
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__jpeg:
; Line 4008
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN7@stbi__jpeg
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN8@stbi__jpeg
$LN7@stbi__jpeg:
	mov	DWORD PTR tv80[rsp], 1
$LN8@stbi__jpeg:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__jpeg:
; Line 4009
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 4010
	add	rsp, 56					; 00000038H
	ret	0
stbi__jpeg_info_raw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$2 = 56
k$3 = 64
m$4 = 68
m$5 = 69
m$6 = 70
n$ = 72
r$7 = 80
r$8 = 88
b$9 = 96
g$10 = 97
r$11 = 98
j$12 = 100
decode_n$ = 104
is_rgb$ = 108
tv252 = 112
y_bot$13 = 116
tv280 = 120
tv288 = 124
tv694 = 128
tv79 = 132
tv81 = 136
tv91 = 140
y$14 = 144
tv516 = 152
tv545 = 156
tv626 = 160
tv656 = 164
output$15 = 168
tv71 = 176
tv159 = 184
tv232 = 192
tv265 = 200
tv270 = 208
y$16 = 216
tv164 = 224
tv172 = 232
coutput$17 = 240
res_comp$18 = 272
__$ArrayPad$ = 464
z$ = 496
out_x$ = 504
out_y$ = 512
comp$ = 520
req_comp$ = 528
load_jpeg_image PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3812
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 488				; 000001e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3814
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rax+8], 0
; Line 3817
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN42@load_jpeg_
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN41@load_jpeg_
$LN42@load_jpeg_:
	lea	rcx, OFFSET FLAT:$SG132039
	call	stbi__err
	test	eax, eax
	je	SHORT $LN83@load_jpeg_
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN84@load_jpeg_
$LN83@load_jpeg_:
	mov	QWORD PTR tv71[rsp], 0
$LN84@load_jpeg_:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	$LN1@load_jpeg_
$LN41@load_jpeg_:
; Line 3820
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__decode_jpeg_image
	test	eax, eax
	jne	SHORT $LN43@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN43@load_jpeg_:
; Line 3823
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN87@load_jpeg_
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN88@load_jpeg_
$LN87@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN85@load_jpeg_
	mov	DWORD PTR tv79[rsp], 3
	jmp	SHORT $LN86@load_jpeg_
$LN85@load_jpeg_:
	mov	DWORD PTR tv79[rsp], 1
$LN86@load_jpeg_:
	mov	eax, DWORD PTR tv79[rsp]
	mov	DWORD PTR tv81[rsp], eax
$LN88@load_jpeg_:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 3825
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN91@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18512], 3
	je	SHORT $LN90@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	SHORT $LN89@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18504], 0
	jne	SHORT $LN91@load_jpeg_
$LN90@load_jpeg_:
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN92@load_jpeg_
$LN91@load_jpeg_:
$LN89@load_jpeg_:
	mov	DWORD PTR tv91[rsp], 0
$LN92@load_jpeg_:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR is_rgb$[rsp], eax
; Line 3827
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR n$[rsp], 3
	jge	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR is_rgb$[rsp], 0
	jne	SHORT $LN44@load_jpeg_
; Line 3828
	mov	DWORD PTR decode_n$[rsp], 1
	jmp	SHORT $LN45@load_jpeg_
$LN44@load_jpeg_:
; Line 3830
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR decode_n$[rsp], eax
$LN45@load_jpeg_:
; Line 3834
	cmp	DWORD PTR decode_n$[rsp], 0
	jg	SHORT $LN46@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN46@load_jpeg_:
; Line 3841
	mov	QWORD PTR coutput$17[rsp], 0
	mov	QWORD PTR coutput$17[rsp+8], 0
	mov	QWORD PTR coutput$17[rsp+16], 0
	mov	QWORD PTR coutput$17[rsp+24], 0
; Line 3845
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN4@load_jpeg_
$LN2@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN4@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN3@load_jpeg_
; Line 3846
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$7[rsp], rax
; Line 3850
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	add	eax, 3
	mov	eax, eax
	mov	ecx, eax
	call	stbi__malloc
	movsxd	rcx, DWORD PTR k$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18152], rax
; Line 3851
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	jne	SHORT $LN47@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG132045
	call	stbi__err
	test	eax, eax
	je	SHORT $LN93@load_jpeg_
	mov	QWORD PTR tv159[rsp], 0
	jmp	SHORT $LN94@load_jpeg_
$LN93@load_jpeg_:
	mov	QWORD PTR tv159[rsp], 0
$LN94@load_jpeg_:
	mov	rax, QWORD PTR tv159[rsp]
	jmp	$LN1@load_jpeg_
$LN47@load_jpeg_:
; Line 3853
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv164[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18056]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv164[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 3854
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv172[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18060]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv172[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 3855
	mov	rax, QWORD PTR r$7[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 3856
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR r$7[rsp]
	div	DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 3857
	mov	rax, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 3858
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18128]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3860
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:resample_row_1
	mov	QWORD PTR [rax], rcx
	jmp	$LN49@load_jpeg_
$LN48@load_jpeg_:
; Line 3861
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_v_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN51@load_jpeg_
$LN50@load_jpeg_:
; Line 3862
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_h_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN53@load_jpeg_
$LN52@load_jpeg_:
; Line 3863
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+18560]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN55@load_jpeg_
$LN54@load_jpeg_:
; Line 3864
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_generic
	mov	QWORD PTR [rax], rcx
$LN55@load_jpeg_:
$LN53@load_jpeg_:
$LN51@load_jpeg_:
$LN49@load_jpeg_:
; Line 3865
	jmp	$LN2@load_jpeg_
$LN3@load_jpeg_:
; Line 3868
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	r9d, 1
	mov	r8d, DWORD PTR [rax+4]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, DWORD PTR n$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR output$15[rsp], rax
; Line 3869
	cmp	QWORD PTR output$15[rsp], 0
	jne	SHORT $LN56@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG132055
	call	stbi__err
	test	eax, eax
	je	SHORT $LN95@load_jpeg_
	mov	QWORD PTR tv232[rsp], 0
	jmp	SHORT $LN96@load_jpeg_
$LN95@load_jpeg_:
	mov	QWORD PTR tv232[rsp], 0
$LN96@load_jpeg_:
	mov	rax, QWORD PTR tv232[rsp]
	jmp	$LN1@load_jpeg_
$LN56@load_jpeg_:
; Line 3872
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN7@load_jpeg_
$LN5@load_jpeg_:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN7@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$12[rsp], eax
	jae	$LN6@load_jpeg_
; Line 3873
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR n$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR j$12[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR output$15[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3874
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN10@load_jpeg_
$LN8@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN10@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN9@load_jpeg_
; Line 3875
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$8[rsp], rax
; Line 3876
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$8[rsp]
	cmp	DWORD PTR [rcx+36], eax
	jl	SHORT $LN97@load_jpeg_
	mov	DWORD PTR tv252[rsp], 1
	jmp	SHORT $LN98@load_jpeg_
$LN97@load_jpeg_:
	mov	DWORD PTR tv252[rsp], 0
$LN98@load_jpeg_:
	mov	eax, DWORD PTR tv252[rsp]
	mov	DWORD PTR y_bot$13[rsp], eax
; Line 3877
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN99@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv265[rsp], rax
	jmp	SHORT $LN100@load_jpeg_
$LN99@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv265[rsp], rax
$LN100@load_jpeg_:
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN101@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv270[rsp], rax
	jmp	SHORT $LN102@load_jpeg_
$LN101@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv270[rsp], rax
$LN102@load_jpeg_:
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR r$8[rsp]
	mov	r9d, DWORD PTR [rcx+32]
	mov	r8, QWORD PTR tv265[rsp]
	mov	rdx, QWORD PTR tv270[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	mov	rax, QWORD PTR r$8[rsp]
	call	QWORD PTR [rax]
	movsxd	rcx, DWORD PTR k$3[rsp]
	mov	QWORD PTR coutput$17[rsp+rcx*8], rax
; Line 3881
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	DWORD PTR tv280[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv280[rsp]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR tv280[rsp], eax
	jl	$LN57@load_jpeg_
; Line 3882
	mov	rax, QWORD PTR r$8[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 3883
	mov	rax, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3884
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	DWORD PTR tv288[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv288[rsp]
	mov	DWORD PTR [rax+40], ecx
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	cmp	DWORD PTR tv288[rsp], eax
	jge	SHORT $LN58@load_jpeg_
; Line 3885
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18116]
	mov	rcx, QWORD PTR r$8[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN58@load_jpeg_:
$LN57@load_jpeg_:
; Line 3887
	jmp	$LN8@load_jpeg_
$LN9@load_jpeg_:
; Line 3888
	cmp	DWORD PTR n$[rsp], 3
	jl	$LN59@load_jpeg_
; Line 3889
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$14[rsp], rax
; Line 3890
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	$LN61@load_jpeg_
; Line 3891
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN63@load_jpeg_
; Line 3892
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@load_jpeg_
$LN11@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN12@load_jpeg_
; Line 3893
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3894
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3895
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3896
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3897
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3898
	jmp	$LN11@load_jpeg_
$LN12@load_jpeg_:
; Line 3899
	jmp	SHORT $LN64@load_jpeg_
$LN63@load_jpeg_:
; Line 3900
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18552]
$LN64@load_jpeg_:
; Line 3901
	jmp	$LN62@load_jpeg_
$LN61@load_jpeg_:
; Line 3902
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN65@load_jpeg_
; Line 3903
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN67@load_jpeg_
; Line 3904
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@load_jpeg_
$LN14@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN15@load_jpeg_
; Line 3905
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$4[rsp], al
; Line 3906
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3907
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3908
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3909
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3910
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3911
	jmp	$LN14@load_jpeg_
$LN15@load_jpeg_:
; Line 3912
	jmp	$LN68@load_jpeg_
$LN67@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN69@load_jpeg_
; Line 3913
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18552]
; Line 3914
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN19@load_jpeg_
$LN17@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN19@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN18@load_jpeg_
; Line 3915
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$5[rsp], al
; Line 3916
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3917
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3918
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3919
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3920
	jmp	$LN17@load_jpeg_
$LN18@load_jpeg_:
; Line 3921
	jmp	SHORT $LN70@load_jpeg_
$LN69@load_jpeg_:
; Line 3922
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18552]
$LN70@load_jpeg_:
$LN68@load_jpeg_:
; Line 3924
	jmp	$LN66@load_jpeg_
$LN65@load_jpeg_:
; Line 3925
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN22@load_jpeg_
$LN20@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN22@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN21@load_jpeg_
; Line 3926
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3927
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3928
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3929
	jmp	$LN20@load_jpeg_
$LN21@load_jpeg_:
$LN66@load_jpeg_:
$LN62@load_jpeg_:
; Line 3930
	jmp	$LN60@load_jpeg_
$LN59@load_jpeg_:
; Line 3931
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN71@load_jpeg_
; Line 3932
	cmp	DWORD PTR n$[rsp], 1
	jne	$LN73@load_jpeg_
; Line 3933
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN25@load_jpeg_
$LN23@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN25@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN24@load_jpeg_
; Line 3934
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv516[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv516[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	$LN23@load_jpeg_
$LN24@load_jpeg_:
	jmp	$LN74@load_jpeg_
$LN73@load_jpeg_:
; Line 3936
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN28@load_jpeg_
$LN26@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	rax, QWORD PTR out$2[rsp]
	add	rax, 2
	mov	QWORD PTR out$2[rsp], rax
$LN28@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN27@load_jpeg_
; Line 3937
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv545[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv545[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3938
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3939
	jmp	$LN26@load_jpeg_
$LN27@load_jpeg_:
$LN74@load_jpeg_:
; Line 3940
	jmp	$LN72@load_jpeg_
$LN71@load_jpeg_:
; Line 3941
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN75@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN75@load_jpeg_
; Line 3942
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN31@load_jpeg_
$LN29@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN31@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN30@load_jpeg_
; Line 3943
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$6[rsp], al
; Line 3944
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	BYTE PTR r$11[rsp], al
; Line 3945
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	BYTE PTR g$10[rsp], al
; Line 3946
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	stbi__blinn_8x8
	mov	BYTE PTR b$9[rsp], al
; Line 3947
	movzx	eax, BYTE PTR b$9[rsp]
	movzx	ecx, BYTE PTR g$10[rsp]
	movzx	edx, BYTE PTR r$11[rsp]
	mov	DWORD PTR tv626[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv626[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3948
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3949
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3950
	jmp	$LN29@load_jpeg_
$LN30@load_jpeg_:
; Line 3951
	jmp	$LN76@load_jpeg_
$LN75@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN77@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN77@load_jpeg_
; Line 3952
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN34@load_jpeg_
$LN32@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN34@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN33@load_jpeg_
; Line 3953
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	r8d, 255				; 000000ffH
	sub	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR tv656[rsp], edx
	movzx	edx, BYTE PTR [rax+rcx]
	mov	eax, DWORD PTR tv656[rsp]
	movzx	ecx, al
	call	stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3954
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3955
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3956
	jmp	$LN32@load_jpeg_
$LN33@load_jpeg_:
; Line 3957
	jmp	$LN78@load_jpeg_
$LN77@load_jpeg_:
; Line 3958
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$16[rsp], rax
; Line 3959
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN79@load_jpeg_
; Line 3960
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN37@load_jpeg_
$LN35@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN37@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN36@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@load_jpeg_
$LN36@load_jpeg_:
	jmp	SHORT $LN80@load_jpeg_
$LN79@load_jpeg_:
; Line 3962
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN40@load_jpeg_
$LN38@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN40@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN39@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rdx, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	mov	rax, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rax], 255			; 000000ffH
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	SHORT $LN38@load_jpeg_
$LN39@load_jpeg_:
$LN80@load_jpeg_:
$LN78@load_jpeg_:
$LN76@load_jpeg_:
$LN72@load_jpeg_:
$LN60@load_jpeg_:
; Line 3965
	jmp	$LN5@load_jpeg_
$LN6@load_jpeg_:
; Line 3966
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__cleanup_jpeg
; Line 3967
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 3968
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 3969
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN81@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN103@load_jpeg_
	mov	DWORD PTR tv694[rsp], 3
	jmp	SHORT $LN104@load_jpeg_
$LN103@load_jpeg_:
	mov	DWORD PTR tv694[rsp], 1
$LN104@load_jpeg_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv694[rsp]
	mov	DWORD PTR [rax], ecx
$LN81@load_jpeg_:
; Line 3970
	mov	rax, QWORD PTR output$15[rsp]
$LN1@load_jpeg_:
; Line 3972
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 488				; 000001e8H
	ret	0
load_jpeg_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
x$ = 32
y$ = 40
stbi__blinn_8x8 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3806
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 3807
	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	imul	eax, ecx
	add	eax, 128				; 00000080H
	mov	DWORD PTR t$[rsp], eax
; Line 3808
	mov	eax, DWORD PTR t$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	shr	eax, 8
; Line 3809
	add	rsp, 24
	ret	0
stbi__blinn_8x8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
stbi__cleanup_jpeg PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3790
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3791
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__free_jpeg_components
; Line 3792
	add	rsp, 40					; 00000028H
	ret	0
stbi__cleanup_jpeg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
stbi__setup_jpeg PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3768
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3769
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__idct_block
	mov	QWORD PTR [rax+18544], rcx
; Line 3770
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__YCbCr_to_RGB_row
	mov	QWORD PTR [rax+18552], rcx
; Line 3771
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_hv_2
	mov	QWORD PTR [rax+18560], rcx
; Line 3774
	call	stbi__sse2_available
	test	eax, eax
	je	SHORT $LN2@stbi__setu
; Line 3775
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__idct_simd
	mov	QWORD PTR [rax+18544], rcx
; Line 3776
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__YCbCr_to_RGB_simd
	mov	QWORD PTR [rax+18552], rcx
; Line 3777
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:stbi__resample_row_hv_2_simd
	mov	QWORD PTR [rax+18560], rcx
$LN2@stbi__setu:
; Line 3786
	add	rsp, 40					; 00000028H
	ret	0
stbi__setup_jpeg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
r$1 = 4
g$2 = 8
b$3 = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
yws$7 = 32
signflip$8 = 48
cbw$9 = 64
crw$10 = 80
brb$11 = 96
gxb$12 = 112
t0$13 = 128
t1$14 = 144
cr_bytes$15 = 160
cb_bytes$16 = 176
y_bias$17 = 192
y_bytes$18 = 208
cr_biased$19 = 224
cb_biased$20 = 240
yw$21 = 256
cr_const0$22 = 272
cb_const0$23 = 288
cb_const1$24 = 304
cr_const1$25 = 320
cr0$26 = 336
cb0$27 = 352
cb1$28 = 368
gwt$29 = 384
cr1$30 = 400
rws$31 = 416
bws$32 = 432
gws$33 = 448
rw$34 = 464
bw$35 = 480
gw$36 = 496
xw$37 = 512
o0$38 = 528
o1$39 = 544
out$ = 576
y$ = 584
pcb$ = 592
pcr$ = 600
count$ = 608
step$ = 616
stbi__YCbCr_to_RGB_simd PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3633
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 568				; 00000238H
; Line 3634
	mov	DWORD PTR i$[rsp], 0
; Line 3640
	cmp	DWORD PTR step$[rsp], 4
	jne	$LN8@stbi__YCbC
; Line 3642
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR signflip$8[rsp], xmm0
; Line 3643
	movdqa	xmm0, XMMWORD PTR __xmm@166f166f166f166f166f166f166f166f
	movdqa	XMMWORD PTR cr_const0$22[rsp], xmm0
; Line 3644
	movdqa	xmm0, XMMWORD PTR __xmm@f493f493f493f493f493f493f493f493
	movdqa	XMMWORD PTR cr_const1$25[rsp], xmm0
; Line 3645
	movdqa	xmm0, XMMWORD PTR __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
	movdqa	XMMWORD PTR cb_const0$23[rsp], xmm0
; Line 3646
	movdqa	xmm0, XMMWORD PTR __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
	movdqa	XMMWORD PTR cb_const1$24[rsp], xmm0
; Line 3647
	movdqa	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	movdqa	XMMWORD PTR y_bias$17[rsp], xmm0
; Line 3648
	movdqa	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	movdqa	XMMWORD PTR xw$37[rsp], xmm0
; Line 3650
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN3@stbi__YCbC
; Line 3652
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR y_bytes$18[rsp], xmm0
; Line 3653
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR cr_bytes$15[rsp], xmm0
; Line 3654
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR cb_bytes$16[rsp], xmm0
; Line 3655
	movdqa	xmm0, XMMWORD PTR cr_bytes$15[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR cr_biased$19[rsp], xmm0
; Line 3656
	movdqa	xmm0, XMMWORD PTR cb_bytes$16[rsp]
	pxor	xmm0, XMMWORD PTR signflip$8[rsp]
	movdqa	XMMWORD PTR cb_biased$20[rsp], xmm0
; Line 3659
	movdqa	xmm0, XMMWORD PTR y_bias$17[rsp]
	punpcklbw xmm0, XMMWORD PTR y_bytes$18[rsp]
	movdqa	XMMWORD PTR yw$21[rsp], xmm0
; Line 3660
	pxor	xmm0, xmm0
	punpcklbw xmm0, XMMWORD PTR cr_biased$19[rsp]
	movdqa	XMMWORD PTR crw$10[rsp], xmm0
; Line 3661
	pxor	xmm0, xmm0
	punpcklbw xmm0, XMMWORD PTR cb_biased$20[rsp]
	movdqa	XMMWORD PTR cbw$9[rsp], xmm0
; Line 3664
	movdqa	xmm0, XMMWORD PTR yw$21[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR yws$7[rsp], xmm0
; Line 3665
	movdqa	xmm0, XMMWORD PTR cr_const0$22[rsp]
	pmulhw	xmm0, XMMWORD PTR crw$10[rsp]
	movdqa	XMMWORD PTR cr0$26[rsp], xmm0
; Line 3666
	movdqa	xmm0, XMMWORD PTR cb_const0$23[rsp]
	pmulhw	xmm0, XMMWORD PTR cbw$9[rsp]
	movdqa	XMMWORD PTR cb0$27[rsp], xmm0
; Line 3667
	movdqa	xmm0, XMMWORD PTR cbw$9[rsp]
	pmulhw	xmm0, XMMWORD PTR cb_const1$24[rsp]
	movdqa	XMMWORD PTR cb1$28[rsp], xmm0
; Line 3668
	movdqa	xmm0, XMMWORD PTR crw$10[rsp]
	pmulhw	xmm0, XMMWORD PTR cr_const1$25[rsp]
	movdqa	XMMWORD PTR cr1$30[rsp], xmm0
; Line 3669
	movdqa	xmm0, XMMWORD PTR cr0$26[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR rws$31[rsp], xmm0
; Line 3670
	movdqa	xmm0, XMMWORD PTR cb0$27[rsp]
	paddw	xmm0, XMMWORD PTR yws$7[rsp]
	movdqa	XMMWORD PTR gwt$29[rsp], xmm0
; Line 3671
	movdqa	xmm0, XMMWORD PTR yws$7[rsp]
	paddw	xmm0, XMMWORD PTR cb1$28[rsp]
	movdqa	XMMWORD PTR bws$32[rsp], xmm0
; Line 3672
	movdqa	xmm0, XMMWORD PTR gwt$29[rsp]
	paddw	xmm0, XMMWORD PTR cr1$30[rsp]
	movdqa	XMMWORD PTR gws$33[rsp], xmm0
; Line 3675
	movdqa	xmm0, XMMWORD PTR rws$31[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR rw$34[rsp], xmm0
; Line 3676
	movdqa	xmm0, XMMWORD PTR bws$32[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR bw$35[rsp], xmm0
; Line 3677
	movdqa	xmm0, XMMWORD PTR gws$33[rsp]
	psraw	xmm0, 4
	movdqa	XMMWORD PTR gw$36[rsp], xmm0
; Line 3680
	movdqa	xmm0, XMMWORD PTR rw$34[rsp]
	packuswb xmm0, XMMWORD PTR bw$35[rsp]
	movdqa	XMMWORD PTR brb$11[rsp], xmm0
; Line 3681
	movdqa	xmm0, XMMWORD PTR gw$36[rsp]
	packuswb xmm0, XMMWORD PTR xw$37[rsp]
	movdqa	XMMWORD PTR gxb$12[rsp], xmm0
; Line 3684
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpcklbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR t0$13[rsp], xmm0
; Line 3685
	movdqa	xmm0, XMMWORD PTR brb$11[rsp]
	punpckhbw xmm0, XMMWORD PTR gxb$12[rsp]
	movdqa	XMMWORD PTR t1$14[rsp], xmm0
; Line 3686
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpcklwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR o0$38[rsp], xmm0
; Line 3687
	movdqa	xmm0, XMMWORD PTR t0$13[rsp]
	punpckhwd xmm0, XMMWORD PTR t1$14[rsp]
	movdqa	XMMWORD PTR o1$39[rsp], xmm0
; Line 3690
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR o0$38[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3691
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 16
	movdqa	xmm0, XMMWORD PTR o1$39[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3692
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR out$[rsp], rax
; Line 3693
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3743
	jmp	SHORT $LN7@stbi__YCbC
$LN5@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__YCbC
; Line 3744
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3746
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3747
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3748
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3749
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3750
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3751
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3752
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3753
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3754
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN9@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN10@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN11@stbi__YCbC
$LN10@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN11@stbi__YCbC:
$LN9@stbi__YCbC:
; Line 3755
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN12@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN13@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN14@stbi__YCbC
$LN13@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN14@stbi__YCbC:
$LN12@stbi__YCbC:
; Line 3756
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN15@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN16@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN17@stbi__YCbC
$LN16@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN17@stbi__YCbC:
$LN15@stbi__YCbC:
; Line 3757
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3758
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3759
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3760
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3761
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3762
	jmp	$LN5@stbi__YCbC
$LN6@stbi__YCbC:
; Line 3763
	add	rsp, 568				; 00000238H
	ret	0
stbi__YCbCr_to_RGB_simd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 0
g$2 = 4
b$3 = 8
i$ = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
out$ = 48
y$ = 56
pcb$ = 64
pcr$ = 72
count$ = 80
step$ = 88
stbi__YCbCr_to_RGB_row PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3607
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3609
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__YCbC
; Line 3610
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3612
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3613
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3614
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3615
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3616
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3617
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3618
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3619
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3620
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN5@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN6@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN7@stbi__YCbC
$LN6@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN7@stbi__YCbC:
$LN5@stbi__YCbC:
; Line 3621
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN8@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN9@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN10@stbi__YCbC
$LN9@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN10@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3622
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN11@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN12@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN13@stbi__YCbC
$LN12@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN13@stbi__YCbC:
$LN11@stbi__YCbC:
; Line 3623
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3624
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3625
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3626
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3627
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3628
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
; Line 3629
	add	rsp, 40					; 00000028H
	ret	0
stbi__YCbCr_to_RGB_row ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
j$ = 4
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_generic PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3593
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3597
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3598
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR hs$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3599
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR hs$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbi__resa
$LN6@stbi__resa:
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3600
	mov	rax, QWORD PTR out$[rsp]
; Line 3601
	add	rsp, 24
	ret	0
stbi__resample_row_generic ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
t0$ = 8
tv78 = 12
curr$1 = 16
zero$2 = 32
nearw$3 = 48
curb$4 = 64
even$5 = 80
odd$6 = 96
farb$7 = 112
nearb$8 = 128
farw$9 = 144
nears$10 = 160
diff$11 = 176
prv0$12 = 192
nxt0$13 = 208
prev$14 = 224
next$15 = 240
curs$16 = 256
bias$17 = 272
prvd$18 = 288
nxtd$19 = 304
int0$20 = 320
int1$21 = 336
de0$22 = 352
de1$23 = 368
outv$24 = 384
out$ = 416
in_near$ = 424
in_far$ = 432
w$ = 440
hs$ = 448
stbi__resample_row_hv_2_simd PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3477
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 408				; 00000198H
; Line 3479
	mov	DWORD PTR i$[rsp], 0
; Line 3481
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN8@stbi__resa
; Line 3482
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3483
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN8@stbi__resa:
; Line 3486
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3490
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	and	eax, -8
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__resa
; Line 3494
	pxor	xmm0, xmm0
	movdqa	XMMWORD PTR zero$2[rsp], xmm0
; Line 3495
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_far$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR farb$7[rsp], xmm0
; Line 3496
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movq	xmm0, QWORD PTR [rax]
	movdqa	XMMWORD PTR nearb$8[rsp], xmm0
; Line 3497
	movdqa	xmm0, XMMWORD PTR farb$7[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR farw$9[rsp], xmm0
; Line 3498
	movdqa	xmm0, XMMWORD PTR nearb$8[rsp]
	punpcklbw xmm0, XMMWORD PTR zero$2[rsp]
	movdqa	XMMWORD PTR nearw$3[rsp], xmm0
; Line 3499
	movdqa	xmm0, XMMWORD PTR farw$9[rsp]
	psubw	xmm0, XMMWORD PTR nearw$3[rsp]
	movdqa	XMMWORD PTR diff$11[rsp], xmm0
; Line 3500
	movdqa	xmm0, XMMWORD PTR nearw$3[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR nears$10[rsp], xmm0
; Line 3501
	movdqa	xmm0, XMMWORD PTR nears$10[rsp]
	paddw	xmm0, XMMWORD PTR diff$11[rsp]
	movdqa	XMMWORD PTR curr$1[rsp], xmm0
; Line 3508
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	pslldq	xmm0, 2
	movdqa	XMMWORD PTR prv0$12[rsp], xmm0
; Line 3509
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psrldq	xmm0, 2
	movdqa	XMMWORD PTR nxt0$13[rsp], xmm0
; Line 3510
	movdqa	xmm0, XMMWORD PTR prv0$12[rsp]
	pinsrw	xmm0, DWORD PTR t1$[rsp], 0
	movdqa	XMMWORD PTR prev$14[rsp], xmm0
; Line 3511
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 8
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movdqa	xmm0, XMMWORD PTR nxt0$13[rsp]
	pinsrw	xmm0, eax, 7
	movdqa	XMMWORD PTR next$15[rsp], xmm0
; Line 3517
	movdqa	xmm0, XMMWORD PTR __xmm@00080008000800080008000800080008
	movdqa	XMMWORD PTR bias$17[rsp], xmm0
; Line 3518
	movdqa	xmm0, XMMWORD PTR curr$1[rsp]
	psllw	xmm0, 2
	movdqa	XMMWORD PTR curs$16[rsp], xmm0
; Line 3519
	movdqa	xmm0, XMMWORD PTR prev$14[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR prvd$18[rsp], xmm0
; Line 3520
	movdqa	xmm0, XMMWORD PTR next$15[rsp]
	psubw	xmm0, XMMWORD PTR curr$1[rsp]
	movdqa	XMMWORD PTR nxtd$19[rsp], xmm0
; Line 3521
	movdqa	xmm0, XMMWORD PTR curs$16[rsp]
	paddw	xmm0, XMMWORD PTR bias$17[rsp]
	movdqa	XMMWORD PTR curb$4[rsp], xmm0
; Line 3522
	movdqa	xmm0, XMMWORD PTR prvd$18[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR even$5[rsp], xmm0
; Line 3523
	movdqa	xmm0, XMMWORD PTR nxtd$19[rsp]
	paddw	xmm0, XMMWORD PTR curb$4[rsp]
	movdqa	XMMWORD PTR odd$6[rsp], xmm0
; Line 3526
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpcklwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR int0$20[rsp], xmm0
; Line 3527
	movdqa	xmm0, XMMWORD PTR even$5[rsp]
	punpckhwd xmm0, XMMWORD PTR odd$6[rsp]
	movdqa	XMMWORD PTR int1$21[rsp], xmm0
; Line 3528
	movdqa	xmm0, XMMWORD PTR int0$20[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR de0$22[rsp], xmm0
; Line 3529
	movdqa	xmm0, XMMWORD PTR int1$21[rsp]
	psrlw	xmm0, 4
	movdqa	XMMWORD PTR de1$23[rsp], xmm0
; Line 3532
	movdqa	xmm0, XMMWORD PTR de0$22[rsp]
	packuswb xmm0, XMMWORD PTR de1$23[rsp]
	movdqa	XMMWORD PTR outv$24[rsp], xmm0
; Line 3533
	mov	eax, DWORD PTR i$[rsp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movdqa	xmm0, XMMWORD PTR outv$24[rsp]
	movdqu	XMMWORD PTR [rax], xmm0
; Line 3571
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 7
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3572
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3574
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3575
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3576
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3578
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3579
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3580
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3581
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3582
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3583
	jmp	$LN5@stbi__resa
$LN6@stbi__resa:
; Line 3584
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3588
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3589
	add	rsp, 408				; 00000198H
	ret	0
stbi__resample_row_hv_2_simd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
tv78 = 8
t0$ = 12
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_hv_2 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3452
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3455
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3456
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3457
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3460
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3461
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3462
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3463
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3464
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3465
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3466
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3467
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3468
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3472
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3473
	add	rsp, 24
	ret	0
stbi__resample_row_hv_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
n$1 = 4
input$ = 8
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_h_2 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3422
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3425
	mov	rax, QWORD PTR in_near$[rsp]
	mov	QWORD PTR input$[rsp], rax
; Line 3427
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3429
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3430
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3433
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3434
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3435
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3436
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	add	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 3437
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3438
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3439
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3440
	mov	eax, DWORD PTR w$[rsp]
	sub	eax, 2
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR w$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3441
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3446
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3447
	add	rsp, 24
	ret	0
stbi__resample_row_h_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
stbi__resample_row_v_2 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3412
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3416
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3417
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3418
	mov	rax, QWORD PTR out$[rsp]
; Line 3419
	add	rsp, 24
	ret	0
stbi__resample_row_v_2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 8
in_near$ = 16
in_far$ = 24
w$ = 32
hs$ = 40
resample_row_1 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3403
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 3408
	mov	rax, QWORD PTR in_near$[rsp]
; Line 3409
	ret	0
resample_row_1 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
x$1 = 36
Ld$2 = 40
NL$3 = 44
j$ = 64
stbi__decode_jpeg_image PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3356
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3358
	mov	DWORD PTR m$[rsp], 0
	jmp	SHORT $LN4@stbi__deco
$LN2@stbi__deco:
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
	cmp	DWORD PTR m$[rsp], 4
	jge	SHORT $LN3@stbi__deco
; Line 3359
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3360
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3361
	jmp	SHORT $LN2@stbi__deco
$LN3@stbi__deco:
; Line 3362
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18536], 0
; Line 3363
	xor	edx, edx
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN9@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN9@stbi__deco:
; Line 3364
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN5@stbi__deco:
; Line 3365
	cmp	DWORD PTR m$[rsp], 217			; 000000d9H
	je	$LN6@stbi__deco
; Line 3366
	cmp	DWORD PTR m$[rsp], 218			; 000000daH
	jne	$LN10@stbi__deco
; Line 3367
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__process_scan_header
	test	eax, eax
	jne	SHORT $LN12@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN12@stbi__deco:
; Line 3368
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__parse_entropy_coded_data
	test	eax, eax
	jne	SHORT $LN13@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN13@stbi__deco:
; Line 3369
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN14@stbi__deco
$LN7@stbi__deco:
; Line 3371
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
; Line 3372
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR x$1[rsp], eax
; Line 3373
	cmp	DWORD PTR x$1[rsp], 255			; 000000ffH
	jne	SHORT $LN15@stbi__deco
; Line 3374
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	mov	rcx, QWORD PTR j$[rsp]
	mov	BYTE PTR [rcx+18472], al
; Line 3375
	jmp	SHORT $LN8@stbi__deco
$LN15@stbi__deco:
; Line 3377
	jmp	SHORT $LN7@stbi__deco
$LN8@stbi__deco:
$LN14@stbi__deco:
; Line 3379
	jmp	SHORT $LN11@stbi__deco
$LN10@stbi__deco:
; Line 3380
	cmp	DWORD PTR m$[rsp], 220			; 000000dcH
	jne	SHORT $LN16@stbi__deco
; Line 3381
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR Ld$2[rsp], eax
; Line 3382
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR NL$3[rsp], eax
; Line 3383
	cmp	DWORD PTR Ld$2[rsp], 4
	je	SHORT $LN18@stbi__deco
	lea	rcx, OFFSET FLAT:$SG131608
	call	stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN18@stbi__deco:
; Line 3384
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR NL$3[rsp], eax
	je	SHORT $LN19@stbi__deco
	lea	rcx, OFFSET FLAT:$SG131610
	call	stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN19@stbi__deco:
; Line 3385
	jmp	SHORT $LN17@stbi__deco
$LN16@stbi__deco:
; Line 3386
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__process_marker
	test	eax, eax
	jne	SHORT $LN20@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN20@stbi__deco:
$LN17@stbi__deco:
$LN11@stbi__deco:
; Line 3388
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3389
	jmp	$LN5@stbi__deco
$LN6@stbi__deco:
; Line 3390
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN21@stbi__deco
; Line 3391
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_finish
$LN21@stbi__deco:
; Line 3392
	mov	eax, 1
$LN1@stbi__deco:
; Line 3393
	add	rsp, 56					; 00000038H
	ret	0
stbi__decode_jpeg_image ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
tv131 = 36
z$ = 64
scan$ = 72
stbi__decode_jpeg_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3331
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3333
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 0
; Line 3334
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18508], -1
; Line 3335
	mov	rax, QWORD PTR z$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 3336
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3337
	cmp	DWORD PTR m$[rsp], 216			; 000000d8H
	je	SHORT $LN6@stbi__deco
	lea	rcx, OFFSET FLAT:$SG131575
	call	stbi__err
	jmp	$LN1@stbi__deco
$LN6@stbi__deco:
; Line 3338
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN7@stbi__deco
	mov	eax, 1
	jmp	$LN1@stbi__deco
$LN7@stbi__deco:
; Line 3339
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN2@stbi__deco:
; Line 3340
	cmp	DWORD PTR m$[rsp], 192			; 000000c0H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 193			; 000000c1H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	je	SHORT $LN3@stbi__deco
; Line 3341
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__process_marker
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN8@stbi__deco:
; Line 3342
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
; Line 3343
	cmp	DWORD PTR m$[rsp], 255			; 000000ffH
	jne	SHORT $LN5@stbi__deco
; Line 3345
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__deco
	lea	rcx, OFFSET FLAT:$SG131579
	call	stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN9@stbi__deco:
; Line 3346
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3347
	jmp	SHORT $LN4@stbi__deco
$LN5@stbi__deco:
; Line 3348
	jmp	$LN2@stbi__deco
$LN3@stbi__deco:
; Line 3349
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	jne	SHORT $LN12@stbi__deco
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN13@stbi__deco
$LN12@stbi__deco:
	mov	DWORD PTR tv131[rsp], 0
$LN13@stbi__deco:
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv131[rsp]
	mov	DWORD PTR [rax+18480], ecx
; Line 3350
	mov	edx, DWORD PTR scan$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__process_frame_header
	test	eax, eax
	jne	SHORT $LN10@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN10@stbi__deco:
; Line 3351
	mov	eax, 1
$LN1@stbi__deco:
; Line 3352
	add	rsp, 56					; 00000038H
	ret	0
stbi__decode_jpeg_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 40
h_max$ = 48
v_max$ = 52
c$ = 56
Lf$ = 60
q$ = 64
p$ = 68
tv285 = 72
tv294 = 80
z$ = 112
scan$ = 120
stbi__process_frame_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3230
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3231
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 3232
	mov	DWORD PTR h_max$[rsp], 1
	mov	DWORD PTR v_max$[rsp], 1
; Line 3233
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR Lf$[rsp], eax
	cmp	DWORD PTR Lf$[rsp], 11
	jge	SHORT $LN17@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131525
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN17@stbi__proc:
; Line 3234
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR p$[rsp], eax
	cmp	DWORD PTR p$[rsp], 8
	je	SHORT $LN18@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131527
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN18@stbi__proc:
; Line 3235
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131529
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN19@stbi__proc:
; Line 3236
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN20@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131531
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN20@stbi__proc:
; Line 3237
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN21@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131533
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 3238
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN22@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131535
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN22@stbi__proc:
; Line 3239
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$[rsp], eax
; Line 3240
	cmp	DWORD PTR c$[rsp], 3
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 1
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 4
	je	SHORT $LN23@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131537
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN23@stbi__proc:
; Line 3241
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3242
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR c$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 3243
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
; Line 3244
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3245
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 3247
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax+8], 3
	add	eax, 8
	cmp	DWORD PTR Lf$[rsp], eax
	je	SHORT $LN24@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131539
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3249
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18512], 0
; Line 3250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__proc
; Line 3252
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movzx	eax, al
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18080], eax
; Line 3253
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN25@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?rgb@?5??stbi__process_frame_header@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rdx+rax+18080], ecx
	jne	SHORT $LN25@stbi__proc
; Line 3254
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18512]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18512], eax
$LN25@stbi__proc:
; Line 3255
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$[rsp], eax
; Line 3256
	mov	eax, DWORD PTR q$[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18084], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 0
	je	SHORT $LN27@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 4
	jle	SHORT $LN26@stbi__proc
$LN27@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG131543
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3257
	mov	eax, DWORD PTR q$[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18088], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 0
	je	SHORT $LN29@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 4
	jle	SHORT $LN28@stbi__proc
$LN29@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG131546
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3258
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movzx	eax, al
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18092], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18092], 3
	jle	SHORT $LN30@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131548
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3259
	jmp	$LN5@stbi__proc
$LN6@stbi__proc:
; Line 3261
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN31@stbi__proc
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN31@stbi__proc:
; Line 3263
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN32@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131551
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN32@stbi__proc:
; Line 3265
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__proc
$LN8@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__proc
; Line 3266
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR h_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], edx
	jle	SHORT $LN33@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	mov	DWORD PTR h_max$[rsp], eax
$LN33@stbi__proc:
; Line 3267
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR v_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], edx
	jle	SHORT $LN34@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	mov	DWORD PTR v_max$[rsp], eax
$LN34@stbi__proc:
; Line 3268
	jmp	$LN8@stbi__proc
$LN9@stbi__proc:
; Line 3272
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__proc
; Line 3273
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv285[rsp], rax
	mov	eax, DWORD PTR h_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv285[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN35@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131555
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3274
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv294[rsp], rax
	mov	eax, DWORD PTR v_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv294[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131557
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN36@stbi__proc:
; Line 3275
	jmp	$LN11@stbi__proc
$LN12@stbi__proc:
; Line 3278
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR h_max$[rsp]
	mov	DWORD PTR [rax+18056], ecx
; Line 3279
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR v_max$[rsp]
	mov	DWORD PTR [rax+18060], ecx
; Line 3280
	mov	eax, DWORD PTR h_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18072], eax
; Line 3281
	mov	eax, DWORD PTR v_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18076], eax
; Line 3283
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18072]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18072]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18064], eax
; Line 3284
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18076]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18076]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18068], eax
; Line 3286
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__proc
; Line 3288
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	mov	ecx, DWORD PTR h_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR h_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18108], eax
; Line 3289
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	mov	ecx, DWORD PTR v_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR v_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18112], eax
; Line 3297
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18064]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18116], eax
; Line 3298
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18068]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18120], eax
; Line 3299
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
; Line 3300
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3301
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3302
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r8d, 15
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	stbi__malloc_mad2
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18136], rax
; Line 3303
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	jne	SHORT $LN37@stbi__proc
; Line 3304
	lea	rcx, OFFSET FLAT:$SG131559
	call	stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__free_jpeg_components
	jmp	$LN1@stbi__proc
$LN37@stbi__proc:
; Line 3306
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18136]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18128], rax
; Line 3307
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN38@stbi__proc
; Line 3309
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18116]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18168], eax
; Line 3310
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18120]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18172], eax
; Line 3311
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r9d, 15
	mov	r8d, 2
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	stbi__malloc_mad3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18144], rax
; Line 3312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	jne	SHORT $LN39@stbi__proc
; Line 3313
	lea	rcx, OFFSET FLAT:$SG131562
	call	stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__free_jpeg_components
	jmp	SHORT $LN1@stbi__proc
$LN39@stbi__proc:
; Line 3314
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18144]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18160], rax
$LN38@stbi__proc:
; Line 3316
	jmp	$LN14@stbi__proc
$LN15@stbi__proc:
; Line 3318
	mov	eax, 1
$LN1@stbi__proc:
; Line 3319
	add	rsp, 104				; 00000068H
	ret	0
stbi__process_frame_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
tv75 = 56
tv137 = 64
tv167 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
z$ = 304
ncomp$ = 312
why$ = 320
stbi__free_jpeg_components PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3208
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
; Line 3210
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__free
$LN2@stbi__free:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__free:
	mov	eax, DWORD PTR ncomp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__free
; Line 3211
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	je	$LN5@stbi__free
; Line 3212
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv75[rsp], rax
	lea	rcx, OFFSET FLAT:$SG131475
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3212				; 00000c8cH
	lea	r8, OFFSET FLAT:$SG131476
	mov	edx, 77					; 0000004dH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	mov	r8, QWORD PTR [rax+rcx+18136]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3213
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3214
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
$LN5@stbi__free:
; Line 3216
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	je	$LN6@stbi__free
; Line 3217
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv137[rsp], rax
	lea	rcx, OFFSET FLAT:$SG131478
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3217				; 00000c91H
	lea	r8, OFFSET FLAT:$SG131479
	mov	edx, 78					; 0000004eH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR tv137[rsp]
	mov	r8, QWORD PTR [rax+rcx+18144]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 3218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3219
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
$LN6@stbi__free:
; Line 3221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	je	$LN7@stbi__free
; Line 3222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv167[rsp], rax
	lea	rcx, OFFSET FLAT:$SG131481
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 3222				; 00000c96H
	lea	r8, OFFSET FLAT:$SG131482
	mov	edx, 79					; 0000004fH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR tv167[rsp]
	mov	r8, QWORD PTR [rax+rcx+18152]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 3223
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
$LN7@stbi__free:
; Line 3225
	jmp	$LN2@stbi__free
$LN3@stbi__free:
; Line 3226
	mov	eax, DWORD PTR why$[rsp]
; Line 3227
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
stbi__free_jpeg_components ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
which$1 = 32
i$ = 36
q$2 = 40
aa$3 = 44
Ls$ = 48
id$4 = 52
z$ = 80
stbi__process_scan_header PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3169
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR Ls$[rsp], eax
; Line 3172
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18516], eax
; Line 3173
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jl	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 4
	jg	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR [rcx+18516], eax
	jle	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG131440
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN8@stbi__proc:
; Line 3174
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	lea	eax, DWORD PTR [rax+rax+6]
	cmp	DWORD PTR Ls$[rsp], eax
	je	SHORT $LN10@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131442
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 3175
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__proc
; Line 3176
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR id$4[rsp], eax
; Line 3177
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$2[rsp], eax
; Line 3178
	mov	DWORD PTR which$1[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR which$1[rsp]
	inc	eax
	mov	DWORD PTR which$1[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jge	SHORT $LN6@stbi__proc
; Line 3179
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR id$4[rsp]
	cmp	DWORD PTR [rcx+rax+18080], edx
	jne	SHORT $LN11@stbi__proc
; Line 3180
	jmp	SHORT $LN6@stbi__proc
$LN11@stbi__proc:
	jmp	SHORT $LN5@stbi__proc
$LN6@stbi__proc:
; Line 3181
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jne	SHORT $LN12@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN12@stbi__proc:
; Line 3182
	mov	eax, DWORD PTR q$2[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18096], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18096], 3
	jle	SHORT $LN13@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131446
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN13@stbi__proc:
; Line 3183
	mov	eax, DWORD PTR q$2[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18100], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18100], 3
	jle	SHORT $LN14@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131448
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
; Line 3184
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR which$1[rsp]
	mov	DWORD PTR [rcx+rax*4+18520], edx
; Line 3185
	jmp	$LN2@stbi__proc
$LN3@stbi__proc:
; Line 3189
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18484], eax
; Line 3190
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18488], eax
; Line 3191
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR aa$3[rsp], eax
; Line 3192
	mov	eax, DWORD PTR aa$3[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18492], eax
; Line 3193
	mov	eax, DWORD PTR aa$3[rsp]
	and	eax, 15
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18496], eax
; Line 3194
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN15@stbi__proc
; Line 3195
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18488], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18488]
	cmp	DWORD PTR [rax+18484], ecx
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 13
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 13
	jle	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3196
	lea	rcx, OFFSET FLAT:$SG131453
	call	stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN17@stbi__proc:
; Line 3197
	jmp	SHORT $LN16@stbi__proc
$LN15@stbi__proc:
; Line 3198
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	je	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131455
	call	stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN19@stbi__proc:
; Line 3199
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	SHORT $LN21@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 0
	je	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG131458
	call	stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
; Line 3200
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18488], 63		; 0000003fH
$LN16@stbi__proc:
; Line 3204
	mov	eax, 1
$LN1@stbi__proc:
; Line 3205
	add	rsp, 72					; 00000048H
	ret	0
stbi__process_scan_header ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
i$1 = 36
th$2 = 40
tv64 = 44
i$3 = 48
n$4 = 52
i$5 = 56
i$6 = 60
p$7 = 64
tc$8 = 68
tv88 = 72
q$9 = 76
t$10 = 80
tv149 = 84
sixteen$11 = 88
tv152 = 92
tv155 = 96
q$12 = 100
tv233 = 104
ok$13 = 108
ok$14 = 112
v$15 = 120
sizes$16 = 128
__$ArrayPad$ = 192
z$ = 224
m$ = 232
stbi__process_marker PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3066
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3068
	mov	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 196		; 000000c4H
	je	$LN29@stbi__proc
	cmp	DWORD PTR tv64[rsp], 219		; 000000dbH
	je	SHORT $LN26@stbi__proc
	cmp	DWORD PTR tv64[rsp], 221		; 000000ddH
	je	SHORT $LN24@stbi__proc
	cmp	DWORD PTR tv64[rsp], 255		; 000000ffH
	je	SHORT $LN23@stbi__proc
	jmp	$LN2@stbi__proc
$LN23@stbi__proc:
; Line 3070
	lea	rcx, OFFSET FLAT:$SG131387
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3073
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	cmp	eax, 4
	je	SHORT $LN25@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131390
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
; Line 3074
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18536], eax
; Line 3075
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3078
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN4@stbi__proc:
; Line 3079
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN5@stbi__proc
; Line 3080
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$9[rsp], eax
; Line 3081
	mov	eax, DWORD PTR q$9[rsp]
	sar	eax, 4
	mov	DWORD PTR p$7[rsp], eax
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN51@stbi__proc
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN52@stbi__proc
$LN51@stbi__proc:
	mov	DWORD PTR tv88[rsp], 0
$LN52@stbi__proc:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR sixteen$11[rsp], eax
; Line 3082
	mov	eax, DWORD PTR q$9[rsp]
	and	eax, 15
	mov	DWORD PTR t$10[rsp], eax
; Line 3083
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN27@stbi__proc
	cmp	DWORD PTR p$7[rsp], 1
	je	SHORT $LN27@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131393
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN27@stbi__proc:
; Line 3084
	cmp	DWORD PTR t$10[rsp], 3
	jle	SHORT $LN28@stbi__proc
	lea	rcx, OFFSET FLAT:$SG131395
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3086
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN8@stbi__proc
$LN6@stbi__proc:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN8@stbi__proc:
	cmp	DWORD PTR i$3[rsp], 64			; 00000040H
	jge	SHORT $LN7@stbi__proc
; Line 3087
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN53@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN54@stbi__proc
$LN53@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv149[rsp], eax
$LN54@stbi__proc:
	movsxd	rax, DWORD PTR t$10[rsp]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR i$3[rsp]
	lea	rdx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	ecx, BYTE PTR [rdx+rcx]
	movzx	edx, WORD PTR tv149[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	jmp	SHORT $LN6@stbi__proc
$LN7@stbi__proc:
; Line 3088
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN55@stbi__proc
	mov	DWORD PTR tv152[rsp], 129		; 00000081H
	jmp	SHORT $LN56@stbi__proc
$LN55@stbi__proc:
	mov	DWORD PTR tv152[rsp], 65		; 00000041H
$LN56@stbi__proc:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3089
	jmp	$LN4@stbi__proc
$LN5@stbi__proc:
; Line 3090
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN57@stbi__proc
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN58@stbi__proc
$LN57@stbi__proc:
	mov	DWORD PTR tv155[rsp], 0
$LN58@stbi__proc:
	mov	eax, DWORD PTR tv155[rsp]
	jmp	$LN1@stbi__proc
$LN29@stbi__proc:
; Line 3093
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN9@stbi__proc:
; Line 3094
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN10@stbi__proc
; Line 3096
	mov	DWORD PTR n$4[rsp], 0
; Line 3097
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$12[rsp], eax
; Line 3098
	mov	eax, DWORD PTR q$12[rsp]
	sar	eax, 4
	mov	DWORD PTR tc$8[rsp], eax
; Line 3099
	mov	eax, DWORD PTR q$12[rsp]
	and	eax, 15
	mov	DWORD PTR th$2[rsp], eax
; Line 3100
	cmp	DWORD PTR tc$8[rsp], 1
	jg	SHORT $LN31@stbi__proc
	cmp	DWORD PTR th$2[rsp], 3
	jle	SHORT $LN30@stbi__proc
$LN31@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG131399
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3101
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbi__proc:
	cmp	DWORD PTR i$1[rsp], 16
	jge	SHORT $LN12@stbi__proc
; Line 3102
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	movzx	eax, al
	mov	DWORD PTR sizes$16[rsp+rcx*4], eax
; Line 3103
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	eax, DWORD PTR sizes$16[rsp+rax*4]
	mov	ecx, DWORD PTR n$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$4[rsp], eax
; Line 3104
	jmp	SHORT $LN11@stbi__proc
$LN12@stbi__proc:
; Line 3105
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 17
	mov	DWORD PTR L$[rsp], eax
; Line 3106
	cmp	DWORD PTR tc$8[rsp], 0
	jne	SHORT $LN32@stbi__proc
; Line 3107
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN34@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN34@stbi__proc:
; Line 3108
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1032]
	mov	QWORD PTR v$15[rsp], rax
; Line 3109
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
; Line 3110
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN35@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3111
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+7752]
	mov	QWORD PTR v$15[rsp], rax
$LN33@stbi__proc:
; Line 3113
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@stbi__proc:
	mov	eax, DWORD PTR n$4[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN15@stbi__proc
; Line 3114
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR v$15[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN14@stbi__proc
$LN15@stbi__proc:
; Line 3115
	cmp	DWORD PTR tc$8[rsp], 0
	je	SHORT $LN36@stbi__proc
; Line 3116
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	movsxd	rcx, DWORD PTR th$2[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	mov	rdx, rax
	call	stbi__build_fast_ac
$LN36@stbi__proc:
; Line 3117
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3118
	jmp	$LN9@stbi__proc
$LN10@stbi__proc:
; Line 3119
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN59@stbi__proc
	mov	DWORD PTR tv233[rsp], 1
	jmp	SHORT $LN60@stbi__proc
$LN59@stbi__proc:
	mov	DWORD PTR tv233[rsp], 0
$LN60@stbi__proc:
	mov	eax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__proc
$LN2@stbi__proc:
; Line 3123
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jl	SHORT $LN39@stbi__proc
	cmp	DWORD PTR m$[rsp], 239			; 000000efH
	jle	SHORT $LN38@stbi__proc
$LN39@stbi__proc:
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	$LN37@stbi__proc
$LN38@stbi__proc:
; Line 3124
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
	mov	DWORD PTR L$[rsp], eax
; Line 3125
	cmp	DWORD PTR L$[rsp], 2
	jge	SHORT $LN40@stbi__proc
; Line 3126
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	SHORT $LN41@stbi__proc
; Line 3127
	lea	rcx, OFFSET FLAT:$SG131411
	call	stbi__err
	jmp	$LN1@stbi__proc
	jmp	SHORT $LN42@stbi__proc
$LN41@stbi__proc:
; Line 3129
	lea	rcx, OFFSET FLAT:$SG131412
	call	stbi__err
	jmp	$LN1@stbi__proc
$LN42@stbi__proc:
$LN40@stbi__proc:
; Line 3131
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
; Line 3133
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jne	$LN43@stbi__proc
	cmp	DWORD PTR L$[rsp], 5
	jl	SHORT $LN43@stbi__proc
; Line 3135
	mov	DWORD PTR ok$13[rsp], 1
; Line 3137
	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN19@stbi__proc
$LN17@stbi__proc:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN19@stbi__proc:
	cmp	DWORD PTR i$5[rsp], 5
	jge	SHORT $LN18@stbi__proc
; Line 3138
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$5[rsp]
	lea	rdx, OFFSET FLAT:?tag@?O@??stbi__process_marker@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN45@stbi__proc
; Line 3139
	mov	DWORD PTR ok$13[rsp], 0
$LN45@stbi__proc:
	jmp	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3140
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 5
	mov	DWORD PTR L$[rsp], eax
; Line 3141
	cmp	DWORD PTR ok$13[rsp], 0
	je	SHORT $LN46@stbi__proc
; Line 3142
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 1
$LN46@stbi__proc:
; Line 3143
	jmp	$LN44@stbi__proc
$LN43@stbi__proc:
	cmp	DWORD PTR m$[rsp], 238			; 000000eeH
	jne	$LN47@stbi__proc
	cmp	DWORD PTR L$[rsp], 12
	jl	$LN47@stbi__proc
; Line 3145
	mov	DWORD PTR ok$14[rsp], 1
; Line 3147
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN22@stbi__proc
$LN20@stbi__proc:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN22@stbi__proc:
	cmp	DWORD PTR i$6[rsp], 6
	jge	SHORT $LN21@stbi__proc
; Line 3148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$6[rsp]
	lea	rdx, OFFSET FLAT:?tag@?BA@??stbi__process_marker@@9@9
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN48@stbi__proc
; Line 3149
	mov	DWORD PTR ok$14[rsp], 0
$LN48@stbi__proc:
	jmp	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
; Line 3150
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
; Line 3151
	cmp	DWORD PTR ok$14[rsp], 0
	je	SHORT $LN49@stbi__proc
; Line 3152
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
; Line 3153
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
; Line 3154
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get16be
; Line 3155
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18508], eax
; Line 3156
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
$LN49@stbi__proc:
$LN47@stbi__proc:
$LN44@stbi__proc:
; Line 3160
	mov	edx, DWORD PTR L$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__skip
; Line 3161
	mov	eax, 1
	jmp	SHORT $LN1@stbi__proc
$LN37@stbi__proc:
; Line 3164
	lea	rcx, OFFSET FLAT:$SG131420
	call	stbi__err
$LN1@stbi__proc:
; Line 3165
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
stbi__process_marker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
j$2 = 36
i$3 = 40
h$4 = 44
w$5 = 48
data$6 = 56
z$ = 80
stbi__jpeg_finish PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3047
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3048
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN11@stbi__jpeg
; Line 3051
	mov	DWORD PTR n$1[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	mov	DWORD PTR n$1[rsp], eax
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR n$1[rsp], eax
	jge	$LN3@stbi__jpeg
; Line 3052
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$5[rsp], eax
; Line 3053
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$4[rsp], eax
; Line 3054
	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN7@stbi__jpeg:
	mov	eax, DWORD PTR h$4[rsp]
	cmp	DWORD PTR j$2[rsp], eax
	jge	$LN6@stbi__jpeg
; Line 3055
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__jpeg
$LN8@stbi__jpeg:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__jpeg:
	mov	eax, DWORD PTR w$5[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__jpeg
; Line 3056
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$2[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$3[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$6[rsp], rax
; Line 3057
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$6[rsp]
	call	stbi__jpeg_dequantize
; Line 3058
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$2[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$3[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	mov	r8, QWORD PTR data$6[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18544]
; Line 3059
	jmp	$LN8@stbi__jpeg
$LN9@stbi__jpeg:
; Line 3060
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 3061
	jmp	$LN2@stbi__jpeg
$LN3@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 3063
	add	rsp, 72					; 00000048H
	ret	0
stbi__jpeg_finish ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
data$ = 32
dequant$ = 40
stbi__jpeg_dequantize PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3040
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3042
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__jpeg:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@stbi__jpeg
; Line 3043
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	mov	rdx, QWORD PTR data$[rsp]
	movsx	eax, WORD PTR [rdx+rax*2]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 3044
	add	rsp, 24
	ret	0
stbi__jpeg_dequantize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 64
n$2 = 68
n$3 = 72
n$4 = 76
j$5 = 80
i$6 = 84
k$7 = 88
i$8 = 92
x$9 = 96
j$10 = 100
y$11 = 104
j$12 = 108
i$13 = 112
k$14 = 116
i$15 = 120
x$16 = 124
j$17 = 128
y$18 = 132
ha$19 = 136
tv190 = 140
ha$20 = 144
tv311 = 148
ha$21 = 152
tv400 = 156
tv518 = 160
h$22 = 164
w$23 = 168
y2$24 = 172
x2$25 = 176
h$26 = 180
w$27 = 184
y2$28 = 188
x2$29 = 192
data$30 = 200
data$31 = 208
data$32 = 224
data$33 = 352
__$ArrayPad$ = 480
z$ = 512
stbi__parse_entropy_coded_data PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2916
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 504				; 000001f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2917
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
; Line 2918
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	jne	$LN44@stbi__pars
; Line 2919
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN46@stbi__pars
; Line 2922
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$2[rsp], eax
; Line 2927
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$23[rsp], eax
; Line 2928
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$22[rsp], eax
; Line 2929
	mov	DWORD PTR j$5[rsp], 0
	jmp	SHORT $LN4@stbi__pars
$LN2@stbi__pars:
	mov	eax, DWORD PTR j$5[rsp]
	inc	eax
	mov	DWORD PTR j$5[rsp], eax
$LN4@stbi__pars:
	mov	eax, DWORD PTR h$22[rsp]
	cmp	DWORD PTR j$5[rsp], eax
	jge	$LN3@stbi__pars
; Line 2930
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@stbi__pars
$LN5@stbi__pars:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN7@stbi__pars:
	mov	eax, DWORD PTR w$23[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN6@stbi__pars
; Line 2931
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$19[rsp], eax
; Line 2932
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$19[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$19[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$2[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$32[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN48@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 2933
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$2[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$2[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$5[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$6[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	lea	r8, QWORD PTR data$32[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18544]
; Line 2935
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv190[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv190[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv190[rsp], 0
	jg	SHORT $LN49@stbi__pars
; Line 2936
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN50@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN50@stbi__pars:
; Line 2939
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN52@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN51@stbi__pars
$LN52@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 2940
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN49@stbi__pars:
; Line 2942
	jmp	$LN5@stbi__pars
$LN6@stbi__pars:
; Line 2943
	jmp	$LN2@stbi__pars
$LN3@stbi__pars:
; Line 2944
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 2945
	jmp	$LN47@stbi__pars
$LN46@stbi__pars:
; Line 2948
	mov	DWORD PTR j$10[rsp], 0
	jmp	SHORT $LN10@stbi__pars
$LN8@stbi__pars:
	mov	eax, DWORD PTR j$10[rsp]
	inc	eax
	mov	DWORD PTR j$10[rsp], eax
$LN10@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$10[rsp], eax
	jge	$LN9@stbi__pars
; Line 2949
	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@stbi__pars
$LN11@stbi__pars:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN13@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$8[rsp], eax
	jge	$LN12@stbi__pars
; Line 2951
	mov	DWORD PTR k$7[rsp], 0
	jmp	SHORT $LN16@stbi__pars
$LN14@stbi__pars:
	mov	eax, DWORD PTR k$7[rsp]
	inc	eax
	mov	DWORD PTR k$7[rsp], eax
$LN16@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$7[rsp], eax
	jge	$LN15@stbi__pars
; Line 2952
	movsxd	rax, DWORD PTR k$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$1[rsp], eax
; Line 2955
	mov	DWORD PTR y$11[rsp], 0
	jmp	SHORT $LN19@stbi__pars
$LN17@stbi__pars:
	mov	eax, DWORD PTR y$11[rsp]
	inc	eax
	mov	DWORD PTR y$11[rsp], eax
$LN19@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$11[rsp], eax
	jge	$LN18@stbi__pars
; Line 2956
	mov	DWORD PTR x$9[rsp], 0
	jmp	SHORT $LN22@stbi__pars
$LN20@stbi__pars:
	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	mov	DWORD PTR x$9[rsp], eax
$LN22@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$9[rsp], eax
	jge	$LN21@stbi__pars
; Line 2957
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$8[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$9[rsp]
	shl	eax, 3
	mov	DWORD PTR x2$25[rsp], eax
; Line 2958
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$10[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$11[rsp]
	shl	eax, 3
	mov	DWORD PTR y2$24[rsp], eax
; Line 2959
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$20[rsp], eax
; Line 2960
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$20[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$20[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$1[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$33[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN53@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN53@stbi__pars:
; Line 2961
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR y2$24[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	movsxd	rdx, DWORD PTR x2$25[rsp]
	add	rcx, rdx
	lea	r8, QWORD PTR data$33[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	mov	rax, QWORD PTR z$[rsp]
	call	QWORD PTR [rax+18544]
; Line 2962
	jmp	$LN20@stbi__pars
$LN21@stbi__pars:
; Line 2963
	jmp	$LN17@stbi__pars
$LN18@stbi__pars:
; Line 2964
	jmp	$LN14@stbi__pars
$LN15@stbi__pars:
; Line 2967
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv311[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv311[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv311[rsp], 0
	jg	SHORT $LN54@stbi__pars
; Line 2968
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN55@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN55@stbi__pars:
; Line 2969
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN57@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN56@stbi__pars
$LN57@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 2970
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN54@stbi__pars:
; Line 2972
	jmp	$LN11@stbi__pars
$LN12@stbi__pars:
; Line 2973
	jmp	$LN8@stbi__pars
$LN9@stbi__pars:
; Line 2974
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 2976
	jmp	$LN45@stbi__pars
$LN44@stbi__pars:
; Line 2977
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN58@stbi__pars
; Line 2979
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$4[rsp], eax
; Line 2984
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$27[rsp], eax
; Line 2985
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$26[rsp], eax
; Line 2986
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN25@stbi__pars
$LN23@stbi__pars:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN25@stbi__pars:
	mov	eax, DWORD PTR h$26[rsp]
	cmp	DWORD PTR j$12[rsp], eax
	jge	$LN24@stbi__pars
; Line 2987
	mov	DWORD PTR i$13[rsp], 0
	jmp	SHORT $LN28@stbi__pars
$LN26@stbi__pars:
	mov	eax, DWORD PTR i$13[rsp]
	inc	eax
	mov	DWORD PTR i$13[rsp], eax
$LN28@stbi__pars:
	mov	eax, DWORD PTR w$27[rsp]
	cmp	DWORD PTR i$13[rsp], eax
	jge	$LN27@stbi__pars
; Line 2988
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$4[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$12[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$30[rsp], rax
; Line 2989
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN60@stbi__pars
; Line 2990
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$4[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN62@stbi__pars
; Line 2991
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 2992
	jmp	$LN61@stbi__pars
$LN60@stbi__pars:
; Line 2993
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$21[rsp], eax
; Line 2994
	movsxd	rax, DWORD PTR ha$21[rsp]
	imul	rax, rax, 1024				; 00000400H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13960]
	movsxd	rcx, DWORD PTR ha$21[rsp]
	imul	rcx, rcx, 1680				; 00000690H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+6728]
	mov	r9, rax
	mov	r8, rcx
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block_prog_ac
	test	eax, eax
	jne	SHORT $LN63@stbi__pars
; Line 2995
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
$LN61@stbi__pars:
; Line 2998
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv400[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv400[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv400[rsp], 0
	jg	SHORT $LN64@stbi__pars
; Line 2999
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN65@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN65@stbi__pars:
; Line 3000
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN67@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN66@stbi__pars
$LN67@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN66@stbi__pars:
; Line 3001
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN64@stbi__pars:
; Line 3003
	jmp	$LN26@stbi__pars
$LN27@stbi__pars:
; Line 3004
	jmp	$LN23@stbi__pars
$LN24@stbi__pars:
; Line 3005
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 3006
	jmp	$LN59@stbi__pars
$LN58@stbi__pars:
; Line 3008
	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN31@stbi__pars
$LN29@stbi__pars:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN31@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$17[rsp], eax
	jge	$LN30@stbi__pars
; Line 3009
	mov	DWORD PTR i$15[rsp], 0
	jmp	SHORT $LN34@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR i$15[rsp]
	inc	eax
	mov	DWORD PTR i$15[rsp], eax
$LN34@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$15[rsp], eax
	jge	$LN33@stbi__pars
; Line 3011
	mov	DWORD PTR k$14[rsp], 0
	jmp	SHORT $LN37@stbi__pars
$LN35@stbi__pars:
	mov	eax, DWORD PTR k$14[rsp]
	inc	eax
	mov	DWORD PTR k$14[rsp], eax
$LN37@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$14[rsp], eax
	jge	$LN36@stbi__pars
; Line 3012
	movsxd	rax, DWORD PTR k$14[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$3[rsp], eax
; Line 3015
	mov	DWORD PTR y$18[rsp], 0
	jmp	SHORT $LN40@stbi__pars
$LN38@stbi__pars:
	mov	eax, DWORD PTR y$18[rsp]
	inc	eax
	mov	DWORD PTR y$18[rsp], eax
$LN40@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$18[rsp], eax
	jge	$LN39@stbi__pars
; Line 3016
	mov	DWORD PTR x$16[rsp], 0
	jmp	SHORT $LN43@stbi__pars
$LN41@stbi__pars:
	mov	eax, DWORD PTR x$16[rsp]
	inc	eax
	mov	DWORD PTR x$16[rsp], eax
$LN43@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$16[rsp], eax
	jge	$LN42@stbi__pars
; Line 3017
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$15[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$16[rsp]
	mov	DWORD PTR x2$29[rsp], eax
; Line 3018
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$17[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$18[rsp]
	mov	DWORD PTR y2$28[rsp], eax
; Line 3019
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR y2$28[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR x2$29[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$31[rsp], rax
; Line 3020
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$3[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$31[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN68@stbi__pars
; Line 3021
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 3022
	jmp	$LN41@stbi__pars
$LN42@stbi__pars:
; Line 3023
	jmp	$LN38@stbi__pars
$LN39@stbi__pars:
; Line 3024
	jmp	$LN35@stbi__pars
$LN36@stbi__pars:
; Line 3027
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv518[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv518[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv518[rsp], 0
	jg	SHORT $LN69@stbi__pars
; Line 3028
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN70@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__grow_buffer_unsafe
$LN70@stbi__pars:
; Line 3029
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN72@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN71@stbi__pars
$LN72@stbi__pars:
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pars
$LN71@stbi__pars:
; Line 3030
	mov	rcx, QWORD PTR z$[rsp]
	call	stbi__jpeg_reset
$LN69@stbi__pars:
; Line 3032
	jmp	$LN32@stbi__pars
$LN33@stbi__pars:
; Line 3033
	jmp	$LN29@stbi__pars
$LN30@stbi__pars:
; Line 3034
	mov	eax, 1
$LN59@stbi__pars:
$LN45@stbi__pars:
$LN1@stbi__pars:
; Line 3037
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	ret	0
stbi__parse_entropy_coded_data ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 0
j$ = 32
stbi__jpeg_reset PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2903
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2904
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18468], 0
; Line 2905
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18464], 0
; Line 2906
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 0
; Line 2907
	mov	eax, 96					; 00000060H
	imul	rax, rax, 3
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
; Line 2908
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 2909
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18536], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18536]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN4@stbi__jpeg
$LN3@stbi__jpeg:
	mov	DWORD PTR tv88[rsp], 2147483647		; 7fffffffH
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR tv88[rsp]
	mov	DWORD PTR [rax+18540], ecx
; Line 2910
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18500], 0
; Line 2913
	add	rsp, 24
	ret	0
stbi__jpeg_reset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
j$ = 64
stbi__get_marker PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2886
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2888
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@stbi__get_
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	mov	BYTE PTR x$[rsp], al
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
	movzx	eax, BYTE PTR x$[rsp]
	jmp	SHORT $LN1@stbi__get_
$LN4@stbi__get_:
; Line 2889
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	mov	BYTE PTR x$[rsp], al
; Line 2890
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@stbi__get_
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__get_
$LN5@stbi__get_:
$LN2@stbi__get_:
; Line 2891
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@stbi__get_
; Line 2892
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	mov	BYTE PTR x$[rsp], al
	jmp	SHORT $LN2@stbi__get_
$LN3@stbi__get_:
; Line 2893
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__get_:
; Line 2894
	add	rsp, 56					; 00000038H
	ret	0
stbi__get_marker ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp$ = 0
row1$ = 16
row3$ = 32
row5$ = 48
row7$ = 64
row0$ = 80
row2$ = 96
row4$ = 112
row6$ = 128
p0$1 = 144
p2$2 = 160
p1$3 = 176
p3$4 = 192
bias_0$ = 208
bias_1$ = 224
rot0_0$ = 240
rot0_1$ = 256
rot2_0$ = 272
rot2_1$ = 288
rot3_0$ = 304
rot3_1$ = 320
rot1_0$ = 336
rot1_1$ = 352
rot0_0lo$5 = 368
rot0_0hi$6 = 384
sum04$7 = 400
dif04$8 = 416
t0e_l$9 = 432
t3e_l$10 = 448
t0e_h$11 = 464
t3e_h$12 = 480
t1e_l$13 = 496
t2e_l$14 = 512
t1e_h$15 = 528
t2e_h$16 = 544
rot2_0lo$17 = 560
rot2_0hi$18 = 576
rot3_0lo$19 = 592
rot3_0hi$20 = 608
sum17$21 = 624
sum35$22 = 640
rot1_0lo$23 = 656
rot1_0hi$24 = 672
y5o_l$25 = 688
y5o_h$26 = 704
y4o_l$27 = 720
y4o_h$28 = 736
abiased_l$29 = 752
x7_l$30 = 768
abiased_h$31 = 784
x7_h$32 = 800
abiased_l$33 = 816
x6_l$34 = 832
abiased_h$35 = 848
x6_h$36 = 864
abiased_l$37 = 880
x5_l$38 = 896
abiased_h$39 = 912
x5_h$40 = 928
abiased_l$41 = 944
x4_l$42 = 960
abiased_h$43 = 976
x4_h$44 = 992
rot0_0lo$45 = 1008
rot0_0hi$46 = 1024
sum04$47 = 1040
dif04$48 = 1056
t0e_l$49 = 1072
t3e_l$50 = 1088
t0e_h$51 = 1104
t3e_h$52 = 1120
t1e_l$53 = 1136
t2e_l$54 = 1152
t1e_h$55 = 1168
t2e_h$56 = 1184
rot2_0lo$57 = 1200
rot2_0hi$58 = 1216
rot3_0lo$59 = 1232
rot3_0hi$60 = 1248
sum17$61 = 1264
sum35$62 = 1280
rot1_0lo$63 = 1296
rot1_0hi$64 = 1312
y5o_l$65 = 1328
y5o_h$66 = 1344
y4o_l$67 = 1360
y4o_h$68 = 1376
abiased_l$69 = 1392
x7_l$70 = 1408
abiased_h$71 = 1424
x7_h$72 = 1440
abiased_l$73 = 1456
x6_l$74 = 1472
abiased_h$75 = 1488
x6_h$76 = 1504
abiased_l$77 = 1520
x5_l$78 = 1536
abiased_h$79 = 1552
x5_h$80 = 1568
abiased_l$81 = 1584
x4_l$82 = 1600
abiased_h$83 = 1616
x4_h$84 = 1632
y0o_l$85 = 1648
y0o_h$86 = 1664
y1o_l$87 = 1680
y1o_h$88 = 1696
y2o_l$89 = 1712
y2o_h$90 = 1728
y3o_l$91 = 1744
y3o_h$92 = 1760
x0_l$93 = 1776
x0_h$94 = 1792
sum_h$95 = 1808
sum_l$96 = 1824
dif_h$97 = 1840
dif_l$98 = 1856
x1_l$99 = 1872
x1_h$100 = 1888
sum_h$101 = 1904
sum_l$102 = 1920
dif_h$103 = 1936
dif_l$104 = 1952
x2_l$105 = 1968
x2_h$106 = 1984
sum_h$107 = 2000
sum_l$108 = 2016
dif_h$109 = 2032
dif_l$110 = 2048
x3_l$111 = 2064
x3_h$112 = 2080
sum_h$113 = 2096
sum_l$114 = 2112
dif_h$115 = 2128
dif_l$116 = 2144
y0o_l$117 = 2160
y0o_h$118 = 2176
y1o_l$119 = 2192
y1o_h$120 = 2208
y2o_l$121 = 2224
y2o_h$122 = 2240
y3o_l$123 = 2256
y3o_h$124 = 2272
x0_l$125 = 2288
x0_h$126 = 2304
sum_h$127 = 2320
sum_l$128 = 2336
dif_h$129 = 2352
dif_l$130 = 2368
x1_l$131 = 2384
x1_h$132 = 2400
sum_h$133 = 2416
sum_l$134 = 2432
dif_h$135 = 2448
dif_l$136 = 2464
x2_l$137 = 2480
x2_h$138 = 2496
sum_h$139 = 2512
sum_l$140 = 2528
dif_h$141 = 2544
dif_l$142 = 2560
x3_l$143 = 2576
x3_h$144 = 2592
sum_h$145 = 2608
sum_l$146 = 2624
dif_h$147 = 2640
dif_l$148 = 2656
out$ = 2688
out_stride$ = 2696
data$ = 2704
stbi__idct_simd PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2497
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2680				; 00000a78H
; Line 2581
	movdqa	xmm0, XMMWORD PTR __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
	movdqa	XMMWORD PTR rot0_0$[rsp], xmm0
; Line 2582
	movdqa	xmm0, XMMWORD PTR __xmm@08a914e808a914e808a914e808a914e8
	movdqa	XMMWORD PTR rot0_1$[rsp], xmm0
; Line 2583
	movdqa	xmm0, XMMWORD PTR __xmm@12d0046b12d0046b12d0046b12d0046b
	movdqa	XMMWORD PTR rot1_0$[rsp], xmm0
; Line 2584
	movdqa	xmm0, XMMWORD PTR __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
	movdqa	XMMWORD PTR rot1_1$[rsp], xmm0
; Line 2585
	movdqa	xmm0, XMMWORD PTR __xmm@e09ee565e09ee565e09ee565e09ee565
	movdqa	XMMWORD PTR rot2_0$[rsp], xmm0
; Line 2586
	movdqa	xmm0, XMMWORD PTR __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
	movdqa	XMMWORD PTR rot2_1$[rsp], xmm0
; Line 2587
	movdqa	xmm0, XMMWORD PTR __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
	movdqa	XMMWORD PTR rot3_0$[rsp], xmm0
; Line 2588
	movdqa	xmm0, XMMWORD PTR __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
	movdqa	XMMWORD PTR rot3_1$[rsp], xmm0
; Line 2591
	movdqa	xmm0, XMMWORD PTR __xmm@00000200000002000000020000000200
	movdqa	XMMWORD PTR bias_0$[rsp], xmm0
; Line 2592
	movdqa	xmm0, XMMWORD PTR __xmm@01010000010100000101000001010000
	movdqa	XMMWORD PTR bias_1$[rsp], xmm0
; Line 2595
	mov	rax, QWORD PTR data$[rsp]
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
; Line 2596
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 16
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2597
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 32					; 00000020H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2598
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 48					; 00000030H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2599
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 64					; 00000040H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2600
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 80					; 00000050H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2601
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 96					; 00000060H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2602
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 112				; 00000070H
	movdqu	xmm0, XMMWORD PTR [rax]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2605
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0lo$5[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0hi$6[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_l$14[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_h$16[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_l$10[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_h$12[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR sum04$7[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR dif04$8[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR sum04$7[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_l$9[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR sum04$7[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_h$11[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR dif04$8[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_l$13[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR dif04$8[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_h$15[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR x0_l$93[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR x0_h$94[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$9[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$10[rsp]
	movdqa	XMMWORD PTR x3_l$111[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$11[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$12[rsp]
	movdqa	XMMWORD PTR x3_h$112[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR x1_l$99[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR x1_h$100[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$13[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$14[rsp]
	movdqa	XMMWORD PTR x2_l$105[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$15[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$16[rsp]
	movdqa	XMMWORD PTR x2_h$106[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0lo$17[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0hi$18[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_l$85[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_h$86[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_l$89[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_h$90[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0lo$19[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0hi$20[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_l$87[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_h$88[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_l$91[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_h$92[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR sum17$21[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR sum35$22[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR rot1_0lo$23[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$21[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$22[rsp]
	movdqa	XMMWORD PTR rot1_0hi$24[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_l$27[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_h$28[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_l$25[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_h$26[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$85[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR x4_l$42[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$86[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR x4_h$44[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$87[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR x5_l$38[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$88[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR x5_h$40[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$89[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$25[rsp]
	movdqa	XMMWORD PTR x6_l$34[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$90[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$26[rsp]
	movdqa	XMMWORD PTR x6_h$36[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$91[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$27[rsp]
	movdqa	XMMWORD PTR x7_l$30[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$92[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$28[rsp]
	movdqa	XMMWORD PTR x7_h$32[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$93[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$29[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$94[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$31[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR sum_l$96[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR sum_h$95[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$29[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$30[rsp]
	movdqa	XMMWORD PTR dif_l$98[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$31[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$32[rsp]
	movdqa	XMMWORD PTR dif_h$97[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$95[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$96[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$97[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$98[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$99[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$33[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$100[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$35[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR sum_l$102[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR sum_h$101[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$33[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$34[rsp]
	movdqa	XMMWORD PTR dif_l$104[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$35[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$36[rsp]
	movdqa	XMMWORD PTR dif_h$103[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$101[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$102[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$103[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$104[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$105[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$37[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$106[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$39[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR sum_l$108[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR sum_h$107[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$37[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$38[rsp]
	movdqa	XMMWORD PTR dif_l$110[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$39[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$40[rsp]
	movdqa	XMMWORD PTR dif_h$109[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$107[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$108[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$109[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$110[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$111[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_l$41[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$112[rsp]
	paddd	xmm0, XMMWORD PTR bias_0$[rsp]
	movdqa	XMMWORD PTR abiased_h$43[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR sum_l$114[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR sum_h$113[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$41[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$42[rsp]
	movdqa	XMMWORD PTR dif_l$116[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$43[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$44[rsp]
	movdqa	XMMWORD PTR dif_h$115[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$113[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR sum_l$114[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$115[rsp]
	psrad	xmm0, 10
	movdqa	xmm1, XMMWORD PTR dif_l$116[rsp]
	psrad	xmm1, 10
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2609
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2610
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2611
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2612
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2615
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
; Line 2616
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2617
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
; Line 2618
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2621
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR row1$[rsp], xmm0
; Line 2622
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR row3$[rsp], xmm0
; Line 2623
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	punpcklwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row4$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR row5$[rsp], xmm0
; Line 2624
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	punpcklwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhwd xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR row7$[rsp], xmm0
; Line 2628
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpcklwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0lo$45[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	punpckhwd xmm0, XMMWORD PTR row6$[rsp]
	movdqa	XMMWORD PTR rot0_0hi$46[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_l$54[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_0$[rsp]
	movdqa	XMMWORD PTR t2e_h$56[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_l$50[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot0_1$[rsp]
	movdqa	XMMWORD PTR t3e_h$52[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	paddw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR sum04$47[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	psubw	xmm0, XMMWORD PTR row4$[rsp]
	movdqa	XMMWORD PTR dif04$48[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR sum04$47[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_l$49[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR sum04$47[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t0e_h$51[rsp], xmm0
	pxor	xmm0, xmm0
	punpcklwd xmm0, XMMWORD PTR dif04$48[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_l$53[rsp], xmm0
	pxor	xmm0, xmm0
	punpckhwd xmm0, XMMWORD PTR dif04$48[rsp]
	psrad	xmm0, 4
	movdqa	XMMWORD PTR t1e_h$55[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	paddd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR x0_l$125[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	paddd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR x0_h$126[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_l$49[rsp]
	psubd	xmm0, XMMWORD PTR t3e_l$50[rsp]
	movdqa	XMMWORD PTR x3_l$143[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t0e_h$51[rsp]
	psubd	xmm0, XMMWORD PTR t3e_h$52[rsp]
	movdqa	XMMWORD PTR x3_h$144[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	paddd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR x1_l$131[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	paddd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR x1_h$132[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_l$53[rsp]
	psubd	xmm0, XMMWORD PTR t2e_l$54[rsp]
	movdqa	XMMWORD PTR x2_l$137[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR t1e_h$55[rsp]
	psubd	xmm0, XMMWORD PTR t2e_h$56[rsp]
	movdqa	XMMWORD PTR x2_h$138[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpcklwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0lo$57[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row7$[rsp]
	punpckhwd xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR rot2_0hi$58[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_l$117[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_0$[rsp]
	movdqa	XMMWORD PTR y0o_h$118[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_l$121[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot2_1$[rsp]
	movdqa	XMMWORD PTR y2o_h$122[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpcklwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0lo$59[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row5$[rsp]
	punpckhwd xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR rot3_0hi$60[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_l$119[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_0$[rsp]
	movdqa	XMMWORD PTR y1o_h$120[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_l$123[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot3_1$[rsp]
	movdqa	XMMWORD PTR y3o_h$124[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row1$[rsp]
	paddw	xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR sum17$61[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR row3$[rsp]
	paddw	xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR sum35$62[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpcklwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR rot1_0lo$63[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum17$61[rsp]
	punpckhwd xmm0, XMMWORD PTR sum35$62[rsp]
	movdqa	XMMWORD PTR rot1_0hi$64[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_l$67[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_0$[rsp]
	movdqa	XMMWORD PTR y4o_h$68[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_l$65[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	pmaddwd	xmm0, XMMWORD PTR rot1_1$[rsp]
	movdqa	XMMWORD PTR y5o_h$66[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_l$117[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR x4_l$82[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y0o_h$118[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR x4_h$84[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_l$119[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR x5_l$78[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y1o_h$120[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR x5_h$80[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_l$121[rsp]
	paddd	xmm0, XMMWORD PTR y5o_l$65[rsp]
	movdqa	XMMWORD PTR x6_l$74[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y2o_h$122[rsp]
	paddd	xmm0, XMMWORD PTR y5o_h$66[rsp]
	movdqa	XMMWORD PTR x6_h$76[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_l$123[rsp]
	paddd	xmm0, XMMWORD PTR y4o_l$67[rsp]
	movdqa	XMMWORD PTR x7_l$70[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR y3o_h$124[rsp]
	paddd	xmm0, XMMWORD PTR y4o_h$68[rsp]
	movdqa	XMMWORD PTR x7_h$72[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_l$125[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$69[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x0_h$126[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$71[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	paddd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR sum_l$128[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	paddd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR sum_h$127[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$69[rsp]
	psubd	xmm0, XMMWORD PTR x7_l$70[rsp]
	movdqa	XMMWORD PTR dif_l$130[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$71[rsp]
	psubd	xmm0, XMMWORD PTR x7_h$72[rsp]
	movdqa	XMMWORD PTR dif_h$129[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$127[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$128[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row0$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$129[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$130[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row7$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_l$131[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$73[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x1_h$132[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$75[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	paddd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR sum_l$134[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	paddd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR sum_h$133[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$73[rsp]
	psubd	xmm0, XMMWORD PTR x6_l$74[rsp]
	movdqa	XMMWORD PTR dif_l$136[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$75[rsp]
	psubd	xmm0, XMMWORD PTR x6_h$76[rsp]
	movdqa	XMMWORD PTR dif_h$135[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$133[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$134[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row1$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$135[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$136[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row6$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_l$137[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$77[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x2_h$138[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$79[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	paddd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR sum_l$140[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	paddd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR sum_h$139[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$77[rsp]
	psubd	xmm0, XMMWORD PTR x5_l$78[rsp]
	movdqa	XMMWORD PTR dif_l$142[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$79[rsp]
	psubd	xmm0, XMMWORD PTR x5_h$80[rsp]
	movdqa	XMMWORD PTR dif_h$141[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$139[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$140[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row2$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$141[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$142[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row5$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_l$143[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_l$81[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR x3_h$144[rsp]
	paddd	xmm0, XMMWORD PTR bias_1$[rsp]
	movdqa	XMMWORD PTR abiased_h$83[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	paddd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR sum_l$146[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	paddd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR sum_h$145[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_l$81[rsp]
	psubd	xmm0, XMMWORD PTR x4_l$82[rsp]
	movdqa	XMMWORD PTR dif_l$148[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR abiased_h$83[rsp]
	psubd	xmm0, XMMWORD PTR x4_h$84[rsp]
	movdqa	XMMWORD PTR dif_h$147[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR sum_h$145[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR sum_l$146[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row3$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR dif_h$147[rsp]
	psrad	xmm0, 17
	movdqa	xmm1, XMMWORD PTR dif_l$148[rsp]
	psrad	xmm1, 17
	packssdw xmm1, xmm0
	movdqa	xmm0, xmm1
	movdqa	XMMWORD PTR row4$[rsp], xmm0
; Line 2632
	movdqa	xmm0, XMMWORD PTR row0$[rsp]
	packuswb xmm0, XMMWORD PTR row1$[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
; Line 2633
	movdqa	xmm0, XMMWORD PTR row2$[rsp]
	packuswb xmm0, XMMWORD PTR row3$[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2634
	movdqa	xmm0, XMMWORD PTR row4$[rsp]
	packuswb xmm0, XMMWORD PTR row5$[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2635
	movdqa	xmm0, XMMWORD PTR row6$[rsp]
	packuswb xmm0, XMMWORD PTR row7$[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2638
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2639
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2642
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
; Line 2643
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2646
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	punpcklbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p0$1[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p2$2[rsp]
	movdqa	XMMWORD PTR p2$2[rsp], xmm0
; Line 2647
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movdqa	XMMWORD PTR tmp$[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	punpcklbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p1$3[rsp], xmm0
	movdqa	xmm0, XMMWORD PTR tmp$[rsp]
	punpckhbw xmm0, XMMWORD PTR p3$4[rsp]
	movdqa	XMMWORD PTR p3$4[rsp], xmm0
; Line 2650
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2651
	movdqa	xmm0, XMMWORD PTR p0$1[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2652
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2653
	movdqa	xmm0, XMMWORD PTR p2$2[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2654
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2655
	movdqa	xmm0, XMMWORD PTR p1$3[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2656
	mov	rax, QWORD PTR out$[rsp]
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	movq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2657
	movdqa	xmm0, XMMWORD PTR p3$4[rsp]
	pshufd	xmm0, xmm0, 78				; 0000004eH
	mov	rax, QWORD PTR out$[rsp]
	movq	QWORD PTR [rax], xmm0
; Line 2669
	add	rsp, 2680				; 00000a78H
	ret	0
stbi__idct_simd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
p3$1 = 40
t3$2 = 44
t2$3 = 48
t1$4 = 52
t0$5 = 56
p3$6 = 60
t3$7 = 64
t2$8 = 68
t1$9 = 72
t0$10 = 76
p2$11 = 80
p2$12 = 84
d$ = 88
dcterm$13 = 96
p1$14 = 100
i$ = 104
p1$15 = 108
p4$16 = 112
p4$17 = 116
o$ = 120
x0$18 = 128
x1$19 = 132
x2$20 = 136
x3$21 = 140
x0$22 = 144
x1$23 = 148
x2$24 = 152
x3$25 = 156
p5$26 = 160
p5$27 = 164
val$ = 176
__$ArrayPad$ = 432
out$ = 464
out_stride$ = 472
data$ = 480
stbi__idct_block PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2434
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2435
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
; Line 2437
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR d$[rsp], rax
; Line 2440
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__idct
$LN2@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 2
	mov	QWORD PTR d$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 4
	mov	QWORD PTR v$[rsp], rax
$LN4@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN3@stbi__idct
; Line 2443
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
; Line 2448
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR dcterm$13[rsp], eax
; Line 2449
	mov	eax, 4
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 2450
	jmp	$LN9@stbi__idct
$LN8@stbi__idct:
; Line 2451
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$21[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p3$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$26[rsp], eax
	imul	eax, DWORD PTR t0$5[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$5[rsp], eax
	imul	eax, DWORD PTR t1$4[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$4[rsp], eax
	imul	eax, DWORD PTR t2$3[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR t3$2[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$2[rsp], eax
	imul	eax, DWORD PTR p1$14[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$1[rsp], eax
	imul	eax, DWORD PTR p4$16[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$5[rsp], eax
; Line 2454
	mov	eax, DWORD PTR x0$18[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR x1$19[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR x2$20[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, DWORD PTR x3$21[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x3$21[rsp], eax
; Line 2455
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2456
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 56				; 00000038H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2457
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2458
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2459
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2460
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2461
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2462
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN9@stbi__idct:
; Line 2464
	jmp	$LN2@stbi__idct
$LN3@stbi__idct:
; Line 2466
	mov	DWORD PTR i$[rsp], 0
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
	jmp	SHORT $LN7@stbi__idct
$LN5@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v$[rsp], rax
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
$LN7@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN6@stbi__idct
; Line 2468
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$22[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$25[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$23[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$24[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p3$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$27[rsp], eax
	imul	eax, DWORD PTR t0$10[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$10[rsp], eax
	imul	eax, DWORD PTR t1$9[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$9[rsp], eax
	imul	eax, DWORD PTR t2$8[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR t3$7[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$7[rsp], eax
	imul	eax, DWORD PTR p1$15[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$6[rsp], eax
	imul	eax, DWORD PTR p4$17[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$10[rsp], eax
; Line 2475
	mov	eax, DWORD PTR x0$22[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x0$22[rsp], eax
; Line 2476
	mov	eax, DWORD PTR x1$23[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x1$23[rsp], eax
; Line 2477
	mov	eax, DWORD PTR x2$24[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x2$24[rsp], eax
; Line 2478
	mov	eax, DWORD PTR x3$25[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x3$25[rsp], eax
; Line 2481
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2482
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2483
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2484
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2485
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2486
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2487
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2488
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2489
	jmp	$LN5@stbi__idct
$LN6@stbi__idct:
; Line 2490
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	ret	0
stbi__idct_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
stbi__clamp PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2383
	mov	DWORD PTR [rsp+8], ecx
; Line 2385
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jbe	SHORT $LN2@stbi__clam
; Line 2386
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN3@stbi__clam
	xor	al, al
	jmp	SHORT $LN1@stbi__clam
$LN3@stbi__clam:
; Line 2387
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jle	SHORT $LN4@stbi__clam
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__clam
$LN4@stbi__clam:
$LN2@stbi__clam:
; Line 2389
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__clam:
; Line 2390
	ret	0
stbi__clamp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
bit$1 = 36
r$2 = 40
r$3 = 44
s$4 = 48
s$5 = 52
p$6 = 56
rs$7 = 64
zig$8 = 68
rs$9 = 72
p$10 = 80
shift$11 = 88
c$12 = 92
tv362 = 96
tv384 = 100
tv411 = 104
tv345 = 112
j$ = 144
data$ = 152
hac$ = 160
fac$ = 168
stbi__jpeg_decode_block_prog_ac PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2263
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2265
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN13@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG130780
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN13@stbi__jpeg:
; Line 2267
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN14@stbi__jpeg
; Line 2268
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	DWORD PTR shift$11[rsp], eax
; Line 2270
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	SHORT $LN16@stbi__jpeg
; Line 2271
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2272
	mov	eax, 1
	jmp	$LN1@stbi__jpeg
$LN16@stbi__jpeg:
; Line 2275
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2279
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN17@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN17@stbi__jpeg:
; Line 2280
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$12[rsp], eax
; Line 2281
	movsxd	rax, DWORD PTR c$12[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$2[rsp], eax
; Line 2282
	cmp	DWORD PTR r$2[rsp], 0
	je	$LN18@stbi__jpeg
; Line 2283
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2284
	mov	eax, DWORD PTR r$2[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2285
	mov	eax, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv345[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv345[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2286
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$4[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2287
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$8[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2288
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2289
	jmp	$LN19@stbi__jpeg
$LN18@stbi__jpeg:
; Line 2290
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR rs$7[rsp], eax
; Line 2291
	cmp	DWORD PTR rs$7[rsp], 0
	jge	SHORT $LN20@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG130788
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN20@stbi__jpeg:
; Line 2292
	mov	eax, DWORD PTR rs$7[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2293
	mov	eax, DWORD PTR rs$7[rsp]
	sar	eax, 4
	mov	DWORD PTR r$2[rsp], eax
; Line 2294
	cmp	DWORD PTR s$4[rsp], 0
	jne	$LN21@stbi__jpeg
; Line 2295
	cmp	DWORD PTR r$2[rsp], 15
	jge	SHORT $LN23@stbi__jpeg
; Line 2296
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv362[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv362[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2297
	cmp	DWORD PTR r$2[rsp], 0
	je	SHORT $LN24@stbi__jpeg
; Line 2298
	mov	edx, DWORD PTR r$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bits
	mov	rcx, QWORD PTR j$[rsp]
	add	eax, DWORD PTR [rcx+18500]
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN24@stbi__jpeg:
; Line 2299
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2300
	jmp	$LN3@stbi__jpeg
$LN23@stbi__jpeg:
; Line 2302
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2303
	jmp	SHORT $LN22@stbi__jpeg
$LN21@stbi__jpeg:
; Line 2304
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2305
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$8[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2306
	mov	edx, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN22@stbi__jpeg:
$LN19@stbi__jpeg:
; Line 2309
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2310
	jmp	$LN15@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2313
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv384[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv384[rsp]
	shl	eax, cl
	mov	WORD PTR bit$1[rsp], ax
; Line 2315
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	$LN25@stbi__jpeg
; Line 2316
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2317
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN6@stbi__jpeg
; Line 2318
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$10[rsp], rax
; Line 2319
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN27@stbi__jpeg
; Line 2320
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN28@stbi__jpeg
; Line 2321
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN29@stbi__jpeg
; Line 2322
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN30@stbi__jpeg
; Line 2323
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN31@stbi__jpeg
$LN30@stbi__jpeg:
; Line 2325
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
$LN31@stbi__jpeg:
$LN29@stbi__jpeg:
$LN28@stbi__jpeg:
$LN27@stbi__jpeg:
; Line 2327
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2328
	jmp	$LN26@stbi__jpeg
$LN25@stbi__jpeg:
; Line 2329
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi__jpeg:
; Line 2332
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR rs$9[rsp], eax
; Line 2333
	cmp	DWORD PTR rs$9[rsp], 0
	jge	SHORT $LN32@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG130801
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN32@stbi__jpeg:
; Line 2334
	mov	eax, DWORD PTR rs$9[rsp]
	and	eax, 15
	mov	DWORD PTR s$5[rsp], eax
; Line 2335
	mov	eax, DWORD PTR rs$9[rsp]
	sar	eax, 4
	mov	DWORD PTR r$3[rsp], eax
; Line 2336
	cmp	DWORD PTR s$5[rsp], 0
	jne	SHORT $LN33@stbi__jpeg
; Line 2337
	cmp	DWORD PTR r$3[rsp], 15
	jge	SHORT $LN35@stbi__jpeg
; Line 2338
	mov	eax, DWORD PTR r$3[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv411[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv411[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2339
	cmp	DWORD PTR r$3[rsp], 0
	je	SHORT $LN37@stbi__jpeg
; Line 2340
	mov	edx, DWORD PTR r$3[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bits
	mov	rcx, QWORD PTR j$[rsp]
	add	eax, DWORD PTR [rcx+18500]
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN37@stbi__jpeg:
; Line 2341
	mov	DWORD PTR r$3[rsp], 64			; 00000040H
$LN35@stbi__jpeg:
; Line 2347
	jmp	SHORT $LN34@stbi__jpeg
$LN33@stbi__jpeg:
; Line 2348
	cmp	DWORD PTR s$5[rsp], 1
	je	SHORT $LN38@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG130808
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN38@stbi__jpeg:
; Line 2350
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN39@stbi__jpeg
; Line 2351
	movsx	eax, WORD PTR bit$1[rsp]
	mov	DWORD PTR s$5[rsp], eax
	jmp	SHORT $LN40@stbi__jpeg
$LN39@stbi__jpeg:
; Line 2353
	movsx	eax, WORD PTR bit$1[rsp]
	neg	eax
	mov	DWORD PTR s$5[rsp], eax
$LN40@stbi__jpeg:
$LN34@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 2357
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN12@stbi__jpeg
; Line 2358
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$6[rsp], rax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2359
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN41@stbi__jpeg
; Line 2360
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN43@stbi__jpeg
; Line 2361
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN44@stbi__jpeg
; Line 2362
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN45@stbi__jpeg
; Line 2363
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN46@stbi__jpeg
$LN45@stbi__jpeg:
; Line 2365
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
$LN46@stbi__jpeg:
$LN44@stbi__jpeg:
$LN43@stbi__jpeg:
; Line 2367
	jmp	SHORT $LN42@stbi__jpeg
$LN41@stbi__jpeg:
; Line 2368
	cmp	DWORD PTR r$3[rsp], 0
	jne	SHORT $LN47@stbi__jpeg
; Line 2369
	mov	rax, QWORD PTR p$6[rsp]
	movzx	ecx, WORD PTR s$5[rsp]
	mov	WORD PTR [rax], cx
; Line 2370
	jmp	SHORT $LN12@stbi__jpeg
$LN47@stbi__jpeg:
; Line 2372
	mov	eax, DWORD PTR r$3[rsp]
	dec	eax
	mov	DWORD PTR r$3[rsp], eax
$LN42@stbi__jpeg:
; Line 2374
	jmp	$LN11@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2375
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN10@stbi__jpeg
$LN26@stbi__jpeg:
$LN15@stbi__jpeg:
; Line 2378
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2379
	add	rsp, 136				; 00000088H
	ret	0
stbi__jpeg_decode_block_prog_ac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
tv87 = 36
dc$ = 40
diff$ = 44
tv175 = 48
j$ = 80
data$ = 88
hdc$ = 96
b$ = 104
stbi__jpeg_decode_block_prog_dc PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2235
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2238
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18488], 0
	je	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG130733
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 2240
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN3@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN3@stbi__jpeg:
; Line 2242
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN4@stbi__jpeg
; Line 2244
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2245
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2246
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG130739
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2247
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN10@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN11@stbi__jpeg
$LN10@stbi__jpeg:
	mov	DWORD PTR tv87[rsp], 0
$LN11@stbi__jpeg:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2249
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2250
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2251
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv175[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv175[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2252
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
; Line 2254
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN8@stbi__jpeg
; Line 2255
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18496]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	movsx	ecx, cx
	mov	rdx, QWORD PTR data$[rsp]
	movsx	eax, WORD PTR [rdx+rax]
	add	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN8@stbi__jpeg:
$LN5@stbi__jpeg:
; Line 2257
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2258
	add	rsp, 72					; 00000048H
	ret	0
stbi__jpeg_decode_block_prog_dc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
r$1 = 36
s$2 = 40
zig$3 = 44
t$ = 48
rs$4 = 52
tv81 = 56
dc$ = 60
diff$ = 64
c$5 = 68
tv236 = 72
j$ = 96
data$ = 104
hdc$ = 112
hac$ = 120
fac$ = 128
b$ = 136
dequant$ = 144
stbi__jpeg_decode_block PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2183
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2187
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2188
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2189
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG130708
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2192
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2194
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN16@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN17@stbi__jpeg
$LN16@stbi__jpeg:
	mov	DWORD PTR tv81[rsp], 0
$LN17@stbi__jpeg:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2195
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2196
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2197
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2200
	mov	DWORD PTR k$[rsp], 1
$LN4@stbi__jpeg:
; Line 2204
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN8@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN8@stbi__jpeg:
; Line 2205
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$5[rsp], eax
; Line 2206
	movsxd	rax, DWORD PTR c$5[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$1[rsp], eax
; Line 2207
	cmp	DWORD PTR r$1[rsp], 0
	je	$LN9@stbi__jpeg
; Line 2208
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2209
	mov	eax, DWORD PTR r$1[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2210
	mov	eax, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv236[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv236[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2211
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$2[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2213
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$3[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2214
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2215
	jmp	$LN10@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2216
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_huff_decode
	mov	DWORD PTR rs$4[rsp], eax
; Line 2217
	cmp	DWORD PTR rs$4[rsp], 0
	jge	SHORT $LN11@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG130713
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN11@stbi__jpeg:
; Line 2218
	mov	eax, DWORD PTR rs$4[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2219
	mov	eax, DWORD PTR rs$4[rsp]
	sar	eax, 4
	mov	DWORD PTR r$1[rsp], eax
; Line 2220
	cmp	DWORD PTR s$2[rsp], 0
	jne	SHORT $LN12@stbi__jpeg
; Line 2221
	cmp	DWORD PTR rs$4[rsp], 240		; 000000f0H
	je	SHORT $LN14@stbi__jpeg
	jmp	SHORT $LN3@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2222
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2223
	jmp	SHORT $LN13@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2224
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2226
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jpeg_dezigzag
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR zig$3[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 2227
	mov	edx, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__extend_receive
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN13@stbi__jpeg:
$LN10@stbi__jpeg:
; Line 2230
	cmp	DWORD PTR k$[rsp], 64			; 00000040H
	jl	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2231
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2232
	add	rsp, 88					; 00000058H
	ret	0
stbi__jpeg_decode_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
stbi__jpeg_get_bit PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2155
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2157
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 1
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2158
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	mov	DWORD PTR k$[rsp], eax
; Line 2159
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2160
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2161
	mov	eax, DWORD PTR k$[rsp]
	and	eax, -2147483648			; 80000000H
; Line 2162
	add	rsp, 56					; 00000038H
	ret	0
stbi__jpeg_get_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
n$ = 72
stbi__jpeg_get_bits PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2144
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2146
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2147
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2148
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2149
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2150
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2151
	mov	eax, DWORD PTR k$[rsp]
; Line 2152
	add	rsp, 56					; 00000038H
	ret	0
stbi__jpeg_get_bits ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
sgn$ = 36
j$ = 64
n$ = 72
stbi__extend_receive PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2129
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2132
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__exte
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN2@stbi__exte:
; Line 2134
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 31
	mov	DWORD PTR sgn$[rsp], eax
; Line 2135
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2136
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2137
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__bmask
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2138
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2139
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:stbi__jbias
	mov	edx, DWORD PTR sgn$[rsp]
	dec	edx
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 2140
	add	rsp, 56					; 00000038H
	ret	0
stbi__extend_receive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
c$ = 36
s$1 = 40
temp$ = 44
tv209 = 48
tv230 = 56
tv239 = 64
tv250 = 72
j$ = 96
h$ = 104
stbi__jpeg_huff_decode PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2075
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2079
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2083
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$[rsp], eax
; Line 2084
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 2085
	cmp	DWORD PTR k$[rsp], 255			; 000000ffH
	jge	$LN6@stbi__jpeg
; Line 2086
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2087
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR s$1[rsp], eax
	jle	SHORT $LN7@stbi__jpeg
; Line 2088
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN7@stbi__jpeg:
; Line 2089
	mov	eax, DWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv209[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv209[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2090
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2091
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2100
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 16
	mov	DWORD PTR temp$[rsp], eax
; Line 2101
	mov	DWORD PTR k$[rsp], 10
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2102
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1540]
	cmp	DWORD PTR temp$[rsp], eax
	jae	SHORT $LN8@stbi__jpeg
; Line 2103
	jmp	SHORT $LN3@stbi__jpeg
$LN8@stbi__jpeg:
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2104
	cmp	DWORD PTR k$[rsp], 17
	jne	SHORT $LN9@stbi__jpeg
; Line 2106
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, 16
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2107
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2110
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR k$[rsp], eax
	jle	SHORT $LN10@stbi__jpeg
; Line 2111
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN10@stbi__jpeg:
; Line 2114
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv230[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv230[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR k$[rsp]
	lea	rdx, OFFSET FLAT:stbi__bmask
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	add	eax, DWORD PTR [rdx+rcx*4+1612]
	mov	DWORD PTR c$[rsp], eax
; Line 2115
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv239[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv239[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+1280]
	lea	rdx, OFFSET FLAT:stbi__bmask
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+512]
	cmp	eax, ecx
	je	SHORT $LN12@stbi__jpeg
	mov	r8d, 2115				; 00000843H
	lea	rdx, OFFSET FLAT:$SG130647
	lea	rcx, OFFSET FLAT:$SG130648
	call	_wassert
	xor	eax, eax
$LN12@stbi__jpeg:
; Line 2118
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2119
	mov	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv250[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv250[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2120
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
$LN1@stbi__jpeg:
; Line 2121
	add	rsp, 88					; 00000058H
	ret	0
stbi__jpeg_huff_decode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
tv70 = 36
b$2 = 40
j$ = 64
stbi__grow_buffer_unsafe PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2053
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__grow:
; Line 2055
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18476], 0
	je	SHORT $LN10@stbi__grow
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN11@stbi__grow
$LN10@stbi__grow:
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv70[rsp], eax
$LN11@stbi__grow:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR b$2[rsp], eax
; Line 2056
	cmp	DWORD PTR b$2[rsp], 255			; 000000ffH
	jne	SHORT $LN7@stbi__grow
; Line 2057
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
$LN5@stbi__grow:
; Line 2058
	cmp	DWORD PTR c$1[rsp], 255			; 000000ffH
	jne	SHORT $LN6@stbi__grow
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN5@stbi__grow
$LN6@stbi__grow:
; Line 2059
	cmp	DWORD PTR c$1[rsp], 0
	je	SHORT $LN8@stbi__grow
; Line 2060
	mov	rax, QWORD PTR j$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rax+18472], cl
; Line 2061
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 1
; Line 2062
	jmp	SHORT $LN1@stbi__grow
$LN8@stbi__grow:
$LN7@stbi__grow:
; Line 2065
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, 24
	sub	ecx, DWORD PTR [rax+18468]
	mov	eax, ecx
	movzx	ecx, al
	mov	eax, DWORD PTR b$2[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18464]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2066
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	add	eax, 8
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2067
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jle	$LN4@stbi__grow
$LN1@stbi__grow:
; Line 2068
	add	rsp, 56					; 00000038H
	ret	0
stbi__grow_buffer_unsafe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fast$1 = 0
i$ = 4
k$2 = 8
magbits$3 = 12
len$4 = 16
rs$5 = 20
tv173 = 24
m$6 = 28
tv177 = 32
run$7 = 36
fast_ac$ = 64
h$ = 72
stbi__build_fast_ac PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 2028
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2030
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 512			; 00000200H
	jge	$LN3@stbi__buil
; Line 2031
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR fast$1[rsp], al
; Line 2032
	movsxd	rax, DWORD PTR i$[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 2033
	movzx	eax, BYTE PTR fast$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	$LN5@stbi__buil
; Line 2034
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	mov	DWORD PTR rs$5[rsp], eax
; Line 2035
	mov	eax, DWORD PTR rs$5[rsp]
	sar	eax, 4
	and	eax, 15
	mov	DWORD PTR run$7[rsp], eax
; Line 2036
	mov	eax, DWORD PTR rs$5[rsp]
	and	eax, 15
	mov	DWORD PTR magbits$3[rsp], eax
; Line 2037
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR len$4[rsp], eax
; Line 2039
	cmp	DWORD PTR magbits$3[rsp], 0
	je	$LN6@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, DWORD PTR len$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 9
	jg	$LN6@stbi__buil
; Line 2041
	mov	eax, DWORD PTR len$4[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, cl
	and	eax, 511				; 000001ffH
	mov	ecx, 9
	sub	ecx, DWORD PTR magbits$3[rsp]
	sar	eax, cl
	mov	DWORD PTR k$2[rsp], eax
; Line 2042
	mov	eax, DWORD PTR magbits$3[rsp]
	dec	eax
	mov	ecx, 1
	mov	DWORD PTR tv173[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv173[rsp]
	shl	eax, cl
	mov	DWORD PTR m$6[rsp], eax
; Line 2043
	mov	eax, DWORD PTR m$6[rsp]
	cmp	DWORD PTR k$2[rsp], eax
	jge	SHORT $LN7@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, -1					; ffffffffH
	mov	DWORD PTR tv177[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv177[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR k$2[rsp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	DWORD PTR k$2[rsp], eax
$LN7@stbi__buil:
; Line 2045
	cmp	DWORD PTR k$2[rsp], -128		; ffffffffffffff80H
	jl	SHORT $LN8@stbi__buil
	cmp	DWORD PTR k$2[rsp], 127			; 0000007fH
	jg	SHORT $LN8@stbi__buil
; Line 2046
	imul	eax, DWORD PTR k$2[rsp], 256		; 00000100H
	imul	ecx, DWORD PTR run$7[rsp], 16
	add	eax, ecx
	mov	ecx, DWORD PTR magbits$3[rsp]
	mov	edx, DWORD PTR len$4[rsp]
	add	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN8@stbi__buil:
$LN6@stbi__buil:
$LN5@stbi__buil:
; Line 2049
	jmp	$LN2@stbi__buil
$LN3@stbi__buil:
; Line 2050
	add	rsp, 56					; 00000038H
	ret	0
stbi__build_fast_ac ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
k$ = 36
i$ = 40
code$ = 44
s$1 = 48
tv232 = 52
m$2 = 56
c$3 = 60
h$ = 80
count$ = 88
stbi__build_huffman PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1984
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1985
	mov	DWORD PTR k$[rsp], 0
; Line 1988
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN3@stbi__buil
; Line 1989
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__buil
$LN5@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__buil:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__buil
; Line 1990
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rdx+rcx+1280], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN5@stbi__buil
$LN6@stbi__buil:
	jmp	SHORT $LN2@stbi__buil
$LN3@stbi__buil:
; Line 1991
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rcx+rax+1280], 0
; Line 1994
	mov	DWORD PTR code$[rsp], 0
; Line 1995
	mov	DWORD PTR k$[rsp], 0
; Line 1996
	mov	DWORD PTR j$[rsp], 1
	jmp	SHORT $LN10@stbi__buil
$LN8@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stbi__buil:
	cmp	DWORD PTR j$[rsp], 16
	jg	$LN9@stbi__buil
; Line 1998
	mov	eax, DWORD PTR code$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1612], eax
; Line 1999
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN19@stbi__buil
$LN11@stbi__buil:
; Line 2000
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN12@stbi__buil
; Line 2001
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+512], dx
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR code$[rsp]
	inc	eax
	mov	DWORD PTR code$[rsp], eax
	jmp	SHORT $LN11@stbi__buil
$LN12@stbi__buil:
; Line 2002
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR j$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jb	SHORT $LN20@stbi__buil
	lea	rcx, OFFSET FLAT:$SG130587
	call	stbi__err
	jmp	$LN1@stbi__buil
$LN20@stbi__buil:
$LN19@stbi__buil:
; Line 2005
	mov	eax, 16
	sub	eax, DWORD PTR j$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1540], eax
; Line 2006
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 2007
	jmp	$LN8@stbi__buil
$LN9@stbi__buil:
; Line 2008
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+rax*4+1540], -1		; ffffffffH
; Line 2011
	mov	rax, QWORD PTR h$[rsp]
	mov	r8d, 512				; 00000200H
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	memset
; Line 2012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@stbi__buil
$LN13@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@stbi__buil:
	mov	eax, DWORD PTR k$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN14@stbi__buil
; Line 2013
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2014
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN21@stbi__buil
; Line 2015
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+512]
	mov	ecx, 9
	sub	ecx, DWORD PTR s$1[rsp]
	shl	eax, cl
	mov	DWORD PTR c$3[rsp], eax
; Line 2016
	mov	eax, 9
	sub	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv232[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv232[rsp]
	shl	eax, cl
	mov	DWORD PTR m$2[rsp], eax
; Line 2017
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi__buil
$LN16@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi__buil:
	mov	eax, DWORD PTR m$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN17@stbi__buil
; Line 2018
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR c$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, BYTE PTR i$[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 2019
	jmp	SHORT $LN16@stbi__buil
$LN17@stbi__buil:
$LN21@stbi__buil:
; Line 2021
	jmp	$LN13@stbi__buil
$LN14@stbi__buil:
; Line 2022
	mov	eax, 1
$LN1@stbi__buil:
; Line 2023
	add	rsp, 72					; 00000048H
	ret	0
stbi__build_huffman ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
dest$1 = 56
src$2 = 64
j$ = 72
tv137 = 76
good$ = 80
tv269 = 88
tv289 = 92
tv311 = 96
tv331 = 100
tv90 = 104
tv380 = 112
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
data$ = 416
img_n$ = 424
req_comp$ = 432
x$ = 440
y$ = 448
stbi__convert_format16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1793
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 1797
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1798
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1798				; 00000706H
	lea	rdx, OFFSET FLAT:$SG130347
	lea	rcx, OFFSET FLAT:$SG130348
	call	_wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1800
	mov	eax, DWORD PTR req_comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	ecx, eax
	call	stbi__malloc
	mov	QWORD PTR good$[rsp], rax
; Line 1801
	cmp	QWORD PTR good$[rsp], 0
	jne	$LN44@stbi__conv
; Line 1802
	lea	rax, OFFSET FLAT:$SG130350
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1802				; 0000070aH
	lea	r8, OFFSET FLAT:$SG130351
	mov	edx, 69					; 00000045H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 1803
	lea	rcx, OFFSET FLAT:$SG130352
	call	stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	QWORD PTR tv90[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	QWORD PTR tv90[rsp], 0
$LN62@stbi__conv:
	mov	rax, QWORD PTR tv90[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1806
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1807
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR src$2[rsp], rax
; Line 1808
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR dest$1[rsp], rax
; Line 1814
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv137[rsp], eax
	mov	eax, DWORD PTR tv137[rsp]
	sub	eax, 10
	mov	DWORD PTR tv137[rsp], eax
	cmp	DWORD PTR tv137[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv137[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1815
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1816
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1817
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1818
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1819
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1820
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1821
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1822
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv269[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv269[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1823
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv289[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv289[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1824
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv311[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv311[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1825
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [rdi+rdx]
	mov	DWORD PTR tv331[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv331[rsp]
	mov	ecx, eax
	call	stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1826
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rdi+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	$LN5@stbi__conv
$LN57@stbi__conv:
; Line 1827
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1827				; 00000723H
	lea	rdx, OFFSET FLAT:$SG130366
	lea	rcx, OFFSET FLAT:$SG130367
	call	_wassert
	xor	eax, eax
$LN63@stbi__conv:
	lea	rax, OFFSET FLAT:$SG130368
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1827				; 00000723H
	lea	r8, OFFSET FLAT:$SG130369
	mov	edx, 70					; 00000046H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG130370
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1827				; 00000723H
	lea	r8, OFFSET FLAT:$SG130371
	mov	edx, 71					; 00000047H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR good$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG130372
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	QWORD PTR tv380[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	QWORD PTR tv380[rsp], 0
$LN65@stbi__conv:
	mov	rax, QWORD PTR tv380[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1830
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1832
	lea	rax, OFFSET FLAT:$SG130373
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1832				; 00000728H
	lea	r8, OFFSET FLAT:$SG130374
	mov	edx, 72					; 00000048H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 1833
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1834
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
stbi__convert_format16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
stbi__compute_y_16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1784
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1785
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1786
	ret	0
stbi__compute_y_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
dest$1 = 56
src$2 = 64
j$ = 72
tv134 = 76
good$ = 80
tv266 = 88
tv286 = 92
tv308 = 96
tv328 = 100
tv89 = 104
tv377 = 112
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
data$ = 416
img_n$ = 424
req_comp$ = 432
x$ = 440
y$ = 448
stbi__convert_format PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1736
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 1740
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1741
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1741				; 000006cdH
	lea	rdx, OFFSET FLAT:$SG130234
	lea	rcx, OFFSET FLAT:$SG130235
	call	_wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1743
	xor	r9d, r9d
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR good$[rsp], rax
; Line 1744
	cmp	QWORD PTR good$[rsp], 0
	jne	$LN44@stbi__conv
; Line 1745
	lea	rax, OFFSET FLAT:$SG130237
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1745				; 000006d1H
	lea	r8, OFFSET FLAT:$SG130238
	mov	edx, 65					; 00000041H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 1746
	lea	rcx, OFFSET FLAT:$SG130239
	call	stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	QWORD PTR tv89[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	QWORD PTR tv89[rsp], 0
$LN62@stbi__conv:
	mov	rax, QWORD PTR tv89[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1749
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1750
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR src$2[rsp], rax
; Line 1751
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$1[rsp], rax
; Line 1757
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv134[rsp], eax
	mov	eax, DWORD PTR tv134[rsp]
	sub	eax, 10
	mov	DWORD PTR tv134[rsp], eax
	cmp	DWORD PTR tv134[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv134[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1758
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1759
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1760
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1761
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1762
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1763
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1764
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1765
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv266[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv266[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1766
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv286[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv286[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1767
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv308[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv308[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1768
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [rdi+rdx]
	mov	DWORD PTR tv328[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv328[rsp]
	mov	ecx, eax
	call	stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1769
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	rdi, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	$LN5@stbi__conv
$LN57@stbi__conv:
; Line 1770
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1770				; 000006eaH
	lea	rdx, OFFSET FLAT:$SG130253
	lea	rcx, OFFSET FLAT:$SG130254
	call	_wassert
	xor	eax, eax
$LN63@stbi__conv:
	lea	rax, OFFSET FLAT:$SG130255
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1770				; 000006eaH
	lea	r8, OFFSET FLAT:$SG130256
	mov	edx, 66					; 00000042H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG130257
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1770				; 000006eaH
	lea	r8, OFFSET FLAT:$SG130258
	mov	edx, 67					; 00000043H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR good$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG130259
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	QWORD PTR tv377[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	QWORD PTR tv377[rsp], 0
$LN65@stbi__conv:
	mov	rax, QWORD PTR tv377[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1773
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1775
	lea	rax, OFFSET FLAT:$SG130260
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1775				; 000006efH
	lea	r8, OFFSET FLAT:$SG130261
	mov	edx, 68					; 00000044H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 1776
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1777
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
	npad	1
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
stbi__convert_format ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
stbi__compute_y PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1727
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1728
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1729
	ret	0
stbi__compute_y ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
stbi__get32le PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1703
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1704
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR z$[rsp], eax
; Line 1705
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	shl	eax, 16
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 1706
	mov	eax, DWORD PTR z$[rsp]
; Line 1707
	add	rsp, 56					; 00000038H
	ret	0
stbi__get32le ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
stbi__get16le PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1695
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1696
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1697
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1698
	add	rsp, 56					; 00000038H
	ret	0
stbi__get16le ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv66 = 36
s$ = 64
stbi__get32be PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1685
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1686
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR z$[rsp], eax
; Line 1687
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 16
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	ecx, DWORD PTR tv66[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1688
	add	rsp, 56					; 00000038H
	ret	0
stbi__get32be ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv67 = 36
s$ = 64
stbi__get16be PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1675
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1676
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1677
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv67[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv67[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1678
	add	rsp, 56					; 00000038H
	ret	0
stbi__get16be ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv87 = 36
count$2 = 40
res$3 = 44
s$ = 64
buffer$ = 72
n$ = 80
stbi__getn PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1647
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1648
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN2@stbi__getn
; Line 1649
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1650
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	$LN3@stbi__getn
; Line 1653
	movsxd	rax, DWORD PTR blen$1[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1655
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR blen$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR count$2[rsp], eax
; Line 1656
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR count$2[rsp], eax
	jne	SHORT $LN7@stbi__getn
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN8@stbi__getn
$LN7@stbi__getn:
	mov	DWORD PTR tv87[rsp], 0
$LN8@stbi__getn:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR res$3[rsp], eax
; Line 1657
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1658
	mov	eax, DWORD PTR res$3[rsp]
	jmp	SHORT $LN1@stbi__getn
$LN3@stbi__getn:
$LN2@stbi__getn:
; Line 1662
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	rax, QWORD PTR [rcx+200]
	ja	SHORT $LN4@stbi__getn
; Line 1663
	movsxd	rax, DWORD PTR n$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1664
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1665
	mov	eax, 1
	jmp	SHORT $LN1@stbi__getn
; Line 1666
	jmp	SHORT $LN5@stbi__getn
$LN4@stbi__getn:
; Line 1667
	xor	eax, eax
$LN5@stbi__getn:
$LN1@stbi__getn:
; Line 1668
	add	rsp, 56					; 00000038H
	ret	0
stbi__getn ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
s$ = 64
n$ = 72
stbi__skip PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1625
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1626
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__skip
	jmp	$LN1@stbi__skip
$LN2@stbi__skip:
; Line 1627
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN3@stbi__skip
; Line 1628
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1629
	jmp	$LN1@stbi__skip
$LN3@stbi__skip:
; Line 1631
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN4@stbi__skip
; Line 1632
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1633
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	SHORT $LN5@stbi__skip
; Line 1634
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1635
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+24]
; Line 1636
	jmp	SHORT $LN1@stbi__skip
$LN5@stbi__skip:
$LN4@stbi__skip:
; Line 1639
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
$LN1@stbi__skip:
; Line 1640
	add	rsp, 56					; 00000038H
	ret	0
stbi__skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
s$ = 64
stbi__at_eof PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1609
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1610
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@stbi__at_e
; Line 1611
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+32]
	test	eax, eax
	jne	SHORT $LN3@stbi__at_e
	xor	eax, eax
	jmp	SHORT $LN1@stbi__at_e
$LN3@stbi__at_e:
; Line 1614
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__at_e
	mov	eax, 1
	jmp	SHORT $LN1@stbi__at_e
$LN4@stbi__at_e:
$LN2@stbi__at_e:
; Line 1617
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jb	SHORT $LN6@stbi__at_e
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN7@stbi__at_e
$LN6@stbi__at_e:
	mov	DWORD PTR tv76[rsp], 0
$LN7@stbi__at_e:
	mov	eax, DWORD PTR tv76[rsp]
$LN1@stbi__at_e:
; Line 1618
	add	rsp, 56					; 00000038H
	ret	0
stbi__at_eof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv81 = 33
s$ = 64
stbi__get8 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1595
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1596
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jae	SHORT $LN2@stbi__get8
; Line 1597
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv72[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv72[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN2@stbi__get8:
; Line 1598
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN3@stbi__get8
; Line 1599
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__refill_buffer
; Line 1600
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv81[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv81[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN3@stbi__get8:
; Line 1602
	xor	al, al
$LN1@stbi__get8:
; Line 1603
	add	rsp, 56					; 00000038H
	ret	0
stbi__get8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
hdr_data$1 = 56
data$ = 64
tv129 = 72
ri$2 = 80
__$ArrayPad$ = 96
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
req_comp$ = 160
stbi__loadf_main PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1441
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1444
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
; Line 1446
	lea	rax, QWORD PTR ri$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_load
	mov	QWORD PTR hdr_data$1[rsp], rax
; Line 1447
	cmp	QWORD PTR hdr_data$1[rsp], 0
	je	SHORT $LN3@stbi__load
; Line 1448
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR hdr_data$1[rsp]
	call	stbi__float_postprocess
$LN3@stbi__load:
; Line 1449
	mov	rax, QWORD PTR hdr_data$1[rsp]
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1452
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
	mov	QWORD PTR data$[rsp], rax
; Line 1453
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1454
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN7@stbi__load
$LN6@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv89[rsp], eax
$LN7@stbi__load:
	mov	r9d, DWORD PTR tv89[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi__ldr_to_hdr
	jmp	SHORT $LN1@stbi__load
$LN4@stbi__load:
; Line 1455
	lea	rcx, OFFSET FLAT:$SG129972
	call	stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	QWORD PTR tv129[rsp], 0
	jmp	SHORT $LN9@stbi__load
$LN8@stbi__load:
	mov	QWORD PTR tv129[rsp], 0
$LN9@stbi__load:
	mov	rax, QWORD PTR tv129[rsp]
$LN1@stbi__load:
; Line 1456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
stbi__loadf_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
stbi__fopen PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1337
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	fopen_s
	test	eax, eax
	je	SHORT $LN2@stbi__fope
; Line 1338
	mov	QWORD PTR f$[rsp], 0
$LN2@stbi__fope:
; Line 1342
	mov	rax, QWORD PTR f$[rsp]
; Line 1343
	add	rsp, 56					; 00000038H
	ret	0
stbi__fopen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
tv81 = 36
channels$1 = 40
result$ = 64
x$ = 72
y$ = 80
comp$ = 88
req_comp$ = 96
stbi__float_postprocess PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1295
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1296
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi__floa
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN5@stbi__floa
$LN4@stbi__floa:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv77[rsp], eax
$LN5@stbi__floa:
	cmp	DWORD PTR tv77[rsp], 0
	je	SHORT $LN2@stbi__floa
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi__floa
; Line 1297
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__floa
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN7@stbi__floa
$LN6@stbi__floa:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv81[rsp], eax
$LN7@stbi__floa:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1298
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 2
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip
$LN2@stbi__floa:
; Line 1300
	add	rsp, 56					; 00000038H
	ret	0
stbi__float_postprocess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
stbi__load_and_postprocess_16bit PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1267
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1269
	mov	DWORD PTR [rsp+48], 16
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1271
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1272
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1275
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1275				; 000004fbH
	lea	rdx, OFFSET FLAT:$SG129772
	lea	rcx, OFFSET FLAT:$SG129773
	call	_wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1277
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN3@stbi__load
; Line 1278
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_8_to_16
	mov	QWORD PTR result$[rsp], rax
; Line 1279
	mov	DWORD PTR ri$[rsp], 16
$LN3@stbi__load:
; Line 1285
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1286
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1287
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 1
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip
$LN4@stbi__load:
; Line 1290
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1291
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
stbi__load_and_postprocess_16bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
stbi__load_and_postprocess_8bit PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1241
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1243
	mov	DWORD PTR [rsp+48], 8
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1245
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1246
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1249
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1249				; 000004e1H
	lea	rdx, OFFSET FLAT:$SG129745
	lea	rcx, OFFSET FLAT:$SG129746
	call	_wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1251
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN3@stbi__load
; Line 1252
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_16_to_8
	mov	QWORD PTR result$[rsp], rax
; Line 1253
	mov	DWORD PTR ri$[rsp], 8
$LN3@stbi__load:
; Line 1258
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1259
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1260
	mov	r9d, DWORD PTR channels$1[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip
$LN4@stbi__load:
; Line 1263
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1264
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
stbi__load_and_postprocess_8bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slice$ = 32
slice_size$ = 36
bytes$ = 40
image$ = 64
w$ = 72
h$ = 80
z$ = 88
bytes_per_pixel$ = 96
stbi__vertical_flip_slices PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1228
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1230
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR bytes_per_pixel$[rsp]
	mov	DWORD PTR slice_size$[rsp], eax
; Line 1232
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1233
	mov	DWORD PTR slice$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR slice$[rsp]
	inc	eax
	mov	DWORD PTR slice$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR slice$[rsp], eax
	jge	SHORT $LN3@stbi__vert
; Line 1234
	mov	r9d, DWORD PTR bytes_per_pixel$[rsp]
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	call	stbi__vertical_flip
; Line 1235
	movsxd	rax, DWORD PTR slice_size$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes$[rsp], rax
; Line 1236
	jmp	SHORT $LN2@stbi__vert
$LN3@stbi__vert:
; Line 1237
	add	rsp, 56					; 00000038H
	ret	0
stbi__vertical_flip_slices ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 32
bytes_copy$1 = 40
bytes_left$2 = 48
row0$3 = 56
row1$4 = 64
bytes_per_row$ = 72
bytes$ = 80
tv80 = 88
temp$ = 96
__$ArrayPad$ = 2144
image$ = 2176
w$ = 2184
h$ = 2192
bytes_per_pixel$ = 2200
stbi__vertical_flip PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1203
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2168				; 00000878H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1205
	movsxd	rax, DWORD PTR w$[rsp]
	movsxd	rcx, DWORD PTR bytes_per_pixel$[rsp]
	imul	rax, rcx
	mov	QWORD PTR bytes_per_row$[rsp], rax
; Line 1207
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1209
	mov	DWORD PTR row$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR h$[rsp]
	sar	eax, 1
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN3@stbi__vert
; Line 1210
	movsxd	rax, DWORD PTR row$[rsp]
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1211
	mov	eax, DWORD PTR row$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	cdqe
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1213
	mov	rax, QWORD PTR bytes_per_row$[rsp]
	mov	QWORD PTR bytes_left$2[rsp], rax
$LN5@stbi__vert:
; Line 1214
	cmp	QWORD PTR bytes_left$2[rsp], 0
	je	$LN6@stbi__vert
; Line 1215
	cmp	QWORD PTR bytes_left$2[rsp], 2048	; 00000800H
	jae	SHORT $LN8@stbi__vert
	mov	rax, QWORD PTR bytes_left$2[rsp]
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN9@stbi__vert
$LN8@stbi__vert:
	mov	QWORD PTR tv80[rsp], 2048		; 00000800H
$LN9@stbi__vert:
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR bytes_copy$1[rsp], rax
; Line 1216
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row0$3[rsp]
	lea	rcx, QWORD PTR temp$[rsp]
	call	memcpy
; Line 1217
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row1$4[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	call	memcpy
; Line 1218
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	lea	rdx, QWORD PTR temp$[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	call	memcpy
; Line 1219
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1220
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1221
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR bytes_left$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes_left$2[rsp], rax
; Line 1222
	jmp	$LN5@stbi__vert
$LN6@stbi__vert:
; Line 1223
	jmp	$LN2@stbi__vert
$LN3@stbi__vert:
; Line 1224
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2168				; 00000878H
	ret	0
stbi__vertical_flip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
img_len$ = 52
enlarged$ = 56
tv74 = 64
$T1 = 80
$T2 = 112
orig$ = 176
w$ = 184
h$ = 192
channels$ = 200
stbi__convert_8_to_16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1187
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1189
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1192
	mov	eax, DWORD PTR img_len$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR enlarged$[rsp], rax
; Line 1193
	cmp	QWORD PTR enlarged$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG129675
	call	stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	QWORD PTR tv74[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	QWORD PTR tv74[rsp], 0
$LN8@stbi__conv:
	mov	rax, QWORD PTR tv74[rsp]
	jmp	$LN1@stbi__conv
$LN5@stbi__conv:
; Line 1195
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1196
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR orig$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR enlarged$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1198
	lea	rax, OFFSET FLAT:$SG129676
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1198				; 000004aeH
	lea	r8, OFFSET FLAT:$SG129677
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR orig$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1199
	mov	rax, QWORD PTR enlarged$[rsp]
$LN1@stbi__conv:
; Line 1200
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__convert_8_to_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
img_len$ = 52
reduced$ = 56
tv73 = 64
$T1 = 80
$T2 = 112
orig$ = 176
w$ = 184
h$ = 192
channels$ = 200
stbi__convert_16_to_8 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1171
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 1173
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1176
	movsxd	rax, DWORD PTR img_len$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR reduced$[rsp], rax
; Line 1177
	cmp	QWORD PTR reduced$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG129647
	call	stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	QWORD PTR tv73[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	QWORD PTR tv73[rsp], 0
$LN8@stbi__conv:
	mov	rax, QWORD PTR tv73[rsp]
	jmp	$LN1@stbi__conv
$LN5@stbi__conv:
; Line 1179
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1180
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR reduced$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1182
	lea	rax, OFFSET FLAT:$SG129648
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1182				; 0000049eH
	lea	r8, OFFSET FLAT:$SG129649
	mov	edx, 63					; 0000003fH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR orig$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1183
	mov	rax, QWORD PTR reduced$[rsp]
$LN1@stbi__conv:
; Line 1184
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__convert_16_to_8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv185 = 64
tv203 = 72
hdr$1 = 80
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
bpc$ = 160
stbi__load_main PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1118
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1119
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, QWORD PTR ri$[rsp]
	call	memset
; Line 1120
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
; Line 1121
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 1122
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 1127
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__png_load
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1130
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_test
	test	eax, eax
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_load
	jmp	$LN1@stbi__load
$LN3@stbi__load:
; Line 1133
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_test
	test	eax, eax
	je	SHORT $LN4@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_load
	jmp	$LN1@stbi__load
$LN4@stbi__load:
; Line 1136
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_test
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	eax, DWORD PTR bpc$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_load
	jmp	$LN1@stbi__load
$LN5@stbi__load:
; Line 1141
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_test
	test	eax, eax
	je	SHORT $LN6@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_load
	jmp	$LN1@stbi__load
$LN6@stbi__load:
; Line 1148
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__jpeg_test
	test	eax, eax
	je	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__jpeg_load
	jmp	$LN1@stbi__load
$LN7@stbi__load:
; Line 1151
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_test
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_load
	jmp	$LN1@stbi__load
$LN8@stbi__load:
; Line 1155
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	test	eax, eax
	je	$LN9@stbi__load
; Line 1156
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_load
	mov	QWORD PTR hdr$1[rsp], rax
; Line 1157
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN12@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv185[rsp], eax
$LN13@stbi__load:
	mov	r9d, DWORD PTR tv185[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR hdr$1[rsp]
	call	stbi__hdr_to_ldr
	jmp	SHORT $LN1@stbi__load
$LN9@stbi__load:
; Line 1163
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_test
	test	eax, eax
	je	SHORT $LN10@stbi__load
; Line 1164
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_load
	jmp	SHORT $LN1@stbi__load
$LN10@stbi__load:
; Line 1167
	lea	rcx, OFFSET FLAT:$SG129622
	call	stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__load
	mov	QWORD PTR tv203[rsp], 0
	jmp	SHORT $LN15@stbi__load
$LN14@stbi__load:
	mov	QWORD PTR tv203[rsp], 0
$LN15@stbi__load:
	mov	rax, QWORD PTR tv203[rsp]
$LN1@stbi__load:
; Line 1168
	add	rsp, 104				; 00000068H
	ret	0
stbi__load_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 48
i$ = 52
z$1 = 56
z$2 = 60
n$ = 64
output$ = 72
tv83 = 80
tv133 = 88
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
data$ = 256
x$ = 264
y$ = 272
comp$ = 280
stbi__hdr_to_ldr PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1865
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 1868
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN8@stbi__hdr_:
; Line 1869
	xor	r9d, r9d
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR output$[rsp], rax
; Line 1870
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG130451
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1870				; 0000074eH
	lea	r8, OFFSET FLAT:$SG130452
	mov	edx, 75					; 0000004bH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG130453
	call	stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__hdr_
	mov	QWORD PTR tv83[rsp], 0
	jmp	SHORT $LN19@stbi__hdr_
$LN18@stbi__hdr_:
	mov	QWORD PTR tv83[rsp], 0
$LN19@stbi__hdr_:
	mov	rax, QWORD PTR tv83[rsp]
	jmp	$LN1@stbi__hdr_
$LN9@stbi__hdr_:
; Line 1872
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@stbi__hdr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN11@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__hdr_:
; Line 1873
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__hdr_
; Line 1874
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__hdr_
$LN5@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__hdr_
; Line 1875
	cvtss2sd xmm0, DWORD PTR stbi__h2l_gamma_i
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm1, DWORD PTR [rcx+rax*4]
	mulss	xmm1, DWORD PTR stbi__h2l_scale_i
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv133[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv133[rsp]
	call	pow
	cvtsd2ss xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$1[rsp], xmm0
; Line 1876
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$1[rsp]
	jbe	SHORT $LN12@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$1[rsp], xmm0
$LN12@stbi__hdr_:
; Line 1877
	movss	xmm0, DWORD PTR z$1[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN13@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$1[rsp], xmm0
$LN13@stbi__hdr_:
; Line 1878
	cvttss2si eax, DWORD PTR z$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1879
	jmp	$LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 1880
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 1881
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movss	xmm0, DWORD PTR [rcx+rax*4]
	mulss	xmm0, DWORD PTR __real@437f0000
	addss	xmm0, DWORD PTR __real@3f000000
	movss	DWORD PTR z$2[rsp], xmm0
; Line 1882
	xorps	xmm0, xmm0
	comiss	xmm0, DWORD PTR z$2[rsp]
	jbe	SHORT $LN15@stbi__hdr_
	xorps	xmm0, xmm0
	movss	DWORD PTR z$2[rsp], xmm0
$LN15@stbi__hdr_:
; Line 1883
	movss	xmm0, DWORD PTR z$2[rsp]
	comiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN16@stbi__hdr_
	movss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR z$2[rsp], xmm0
$LN16@stbi__hdr_:
; Line 1884
	cvttss2si eax, DWORD PTR z$2[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN14@stbi__hdr_:
; Line 1886
	jmp	$LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 1887
	lea	rax, OFFSET FLAT:$SG130461
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1887				; 0000075fH
	lea	r8, OFFSET FLAT:$SG130462
	mov	edx, 76					; 0000004cH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
; Line 1888
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__hdr_:
; Line 1889
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
stbi__hdr_to_ldr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
k$ = 52
n$ = 56
output$ = 64
tv84 = 72
tv141 = 80
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
data$ = 256
x$ = 264
y$ = 272
comp$ = 280
stbi__ldr_to_hdr PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1839
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 1842
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN11@stbi__ldr_
	xor	eax, eax
	jmp	$LN1@stbi__ldr_
$LN11@stbi__ldr_:
; Line 1843
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad4
	mov	QWORD PTR output$[rsp], rax
; Line 1844
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN12@stbi__ldr_
	lea	rax, OFFSET FLAT:$SG130408
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1844				; 00000734H
	lea	r8, OFFSET FLAT:$SG130409
	mov	edx, 73					; 00000049H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG130410
	call	stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__ldr_
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN18@stbi__ldr_
$LN17@stbi__ldr_:
	mov	QWORD PTR tv84[rsp], 0
$LN18@stbi__ldr_:
	mov	rax, QWORD PTR tv84[rsp]
	jmp	$LN1@stbi__ldr_
$LN12@stbi__ldr_:
; Line 1846
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN13@stbi__ldr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN14@stbi__ldr_
$LN13@stbi__ldr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN14@stbi__ldr_:
; Line 1847
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__ldr_
$LN2@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__ldr_
; Line 1848
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__ldr_
$LN5@stbi__ldr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__ldr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN6@stbi__ldr_
; Line 1849
	cvtss2sd xmm0, DWORD PTR stbi__l2h_gamma
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm1, eax
	divss	xmm1, DWORD PTR __real@437f0000
	cvtss2sd xmm1, xmm1
	movsd	QWORD PTR tv141[rsp], xmm1
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv141[rsp]
	call	pow
	cvtss2sd xmm1, DWORD PTR stbi__l2h_scale
	mulsd	xmm0, xmm1
	cvtsd2ss xmm0, xmm0
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1850
	jmp	$LN5@stbi__ldr_
$LN6@stbi__ldr_:
; Line 1851
	jmp	$LN2@stbi__ldr_
$LN3@stbi__ldr_:
; Line 1852
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN15@stbi__ldr_
; Line 1853
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__ldr_
$LN8@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__ldr_
; Line 1854
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	movss	DWORD PTR [rcx+rax*4], xmm0
; Line 1855
	jmp	SHORT $LN8@stbi__ldr_
$LN9@stbi__ldr_:
$LN15@stbi__ldr_:
; Line 1857
	lea	rax, OFFSET FLAT:$SG130414
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1857				; 00000741H
	lea	r8, OFFSET FLAT:$SG130415
	mov	edx, 74					; 0000004aH
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 1858
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__ldr_:
; Line 1859
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
stbi__ldr_to_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
stbi__malloc_mad4 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1060
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1061
	mov	eax, DWORD PTR add$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1062
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
$LN1@stbi__mall:
; Line 1063
	add	rsp, 56					; 00000038H
	ret	0
stbi__malloc_mad4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
c$ = 64
add$ = 72
stbi__malloc_mad3 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1053
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1054
	mov	r9d, DWORD PTR add$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1055
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
$LN1@stbi__mall:
; Line 1056
	add	rsp, 40					; 00000028H
	ret	0
stbi__malloc_mad3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
add$ = 64
stbi__malloc_mad2 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1046
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1047
	mov	r8d, DWORD PTR add$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mad2sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1048
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
$LN1@stbi__mall:
; Line 1049
	add	rsp, 40					; 00000028H
	ret	0
stbi__malloc_mad2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = 32
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
stbi__mad4sizes_valid PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1037
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1038
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	mov	ecx, eax
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@stbi__mad4
$LN3@stbi__mad4:
	mov	DWORD PTR tv86[rsp], 0
$LN4@stbi__mad4:
	mov	eax, DWORD PTR tv86[rsp]
; Line 1040
	add	rsp, 56					; 00000038H
	ret	0
stbi__mad4sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
a$ = 64
b$ = 72
c$ = 80
add$ = 88
stbi__mad3sizes_valid PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1029
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1030
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN4@stbi__mad3
$LN3@stbi__mad3:
	mov	DWORD PTR tv79[rsp], 0
$LN4@stbi__mad3:
	mov	eax, DWORD PTR tv79[rsp]
; Line 1032
	add	rsp, 56					; 00000038H
	ret	0
stbi__mad3sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
a$ = 64
b$ = 72
add$ = 80
stbi__mad2sizes_valid PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1022
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1023
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@stbi__mad2
$LN3@stbi__mad2:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stbi__mad2:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1024
	add	rsp, 56					; 00000038H
	ret	0
stbi__mad2sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
a$ = 32
b$ = 40
stbi__mul2sizes_valid PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1012
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1013
	cmp	DWORD PTR a$[rsp], 0
	jl	SHORT $LN3@stbi__mul2
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__mul2
$LN3@stbi__mul2:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mul2
$LN2@stbi__mul2:
; Line 1014
	cmp	DWORD PTR b$[rsp], 0
	jne	SHORT $LN4@stbi__mul2
	mov	eax, 1
	jmp	SHORT $LN1@stbi__mul2
$LN4@stbi__mul2:
; Line 1016
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN6@stbi__mul2
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN7@stbi__mul2
$LN6@stbi__mul2:
	mov	DWORD PTR tv69[rsp], 0
$LN7@stbi__mul2:
	mov	eax, DWORD PTR tv69[rsp]
$LN1@stbi__mul2:
; Line 1017
	add	rsp, 24
	ret	0
stbi__mul2sizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
a$ = 32
b$ = 40
stbi__addsizes_valid PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1000
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1001
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__adds
	xor	eax, eax
	jmp	SHORT $LN1@stbi__adds
$LN2@stbi__adds:
; Line 1006
	mov	eax, 2147483647				; 7fffffffH
	sub	eax, DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN4@stbi__adds
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@stbi__adds
$LN4@stbi__adds:
	mov	DWORD PTR tv67[rsp], 0
$LN5@stbi__adds:
	mov	eax, DWORD PTR tv67[rsp]
$LN1@stbi__adds:
; Line 1007
	add	rsp, 24
	ret	0
stbi__addsizes_valid ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
size$ = 144
stbi__malloc PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 983
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 984
	lea	rax, OFFSET FLAT:$SG129476
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 984				; 000003d8H
	lea	r8, OFFSET FLAT:$SG129477
	mov	edx, 61					; 0000003dH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rdx, QWORD PTR size$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 985
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbi__malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 8
stbi__err PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 976
	mov	QWORD PTR [rsp+8], rcx
; Line 977
	mov	eax, OFFSET FLAT:stbi__g_failure_reason
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR str$[rsp]
	mov	QWORD PTR [rax+rcx], rdx
; Line 978
	xor	eax, eax
; Line 979
	ret	0
stbi__err ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
stbi__pnm_is16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7534
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7535
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_info
	cmp	eax, 16
	jne	SHORT $LN2@stbi__pnm_
; Line 7536
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7537
	xor	eax, eax
$LN1@stbi__pnm_:
; Line 7538
	add	rsp, 40					; 00000028H
	ret	0
stbi__pnm_is16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
t$ = 33
p$ = 34
dummy$ = 36
tv81 = 40
maxv$ = 44
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi__pnm_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7495
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7499
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__pnm_:
; Line 7500
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__pnm_:
; Line 7501
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__pnm_:
; Line 7503
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7506
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7507
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7508
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN6@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN5@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7509
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7510
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN5@stbi__pnm_:
; Line 7513
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN12@stbi__pnm_
	mov	DWORD PTR tv81[rsp], 3
	jmp	SHORT $LN13@stbi__pnm_
$LN12@stbi__pnm_:
	mov	DWORD PTR tv81[rsp], 1
$LN13@stbi__pnm_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv81[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7515
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7516
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_skip_whitespace
; Line 7518
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_getinteger
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7519
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_skip_whitespace
; Line 7521
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_getinteger
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7522
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_skip_whitespace
; Line 7524
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_getinteger
	mov	DWORD PTR maxv$[rsp], eax
; Line 7525
	cmp	DWORD PTR maxv$[rsp], 65535		; 0000ffffH
	jle	SHORT $LN7@stbi__pnm_
; Line 7526
	lea	rcx, OFFSET FLAT:$SG135346
	call	stbi__err
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN8@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7527
	cmp	DWORD PTR maxv$[rsp], 255		; 000000ffH
	jle	SHORT $LN9@stbi__pnm_
; Line 7528
	mov	eax, 16
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN10@stbi__pnm_
$LN9@stbi__pnm_:
; Line 7530
	mov	eax, 8
$LN10@stbi__pnm_:
$LN8@stbi__pnm_:
$LN1@stbi__pnm_:
; Line 7531
	add	rsp, 56					; 00000038H
	ret	0
stbi__pnm_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv160 = 48
out$ = 56
tv80 = 64
tv86 = 72
tv138 = 80
tv154 = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
stbi__pnm_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7429
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 7433
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, 4
	mov	rdx, QWORD PTR s$[rsp]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pnm_info
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7434
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN2@stbi__pnm_
; Line 7435
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7437
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN3@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG135277
	call	stbi__err
	test	eax, eax
	je	SHORT $LN11@stbi__pnm_
	mov	QWORD PTR tv80[rsp], 0
	jmp	SHORT $LN12@stbi__pnm_
$LN11@stbi__pnm_:
	mov	QWORD PTR tv80[rsp], 0
$LN12@stbi__pnm_:
	mov	rax, QWORD PTR tv80[rsp]
	jmp	$LN1@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7438
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN4@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG135279
	call	stbi__err
	test	eax, eax
	je	SHORT $LN13@stbi__pnm_
	mov	QWORD PTR tv86[rsp], 0
	jmp	SHORT $LN14@stbi__pnm_
$LN13@stbi__pnm_:
	mov	QWORD PTR tv86[rsp], 0
$LN14@stbi__pnm_:
	mov	rax, QWORD PTR tv86[rsp]
	jmp	$LN1@stbi__pnm_
$LN4@stbi__pnm_:
; Line 7440
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 7441
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 7442
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__pnm_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__pnm_:
; Line 7444
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
; Line 7445
	lea	rcx, OFFSET FLAT:$SG135282
	call	stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__pnm_
	mov	QWORD PTR tv138[rsp], 0
	jmp	SHORT $LN16@stbi__pnm_
$LN15@stbi__pnm_:
	mov	QWORD PTR tv138[rsp], 0
$LN16@stbi__pnm_:
	mov	rax, QWORD PTR tv138[rsp]
	jmp	$LN1@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7447
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	stbi__malloc_mad4
	mov	QWORD PTR out$[rsp], rax
; Line 7448
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN7@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG135284
	call	stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__pnm_
	mov	QWORD PTR tv154[rsp], 0
	jmp	SHORT $LN18@stbi__pnm_
$LN17@stbi__pnm_:
	mov	QWORD PTR tv154[rsp], 0
$LN18@stbi__pnm_:
	mov	rax, QWORD PTR tv154[rsp]
	jmp	$LN1@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7449
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv160[rsp], eax
	mov	rcx, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rcx]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR tv160[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
; Line 7451
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN8@stbi__pnm_
; Line 7452
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 7453
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN9@stbi__pnm_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__pnm_
$LN9@stbi__pnm_:
$LN8@stbi__pnm_:
; Line 7455
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__pnm_:
; Line 7456
	add	rsp, 104				; 00000068H
	ret	0
stbi__pnm_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
p$ = 33
s$ = 64
stbi__pnm_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7417
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7419
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7420
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7421
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN2@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7422
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7423
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7425
	mov	eax, 1
$LN1@stbi__pnm_:
; Line 7426
	add	rsp, 56					; 00000038H
	ret	0
stbi__pnm_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
stbi__gif_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7000
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7001
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_info_raw
; Line 7002
	add	rsp, 40					; 00000028H
	ret	0
stbi__gif_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
layers$1 = 48
stride$2 = 52
out$3 = 56
u$4 = 64
out_size$5 = 72
delays_size$6 = 76
tmp$7 = 80
new_delays$8 = 88
two_back$9 = 96
tv266 = 104
tv86 = 112
tv137 = 120
$T10 = 128
$T11 = 160
$T12 = 192
$T13 = 224
$T14 = 256
$T15 = 288
$T16 = 320
$T17 = 352
$T18 = 384
$T19 = 416
g$20 = 448
__$ArrayPad$ = 35376
s$ = 35424
delays$ = 35432
x$ = 35440
y$ = 35448
z$ = 35456
comp$ = 35464
req_comp$ = 35472
stbi__load_gif_main PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6886
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 35400				; 00008a48H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6887
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_test
	test	eax, eax
	je	$LN5@stbi__load
; Line 6888
	mov	DWORD PTR layers$1[rsp], 0
; Line 6889
	mov	QWORD PTR u$4[rsp], 0
; Line 6890
	mov	QWORD PTR out$3[rsp], 0
; Line 6891
	mov	QWORD PTR two_back$9[rsp], 0
; Line 6894
	mov	DWORD PTR out_size$5[rsp], 0
; Line 6895
	mov	DWORD PTR delays_size$6[rsp], 0
; Line 6900
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$20[rsp]
	call	memset
; Line 6901
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN7@stbi__load
; Line 6902
	mov	rax, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rax], 0
$LN7@stbi__load:
$LN4@stbi__load:
; Line 6906
	mov	rax, QWORD PTR two_back$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$20[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_load_next
	mov	QWORD PTR u$4[rsp], rax
; Line 6907
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$4[rsp], rax
	jne	SHORT $LN8@stbi__load
	mov	QWORD PTR u$4[rsp], 0
$LN8@stbi__load:
; Line 6909
	cmp	QWORD PTR u$4[rsp], 0
	je	$LN9@stbi__load
; Line 6910
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$20[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6911
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$20[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6912
	mov	eax, DWORD PTR layers$1[rsp]
	inc	eax
	mov	DWORD PTR layers$1[rsp], eax
; Line 6913
	mov	eax, DWORD PTR g$20[rsp]
	imul	eax, DWORD PTR g$20[rsp+4]
	shl	eax, 2
	mov	DWORD PTR stride$2[rsp], eax
; Line 6915
	cmp	QWORD PTR out$3[rsp], 0
	je	$LN10@stbi__load
; Line 6916
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	QWORD PTR tv86[rsp], rax
	lea	rcx, OFFSET FLAT:$SG134820
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 6916				; 00001b04H
	lea	r8, OFFSET FLAT:$SG134821
	mov	edx, 114				; 00000072H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$3[rsp]
	mov	rax, QWORD PTR tv86[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	mov	QWORD PTR tmp$7[rsp], rax
; Line 6917
	cmp	QWORD PTR tmp$7[rsp], 0
	jne	SHORT $LN12@stbi__load
; Line 6918
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
; Line 6920
	mov	rax, QWORD PTR tmp$7[rsp]
	mov	QWORD PTR out$3[rsp], rax
; Line 6921
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
$LN13@stbi__load:
; Line 6924
	cmp	QWORD PTR delays$[rsp], 0
	je	$LN14@stbi__load
; Line 6925
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	QWORD PTR tv137[rsp], rax
	lea	rcx, OFFSET FLAT:$SG134825
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 6925				; 00001b0dH
	lea	r8, OFFSET FLAT:$SG134826
	mov	edx, 115				; 00000073H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR delays$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rax, QWORD PTR tv137[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
	mov	QWORD PTR new_delays$8[rsp], rax
; Line 6926
	cmp	QWORD PTR new_delays$8[rsp], 0
	jne	SHORT $LN15@stbi__load
; Line 6927
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN15@stbi__load:
; Line 6928
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR new_delays$8[rsp]
	mov	QWORD PTR [rax], rcx
; Line 6929
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN14@stbi__load:
; Line 6931
	jmp	$LN11@stbi__load
$LN10@stbi__load:
; Line 6932
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR out$3[rsp], rax
; Line 6933
	cmp	QWORD PTR out$3[rsp], 0
	jne	SHORT $LN16@stbi__load
; Line 6934
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN16@stbi__load:
; Line 6935
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
; Line 6936
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN17@stbi__load
; Line 6937
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	stbi__malloc
	mov	rcx, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6938
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN18@stbi__load
; Line 6939
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$20[rsp]
	call	stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN18@stbi__load:
; Line 6940
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN17@stbi__load:
$LN11@stbi__load:
; Line 6943
	movsxd	rax, DWORD PTR stride$2[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	dec	ecx
	imul	ecx, DWORD PTR stride$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR u$4[rsp]
	call	memcpy
; Line 6944
	cmp	DWORD PTR layers$1[rsp], 2
	jl	SHORT $LN19@stbi__load
; Line 6945
	mov	eax, DWORD PTR stride$2[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR out$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR two_back$9[rsp], rax
$LN19@stbi__load:
; Line 6948
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN20@stbi__load
; Line 6949
	mov	eax, DWORD PTR layers$1[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR g$20[rsp+34920]
	mov	DWORD PTR [rcx+rax*4], edx
$LN20@stbi__load:
$LN9@stbi__load:
; Line 6952
	cmp	QWORD PTR u$4[rsp], 0
	jne	$LN4@stbi__load
; Line 6955
	lea	rax, OFFSET FLAT:$SG134833
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6955				; 00001b2bH
	lea	r8, OFFSET FLAT:$SG134834
	mov	edx, 116				; 00000074H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$20[rsp+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
; Line 6956
	lea	rax, OFFSET FLAT:$SG134835
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6956				; 00001b2cH
	lea	r8, OFFSET FLAT:$SG134836
	mov	edx, 117				; 00000075H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$20[rsp+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccuserallocator_
; Line 6957
	lea	rax, OFFSET FLAT:$SG134837
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6957				; 00001b2dH
	lea	r8, OFFSET FLAT:$SG134838
	mov	edx, 118				; 00000076H
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$20[rsp+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
; Line 6960
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN21@stbi__load
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN21@stbi__load
; Line 6961
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR g$20[rsp]
	mov	ecx, DWORD PTR g$20[rsp+4]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$3[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$3[rsp], rax
$LN21@stbi__load:
; Line 6963
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6964
	mov	rax, QWORD PTR out$3[rsp]
	jmp	SHORT $LN1@stbi__load
; Line 6965
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
; Line 6966
	lea	rcx, OFFSET FLAT:$SG134840
	call	stbi__err
	test	eax, eax
	je	SHORT $LN23@stbi__load
	mov	QWORD PTR tv266[rsp], 0
	jmp	SHORT $LN24@stbi__load
$LN23@stbi__load:
	mov	QWORD PTR tv266[rsp], 0
$LN24@stbi__load:
	mov	rax, QWORD PTR tv266[rsp]
$LN6@stbi__load:
$LN1@stbi__load:
; Line 6968
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35400				; 00008a48H
	pop	rdi
	pop	rsi
	ret	0
stbi__load_gif_main ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
u$ = 48
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
g$ = 256
__$ArrayPad$ = 35184
s$ = 35232
x$ = 35240
y$ = 35248
comp$ = 35256
req_comp$ = 35264
ri$ = 35272
stbi__gif_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6971
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 35208				; 00008988H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6972
	mov	QWORD PTR u$[rsp], 0
; Line 6974
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$[rsp]
	call	memset
; Line 6977
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_load_next
	mov	QWORD PTR u$[rsp], rax
; Line 6978
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$[rsp], rax
	jne	SHORT $LN2@stbi__gif_
	mov	QWORD PTR u$[rsp], 0
$LN2@stbi__gif_:
; Line 6979
	cmp	QWORD PTR u$[rsp], 0
	je	SHORT $LN3@stbi__gif_
; Line 6980
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6981
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6985
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN5@stbi__gif_
; Line 6986
	mov	eax, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR g$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR u$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR u$[rsp], rax
$LN5@stbi__gif_:
; Line 6987
	jmp	SHORT $LN4@stbi__gif_
$LN3@stbi__gif_:
	cmp	QWORD PTR g$[rsp+8], 0
	je	SHORT $LN6@stbi__gif_
; Line 6989
	lea	rax, OFFSET FLAT:$SG134863
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6989				; 00001b4dH
	lea	r8, OFFSET FLAT:$SG134864
	mov	edx, 119				; 00000077H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
$LN6@stbi__gif_:
$LN4@stbi__gif_:
; Line 6993
	lea	rax, OFFSET FLAT:$SG134865
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6993				; 00001b51H
	lea	r8, OFFSET FLAT:$SG134866
	mov	edx, 120				; 00000078H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp+24]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 6994
	lea	rax, OFFSET FLAT:$SG134867
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6994				; 00001b52H
	lea	r8, OFFSET FLAT:$SG134868
	mov	edx, 121				; 00000079H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR g$[rsp+16]
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
; Line 6996
	mov	rax, QWORD PTR u$[rsp]
; Line 6997
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35208				; 00008988H
	pop	rdi
	pop	rsi
	ret	0
stbi__gif_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__gif_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6513
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6514
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__gif_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 6515
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6516
	mov	eax, DWORD PTR r$[rsp]
; Line 6517
	add	rsp, 56					; 00000038H
	ret	0
stbi__gif_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_packets$ = 32
act_comp$ = 36
dummy$ = 40
tv152 = 44
packet$1 = 48
chained$ = 56
packets$ = 64
__$ArrayPad$ = 96
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
stbi__pic_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7346
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7347
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
; Line 7350
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN5@stbi__pic_:
; Line 7351
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN6@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN6@stbi__pic_:
; Line 7352
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN7@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN7@stbi__pic_:
; Line 7354
	lea	rdx, OFFSET FLAT:$SG135224
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN8@stbi__pic_
; Line 7355
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 7359
	mov	edx, 88					; 00000058H
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 7361
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7362
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7363
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__pic_
; Line 7364
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7365
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 7367
	mov	rax, QWORD PTR x$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@stbi__pic_
	mov	eax, 268435456				; 10000000H
	cdq
	mov	rcx, QWORD PTR x$[rsp]
	idiv	DWORD PTR [rcx]
	mov	rcx, QWORD PTR y$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN10@stbi__pic_
; Line 7368
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7369
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 7372
	mov	edx, 8
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN4@stbi__pic_:
; Line 7377
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN11@stbi__pic_
; Line 7378
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN11@stbi__pic_:
; Line 7380
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$1[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
; Line 7381
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 7382
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx], al
; Line 7383
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 7384
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 7385
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 7387
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN12@stbi__pic_
; Line 7388
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7389
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN12@stbi__pic_:
; Line 7391
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN13@stbi__pic_
; Line 7392
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7393
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN13@stbi__pic_:
; Line 7395
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 7397
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN15@stbi__pic_
	mov	DWORD PTR tv152[rsp], 4
	jmp	SHORT $LN16@stbi__pic_
$LN15@stbi__pic_:
	mov	DWORD PTR tv152[rsp], 3
$LN16@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv152[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7399
	mov	eax, 1
$LN1@stbi__pic_:
; Line 7400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
stbi__pic_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 48
x$ = 52
result$ = 56
i$ = 64
tv76 = 72
tv81 = 80
tv88 = 88
tv130 = 96
tv143 = 104
internal_comp$ = 112
$T1 = 128
$T2 = 160
s$ = 224
px$ = 232
py$ = 240
comp$ = 248
req_comp$ = 256
ri$ = 264
stbi__pic_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6423
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 6428
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR internal_comp$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN5@stbi__pic_:
; Line 6430
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 92			; 0000005cH
	jge	SHORT $LN3@stbi__pic_
; Line 6431
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6433
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR x$[rsp], eax
; Line 6434
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR y$[rsp], eax
; Line 6436
	cmp	DWORD PTR y$[rsp], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134426
	call	stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__pic_
	mov	QWORD PTR tv76[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN14@stbi__pic_:
	mov	QWORD PTR tv76[rsp], 0
$LN15@stbi__pic_:
	mov	rax, QWORD PTR tv76[rsp]
	jmp	$LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6437
	cmp	DWORD PTR x$[rsp], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134428
	call	stbi__err
	test	eax, eax
	je	SHORT $LN16@stbi__pic_
	mov	QWORD PTR tv81[rsp], 0
	jmp	SHORT $LN17@stbi__pic_
$LN16@stbi__pic_:
	mov	QWORD PTR tv81[rsp], 0
$LN17@stbi__pic_:
	mov	rax, QWORD PTR tv81[rsp]
	jmp	$LN1@stbi__pic_
$LN7@stbi__pic_:
; Line 6439
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__at_eof
	test	eax, eax
	je	SHORT $LN8@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134430
	call	stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__pic_
	mov	QWORD PTR tv88[rsp], 0
	jmp	SHORT $LN19@stbi__pic_
$LN18@stbi__pic_:
	mov	QWORD PTR tv88[rsp], 0
$LN19@stbi__pic_:
	mov	rax, QWORD PTR tv88[rsp]
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 6440
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN9@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134432
	call	stbi__err
	test	eax, eax
	je	SHORT $LN20@stbi__pic_
	mov	QWORD PTR tv130[rsp], 0
	jmp	SHORT $LN21@stbi__pic_
$LN20@stbi__pic_:
	mov	QWORD PTR tv130[rsp], 0
$LN21@stbi__pic_:
	mov	rax, QWORD PTR tv130[rsp]
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 6442
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 6443
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
; Line 6444
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
; Line 6447
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR result$[rsp], rax
; Line 6448
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN10@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG134434
	call	stbi__err
	test	eax, eax
	je	SHORT $LN22@stbi__pic_
	mov	QWORD PTR tv143[rsp], 0
	jmp	SHORT $LN23@stbi__pic_
$LN22@stbi__pic_:
	mov	QWORD PTR tv143[rsp], 0
$LN23@stbi__pic_:
	mov	rax, QWORD PTR tv143[rsp]
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 6449
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 6451
	mov	rax, QWORD PTR result$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_load_core
	test	rax, rax
	jne	SHORT $LN11@stbi__pic_
; Line 6452
	lea	rax, OFFSET FLAT:$SG134436
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6452				; 00001934H
	lea	r8, OFFSET FLAT:$SG134437
	mov	edx, 106				; 0000006aH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR result$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 6453
	mov	QWORD PTR result$[rsp], 0
$LN11@stbi__pic_:
; Line 6455
	mov	rax, QWORD PTR px$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6456
	mov	rax, QWORD PTR py$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6457
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN12@stbi__pic_
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR req_comp$[rsp], eax
$LN12@stbi__pic_:
; Line 6458
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
; Line 6460
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6461
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
stbi__pic_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__pic_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6464
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6465
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__pic_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 6466
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6467
	mov	eax, DWORD PTR r$[rsp]
; Line 6468
	add	rsp, 56					; 00000038H
	ret	0
stbi__pic_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
dummy$ = 40
valid$ = 44
buffer$ = 48
__$ArrayPad$ = 1072
s$ = 1104
x$ = 1112
y$ = 1120
comp$ = 1128
stbi__hdr_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7212
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1096				; 00000448H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7215
	mov	DWORD PTR valid$[rsp], 0
; Line 7218
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN7@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN7@stbi__hdr_:
; Line 7219
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN8@stbi__hdr_:
; Line 7220
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN9@stbi__hdr_:
; Line 7222
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	test	eax, eax
	jne	SHORT $LN10@stbi__hdr_
; Line 7223
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7224
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN10@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7228
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7229
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7230
	lea	rdx, OFFSET FLAT:$SG135145
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN12@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN12@stbi__hdr_:
; Line 7231
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7233
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN13@stbi__hdr_
; Line 7234
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7235
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN13@stbi__hdr_:
; Line 7237
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7238
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG135148
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN14@stbi__hdr_
; Line 7239
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7240
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7242
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7243
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__hdr_:
; Line 7244
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7245
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG135150
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN15@stbi__hdr_
; Line 7246
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7247
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN15@stbi__hdr_:
; Line 7249
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7250
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7251
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
; Line 7252
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7253
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1096				; 00000448H
	ret	0
stbi__hdr_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$ = 48
i$ = 52
width$ = 56
j$ = 60
value$ = 64
len$ = 68
z$ = 72
token$ = 80
height$ = 88
scanline$ = 96
k$ = 104
rgbe$1 = 108
hdr_data$ = 112
nleft$2 = 120
valid$ = 124
c1$ = 128
c2$ = 132
rgbe$3 = 136
headerToken$ = 144
tv78 = 152
tv94 = 160
tv138 = 168
tv155 = 176
tv165 = 184
tv170 = 192
tv183 = 200
tv194 = 208
tv280 = 216
tv299 = 224
tv368 = 232
tv401 = 240
$T4 = 256
$T5 = 288
$T6 = 320
$T7 = 352
$T8 = 384
$T9 = 416
$T10 = 448
$T11 = 480
$T12 = 512
$T13 = 544
$T14 = 576
$T15 = 608
$T16 = 640
$T17 = 672
$T18 = 704
$T19 = 736
$T20 = 768
$T21 = 800
buffer$ = 832
__$ArrayPad$ = 1856
s$ = 1904
x$ = 1912
y$ = 1920
comp$ = 1928
req_comp$ = 1936
ri$ = 1944
stbi__hdr_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7081
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1880				; 00000758H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7084
	mov	DWORD PTR valid$[rsp], 0
; Line 7095
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR headerToken$[rsp], rax
; Line 7096
	lea	rdx, OFFSET FLAT:$SG135059
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
	lea	rdx, OFFSET FLAT:$SG135060
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
; Line 7097
	lea	rcx, OFFSET FLAT:$SG135061
	call	stbi__err
	test	eax, eax
	je	SHORT $LN56@stbi__hdr_
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN57@stbi__hdr_
$LN56@stbi__hdr_:
	mov	QWORD PTR tv78[rsp], 0
$LN57@stbi__hdr_:
	mov	rax, QWORD PTR tv78[rsp]
	jmp	$LN1@stbi__hdr_
$LN30@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7101
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7102
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN31@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN31@stbi__hdr_:
; Line 7103
	lea	rdx, OFFSET FLAT:$SG135064
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN32@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN32@stbi__hdr_:
; Line 7104
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7106
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN33@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG135066
	call	stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__hdr_
	mov	QWORD PTR tv94[rsp], 0
	jmp	SHORT $LN59@stbi__hdr_
$LN58@stbi__hdr_:
	mov	QWORD PTR tv94[rsp], 0
$LN59@stbi__hdr_:
	mov	rax, QWORD PTR tv94[rsp]
	jmp	$LN1@stbi__hdr_
$LN33@stbi__hdr_:
; Line 7110
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7111
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG135068
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN34@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG135069
	call	stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__hdr_
	mov	QWORD PTR tv138[rsp], 0
	jmp	SHORT $LN61@stbi__hdr_
$LN60@stbi__hdr_:
	mov	QWORD PTR tv138[rsp], 0
$LN61@stbi__hdr_:
	mov	rax, QWORD PTR tv138[rsp]
	jmp	$LN1@stbi__hdr_
$LN34@stbi__hdr_:
; Line 7112
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7113
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	DWORD PTR height$[rsp], eax
$LN5@stbi__hdr_:
; Line 7114
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7115
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG135071
	mov	rcx, QWORD PTR token$[rsp]
	call	strncmp
	test	eax, eax
	je	SHORT $LN35@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG135072
	call	stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__hdr_
	mov	QWORD PTR tv155[rsp], 0
	jmp	SHORT $LN63@stbi__hdr_
$LN62@stbi__hdr_:
	mov	QWORD PTR tv155[rsp], 0
$LN63@stbi__hdr_:
	mov	rax, QWORD PTR tv155[rsp]
	jmp	$LN1@stbi__hdr_
$LN35@stbi__hdr_:
; Line 7116
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7117
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	strtol
	mov	DWORD PTR width$[rsp], eax
; Line 7119
	cmp	DWORD PTR height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN36@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG135074
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__hdr_
	mov	QWORD PTR tv165[rsp], 0
	jmp	SHORT $LN65@stbi__hdr_
$LN64@stbi__hdr_:
	mov	QWORD PTR tv165[rsp], 0
$LN65@stbi__hdr_:
	mov	rax, QWORD PTR tv165[rsp]
	jmp	$LN1@stbi__hdr_
$LN36@stbi__hdr_:
; Line 7120
	cmp	DWORD PTR width$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG135076
	call	stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__hdr_
	mov	QWORD PTR tv170[rsp], 0
	jmp	SHORT $LN67@stbi__hdr_
$LN66@stbi__hdr_:
	mov	QWORD PTR tv170[rsp], 0
$LN67@stbi__hdr_:
	mov	rax, QWORD PTR tv170[rsp]
	jmp	$LN1@stbi__hdr_
$LN37@stbi__hdr_:
; Line 7122
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7123
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7125
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN38@stbi__hdr_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
$LN38@stbi__hdr_:
; Line 7126
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN39@stbi__hdr_
	mov	DWORD PTR req_comp$[rsp], 3
$LN39@stbi__hdr_:
; Line 7128
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN40@stbi__hdr_
; Line 7129
	lea	rcx, OFFSET FLAT:$SG135080
	call	stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__hdr_
	mov	QWORD PTR tv183[rsp], 0
	jmp	SHORT $LN69@stbi__hdr_
$LN68@stbi__hdr_:
	mov	QWORD PTR tv183[rsp], 0
$LN69@stbi__hdr_:
	mov	rax, QWORD PTR tv183[rsp]
	jmp	$LN1@stbi__hdr_
$LN40@stbi__hdr_:
; Line 7132
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	stbi__malloc_mad4
	mov	QWORD PTR hdr_data$[rsp], rax
; Line 7133
	cmp	QWORD PTR hdr_data$[rsp], 0
	jne	SHORT $LN41@stbi__hdr_
; Line 7134
	lea	rcx, OFFSET FLAT:$SG135082
	call	stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__hdr_
	mov	QWORD PTR tv194[rsp], 0
	jmp	SHORT $LN71@stbi__hdr_
$LN70@stbi__hdr_:
	mov	QWORD PTR tv194[rsp], 0
$LN71@stbi__hdr_:
	mov	rax, QWORD PTR tv194[rsp]
	jmp	$LN1@stbi__hdr_
$LN41@stbi__hdr_:
; Line 7138
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN44@stbi__hdr_
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN42@stbi__hdr_
$LN44@stbi__hdr_:
; Line 7140
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi__hdr_
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi__hdr_
; Line 7141
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stbi__hdr_
$main_decode_loop$80:
; Line 7144
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
; Line 7145
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR hdr_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, rax
	call	stbi__hdr_convert
; Line 7146
	jmp	SHORT $LN10@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7147
	jmp	$LN7@stbi__hdr_
$LN8@stbi__hdr_:
; Line 7148
	jmp	$LN43@stbi__hdr_
$LN42@stbi__hdr_:
; Line 7150
	mov	QWORD PTR scanline$[rsp], 0
; Line 7152
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi__hdr_
$LN13@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 7153
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c1$[rsp], eax
; Line 7154
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR c2$[rsp], eax
; Line 7155
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 7156
	cmp	DWORD PTR c1$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	cmp	DWORD PTR c2$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	mov	eax, DWORD PTR len$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN45@stbi__hdr_
$LN46@stbi__hdr_:
; Line 7160
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR c1$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7161
	mov	eax, 1
	imul	rax, rax, 1
	movzx	ecx, BYTE PTR c2$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7162
	mov	eax, 1
	imul	rax, rax, 2
	movzx	ecx, BYTE PTR len$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7163
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR rgbe$1[rsp+rcx], al
; Line 7164
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$1[rsp]
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	stbi__hdr_convert
; Line 7165
	mov	DWORD PTR i$[rsp], 1
; Line 7166
	mov	DWORD PTR j$[rsp], 0
; Line 7167
	lea	rax, OFFSET FLAT:$SG135088
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7167				; 00001bffH
	lea	r8, OFFSET FLAT:$SG135089
	mov	edx, 122				; 0000007aH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccuserallocator_
; Line 7168
	jmp	$main_decode_loop$80
$LN45@stbi__hdr_:
; Line 7170
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 8
	mov	DWORD PTR len$[rsp], eax
; Line 7171
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR len$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 7172
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	je	$LN47@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG135091
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7172				; 00001c04H
	lea	r8, OFFSET FLAT:$SG135092
	mov	edx, 123				; 0000007bH
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG135093
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7172				; 00001c04H
	lea	r8, OFFSET FLAT:$SG135094
	mov	edx, 124				; 0000007cH
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG135095
	call	stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__hdr_
	mov	QWORD PTR tv280[rsp], 0
	jmp	SHORT $LN73@stbi__hdr_
$LN72@stbi__hdr_:
	mov	QWORD PTR tv280[rsp], 0
$LN73@stbi__hdr_:
	mov	rax, QWORD PTR tv280[rsp]
	jmp	$LN1@stbi__hdr_
$LN47@stbi__hdr_:
; Line 7173
	cmp	QWORD PTR scanline$[rsp], 0
	jne	$LN48@stbi__hdr_
; Line 7174
	xor	r8d, r8d
	mov	edx, 4
	mov	ecx, DWORD PTR width$[rsp]
	call	stbi__malloc_mad2
	mov	QWORD PTR scanline$[rsp], rax
; Line 7175
	cmp	QWORD PTR scanline$[rsp], 0
	jne	$LN49@stbi__hdr_
; Line 7176
	lea	rax, OFFSET FLAT:$SG135098
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7176				; 00001c08H
	lea	r8, OFFSET FLAT:$SG135099
	mov	edx, 125				; 0000007dH
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccuserallocator_
; Line 7177
	lea	rcx, OFFSET FLAT:$SG135100
	call	stbi__err
	test	eax, eax
	je	SHORT $LN74@stbi__hdr_
	mov	QWORD PTR tv299[rsp], 0
	jmp	SHORT $LN75@stbi__hdr_
$LN74@stbi__hdr_:
	mov	QWORD PTR tv299[rsp], 0
$LN75@stbi__hdr_:
	mov	rax, QWORD PTR tv299[rsp]
	jmp	$LN1@stbi__hdr_
$LN49@stbi__hdr_:
$LN48@stbi__hdr_:
; Line 7181
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__hdr_
$LN16@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__hdr_:
	cmp	DWORD PTR k$[rsp], 4
	jge	$LN17@stbi__hdr_
; Line 7183
	mov	DWORD PTR i$[rsp], 0
$LN19@stbi__hdr_:
; Line 7184
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$2[rsp], eax
	cmp	DWORD PTR nleft$2[rsp], 0
	jle	$LN20@stbi__hdr_
; Line 7185
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR count$[rsp], al
; Line 7186
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, 128				; 00000080H
	jle	$LN50@stbi__hdr_
; Line 7188
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	BYTE PTR value$[rsp], al
; Line 7189
	movzx	eax, BYTE PTR count$[rsp]
	sub	eax, 128				; 00000080H
	mov	BYTE PTR count$[rsp], al
; Line 7190
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	$LN52@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG135104
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7190				; 00001c16H
	lea	r8, OFFSET FLAT:$SG135105
	mov	edx, 126				; 0000007eH
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG135106
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7190				; 00001c16H
	lea	r8, OFFSET FLAT:$SG135107
	mov	edx, 127				; 0000007fH
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG135108
	call	stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__hdr_
	mov	QWORD PTR tv368[rsp], 0
	jmp	SHORT $LN77@stbi__hdr_
$LN76@stbi__hdr_:
	mov	QWORD PTR tv368[rsp], 0
$LN77@stbi__hdr_:
	mov	rax, QWORD PTR tv368[rsp]
	jmp	$LN1@stbi__hdr_
$LN52@stbi__hdr_:
; Line 7191
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN23@stbi__hdr_
$LN21@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN23@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN22@stbi__hdr_
; Line 7192
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	movzx	edx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__hdr_
$LN22@stbi__hdr_:
; Line 7193
	jmp	$LN51@stbi__hdr_
$LN50@stbi__hdr_:
; Line 7195
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	$LN53@stbi__hdr_
	lea	rax, OFFSET FLAT:$SG135110
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7195				; 00001c1bH
	lea	r8, OFFSET FLAT:$SG135111
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR hdr_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccuserallocator_
	lea	rax, OFFSET FLAT:$SG135112
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7195				; 00001c1bH
	lea	r8, OFFSET FLAT:$SG135113
	mov	edx, 129				; 00000081H
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG135114
	call	stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__hdr_
	mov	QWORD PTR tv401[rsp], 0
	jmp	SHORT $LN79@stbi__hdr_
$LN78@stbi__hdr_:
	mov	QWORD PTR tv401[rsp], 0
$LN79@stbi__hdr_:
	mov	rax, QWORD PTR tv401[rsp]
	jmp	$LN1@stbi__hdr_
$LN53@stbi__hdr_:
; Line 7196
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN26@stbi__hdr_
$LN24@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN26@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN25@stbi__hdr_
; Line 7197
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR k$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*4]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scanline$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__hdr_
$LN25@stbi__hdr_:
$LN51@stbi__hdr_:
; Line 7199
	jmp	$LN19@stbi__hdr_
$LN20@stbi__hdr_:
; Line 7200
	jmp	$LN16@stbi__hdr_
$LN17@stbi__hdr_:
; Line 7201
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN29@stbi__hdr_
$LN27@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN29@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN28@stbi__hdr_
; Line 7202
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR width$[rsp]
	add	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR hdr_data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rdx, rax
	call	stbi__hdr_convert
	jmp	SHORT $LN27@stbi__hdr_
$LN28@stbi__hdr_:
; Line 7203
	jmp	$LN13@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7204
	cmp	QWORD PTR scanline$[rsp], 0
	je	SHORT $LN54@stbi__hdr_
; Line 7205
	lea	rax, OFFSET FLAT:$SG135116
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 7205				; 00001c25H
	lea	r8, OFFSET FLAT:$SG135117
	mov	edx, 130				; 00000082H
	lea	rcx, QWORD PTR $T21[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR scanline$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
$LN54@stbi__hdr_:
$LN43@stbi__hdr_:
; Line 7208
	mov	rax, QWORD PTR hdr_data$[rsp]
$LN1@stbi__hdr_:
; Line 7209
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1880				; 00000758H
	pop	rdi
	pop	rsi
	ret	0
stbi__hdr_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__hdr_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7020
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7021
	lea	rdx, OFFSET FLAT:$SG134893
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7022
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7023
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN2@stbi__hdr_
; Line 7024
	lea	rdx, OFFSET FLAT:$SG134895
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7025
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
$LN2@stbi__hdr_:
; Line 7027
	mov	eax, DWORD PTR r$[rsp]
; Line 7028
	add	rsp, 56					; 00000038H
	ret	0
stbi__hdr_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
channelCount$ = 32
depth$ = 36
s$ = 64
stbi__psd_is16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7317
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7319
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN2@stbi__psd_
; Line 7320
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7321
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN2@stbi__psd_:
; Line 7323
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 1
	je	SHORT $LN3@stbi__psd_
; Line 7324
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7325
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN3@stbi__psd_:
; Line 7327
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 7328
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7329
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN5@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 7330
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7331
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN4@stbi__psd_:
; Line 7333
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 7334
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
; Line 7335
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7336
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN6@stbi__psd_
; Line 7337
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7338
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7340
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7341
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_is16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dummy$ = 32
channelCount$ = 36
depth$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi__psd_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7282
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7284
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__psd_:
; Line 7285
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__psd_:
; Line 7286
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__psd_:
; Line 7287
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN5@stbi__psd_
; Line 7288
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7289
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN5@stbi__psd_:
; Line 7291
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 1
	je	SHORT $LN6@stbi__psd_
; Line 7292
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7293
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7295
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 7296
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7297
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN8@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN7@stbi__psd_
$LN8@stbi__psd_:
; Line 7298
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7299
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN7@stbi__psd_:
; Line 7301
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7302
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7303
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7304
	cmp	DWORD PTR depth$[rsp], 8
	je	SHORT $LN9@stbi__psd_
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN9@stbi__psd_
; Line 7305
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7306
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN9@stbi__psd_:
; Line 7308
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 3
	je	SHORT $LN10@stbi__psd_
; Line 7309
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7310
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN10@stbi__psd_:
; Line 7312
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
; Line 7313
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7314
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
channel$ = 52
h$ = 56
w$ = 60
out$ = 64
val$1 = 72
pixelCount$ = 76
channelCount$ = 80
bitdepth$ = 84
pixel$2 = 88
ra$3 = 96
ra$4 = 100
pixel$5 = 104
val$6 = 112
compression$ = 116
inv_a$7 = 120
inv_a$8 = 124
p$9 = 128
tv212 = 136
tv241 = 140
tv249 = 144
p$10 = 152
a$11 = 160
a$12 = 164
q$13 = 168
p$14 = 176
q$15 = 184
tv70 = 192
tv77 = 200
tv87 = 208
tv128 = 216
tv133 = 224
tv141 = 232
tv148 = 240
tv167 = 248
tv177 = 256
tv196 = 264
tv231 = 272
$T16 = 288
$T17 = 320
s$ = 384
x$ = 392
y$ = 400
comp$ = 408
req_comp$ = 416
ri$ = 424
bpc$ = 432
stbi__psd_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6049
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
; Line 6059
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN32@stbi__psd_
; Line 6060
	lea	rcx, OFFSET FLAT:$SG134152
	call	stbi__err
	test	eax, eax
	je	SHORT $LN69@stbi__psd_
	mov	QWORD PTR tv70[rsp], 0
	jmp	SHORT $LN70@stbi__psd_
$LN69@stbi__psd_:
	mov	QWORD PTR tv70[rsp], 0
$LN70@stbi__psd_:
	mov	rax, QWORD PTR tv70[rsp]
	jmp	$LN1@stbi__psd_
$LN32@stbi__psd_:
; Line 6063
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 1
	je	SHORT $LN33@stbi__psd_
; Line 6064
	lea	rcx, OFFSET FLAT:$SG134154
	call	stbi__err
	test	eax, eax
	je	SHORT $LN71@stbi__psd_
	mov	QWORD PTR tv77[rsp], 0
	jmp	SHORT $LN72@stbi__psd_
$LN71@stbi__psd_:
	mov	QWORD PTR tv77[rsp], 0
$LN72@stbi__psd_:
	mov	rax, QWORD PTR tv77[rsp]
	jmp	$LN1@stbi__psd_
$LN33@stbi__psd_:
; Line 6067
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6070
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 6071
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN35@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN34@stbi__psd_
$LN35@stbi__psd_:
; Line 6072
	lea	rcx, OFFSET FLAT:$SG134157
	call	stbi__err
	test	eax, eax
	je	SHORT $LN73@stbi__psd_
	mov	QWORD PTR tv87[rsp], 0
	jmp	SHORT $LN74@stbi__psd_
$LN73@stbi__psd_:
	mov	QWORD PTR tv87[rsp], 0
$LN74@stbi__psd_:
	mov	rax, QWORD PTR tv87[rsp]
	jmp	$LN1@stbi__psd_
$LN34@stbi__psd_:
; Line 6075
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR h$[rsp], eax
; Line 6076
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	DWORD PTR w$[rsp], eax
; Line 6078
	cmp	DWORD PTR h$[rsp], 16777216		; 01000000H
	jle	SHORT $LN36@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG134159
	call	stbi__err
	test	eax, eax
	je	SHORT $LN75@stbi__psd_
	mov	QWORD PTR tv128[rsp], 0
	jmp	SHORT $LN76@stbi__psd_
$LN75@stbi__psd_:
	mov	QWORD PTR tv128[rsp], 0
$LN76@stbi__psd_:
	mov	rax, QWORD PTR tv128[rsp]
	jmp	$LN1@stbi__psd_
$LN36@stbi__psd_:
; Line 6079
	cmp	DWORD PTR w$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG134161
	call	stbi__err
	test	eax, eax
	je	SHORT $LN77@stbi__psd_
	mov	QWORD PTR tv133[rsp], 0
	jmp	SHORT $LN78@stbi__psd_
$LN77@stbi__psd_:
	mov	QWORD PTR tv133[rsp], 0
$LN78@stbi__psd_:
	mov	rax, QWORD PTR tv133[rsp]
	jmp	$LN1@stbi__psd_
$LN37@stbi__psd_:
; Line 6082
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR bitdepth$[rsp], eax
; Line 6083
	cmp	DWORD PTR bitdepth$[rsp], 8
	je	SHORT $LN38@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	je	SHORT $LN38@stbi__psd_
; Line 6084
	lea	rcx, OFFSET FLAT:$SG134163
	call	stbi__err
	test	eax, eax
	je	SHORT $LN79@stbi__psd_
	mov	QWORD PTR tv141[rsp], 0
	jmp	SHORT $LN80@stbi__psd_
$LN79@stbi__psd_:
	mov	QWORD PTR tv141[rsp], 0
$LN80@stbi__psd_:
	mov	rax, QWORD PTR tv141[rsp]
	jmp	$LN1@stbi__psd_
$LN38@stbi__psd_:
; Line 6096
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	cmp	eax, 3
	je	SHORT $LN39@stbi__psd_
; Line 6097
	lea	rcx, OFFSET FLAT:$SG134165
	call	stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__psd_
	mov	QWORD PTR tv148[rsp], 0
	jmp	SHORT $LN82@stbi__psd_
$LN81@stbi__psd_:
	mov	QWORD PTR tv148[rsp], 0
$LN82@stbi__psd_:
	mov	rax, QWORD PTR tv148[rsp]
	jmp	$LN1@stbi__psd_
$LN39@stbi__psd_:
; Line 6100
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6103
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6106
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6112
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	DWORD PTR compression$[rsp], eax
; Line 6113
	cmp	DWORD PTR compression$[rsp], 1
	jle	SHORT $LN40@stbi__psd_
; Line 6114
	lea	rcx, OFFSET FLAT:$SG134167
	call	stbi__err
	test	eax, eax
	je	SHORT $LN83@stbi__psd_
	mov	QWORD PTR tv167[rsp], 0
	jmp	SHORT $LN84@stbi__psd_
$LN83@stbi__psd_:
	mov	QWORD PTR tv167[rsp], 0
$LN84@stbi__psd_:
	mov	rax, QWORD PTR tv167[rsp]
	jmp	$LN1@stbi__psd_
$LN40@stbi__psd_:
; Line 6117
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 4
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN41@stbi__psd_
; Line 6118
	lea	rcx, OFFSET FLAT:$SG134169
	call	stbi__err
	test	eax, eax
	je	SHORT $LN85@stbi__psd_
	mov	QWORD PTR tv177[rsp], 0
	jmp	SHORT $LN86@stbi__psd_
$LN85@stbi__psd_:
	mov	QWORD PTR tv177[rsp], 0
$LN86@stbi__psd_:
	mov	rax, QWORD PTR tv177[rsp]
	jmp	$LN1@stbi__psd_
$LN41@stbi__psd_:
; Line 6122
	cmp	DWORD PTR compression$[rsp], 0
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
; Line 6123
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 8
	call	stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 6124
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
; Line 6125
	jmp	SHORT $LN43@stbi__psd_
$LN42@stbi__psd_:
; Line 6126
	mov	eax, DWORD PTR w$[rsp]
	shl	eax, 2
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR out$[rsp], rax
$LN43@stbi__psd_:
; Line 6128
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN44@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG134173
	call	stbi__err
	test	eax, eax
	je	SHORT $LN87@stbi__psd_
	mov	QWORD PTR tv196[rsp], 0
	jmp	SHORT $LN88@stbi__psd_
$LN87@stbi__psd_:
	mov	QWORD PTR tv196[rsp], 0
$LN88@stbi__psd_:
	mov	rax, QWORD PTR tv196[rsp]
	jmp	$LN1@stbi__psd_
$LN44@stbi__psd_:
; Line 6129
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR pixelCount$[rsp], eax
; Line 6135
	cmp	DWORD PTR compression$[rsp], 0
	je	$LN45@stbi__psd_
; Line 6146
	mov	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channelCount$[rsp]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 6149
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN4@stbi__psd_
$LN2@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN4@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN3@stbi__psd_
; Line 6152
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$10[rsp], rax
; Line 6153
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	SHORT $LN47@stbi__psd_
; Line 6155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__psd_
$LN5@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$10[rsp]
	add	rax, 4
	mov	QWORD PTR p$10[rsp], rax
$LN7@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__psd_
; Line 6156
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN89@stbi__psd_
	mov	DWORD PTR tv212[rsp], 255		; 000000ffH
	jmp	SHORT $LN90@stbi__psd_
$LN89@stbi__psd_:
	mov	DWORD PTR tv212[rsp], 0
$LN90@stbi__psd_:
	mov	rax, QWORD PTR p$10[rsp]
	movzx	ecx, BYTE PTR tv212[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN5@stbi__psd_
$LN6@stbi__psd_:
; Line 6157
	jmp	$LN48@stbi__psd_
$LN47@stbi__psd_:
; Line 6159
	mov	r8d, DWORD PTR pixelCount$[rsp]
	mov	rdx, QWORD PTR p$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__psd_decode_rle
	test	eax, eax
	jne	$LN49@stbi__psd_
; Line 6160
	lea	rax, OFFSET FLAT:$SG134179
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 6160				; 00001810H
	lea	r8, OFFSET FLAT:$SG134180
	mov	edx, 105				; 00000069H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T16[rsp]
	call	ccuserallocator_
; Line 6161
	lea	rcx, OFFSET FLAT:$SG134181
	call	stbi__err
	test	eax, eax
	je	SHORT $LN91@stbi__psd_
	mov	QWORD PTR tv231[rsp], 0
	jmp	SHORT $LN92@stbi__psd_
$LN91@stbi__psd_:
	mov	QWORD PTR tv231[rsp], 0
$LN92@stbi__psd_:
	mov	rax, QWORD PTR tv231[rsp]
	jmp	$LN1@stbi__psd_
$LN49@stbi__psd_:
$LN48@stbi__psd_:
; Line 6164
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6166
	jmp	$LN46@stbi__psd_
$LN45@stbi__psd_:
; Line 6171
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN10@stbi__psd_
$LN8@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN10@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN9@stbi__psd_
; Line 6172
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	$LN50@stbi__psd_
; Line 6174
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	$LN52@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	$LN52@stbi__psd_
; Line 6175
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$13[rsp], rax
; Line 6176
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN93@stbi__psd_
	mov	DWORD PTR tv241[rsp], 65535		; 0000ffffH
	jmp	SHORT $LN94@stbi__psd_
$LN93@stbi__psd_:
	mov	DWORD PTR tv241[rsp], 0
$LN94@stbi__psd_:
	movzx	eax, WORD PTR tv241[rsp]
	mov	WORD PTR val$6[rsp], ax
; Line 6177
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__psd_
$LN11@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$13[rsp]
	add	rax, 8
	mov	QWORD PTR q$13[rsp], rax
$LN13@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__psd_
; Line 6178
	mov	rax, QWORD PTR q$13[rsp]
	movzx	ecx, WORD PTR val$6[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN11@stbi__psd_
$LN12@stbi__psd_:
; Line 6179
	jmp	$LN53@stbi__psd_
$LN52@stbi__psd_:
; Line 6180
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$14[rsp], rax
; Line 6181
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN95@stbi__psd_
	mov	DWORD PTR tv249[rsp], 255		; 000000ffH
	jmp	SHORT $LN96@stbi__psd_
$LN95@stbi__psd_:
	mov	DWORD PTR tv249[rsp], 0
$LN96@stbi__psd_:
	movzx	eax, BYTE PTR tv249[rsp]
	mov	BYTE PTR val$1[rsp], al
; Line 6182
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__psd_
$LN14@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$14[rsp]
	add	rax, 4
	mov	QWORD PTR p$14[rsp], rax
$LN16@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN15@stbi__psd_
; Line 6183
	mov	rax, QWORD PTR p$14[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN14@stbi__psd_
$LN15@stbi__psd_:
$LN53@stbi__psd_:
; Line 6185
	jmp	$LN51@stbi__psd_
$LN50@stbi__psd_:
; Line 6186
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN54@stbi__psd_
; Line 6187
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$15[rsp], rax
; Line 6188
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN19@stbi__psd_
$LN17@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$15[rsp]
	add	rax, 8
	mov	QWORD PTR q$15[rsp], rax
$LN19@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN18@stbi__psd_
; Line 6189
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	mov	rcx, QWORD PTR q$15[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN17@stbi__psd_
$LN18@stbi__psd_:
; Line 6190
	jmp	$LN55@stbi__psd_
$LN54@stbi__psd_:
; Line 6191
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$9[rsp], rax
; Line 6192
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN56@stbi__psd_
; Line 6193
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__psd_
$LN20@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN22@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN21@stbi__psd_
; Line 6194
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16be
	sar	eax, 8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN20@stbi__psd_
$LN21@stbi__psd_:
; Line 6195
	jmp	SHORT $LN57@stbi__psd_
$LN56@stbi__psd_:
; Line 6196
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__psd_
$LN23@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN25@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN24@stbi__psd_
; Line 6197
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN23@stbi__psd_
$LN24@stbi__psd_:
$LN57@stbi__psd_:
$LN55@stbi__psd_:
$LN51@stbi__psd_:
; Line 6201
	jmp	$LN8@stbi__psd_
$LN9@stbi__psd_:
$LN46@stbi__psd_:
; Line 6205
	cmp	DWORD PTR channelCount$[rsp], 4
	jl	$LN58@stbi__psd_
; Line 6206
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	$LN59@stbi__psd_
; Line 6207
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__psd_
$LN26@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN27@stbi__psd_
; Line 6208
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pixel$5[rsp], rax
; Line 6209
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN61@stbi__psd_
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 65535				; 0000ffffH
	je	$LN61@stbi__psd_
; Line 6210
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@477fff00
	movss	DWORD PTR a$11[rsp], xmm0
; Line 6211
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$11[rsp]
	movss	DWORD PTR ra$3[rsp], xmm0
; Line 6212
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$3[rsp]
	movss	xmm1, DWORD PTR __real@477fff00
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$7[rsp], xmm0
; Line 6213
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6214
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6215
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$3[rsp]
	addss	xmm0, DWORD PTR inv_a$7[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN61@stbi__psd_:
; Line 6217
	jmp	$LN26@stbi__psd_
$LN27@stbi__psd_:
; Line 6218
	jmp	$LN60@stbi__psd_
$LN59@stbi__psd_:
; Line 6219
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN31@stbi__psd_
$LN29@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN31@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN30@stbi__psd_
; Line 6220
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixel$2[rsp], rax
; Line 6221
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN62@stbi__psd_
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 255				; 000000ffH
	je	$LN62@stbi__psd_
; Line 6222
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	divss	xmm0, DWORD PTR __real@437f0000
	movss	DWORD PTR a$12[rsp], xmm0
; Line 6223
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR a$12[rsp]
	movss	DWORD PTR ra$4[rsp], xmm0
; Line 6224
	movss	xmm0, DWORD PTR __real@3f800000
	subss	xmm0, DWORD PTR ra$4[rsp]
	movss	xmm1, DWORD PTR __real@437f0000
	mulss	xmm1, xmm0
	movaps	xmm0, xmm1
	movss	DWORD PTR inv_a$8[rsp], xmm0
; Line 6225
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$4[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6226
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$4[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6227
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cvtsi2ss xmm0, eax
	mulss	xmm0, DWORD PTR ra$4[rsp]
	addss	xmm0, DWORD PTR inv_a$8[rsp]
	cvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN62@stbi__psd_:
; Line 6229
	jmp	$LN29@stbi__psd_
$LN30@stbi__psd_:
$LN60@stbi__psd_:
$LN58@stbi__psd_:
; Line 6234
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN63@stbi__psd_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN63@stbi__psd_
; Line 6235
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN64@stbi__psd_
; Line 6236
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format16
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN65@stbi__psd_
$LN64@stbi__psd_:
; Line 6238
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
$LN65@stbi__psd_:
; Line 6239
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN66@stbi__psd_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__psd_
$LN66@stbi__psd_:
$LN63@stbi__psd_:
; Line 6242
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN67@stbi__psd_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN67@stbi__psd_:
; Line 6243
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6244
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6246
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__psd_:
; Line 6247
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
stbi__psd_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
r$ = 36
s$ = 64
stbi__psd_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 6004
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6005
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32be
	cmp	eax, 943870035				; 38425053H
	jne	SHORT $LN3@stbi__psd_
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__psd_
$LN3@stbi__psd_:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__psd_:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 6006
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 6007
	mov	eax, DWORD PTR r$[rsp]
; Line 6008
	add	rsp, 56					; 00000038H
	ret	0
stbi__psd_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_image_type$ = 32
sz$ = 36
tga_colormap_bpp$ = 40
tga_bits_per_pixel$ = 44
tga_comp$ = 48
tga_colormap_type$ = 52
tv153 = 56
tga_w$ = 60
tga_h$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
stbi__tga_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5678
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5681
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
; Line 5682
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_colormap_type$[rsp], eax
; Line 5683
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
; Line 5684
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5685
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN2@stbi__tga_:
; Line 5687
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5688
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jne	$LN3@stbi__tga_
; Line 5689
	cmp	DWORD PTR tga_image_type$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 9
	je	SHORT $LN5@stbi__tga_
; Line 5690
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5691
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN5@stbi__tga_:
; Line 5693
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5694
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5695
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
; Line 5696
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5697
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5699
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5700
	mov	eax, DWORD PTR sz$[rsp]
	mov	DWORD PTR tga_colormap_bpp$[rsp], eax
; Line 5701
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5702
	cmp	DWORD PTR tga_image_type$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN7@stbi__tga_
; Line 5703
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5704
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN7@stbi__tga_:
; Line 5706
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5707
	mov	DWORD PTR tga_colormap_bpp$[rsp], 0
$LN4@stbi__tga_:
; Line 5709
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_w$[rsp], eax
; Line 5710
	cmp	DWORD PTR tga_w$[rsp], 1
	jge	SHORT $LN8@stbi__tga_
; Line 5711
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5712
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN8@stbi__tga_:
; Line 5714
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_h$[rsp], eax
; Line 5715
	cmp	DWORD PTR tga_h$[rsp], 1
	jge	SHORT $LN9@stbi__tga_
; Line 5716
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5717
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN9@stbi__tga_:
; Line 5719
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5720
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
; Line 5721
	cmp	DWORD PTR tga_colormap_bpp$[rsp], 0
	je	SHORT $LN10@stbi__tga_
; Line 5722
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	je	SHORT $LN12@stbi__tga_
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 16
	je	SHORT $LN12@stbi__tga_
; Line 5725
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5726
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5728
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, DWORD PTR tga_colormap_bpp$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
; Line 5729
	jmp	SHORT $LN11@stbi__tga_
$LN10@stbi__tga_:
; Line 5730
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN18@stbi__tga_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN18@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 1
$LN19@stbi__tga_:
	xor	r8d, r8d
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN11@stbi__tga_:
; Line 5732
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN13@stbi__tga_
; Line 5733
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5734
	xor	eax, eax
	jmp	SHORT $LN1@stbi__tga_
$LN13@stbi__tga_:
; Line 5736
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN14@stbi__tga_
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN14@stbi__tga_:
; Line 5737
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN15@stbi__tga_
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN15@stbi__tga_:
; Line 5738
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN16@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN16@stbi__tga_:
; Line 5739
	mov	eax, 1
$LN1@stbi__tga_:
; Line 5740
	add	rsp, 88					; 00000058H
	ret	0
stbi__tga_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_comp$ = 48
j$ = 52
i$ = 56
tga_width$ = 60
tga_height$ = 64
temp$1 = 68
temp$2 = 69
tga_palette_len$ = 72
tga_data$ = 80
tga_rgb16$ = 88
pal_idx$3 = 92
read_next_pixel$ = 96
tga_image_type$ = 100
tga_indexed$ = 104
raw_data$ = 108
RLE_count$ = 112
tga_inverted$ = 116
index1$4 = 120
index2$5 = 124
tga_palette$ = 128
tga_is_RLE$ = 136
tga_palette_bits$ = 140
tga_pixel$6 = 144
RLE_repeating$ = 152
tga_bits_per_pixel$ = 156
tv328 = 160
tga_y_origin$ = 164
tv192 = 168
tga_palette_start$ = 172
tv153 = 176
RLE_cmd$7 = 180
tga_x_origin$ = 184
row$8 = 188
tga_offset$ = 192
pal_entry$9 = 200
tv134 = 208
tv139 = 216
tv160 = 224
tv171 = 232
tv181 = 240
tv215 = 248
tv235 = 256
tv307 = 264
tga_row$10 = 272
$T11 = 288
$T12 = 320
$T13 = 352
$T14 = 384
$T15 = 416
$T16 = 448
$T17 = 480
$T18 = 512
$T19 = 544
$T20 = 576
s$ = 640
x$ = 648
y$ = 656
comp$ = 664
req_comp$ = 672
ri$ = 680
stbi__tga_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5794
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 616				; 00000268H
; Line 5796
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_offset$[rsp], eax
; Line 5797
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_indexed$[rsp], eax
; Line 5798
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5799
	mov	DWORD PTR tga_is_RLE$[rsp], 0
; Line 5800
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5801
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_palette_len$[rsp], eax
; Line 5802
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_palette_bits$[rsp], eax
; Line 5803
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_x_origin$[rsp], eax
; Line 5804
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_y_origin$[rsp], eax
; Line 5805
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_width$[rsp], eax
; Line 5806
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tga_height$[rsp], eax
; Line 5807
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5808
	mov	DWORD PTR tga_rgb16$[rsp], 0
; Line 5809
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5813
	mov	QWORD PTR tga_palette$[rsp], 0
; Line 5815
	lea	rax, QWORD PTR raw_data$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
; Line 5816
	mov	DWORD PTR RLE_count$[rsp], 0
; Line 5817
	mov	DWORD PTR RLE_repeating$[rsp], 0
; Line 5818
	mov	DWORD PTR read_next_pixel$[rsp], 1
; Line 5823
	cmp	DWORD PTR tga_height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN29@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG133939
	call	stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__tga_
	mov	QWORD PTR tv134[rsp], 0
	jmp	SHORT $LN63@stbi__tga_
$LN62@stbi__tga_:
	mov	QWORD PTR tv134[rsp], 0
$LN63@stbi__tga_:
	mov	rax, QWORD PTR tv134[rsp]
	jmp	$LN1@stbi__tga_
$LN29@stbi__tga_:
; Line 5824
	cmp	DWORD PTR tga_width$[rsp], 16777216	; 01000000H
	jle	SHORT $LN30@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG133941
	call	stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__tga_
	mov	QWORD PTR tv139[rsp], 0
	jmp	SHORT $LN65@stbi__tga_
$LN64@stbi__tga_:
	mov	QWORD PTR tv139[rsp], 0
$LN65@stbi__tga_:
	mov	rax, QWORD PTR tv139[rsp]
	jmp	$LN1@stbi__tga_
$LN30@stbi__tga_:
; Line 5827
	cmp	DWORD PTR tga_image_type$[rsp], 8
	jl	SHORT $LN31@stbi__tga_
; Line 5829
	mov	eax, DWORD PTR tga_image_type$[rsp]
	sub	eax, 8
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5830
	mov	DWORD PTR tga_is_RLE$[rsp], 1
$LN31@stbi__tga_:
; Line 5832
	mov	eax, DWORD PTR tga_inverted$[rsp]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5835
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	SHORT $LN32@stbi__tga_
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	xor	edx, edx
	mov	ecx, DWORD PTR tga_palette_bits$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
	jmp	SHORT $LN33@stbi__tga_
$LN32@stbi__tga_:
; Line 5836
	cmp	DWORD PTR tga_image_type$[rsp], 3
	jne	SHORT $LN66@stbi__tga_
	mov	DWORD PTR tv153[rsp], 1
	jmp	SHORT $LN67@stbi__tga_
$LN66@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 0
$LN67@stbi__tga_:
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN33@stbi__tga_:
; Line 5838
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN34@stbi__tga_
; Line 5839
	lea	rcx, OFFSET FLAT:$SG133946
	call	stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__tga_
	mov	QWORD PTR tv160[rsp], 0
	jmp	SHORT $LN69@stbi__tga_
$LN68@stbi__tga_:
	mov	QWORD PTR tv160[rsp], 0
$LN69@stbi__tga_:
	mov	rax, QWORD PTR tv160[rsp]
	jmp	$LN1@stbi__tga_
$LN34@stbi__tga_:
; Line 5842
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5843
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5844
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN35@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN35@stbi__tga_:
; Line 5846
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN36@stbi__tga_
; Line 5847
	lea	rcx, OFFSET FLAT:$SG133949
	call	stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__tga_
	mov	QWORD PTR tv171[rsp], 0
	jmp	SHORT $LN71@stbi__tga_
$LN70@stbi__tga_:
	mov	QWORD PTR tv171[rsp], 0
$LN71@stbi__tga_:
	mov	rax, QWORD PTR tv171[rsp]
	jmp	$LN1@stbi__tga_
$LN36@stbi__tga_:
; Line 5849
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR tga_data$[rsp], rax
; Line 5850
	cmp	QWORD PTR tga_data$[rsp], 0
	jne	SHORT $LN37@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG133951
	call	stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__tga_
	mov	QWORD PTR tv181[rsp], 0
	jmp	SHORT $LN73@stbi__tga_
$LN72@stbi__tga_:
	mov	QWORD PTR tv181[rsp], 0
$LN73@stbi__tga_:
	mov	rax, QWORD PTR tv181[rsp]
	jmp	$LN1@stbi__tga_
$LN37@stbi__tga_:
; Line 5853
	mov	edx, DWORD PTR tga_offset$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5855
	cmp	DWORD PTR tga_indexed$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN38@stbi__tga_
; Line 5856
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__tga_
$LN2@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__tga_:
	mov	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__tga_
; Line 5857
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	SHORT $LN74@stbi__tga_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	mov	DWORD PTR tv192[rsp], eax
	jmp	SHORT $LN75@stbi__tga_
$LN74@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv192[rsp], eax
$LN75@stbi__tga_:
	mov	eax, DWORD PTR tv192[rsp]
	mov	DWORD PTR row$8[rsp], eax
; Line 5858
	mov	eax, DWORD PTR row$8[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR tga_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_row$10[rsp], rax
; Line 5859
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_row$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
; Line 5860
	jmp	$LN2@stbi__tga_
$LN3@stbi__tga_:
; Line 5861
	jmp	$LN39@stbi__tga_
$LN38@stbi__tga_:
; Line 5863
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN40@stbi__tga_
; Line 5865
	cmp	DWORD PTR tga_palette_len$[rsp], 0
	jne	$LN41@stbi__tga_
; Line 5866
	lea	rax, OFFSET FLAT:$SG133956
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5866				; 000016eaH
	lea	r8, OFFSET FLAT:$SG133957
	mov	edx, 100				; 00000064H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccuserallocator_
; Line 5867
	lea	rcx, OFFSET FLAT:$SG133958
	call	stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__tga_
	mov	QWORD PTR tv215[rsp], 0
	jmp	SHORT $LN77@stbi__tga_
$LN76@stbi__tga_:
	mov	QWORD PTR tv215[rsp], 0
$LN77@stbi__tga_:
	mov	rax, QWORD PTR tv215[rsp]
	jmp	$LN1@stbi__tga_
$LN41@stbi__tga_:
; Line 5871
	mov	edx, DWORD PTR tga_palette_start$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5873
	xor	r8d, r8d
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	ecx, DWORD PTR tga_palette_len$[rsp]
	call	stbi__malloc_mad2
	mov	QWORD PTR tga_palette$[rsp], rax
; Line 5874
	cmp	QWORD PTR tga_palette$[rsp], 0
	jne	$LN42@stbi__tga_
; Line 5875
	lea	rax, OFFSET FLAT:$SG133960
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5875				; 000016f3H
	lea	r8, OFFSET FLAT:$SG133961
	mov	edx, 101				; 00000065H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccuserallocator_
; Line 5876
	lea	rcx, OFFSET FLAT:$SG133962
	call	stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__tga_
	mov	QWORD PTR tv235[rsp], 0
	jmp	SHORT $LN79@stbi__tga_
$LN78@stbi__tga_:
	mov	QWORD PTR tv235[rsp], 0
$LN79@stbi__tga_:
	mov	rax, QWORD PTR tv235[rsp]
	jmp	$LN1@stbi__tga_
$LN42@stbi__tga_:
; Line 5878
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	$LN43@stbi__tga_
; Line 5879
	mov	rax, QWORD PTR tga_palette$[rsp]
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5880
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN80@stbi__tga_
	mov	r8d, 5880				; 000016f8H
	lea	rdx, OFFSET FLAT:$SG133965
	lea	rcx, OFFSET FLAT:$SG133966
	call	_wassert
	xor	eax, eax
$LN80@stbi__tga_:
; Line 5881
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__tga_
$LN5@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__tga_
; Line 5882
	mov	rdx, QWORD PTR pal_entry$9[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_read_rgb16
; Line 5883
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR pal_entry$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5884
	jmp	SHORT $LN5@stbi__tga_
$LN6@stbi__tga_:
; Line 5885
	jmp	$LN44@stbi__tga_
$LN43@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_palette$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__getn
	test	eax, eax
	jne	$LN45@stbi__tga_
; Line 5886
	lea	rax, OFFSET FLAT:$SG133968
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5886				; 000016feH
	lea	r8, OFFSET FLAT:$SG133969
	mov	edx, 102				; 00000066H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_data$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccuserallocator_
; Line 5887
	lea	rax, OFFSET FLAT:$SG133970
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5887				; 000016ffH
	lea	r8, OFFSET FLAT:$SG133971
	mov	edx, 103				; 00000067H
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_palette$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
; Line 5888
	lea	rcx, OFFSET FLAT:$SG133972
	call	stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__tga_
	mov	QWORD PTR tv307[rsp], 0
	jmp	SHORT $LN82@stbi__tga_
$LN81@stbi__tga_:
	mov	QWORD PTR tv307[rsp], 0
$LN82@stbi__tga_:
	mov	rax, QWORD PTR tv307[rsp]
	jmp	$LN1@stbi__tga_
$LN45@stbi__tga_:
$LN44@stbi__tga_:
$LN40@stbi__tga_:
; Line 5892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__tga_
$LN8@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__tga_
; Line 5895
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	je	SHORT $LN46@stbi__tga_
; Line 5897
	cmp	DWORD PTR RLE_count$[rsp], 0
	jne	SHORT $LN48@stbi__tga_
; Line 5900
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR RLE_cmd$7[rsp], eax
; Line 5901
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	and	eax, 127				; 0000007fH
	inc	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5902
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	sar	eax, 7
	mov	DWORD PTR RLE_repeating$[rsp], eax
; Line 5903
	mov	DWORD PTR read_next_pixel$[rsp], 1
	jmp	SHORT $LN49@stbi__tga_
$LN48@stbi__tga_:
; Line 5904
	cmp	DWORD PTR RLE_repeating$[rsp], 0
	jne	SHORT $LN50@stbi__tga_
; Line 5906
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN50@stbi__tga_:
$LN49@stbi__tga_:
; Line 5908
	jmp	SHORT $LN47@stbi__tga_
$LN46@stbi__tga_:
; Line 5910
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN47@stbi__tga_:
; Line 5913
	cmp	DWORD PTR read_next_pixel$[rsp], 0
	je	$LN51@stbi__tga_
; Line 5916
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN52@stbi__tga_
; Line 5919
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	jne	SHORT $LN83@stbi__tga_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv328[rsp], eax
	jmp	SHORT $LN84@stbi__tga_
$LN83@stbi__tga_:
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tv328[rsp], eax
$LN84@stbi__tga_:
	mov	eax, DWORD PTR tv328[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5920
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR pal_idx$3[rsp], eax
	jl	SHORT $LN54@stbi__tga_
; Line 5922
	mov	DWORD PTR pal_idx$3[rsp], 0
$LN54@stbi__tga_:
; Line 5924
	mov	eax, DWORD PTR pal_idx$3[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5925
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__tga_
$LN11@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN12@stbi__tga_
; Line 5926
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR pal_idx$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR tga_palette$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5927
	jmp	SHORT $LN11@stbi__tga_
$LN12@stbi__tga_:
; Line 5928
	jmp	SHORT $LN53@stbi__tga_
$LN52@stbi__tga_:
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	SHORT $LN55@stbi__tga_
; Line 5929
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN85@stbi__tga_
	mov	r8d, 5929				; 00001729H
	lea	rdx, OFFSET FLAT:$SG133984
	lea	rcx, OFFSET FLAT:$SG133985
	call	_wassert
	xor	eax, eax
$LN85@stbi__tga_:
; Line 5930
	lea	rdx, QWORD PTR raw_data$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__tga_read_rgb16
; Line 5931
	jmp	SHORT $LN56@stbi__tga_
$LN55@stbi__tga_:
; Line 5933
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN16@stbi__tga_
$LN14@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN16@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN15@stbi__tga_
; Line 5934
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5935
	jmp	SHORT $LN14@stbi__tga_
$LN15@stbi__tga_:
$LN56@stbi__tga_:
$LN53@stbi__tga_:
; Line 5938
	mov	DWORD PTR read_next_pixel$[rsp], 0
$LN51@stbi__tga_:
; Line 5942
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN17@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN18@stbi__tga_
; Line 5943
	movsxd	rax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR tga_comp$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR raw_data$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN17@stbi__tga_
$LN18@stbi__tga_:
; Line 5946
	mov	eax, DWORD PTR RLE_count$[rsp]
	dec	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5947
	jmp	$LN8@stbi__tga_
$LN9@stbi__tga_:
; Line 5949
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	$LN57@stbi__tga_
; Line 5951
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN22@stbi__tga_
$LN20@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN22@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	shl	eax, 1
	cmp	eax, DWORD PTR tga_height$[rsp]
	jge	$LN21@stbi__tga_
; Line 5953
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index1$4[rsp], eax
; Line 5954
	mov	eax, DWORD PTR tga_height$[rsp]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index2$5[rsp], eax
; Line 5955
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN25@stbi__tga_
$LN23@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__tga_:
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN24@stbi__tga_
; Line 5957
	movsxd	rax, DWORD PTR index1$4[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$2[rsp], al
; Line 5958
	movsxd	rax, DWORD PTR index2$5[rsp]
	movsxd	rcx, DWORD PTR index1$4[rsp]
	mov	rdx, QWORD PTR tga_data$[rsp]
	mov	rdi, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5959
	movsxd	rax, DWORD PTR index2$5[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	edx, BYTE PTR temp$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5960
	mov	eax, DWORD PTR index1$4[rsp]
	inc	eax
	mov	DWORD PTR index1$4[rsp], eax
; Line 5961
	mov	eax, DWORD PTR index2$5[rsp]
	inc	eax
	mov	DWORD PTR index2$5[rsp], eax
; Line 5962
	jmp	SHORT $LN23@stbi__tga_
$LN24@stbi__tga_:
; Line 5963
	jmp	$LN20@stbi__tga_
$LN21@stbi__tga_:
$LN57@stbi__tga_:
; Line 5966
	cmp	QWORD PTR tga_palette$[rsp], 0
	je	SHORT $LN58@stbi__tga_
; Line 5968
	lea	rax, OFFSET FLAT:$SG133988
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5968				; 00001750H
	lea	r8, OFFSET FLAT:$SG133989
	mov	edx, 104				; 00000068H
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tga_palette$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccuserallocator_
$LN58@stbi__tga_:
$LN39@stbi__tga_:
; Line 5973
	cmp	DWORD PTR tga_comp$[rsp], 3
	jl	$LN59@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN59@stbi__tga_
; Line 5975
	mov	rax, QWORD PTR tga_data$[rsp]
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5976
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__tga_
$LN26@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN27@stbi__tga_
; Line 5978
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$1[rsp], al
; Line 5979
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tga_pixel$6[rsp]
	mov	rdi, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5980
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	edx, BYTE PTR temp$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5981
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5982
	jmp	$LN26@stbi__tga_
$LN27@stbi__tga_:
$LN59@stbi__tga_:
; Line 5986
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN60@stbi__tga_
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN60@stbi__tga_
; Line 5987
	mov	eax, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tga_width$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR tga_data$[rsp], rax
$LN60@stbi__tga_:
; Line 5991
	mov	DWORD PTR tga_y_origin$[rsp], 0
	mov	eax, DWORD PTR tga_y_origin$[rsp]
	mov	DWORD PTR tga_x_origin$[rsp], eax
	mov	eax, DWORD PTR tga_x_origin$[rsp]
	mov	DWORD PTR tga_palette_bits$[rsp], eax
	mov	eax, DWORD PTR tga_palette_bits$[rsp]
	mov	DWORD PTR tga_palette_len$[rsp], eax
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5995
	mov	rax, QWORD PTR tga_data$[rsp]
$LN1@stbi__tga_:
; Line 5996
	add	rsp, 616				; 00000268H
	pop	rdi
	pop	rsi
	ret	0
stbi__tga_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tga_color_type$ = 36
res$ = 40
s$ = 64
stbi__tga_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5743
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5744
	mov	DWORD PTR res$[rsp], 0
; Line 5746
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
; Line 5747
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_color_type$[rsp], eax
; Line 5748
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
	jmp	$errorEnd$13
$LN2@stbi__tga_:
; Line 5749
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5750
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN3@stbi__tga_
; Line 5751
	cmp	DWORD PTR sz$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 9
	je	SHORT $LN5@stbi__tga_
	jmp	$errorEnd$13
$LN5@stbi__tga_:
; Line 5752
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5753
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5754
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
	jmp	$errorEnd$13
$LN6@stbi__tga_:
; Line 5755
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5756
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5757
	cmp	DWORD PTR sz$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 11
	je	SHORT $LN7@stbi__tga_
	jmp	$errorEnd$13
$LN7@stbi__tga_:
; Line 5758
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
$LN4@stbi__tga_:
; Line 5760
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN8@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN8@stbi__tga_:
; Line 5761
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN9@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN9@stbi__tga_:
; Line 5762
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5763
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN10@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN10@stbi__tga_:
; Line 5764
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN11@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $errorEnd$13
$LN11@stbi__tga_:
; Line 5766
	mov	DWORD PTR res$[rsp], 1
$errorEnd$13:
; Line 5769
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5770
	mov	eax, DWORD PTR res$[rsp]
; Line 5771
	add	rsp, 56					; 00000038H
	ret	0
stbi__tga_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
p$ = 40
info$ = 48
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
stbi__bmp_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7258
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7262
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 7263
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_parse_header
	mov	QWORD PTR p$[rsp], rax
; Line 7264
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi__bmp_
; Line 7265
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 7266
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 7268
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__bmp_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN3@stbi__bmp_:
; Line 7269
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__bmp_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__bmp_:
; Line 7270
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__bmp_
; Line 7271
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN6@stbi__bmp_
	cmp	DWORD PTR info$[rsp+24], -16777216	; ff000000H
	jne	SHORT $LN6@stbi__bmp_
; Line 7272
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 7274
	cmp	DWORD PTR info$[rsp+24], 0
	je	SHORT $LN9@stbi__bmp_
	mov	DWORD PTR tv77[rsp], 4
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
	mov	DWORD PTR tv77[rsp], 3
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 7276
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 7277
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
stbi__bmp_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
z$1 = 52
z$2 = 56
j$ = 60
out$ = 64
target$ = 72
a$3 = 76
v$4 = 80
ma$ = 84
t$5 = 88
psize$ = 92
width$ = 96
mr$ = 100
mg$ = 104
mb$ = 108
bit_offset$6 = 112
easy$7 = 116
all_a$ = 120
v$8 = 124
pad$ = 128
color$9 = 132
rcount$10 = 136
gcount$11 = 140
bcount$12 = 144
acount$13 = 148
tv178 = 152
tv255 = 156
v$14 = 160
v2$15 = 164
tv390 = 168
tv527 = 172
tv544 = 176
rshift$16 = 180
gshift$17 = 184
bshift$18 = 188
ashift$19 = 192
tv584 = 196
a$20 = 200
tv70 = 204
flip_vertically$ = 208
bpp$21 = 212
tv80 = 216
tv86 = 224
tv172 = 232
tv193 = 240
tv205 = 248
tv221 = 256
tv282 = 264
tv459 = 272
tv496 = 280
p1$22 = 288
p2$23 = 296
$T24 = 304
$T25 = 336
$T26 = 368
$T27 = 400
$T28 = 432
$T29 = 464
$T30 = 496
$T31 = 528
info$ = 560
pal$ = 608
__$ArrayPad$ = 1632
s$ = 1680
x$ = 1688
y$ = 1696
comp$ = 1704
req_comp$ = 1712
ri$ = 1720
stbi__bmp_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5468
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1656				; 00000678H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5470
	mov	DWORD PTR mr$[rsp], 0
	mov	DWORD PTR mg$[rsp], 0
	mov	DWORD PTR mb$[rsp], 0
	mov	DWORD PTR ma$[rsp], 0
; Line 5472
	mov	DWORD PTR psize$[rsp], 0
; Line 5477
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 5478
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_parse_header
	test	rax, rax
	jne	SHORT $LN35@stbi__bmp_
; Line 5479
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN35@stbi__bmp_:
; Line 5481
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN93@stbi__bmp_
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN94@stbi__bmp_
$LN93@stbi__bmp_:
	mov	DWORD PTR tv70[rsp], 0
$LN94@stbi__bmp_:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR flip_vertically$[rsp], eax
; Line 5482
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	abs
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5484
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN36@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133664
	call	stbi__err
	test	eax, eax
	je	SHORT $LN95@stbi__bmp_
	mov	QWORD PTR tv80[rsp], 0
	jmp	SHORT $LN96@stbi__bmp_
$LN95@stbi__bmp_:
	mov	QWORD PTR tv80[rsp], 0
$LN96@stbi__bmp_:
	mov	rax, QWORD PTR tv80[rsp]
	jmp	$LN1@stbi__bmp_
$LN36@stbi__bmp_:
; Line 5485
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN37@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133666
	call	stbi__err
	test	eax, eax
	je	SHORT $LN97@stbi__bmp_
	mov	QWORD PTR tv86[rsp], 0
	jmp	SHORT $LN98@stbi__bmp_
$LN97@stbi__bmp_:
	mov	QWORD PTR tv86[rsp], 0
$LN98@stbi__bmp_:
	mov	rax, QWORD PTR tv86[rsp]
	jmp	$LN1@stbi__bmp_
$LN37@stbi__bmp_:
; Line 5487
	mov	eax, DWORD PTR info$[rsp+12]
	mov	DWORD PTR mr$[rsp], eax
; Line 5488
	mov	eax, DWORD PTR info$[rsp+16]
	mov	DWORD PTR mg$[rsp], eax
; Line 5489
	mov	eax, DWORD PTR info$[rsp+20]
	mov	DWORD PTR mb$[rsp], eax
; Line 5490
	mov	eax, DWORD PTR info$[rsp+24]
	mov	DWORD PTR ma$[rsp], eax
; Line 5491
	mov	eax, DWORD PTR info$[rsp+28]
	mov	DWORD PTR all_a$[rsp], eax
; Line 5493
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN38@stbi__bmp_
; Line 5494
	cmp	DWORD PTR info$[rsp], 24
	jge	SHORT $LN40@stbi__bmp_
; Line 5495
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 24
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR psize$[rsp], eax
$LN40@stbi__bmp_:
; Line 5496
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
; Line 5497
	cmp	DWORD PTR info$[rsp], 16
	jge	SHORT $LN41@stbi__bmp_
; Line 5498
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	sar	eax, 2
	mov	DWORD PTR psize$[rsp], eax
$LN41@stbi__bmp_:
$LN39@stbi__bmp_:
; Line 5500
	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN42@stbi__bmp_
; Line 5501
	movsxd	rax, DWORD PTR info$[rsp+4]
	mov	rcx, QWORD PTR s$[rsp]
	movsxd	rcx, DWORD PTR [rcx+184]
	mov	rdx, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [r8+208]
	mov	rdx, QWORD PTR [rdx+192]
	sub	rdx, r8
	add	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN43@stbi__bmp_
; Line 5502
	lea	rcx, OFFSET FLAT:$SG133673
	call	stbi__err
	test	eax, eax
	je	SHORT $LN99@stbi__bmp_
	mov	QWORD PTR tv172[rsp], 0
	jmp	SHORT $LN100@stbi__bmp_
$LN99@stbi__bmp_:
	mov	QWORD PTR tv172[rsp], 0
$LN100@stbi__bmp_:
	mov	rax, QWORD PTR tv172[rsp]
	jmp	$LN1@stbi__bmp_
$LN43@stbi__bmp_:
$LN42@stbi__bmp_:
; Line 5506
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN44@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN44@stbi__bmp_
; Line 5507
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 3
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
; Line 5509
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN101@stbi__bmp_
	mov	DWORD PTR tv178[rsp], 4
	jmp	SHORT $LN102@stbi__bmp_
$LN101@stbi__bmp_:
	mov	DWORD PTR tv178[rsp], 3
$LN102@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv178[rsp]
	mov	DWORD PTR [rax+8], ecx
$LN45@stbi__bmp_:
; Line 5510
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN46@stbi__bmp_
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN46@stbi__bmp_
; Line 5511
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR target$[rsp], eax
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
; Line 5513
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR target$[rsp], eax
$LN47@stbi__bmp_:
; Line 5516
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN48@stbi__bmp_
; Line 5517
	lea	rcx, OFFSET FLAT:$SG133679
	call	stbi__err
	test	eax, eax
	je	SHORT $LN103@stbi__bmp_
	mov	QWORD PTR tv193[rsp], 0
	jmp	SHORT $LN104@stbi__bmp_
$LN103@stbi__bmp_:
	mov	QWORD PTR tv193[rsp], 0
$LN104@stbi__bmp_:
	mov	rax, QWORD PTR tv193[rsp]
	jmp	$LN1@stbi__bmp_
$LN48@stbi__bmp_:
; Line 5519
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 5520
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN49@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG133681
	call	stbi__err
	test	eax, eax
	je	SHORT $LN105@stbi__bmp_
	mov	QWORD PTR tv205[rsp], 0
	jmp	SHORT $LN106@stbi__bmp_
$LN105@stbi__bmp_:
	mov	QWORD PTR tv205[rsp], 0
$LN106@stbi__bmp_:
	mov	rax, QWORD PTR tv205[rsp]
	jmp	$LN1@stbi__bmp_
$LN49@stbi__bmp_:
; Line 5521
	cmp	DWORD PTR info$[rsp], 16
	jge	$LN50@stbi__bmp_
; Line 5522
	mov	DWORD PTR z$1[rsp], 0
; Line 5523
	cmp	DWORD PTR psize$[rsp], 0
	je	SHORT $LN53@stbi__bmp_
	cmp	DWORD PTR psize$[rsp], 256		; 00000100H
	jle	$LN52@stbi__bmp_
$LN53@stbi__bmp_:
	lea	rax, OFFSET FLAT:$SG133686
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5523				; 00001593H
	lea	r8, OFFSET FLAT:$SG133687
	mov	edx, 96					; 00000060H
	lea	rcx, QWORD PTR $T28[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T24[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG133688
	call	stbi__err
	test	eax, eax
	je	SHORT $LN107@stbi__bmp_
	mov	QWORD PTR tv221[rsp], 0
	jmp	SHORT $LN108@stbi__bmp_
$LN107@stbi__bmp_:
	mov	QWORD PTR tv221[rsp], 0
$LN108@stbi__bmp_:
	mov	rax, QWORD PTR tv221[rsp]
	jmp	$LN1@stbi__bmp_
$LN52@stbi__bmp_:
; Line 5524
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__bmp_:
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__bmp_
; Line 5525
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 5526
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 5527
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 5528
	cmp	DWORD PTR info$[rsp+8], 12
	je	SHORT $LN54@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
$LN54@stbi__bmp_:
; Line 5529
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 5530
	jmp	$LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5531
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN109@stbi__bmp_
	mov	DWORD PTR tv255[rsp], 3
	jmp	SHORT $LN110@stbi__bmp_
$LN109@stbi__bmp_:
	mov	DWORD PTR tv255[rsp], 4
$LN110@stbi__bmp_:
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	ecx, DWORD PTR psize$[rsp]
	imul	ecx, DWORD PTR tv255[rsp]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5532
	cmp	DWORD PTR info$[rsp], 1
	jne	SHORT $LN55@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR width$[rsp], eax
	jmp	$LN56@stbi__bmp_
$LN55@stbi__bmp_:
; Line 5533
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN57@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	shr	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	$LN58@stbi__bmp_
$LN57@stbi__bmp_:
; Line 5534
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN59@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR width$[rsp], eax
	jmp	$LN60@stbi__bmp_
$LN59@stbi__bmp_:
; Line 5535
	lea	rax, OFFSET FLAT:$SG133696
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5535				; 0000159fH
	lea	r8, OFFSET FLAT:$SG133697
	mov	edx, 97					; 00000061H
	lea	rcx, QWORD PTR $T29[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T25[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG133698
	call	stbi__err
	test	eax, eax
	je	SHORT $LN111@stbi__bmp_
	mov	QWORD PTR tv282[rsp], 0
	jmp	SHORT $LN112@stbi__bmp_
$LN111@stbi__bmp_:
	mov	QWORD PTR tv282[rsp], 0
$LN112@stbi__bmp_:
	mov	rax, QWORD PTR tv282[rsp]
	jmp	$LN1@stbi__bmp_
$LN60@stbi__bmp_:
$LN58@stbi__bmp_:
$LN56@stbi__bmp_:
; Line 5536
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5537
	cmp	DWORD PTR info$[rsp], 1
	jne	$LN61@stbi__bmp_
; Line 5538
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__bmp_
$LN5@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbi__bmp_
; Line 5539
	mov	DWORD PTR bit_offset$6[rsp], 7
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
; Line 5540
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__bmp_
$LN8@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__bmp_
; Line 5541
	mov	eax, DWORD PTR bit_offset$6[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$14[rsp]
	sar	eax, cl
	and	eax, 1
	mov	DWORD PTR color$9[rsp], eax
; Line 5542
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5543
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5544
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5545
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN63@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN63@stbi__bmp_:
; Line 5546
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN64@stbi__bmp_
	jmp	SHORT $LN9@stbi__bmp_
$LN64@stbi__bmp_:
; Line 5547
	mov	eax, DWORD PTR bit_offset$6[rsp]
	dec	eax
	mov	DWORD PTR bit_offset$6[rsp], eax
	cmp	DWORD PTR bit_offset$6[rsp], 0
	jge	SHORT $LN65@stbi__bmp_
; Line 5548
	mov	DWORD PTR bit_offset$6[rsp], 7
; Line 5549
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
$LN65@stbi__bmp_:
; Line 5551
	jmp	$LN8@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5552
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5553
	jmp	$LN5@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5554
	jmp	$LN62@stbi__bmp_
$LN61@stbi__bmp_:
; Line 5555
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__bmp_
$LN11@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stbi__bmp_
; Line 5556
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__bmp_
$LN14@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__bmp_
; Line 5557
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$4[rsp], eax
	mov	DWORD PTR v2$15[rsp], 0
; Line 5558
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN66@stbi__bmp_
; Line 5559
	mov	eax, DWORD PTR v$4[rsp]
	and	eax, 15
	mov	DWORD PTR v2$15[rsp], eax
; Line 5560
	mov	eax, DWORD PTR v$4[rsp]
	sar	eax, 4
	mov	DWORD PTR v$4[rsp], eax
$LN66@stbi__bmp_:
; Line 5562
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5563
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5564
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5565
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN67@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN67@stbi__bmp_:
; Line 5566
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN68@stbi__bmp_
	jmp	$LN15@stbi__bmp_
$LN68@stbi__bmp_:
; Line 5567
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN113@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv390[rsp], eax
	jmp	SHORT $LN114@stbi__bmp_
$LN113@stbi__bmp_:
	mov	eax, DWORD PTR v2$15[rsp]
	mov	DWORD PTR tv390[rsp], eax
$LN114@stbi__bmp_:
	mov	eax, DWORD PTR tv390[rsp]
	mov	DWORD PTR v$4[rsp], eax
; Line 5568
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5569
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5570
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	rdi, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [rdi+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5571
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN69@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN69@stbi__bmp_:
; Line 5572
	jmp	$LN14@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5573
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5574
	jmp	$LN11@stbi__bmp_
$LN12@stbi__bmp_:
$LN62@stbi__bmp_:
; Line 5576
	jmp	$LN51@stbi__bmp_
$LN50@stbi__bmp_:
; Line 5577
	mov	DWORD PTR rshift$16[rsp], 0
	mov	DWORD PTR gshift$17[rsp], 0
	mov	DWORD PTR bshift$18[rsp], 0
	mov	DWORD PTR ashift$19[rsp], 0
	mov	DWORD PTR rcount$10[rsp], 0
	mov	DWORD PTR gcount$11[rsp], 0
	mov	DWORD PTR bcount$12[rsp], 0
	mov	DWORD PTR acount$13[rsp], 0
; Line 5578
	mov	DWORD PTR z$2[rsp], 0
; Line 5579
	mov	DWORD PTR easy$7[rsp], 0
; Line 5580
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5581
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN70@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax], 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN71@stbi__bmp_
$LN70@stbi__bmp_:
; Line 5582
	cmp	DWORD PTR info$[rsp], 16
	jne	SHORT $LN72@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN73@stbi__bmp_
$LN72@stbi__bmp_:
; Line 5583
	mov	DWORD PTR width$[rsp], 0
$LN73@stbi__bmp_:
$LN71@stbi__bmp_:
; Line 5584
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5585
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN74@stbi__bmp_
; Line 5586
	mov	DWORD PTR easy$7[rsp], 1
	jmp	SHORT $LN75@stbi__bmp_
$LN74@stbi__bmp_:
; Line 5587
	cmp	DWORD PTR info$[rsp], 32		; 00000020H
	jne	SHORT $LN76@stbi__bmp_
; Line 5588
	cmp	DWORD PTR mb$[rsp], 255			; 000000ffH
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 65280		; 0000ff00H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mr$[rsp], 16711680		; 00ff0000H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN77@stbi__bmp_
; Line 5589
	mov	DWORD PTR easy$7[rsp], 2
$LN77@stbi__bmp_:
$LN76@stbi__bmp_:
$LN75@stbi__bmp_:
; Line 5591
	cmp	DWORD PTR easy$7[rsp], 0
	jne	$LN78@stbi__bmp_
; Line 5592
	cmp	DWORD PTR mr$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mb$[rsp], 0
	jne	$LN79@stbi__bmp_
$LN80@stbi__bmp_:
	lea	rax, OFFSET FLAT:$SG133719
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5592				; 000015d8H
	lea	r8, OFFSET FLAT:$SG133720
	mov	edx, 98					; 00000062H
	lea	rcx, QWORD PTR $T30[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG133721
	call	stbi__err
	test	eax, eax
	je	SHORT $LN115@stbi__bmp_
	mov	QWORD PTR tv459[rsp], 0
	jmp	SHORT $LN116@stbi__bmp_
$LN115@stbi__bmp_:
	mov	QWORD PTR tv459[rsp], 0
$LN116@stbi__bmp_:
	mov	rax, QWORD PTR tv459[rsp]
	jmp	$LN1@stbi__bmp_
$LN79@stbi__bmp_:
; Line 5594
	mov	ecx, DWORD PTR mr$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR rshift$16[rsp], eax
	mov	ecx, DWORD PTR mr$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR rcount$10[rsp], eax
; Line 5595
	mov	ecx, DWORD PTR mg$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR gshift$17[rsp], eax
	mov	ecx, DWORD PTR mg$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR gcount$11[rsp], eax
; Line 5596
	mov	ecx, DWORD PTR mb$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR bshift$18[rsp], eax
	mov	ecx, DWORD PTR mb$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR bcount$12[rsp], eax
; Line 5597
	mov	ecx, DWORD PTR ma$[rsp]
	call	stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR ashift$19[rsp], eax
	mov	ecx, DWORD PTR ma$[rsp]
	call	stbi__bitcount
	mov	DWORD PTR acount$13[rsp], eax
; Line 5598
	cmp	DWORD PTR rcount$10[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR gcount$11[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR bcount$12[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR acount$13[rsp], 8
	jle	$LN81@stbi__bmp_
$LN82@stbi__bmp_:
	lea	rax, OFFSET FLAT:$SG133724
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 5598				; 000015deH
	lea	r8, OFFSET FLAT:$SG133725
	mov	edx, 99					; 00000063H
	lea	rcx, QWORD PTR $T31[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR out$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T27[rsp]
	call	ccuserallocator_
	lea	rcx, OFFSET FLAT:$SG133726
	call	stbi__err
	test	eax, eax
	je	SHORT $LN117@stbi__bmp_
	mov	QWORD PTR tv496[rsp], 0
	jmp	SHORT $LN118@stbi__bmp_
$LN117@stbi__bmp_:
	mov	QWORD PTR tv496[rsp], 0
$LN118@stbi__bmp_:
	mov	rax, QWORD PTR tv496[rsp]
	jmp	$LN1@stbi__bmp_
$LN81@stbi__bmp_:
$LN78@stbi__bmp_:
; Line 5600
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__bmp_
$LN17@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN18@stbi__bmp_
; Line 5601
	cmp	DWORD PTR easy$7[rsp], 0
	je	$LN83@stbi__bmp_
; Line 5602
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__bmp_
$LN20@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN21@stbi__bmp_
; Line 5604
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5605
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5606
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5607
	mov	eax, DWORD PTR z$2[rsp]
	add	eax, 3
	mov	DWORD PTR z$2[rsp], eax
; Line 5608
	cmp	DWORD PTR easy$7[rsp], 2
	jne	SHORT $LN119@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv527[rsp], eax
	jmp	SHORT $LN120@stbi__bmp_
$LN119@stbi__bmp_:
	mov	DWORD PTR tv527[rsp], 255		; 000000ffH
$LN120@stbi__bmp_:
	movzx	eax, BYTE PTR tv527[rsp]
	mov	BYTE PTR a$3[rsp], al
; Line 5609
	movzx	eax, BYTE PTR a$3[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5610
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN85@stbi__bmp_
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR a$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN85@stbi__bmp_:
; Line 5611
	jmp	$LN20@stbi__bmp_
$LN21@stbi__bmp_:
; Line 5612
	jmp	$LN84@stbi__bmp_
$LN83@stbi__bmp_:
; Line 5613
	mov	eax, DWORD PTR info$[rsp]
	mov	DWORD PTR bpp$21[rsp], eax
; Line 5614
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__bmp_
$LN23@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN24@stbi__bmp_
; Line 5615
	cmp	DWORD PTR bpp$21[rsp], 16
	jne	SHORT $LN121@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get16le
	mov	DWORD PTR tv544[rsp], eax
	jmp	SHORT $LN122@stbi__bmp_
$LN121@stbi__bmp_:
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__get32le
	mov	DWORD PTR tv544[rsp], eax
$LN122@stbi__bmp_:
	mov	eax, DWORD PTR tv544[rsp]
	mov	DWORD PTR v$8[rsp], eax
; Line 5617
	mov	eax, DWORD PTR mr$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR rcount$10[rsp]
	mov	edx, DWORD PTR rshift$16[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5618
	mov	eax, DWORD PTR mg$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR gcount$11[rsp]
	mov	edx, DWORD PTR gshift$17[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5619
	mov	eax, DWORD PTR mb$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR bcount$12[rsp]
	mov	edx, DWORD PTR bshift$18[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5620
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN123@stbi__bmp_
	mov	eax, DWORD PTR ma$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR acount$13[rsp]
	mov	edx, DWORD PTR ashift$19[rsp]
	mov	ecx, eax
	call	stbi__shiftsigned
	mov	DWORD PTR tv584[rsp], eax
	jmp	SHORT $LN124@stbi__bmp_
$LN123@stbi__bmp_:
	mov	DWORD PTR tv584[rsp], 255		; 000000ffH
$LN124@stbi__bmp_:
	mov	eax, DWORD PTR tv584[rsp]
	mov	DWORD PTR a$20[rsp], eax
; Line 5621
	mov	eax, DWORD PTR a$20[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5622
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN86@stbi__bmp_
	mov	eax, DWORD PTR a$20[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN86@stbi__bmp_:
; Line 5623
	jmp	$LN23@stbi__bmp_
$LN24@stbi__bmp_:
$LN84@stbi__bmp_:
; Line 5625
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__skip
; Line 5626
	jmp	$LN17@stbi__bmp_
$LN18@stbi__bmp_:
$LN51@stbi__bmp_:
; Line 5630
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN87@stbi__bmp_
	cmp	DWORD PTR all_a$[rsp], 0
	jne	SHORT $LN87@stbi__bmp_
; Line 5631
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN28@stbi__bmp_
$LN26@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__bmp_:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN27@stbi__bmp_
; Line 5632
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN26@stbi__bmp_
$LN27@stbi__bmp_:
$LN87@stbi__bmp_:
; Line 5634
	cmp	DWORD PTR flip_vertically$[rsp], 0
	je	$LN88@stbi__bmp_
; Line 5636
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN31@stbi__bmp_
$LN29@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN31@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sar	eax, 1
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN30@stbi__bmp_
; Line 5637
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p1$22[rsp], rax
; Line 5638
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx]
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p2$23[rsp], rax
; Line 5639
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi__bmp_
$LN32@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi__bmp_
; Line 5640
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p1$22[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p1$22[rsp]
	mov	rdi, QWORD PTR p2$23[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p2$23[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5641
	jmp	SHORT $LN32@stbi__bmp_
$LN33@stbi__bmp_:
; Line 5642
	jmp	$LN29@stbi__bmp_
$LN30@stbi__bmp_:
$LN88@stbi__bmp_:
; Line 5645
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN89@stbi__bmp_
	mov	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN89@stbi__bmp_
; Line 5646
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR target$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 5647
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN90@stbi__bmp_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__bmp_
$LN90@stbi__bmp_:
$LN89@stbi__bmp_:
; Line 5650
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 5651
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 5652
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN91@stbi__bmp_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN91@stbi__bmp_:
; Line 5653
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__bmp_:
; Line 5654
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1656				; 00000678H
	pop	rdi
	pop	rsi
	ret	0
stbi__bmp_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__bmp_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5298
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5299
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__bmp_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 5300
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5301
	mov	eax, DWORD PTR r$[rsp]
; Line 5302
	add	rsp, 56					; 00000038H
	ret	0
stbi__bmp_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
stbi__png_is16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5266
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5268
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5269
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR p$[rsp]
	call	stbi__png_info_raw
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5270
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5271
	cmp	DWORD PTR p$[rsp+32], 16
	je	SHORT $LN3@stbi__png_
; Line 5272
	mov	rcx, QWORD PTR p$[rsp]
	call	stbi__rewind
; Line 5273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN3@stbi__png_:
; Line 5275
	mov	eax, 1
$LN1@stbi__png_:
; Line 5276
	add	rsp, 88					; 00000058H
	ret	0
stbi__png_is16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
stbi__png_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5259
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5261
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5262
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	stbi__png_info_raw
; Line 5263
	add	rsp, 88					; 00000058H
	ret	0
stbi__png_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
stbi__png_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5232
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5234
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5235
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	stbi__do_png
; Line 5236
	add	rsp, 104				; 00000068H
	ret	0
stbi__png_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
stbi__png_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 5239
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5241
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__check_png_header
	mov	DWORD PTR r$[rsp], eax
; Line 5242
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 5243
	mov	eax, DWORD PTR r$[rsp]
; Line 5244
	add	rsp, 56					; 00000038H
	ret	0
stbi__png_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
j$ = 56
$T1 = 64
$T2 = 96
s$ = 160
x$ = 168
y$ = 176
comp$ = 184
stbi__jpeg_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4013
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 4015
	mov	ecx, 18568				; 00004888H
	call	stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 4016
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG132146
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4017
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4018
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__jpeg_info_raw
	mov	DWORD PTR result$[rsp], eax
; Line 4019
	lea	rax, OFFSET FLAT:$SG132147
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4019				; 00000fb3H
	lea	r8, OFFSET FLAT:$SG132148
	mov	edx, 82					; 00000052H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR j$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4020
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 4021
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbi__jpeg_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
tv70 = 56
result$ = 64
$T1 = 80
$T2 = 112
s$ = 176
x$ = 184
y$ = 192
comp$ = 200
req_comp$ = 208
ri$ = 216
stbi__jpeg_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3975
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 3977
	mov	ecx, 18568				; 00004888H
	call	stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3978
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG132104
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi__jpeg
	mov	QWORD PTR tv70[rsp], 0
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
	mov	QWORD PTR tv70[rsp], 0
$LN5@stbi__jpeg:
	mov	rax, QWORD PTR tv70[rsp]
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3980
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3981
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__setup_jpeg
; Line 3982
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	load_jpeg_image
	mov	QWORD PTR result$[rsp], rax
; Line 3983
	lea	rax, OFFSET FLAT:$SG132105
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3983				; 00000f8fH
	lea	r8, OFFSET FLAT:$SG132106
	mov	edx, 80					; 00000050H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR j$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3984
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 3985
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
stbi__jpeg_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 48
j$ = 56
$T1 = 64
$T2 = 96
s$ = 160
stbi__jpeg_test PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 3988
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 3990
	mov	ecx, 18568				; 00004888H
	call	stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3991
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG132115
	call	stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3992
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3993
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__setup_jpeg
; Line 3994
	mov	edx, 1
	mov	rcx, QWORD PTR j$[rsp]
	call	stbi__decode_jpeg_header
	mov	DWORD PTR r$[rsp], eax
; Line 3995
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__rewind
; Line 3996
	lea	rax, OFFSET FLAT:$SG132116
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 3996				; 00000f9cH
	lea	r8, OFFSET FLAT:$SG132117
	mov	edx, 81					; 00000051H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR j$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 3997
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__jpeg:
; Line 3998
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
stbi__jpeg_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
stbi__rewind PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 884
	mov	QWORD PTR [rsp+8], rcx
; Line 888
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	QWORD PTR [rax+192], rcx
; Line 889
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rax+200], rcx
; Line 890
	ret	0
stbi__rewind ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
f$ = 56
stbi__start_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 875
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 876
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:stbi__stdio_callbacks
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 877
	add	rsp, 40					; 00000028H
	ret	0
stbi__start_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
user$ = 64
stbi__stdio_eof PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 863
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 864
	mov	rcx, QWORD PTR user$[rsp]
	call	feof
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	rcx, QWORD PTR user$[rsp]
	call	ferror
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@stbi__stdi
$LN3@stbi__stdi:
	mov	DWORD PTR tv70[rsp], 1
$LN4@stbi__stdi:
	mov	eax, DWORD PTR tv70[rsp]
; Line 865
	add	rsp, 56					; 00000038H
	ret	0
stbi__stdio_eof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ch$ = 32
user$ = 64
n$ = 72
stbi__stdio_skip PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 853
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 855
	mov	r8d, 1
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	call	fseek
; Line 856
	mov	rcx, QWORD PTR user$[rsp]
	call	fgetc
	mov	DWORD PTR ch$[rsp], eax
; Line 857
	cmp	DWORD PTR ch$[rsp], -1
	je	SHORT $LN2@stbi__stdi
; Line 858
	mov	rdx, QWORD PTR user$[rsp]
	mov	ecx, DWORD PTR ch$[rsp]
	call	ungetc
$LN2@stbi__stdi:
; Line 860
	add	rsp, 56					; 00000038H
	ret	0
stbi__stdio_skip ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
user$ = 48
data$ = 56
size$ = 64
stbi__stdio_read PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 848
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 849
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR user$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	fread
; Line 850
	add	rsp, 40					; 00000028H
	ret	0
stbi__stdio_read ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
s$ = 80
c$ = 88
user$ = 96
stbi__start_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 834
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 835
	mov	rax, QWORD PTR s$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR c$[rsp]
	mov	ecx, 24
	rep movsb
; Line 836
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 837
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+52], 128			; 00000080H
; Line 838
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 1
; Line 839
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 840
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv72[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 841
	mov	rcx, QWORD PTR s$[rsp]
	call	stbi__refill_buffer
; Line 842
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+216], rcx
; Line 843
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
stbi__start_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 0
s$ = 32
buffer$ = 40
len$ = 48
stbi__start_mem PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 824
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 825
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 826
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 827
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 828
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 829
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv72[rsp], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+216], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+200], rcx
; Line 830
	add	rsp, 24
	ret	0
stbi__start_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
stbi__refill_buffer PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1578
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1579
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+52]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR s$[rsp]
	call	QWORD PTR [rax+16]
	mov	DWORD PTR n$[rsp], eax
; Line 1580
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	rax, QWORD PTR [rax+192]
	sub	rax, rcx
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+184]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+184], eax
; Line 1581
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__refi
; Line 1584
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 1585
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1586
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 57					; 00000039H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
; Line 1587
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	BYTE PTR [rax], 0
; Line 1588
	jmp	SHORT $LN3@stbi__refi
$LN2@stbi__refi:
; Line 1589
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1590
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	lea	rax, QWORD PTR [rcx+rax+56]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
$LN3@stbi__refi:
; Line 1592
	add	rsp, 56					; 00000038H
	ret	0
stbi__refill_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
info3$ = 36
stbi__sse2_available PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 752
	sub	rsp, 56					; 00000038H
; Line 753
	call	stbi__cpuid3
	mov	DWORD PTR info3$[rsp], eax
; Line 754
	mov	eax, DWORD PTR info3$[rsp]
	sar	eax, 26
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@stbi__sse2
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__sse2
$LN3@stbi__sse2:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__sse2:
	mov	eax, DWORD PTR tv68[rsp]
; Line 755
	add	rsp, 56					; 00000038H
	ret	0
stbi__sse2_available ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 0
__$ArrayPad$ = 16
stbi__cpuid3 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 730
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 732
	mov	eax, 1
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR info$[rsp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx
; Line 733
	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR info$[rsp+rax]
; Line 734
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
stbi__cpuid3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_noheader_buffer PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4507
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4509
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4510
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4511
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4512
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4514
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4515
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_noheader_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
$T1 = 64
$T2 = 96
a$ = 128
__$ArrayPad$ = 4224
buffer$ = 4272
len$ = 4280
outlen$ = 4288
stbi_zlib_decode_noheader_malloc PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4491
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4248				; 00001098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4493
	mov	ecx, 16384				; 00004000H
	call	stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4494
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4495
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4496
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4497
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, 16384				; 00004000H
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4498
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4499
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4500
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4501
	lea	rax, OFFSET FLAT:$SG132565
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4501				; 00001195H
	lea	r8, OFFSET FLAT:$SG132566
	mov	edx, 86					; 00000056H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR a$[rsp+32]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4502
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4504
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4248				; 00001098H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_decode_noheader_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_buffer PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4480
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4482
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4483
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4484
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4485
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4487
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
len$ = 56
outlen$ = 64
stbi_zlib_decode_malloc PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4459
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4460
	mov	r9, QWORD PTR outlen$[rsp]
	mov	r8d, 16384				; 00004000H
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	stbi_zlib_decode_malloc_guesssize
; Line 4461
	add	rsp, 40					; 00000028H
	ret	0
stbi_zlib_decode_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
$T1 = 64
$T2 = 96
a$ = 128
__$ArrayPad$ = 4224
buffer$ = 4272
len$ = 4280
initial_size$ = 4288
outlen$ = 4296
parse_header$ = 4304
stbi_zlib_decode_malloc_guesssize_headerflag PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4464
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4248				; 00001098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4466
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4467
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4468
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4469
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4470
	mov	eax, DWORD PTR parse_header$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4471
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4472
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4473
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4474
	lea	rax, OFFSET FLAT:$SG132528
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4474				; 0000117aH
	lea	r8, OFFSET FLAT:$SG132529
	mov	edx, 85					; 00000055H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR a$[rsp+32]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4475
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4248				; 00001098H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_decode_malloc_guesssize_headerflag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
$T1 = 64
$T2 = 96
a$ = 128
__$ArrayPad$ = 4224
buffer$ = 4272
len$ = 4280
initial_size$ = 4288
outlen$ = 4296
stbi_zlib_decode_malloc_guesssize PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4443
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	mov	eax, 4248				; 00001098H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4445
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4446
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4447
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4448
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4449
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4450
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4451
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4452
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4453
	lea	rax, OFFSET FLAT:$SG132495
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 4453				; 00001165H
	lea	r8, OFFSET FLAT:$SG132496
	mov	edx, 84					; 00000054H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR a$[rsp+32]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 4454
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4248				; 00001098H
	pop	rdi
	pop	rsi
	ret	0
stbi_zlib_decode_malloc_guesssize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load_thread PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1107
	mov	DWORD PTR [rsp+8], ecx
; Line 1108
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 1109
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 1110
	ret	0
stbi_set_flip_vertically_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb_thread PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4965
	mov	DWORD PTR [rsp+8], ecx
; Line 4966
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4967
	mov	eax, OFFSET FLAT:stbi__de_iphone_flag_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4968
	ret	0
stbi_convert_iphone_png_to_rgb_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1097
	mov	DWORD PTR [rsp+8], ecx
; Line 1098
	mov	eax, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR stbi__vertically_flip_on_load_global, eax
; Line 1099
	ret	0
stbi_set_flip_vertically_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4947
	mov	DWORD PTR [rsp+8], ecx
; Line 4948
	mov	eax, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR stbi__de_iphone_flag_global, eax
; Line 4949
	ret	0
stbi_convert_iphone_png_to_rgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi_set_unpremultiply_on_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 4942
	mov	DWORD PTR [rsp+8], ecx
; Line 4943
	mov	eax, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR stbi__unpremultiply_on_load_global, eax
; Line 4944
	ret	0
stbi_set_unpremultiply_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_16_bit_from_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7632
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7635
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7636
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 7637
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__is_16_main
	mov	DWORD PTR r$[rsp], eax
; Line 7638
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 7639
	mov	eax, DWORD PTR r$[rsp]
; Line 7640
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_16_bit_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_16_bit PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7622
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7623
	lea	rdx, OFFSET FLAT:$SG135414
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7625
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_is_16
	lea	rcx, OFFSET FLAT:$SG135416
	call	stbi__err
	jmp	SHORT $LN1@stbi_is_16
$LN2@stbi_is_16:
; Line 7626
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_16_bit_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7627
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 7628
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_is_16:
; Line 7629
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_16_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
stbi_info_from_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7611
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7614
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7615
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 7616
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__info_main
	mov	DWORD PTR r$[rsp], eax
; Line 7617
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 7618
	mov	eax, DWORD PTR r$[rsp]
; Line 7619
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_info_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi_info PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7601
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7602
	lea	rdx, OFFSET FLAT:$SG135394
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7604
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_info
	lea	rcx, OFFSET FLAT:$SG135396
	call	stbi__err
	jmp	SHORT $LN1@stbi_info
$LN2@stbi_info:
; Line 7605
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_info_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7606
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 7607
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_info:
; Line 7608
	add	rsp, 56					; 00000038H
	ret	0
stbi_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
stbi_is_16_bit_from_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7665
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7667
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 7668
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__is_16_main
; Line 7669
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_16_bit_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7658
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7660
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 7661
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__is_16_main
; Line 7662
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7651
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7653
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 7654
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__info_main
; Line 7655
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 7644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7646
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 7647
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__info_main
; Line 7648
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
retval_from_stbi_load$ = 144
stbi_image_free PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1082
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 1083
	lea	rax, OFFSET FLAT:$SG129563
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1083				; 0000043bH
	lea	r8, OFFSET FLAT:$SG129564
	mov	edx, 62					; 0000003eH
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR retval_from_stbi_load$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
; Line 1084
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
stbi_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbi_failure_reason PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 971
	mov	eax, OFFSET FLAT:stbi__g_failure_reason
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
; Line 972
	ret	0
stbi_failure_reason ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
res$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_hdr_from_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1523
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1525
	mov	rcx, QWORD PTR f$[rsp]
	call	ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 1528
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1529
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
	mov	DWORD PTR res$[rsp], eax
; Line 1530
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
; Line 1531
	mov	eax, DWORD PTR res$[rsp]
; Line 1536
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_hdr_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_hdr PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1512
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	lea	rdx, OFFSET FLAT:$SG130045
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1514
	mov	DWORD PTR result$[rsp], 0
; Line 1515
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN2@stbi_is_hd
; Line 1516
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_hdr_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 1517
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
$LN2@stbi_is_hd:
; Line 1519
	mov	eax, DWORD PTR result$[rsp]
; Line 1520
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_hdr_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1498
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1501
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1502
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
; Line 1508
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
clbk$ = 288
user$ = 296
stbi_is_hdr_from_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1540
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1543
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1544
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__hdr_test
; Line 1550
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_ldr_to_hdr_scale PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1556
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR stbi__l2h_scale, xmm0
	ret	0
stbi_ldr_to_hdr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_ldr_to_hdr_gamma PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1555
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR stbi__l2h_gamma, xmm0
	ret	0
stbi_ldr_to_hdr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_hdr_to_ldr_scale PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1562
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR scale$[rsp]
	movss	DWORD PTR stbi__h2l_scale_i, xmm0
	ret	0
stbi_hdr_to_ldr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_hdr_to_ldr_gamma PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1561
	movss	DWORD PTR [rsp+8], xmm0
	movss	xmm0, DWORD PTR __real@3f800000
	divss	xmm0, DWORD PTR gamma$[rsp]
	movss	DWORD PTR stbi__h2l_gamma_i, xmm0
	ret	0
stbi_hdr_to_ldr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
req_comp$ = 336
stbi_loadf_from_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1484
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1486
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1487
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__loadf_main
; Line 1488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
tv71 = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_loadf PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1474
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1476
	lea	rdx, OFFSET FLAT:$SG130019
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1477
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_loadf
	lea	rcx, OFFSET FLAT:$SG130021
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_loadf
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_loadf
$LN4@stbi_loadf:
	mov	QWORD PTR tv71[rsp], 0
$LN5@stbi_loadf:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_loadf
$LN2@stbi_loadf:
; Line 1478
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_loadf_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1479
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1480
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_loadf:
; Line 1481
	add	rsp, 88					; 00000058H
	ret	0
stbi_loadf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1466
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1468
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1469
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__loadf_main
; Line 1470
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1459
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1461
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1462
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__loadf_main
; Line 1463
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file_16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1370
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1373
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1374
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_16bit
	mov	QWORD PTR result$[rsp], rax
; Line 1375
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1377
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
$LN2@stbi_load_:
; Line 1379
	mov	rax, QWORD PTR result$[rsp]
; Line 1380
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
tv71 = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load_16 PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1383
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1384
	lea	rdx, OFFSET FLAT:$SG129868
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1386
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load_
	lea	rcx, OFFSET FLAT:$SG129870
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load_
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	QWORD PTR tv71[rsp], 0
$LN5@stbi_load_:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load_
$LN2@stbi_load_:
; Line 1387
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file_16
	mov	QWORD PTR result$[rsp], rax
; Line 1388
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1389
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load_:
; Line 1390
	add	rsp, 88					; 00000058H
	ret	0
stbi_load_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1403
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1405
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1406
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_16bit
; Line 1407
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1396
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1398
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1399
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_16bit
; Line 1400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 64
result$ = 72
s$ = 80
__$ArrayPad$ = 304
buffer$ = 336
len$ = 344
delays$ = 352
x$ = 360
y$ = 368
z$ = 376
comp$ = 384
req_comp$ = 392
stbi_load_gif_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1425
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1428
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1430
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR comp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR delays$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_gif_main
	mov	QWORD PTR result$[rsp], rax
; Line 1431
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_set
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi_load_
	mov	eax, OFFSET FLAT:stbi__vertically_flip_on_load_local
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	eax, DWORD PTR stbi__vertically_flip_on_load_global
	mov	DWORD PTR tv88[rsp], eax
$LN5@stbi_load_:
	cmp	DWORD PTR tv88[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1432
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	stbi__vertical_flip_slices
$LN2@stbi_load_:
; Line 1435
	mov	rax, QWORD PTR result$[rsp]
; Line 1436
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
stbi_load_gif_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1357
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1360
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_file
; Line 1361
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
	mov	QWORD PTR result$[rsp], rax
; Line 1362
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1364
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	fseek
$LN2@stbi_load_:
; Line 1366
	mov	rax, QWORD PTR result$[rsp]
; Line 1367
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 48
tv71 = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1347
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1348
	lea	rdx, OFFSET FLAT:$SG129817
	mov	rcx, QWORD PTR filename$[rsp]
	call	stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1350
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load
	lea	rcx, OFFSET FLAT:$SG129819
	call	stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load
	mov	QWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load
$LN4@stbi_load:
	mov	QWORD PTR tv71[rsp], 0
$LN5@stbi_load:
	mov	rax, QWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load
$LN2@stbi_load:
; Line 1351
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1352
	mov	rcx, QWORD PTR f$[rsp]
	call	fclose
; Line 1353
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load:
; Line 1354
	add	rsp, 88					; 00000058H
	ret	0
stbi_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_callbacks PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1417
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1419
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_callbacks
; Line 1420
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
; Line 1421
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_memory PROC
; File W:\cpp\void\e\rx\stb_image.h
; Line 1410
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1412
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__start_mem
; Line 1413
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	stbi__load_and_postprocess_8bit
; Line 1414
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file_size$ = 48
Wrote$ = 52
tv79 = 56
tv133 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
file$ = 368
offset$ = 376
length$ = 384
file_data$ = 392
ccpushfile PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 156
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 344				; 00000158H
; Line 157
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN5@ccpushfile
; Line 159
	lea	rax, OFFSET FLAT:$SG107641
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 159				; 0000009fH
	lea	r8, OFFSET FLAT:$SG107642
	mov	edx, 57					; 00000039H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107639
	lea	rdx, OFFSET FLAT:$SG107640
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
; Line 160
	xor	eax, eax
	jmp	$LN1@ccpushfile
$LN5@ccpushfile:
; Line 163
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfnameh
	mov	QWORD PTR tv79[rsp], rax
	lea	rcx, OFFSET FLAT:$SG107645
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 164				; 000000a4H
	lea	r8, OFFSET FLAT:$SG107646
	mov	edx, 58					; 0000003aH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, DWORD PTR length$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR tv79[rsp]
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG107643
	lea	rdx, OFFSET FLAT:$SG107644
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
; Line 166
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 168
	mov	eax, DWORD PTR offset$[rsp]
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN6@ccpushfile
	xor	eax, eax
	jmp	$LN1@ccpushfile
$LN6@ccpushfile:
; Line 170
	mov	DWORD PTR Wrote$[rsp], 0
; Line 171
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR Wrote$[rsp]
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	jne	SHORT $LN7@ccpushfile
; Line 173
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfnameh
	mov	QWORD PTR tv133[rsp], rax
	lea	rcx, OFFSET FLAT:$SG107651
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 173				; 000000adH
	lea	r8, OFFSET FLAT:$SG107652
	mov	edx, 59					; 0000003bH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tv133[rsp]
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG107649
	lea	rdx, OFFSET FLAT:$SG107650
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
; Line 174
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN7@ccpushfile:
$LN4@ccpushfile:
; Line 177
	mov	rcx, QWORD PTR file$[rsp]
	call	ccflushfile
	test	eax, eax
	jne	SHORT $LN8@ccpushfile
	lea	rax, OFFSET FLAT:$SG107656
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 177				; 000000b1H
	lea	r8, OFFSET FLAT:$SG107657
	mov	edx, 60					; 0000003cH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107654
	lea	rdx, OFFSET FLAT:$SG107655
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN8@ccpushfile:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ccpushfile
; Line 179
	mov	eax, DWORD PTR length$[rsp]
$LN1@ccpushfile:
; Line 180
	add	rsp, 344				; 00000158H
	pop	rdi
	pop	rsi
	ret	0
ccpushfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 48
tv78 = 52
result$ = 56
tv81 = 64
tv135 = 72
tv151 = 80
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 384
file$ = 448
offset$ = 456
lpio_length$ = 464
ccpullfile PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 109
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
; Line 110
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpullfile
; Line 112
	lea	rax, OFFSET FLAT:$SG107601
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 112				; 00000070H
	lea	r8, OFFSET FLAT:$SG107602
	mov	edx, 52					; 00000034H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107599
	lea	rdx, OFFSET FLAT:$SG107600
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
; Line 113
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN2@ccpullfile:
; Line 116
	cmp	QWORD PTR lpio_length$[rsp], 0
	je	SHORT $LN11@ccpullfile
	mov	rax, QWORD PTR lpio_length$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN12@ccpullfile
$LN11@ccpullfile:
	mov	DWORD PTR tv78[rsp], 0
$LN12@ccpullfile:
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfnameh
	mov	QWORD PTR tv81[rsp], rax
	lea	rcx, OFFSET FLAT:$SG107605
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 117				; 00000075H
	lea	r8, OFFSET FLAT:$SG107606
	mov	edx, 53					; 00000035H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR offset$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR tv81[rsp]
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG107603
	lea	rdx, OFFSET FLAT:$SG107604
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
; Line 119
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR length$[rsp], eax
; Line 121
	mov	QWORD PTR result$[rsp], 0
; Line 123
	cmp	DWORD PTR length$[rsp], 0
	je	$LN3@ccpullfile
; Line 125
	cmp	QWORD PTR lpio_length$[rsp], 0
	je	SHORT $LN4@ccpullfile
; Line 127
	mov	rax, QWORD PTR lpio_length$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN6@ccpullfile
; Line 129
	mov	rax, QWORD PTR lpio_length$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR offset$[rsp]
	cmp	eax, DWORD PTR length$[rsp]
	jbe	SHORT $LN7@ccpullfile
; Line 130
	mov	eax, DWORD PTR offset$[rsp]
	mov	ecx, DWORD PTR length$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR length$[rsp], eax
	jmp	SHORT $LN8@ccpullfile
$LN7@ccpullfile:
; Line 132
	mov	rax, QWORD PTR lpio_length$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR length$[rsp], eax
$LN8@ccpullfile:
$LN6@ccpullfile:
; Line 134
	jmp	SHORT $LN5@ccpullfile
$LN4@ccpullfile:
; Line 136
	lea	rax, QWORD PTR length$[rsp]
	mov	QWORD PTR lpio_length$[rsp], rax
$LN5@ccpullfile:
; Line 139
	mov	eax, DWORD PTR length$[rsp]
	mov	QWORD PTR tv135[rsp], rax
	lea	rcx, OFFSET FLAT:$SG107613
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 139				; 0000008bH
	lea	r8, OFFSET FLAT:$SG107614
	mov	edx, 54					; 00000036H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rax, QWORD PTR tv135[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccuserallocator_
	mov	QWORD PTR result$[rsp], rax
; Line 141
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR lpio_length$[rsp]
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	$LN9@ccpullfile
; Line 143
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfnameh
	mov	QWORD PTR tv151[rsp], rax
	lea	rcx, OFFSET FLAT:$SG107618
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 144				; 00000090H
	lea	r8, OFFSET FLAT:$SG107619
	mov	edx, 55					; 00000037H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tv151[rsp]
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG107616
	lea	rdx, OFFSET FLAT:$SG107617
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
; Line 146
	lea	rax, OFFSET FLAT:$SG107620
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 146				; 00000092H
	lea	r8, OFFSET FLAT:$SG107621
	mov	edx, 56					; 00000038H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR result$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccuserallocator_
; Line 148
	mov	QWORD PTR result$[rsp], 0
$LN9@ccpullfile:
$LN3@ccpullfile:
; Line 151
	mov	rax, QWORD PTR result$[rsp]
$LN1@ccpullfile:
; Line 152
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccfnameh PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 103
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 104
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfnameh__
	mov	rcx, rax
	call	ccfnames
; Line 105
	add	rsp, 40					; 00000028H
	ret	0
ccfnameh ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 32
string$ = 40
buffer$ = 48
file$ = 80
ccfnameh__ PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 93
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 94
	mov	edx, 1
	mov	ecx, 264				; 00000108H
	call	ccstatic_alloc
	mov	QWORD PTR buffer$[rsp], rax
; Line 95
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR length$[rsp], rax
; Line 96
	mov	rax, QWORD PTR length$[rsp]
	add	rax, 4
	mov	QWORD PTR string$[rsp], rax
; Line 97
	mov	r9d, 2
	mov	r8d, 260				; 00000104H
	mov	rdx, QWORD PTR string$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_GetFinalPathNameByHandleA
	mov	rcx, QWORD PTR length$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 98
	mov	rax, QWORD PTR string$[rsp]
; Line 99
	add	rsp, 72					; 00000048H
	ret	0
ccfnameh__ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flags$ = 64
file$ = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
name$ = 240
format$ = 248
ccopenfile PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 64
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 65
	mov	DWORD PTR flags$[rsp], 0
; Line 66
	cmp	QWORD PTR format$[rsp], 0
	je	SHORT $LN8@ccopenfile
; Line 67
	jmp	SHORT $LN4@ccopenfile
$LN2@ccopenfile:
	mov	rax, QWORD PTR format$[rsp]
	inc	rax
	mov	QWORD PTR format$[rsp], rax
$LN4@ccopenfile:
	mov	rax, QWORD PTR format$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@ccopenfile
; Line 68
	mov	rax, QWORD PTR format$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 114				; 00000072H
	jne	SHORT $LN9@ccopenfile
	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 31
	mov	DWORD PTR flags$[rsp], eax
	jmp	SHORT $LN10@ccopenfile
$LN9@ccopenfile:
; Line 69
	mov	rax, QWORD PTR format$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 119				; 00000077H
	jne	SHORT $LN11@ccopenfile
	mov	eax, DWORD PTR flags$[rsp]
	bts	eax, 30
	mov	DWORD PTR flags$[rsp], eax
	jmp	SHORT $LN12@ccopenfile
$LN11@ccopenfile:
; Line 71
	xor	eax, eax
	jmp	$LN1@ccopenfile
$LN12@ccopenfile:
$LN10@ccopenfile:
	jmp	SHORT $LN2@ccopenfile
$LN3@ccopenfile:
$LN8@ccopenfile:
$LN7@ccopenfile:
; Line 73
	cmp	DWORD PTR flags$[rsp], 0
	jne	SHORT $LN13@ccopenfile
	lea	rax, OFFSET FLAT:$SG107566
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 73					; 00000049H
	lea	r8, OFFSET FLAT:$SG107567
	mov	edx, 50					; 00000032H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107564
	lea	rdx, OFFSET FLAT:$SG107565
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN13@ccopenfile:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@ccopenfile
; Line 77
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 4
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, DWORD PTR flags$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR file$[rsp], rax
; Line 81
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN14@ccopenfile
; Line 83
	lea	rax, OFFSET FLAT:$SG107571
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 83					; 00000053H
	lea	r8, OFFSET FLAT:$SG107572
	mov	edx, 51					; 00000033H
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9, QWORD PTR name$[rsp]
	lea	r8, OFFSET FLAT:$SG107569
	lea	rdx, OFFSET FLAT:$SG107570
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
; Line 85
	mov	QWORD PTR file$[rsp], 0
$LN14@ccopenfile:
; Line 88
	mov	rax, QWORD PTR file$[rsp]
$LN1@ccopenfile:
; Line 89
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccclosefile PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 57
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 58
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 59
	add	rsp, 40					; 00000028H
	ret	0
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 48
$T1 = 64
$T2 = 96
file$ = 160
ccflushfile PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 47
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 48
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_FlushFileBuffers
	mov	DWORD PTR Result$[rsp], eax
; Line 49
	cmp	DWORD PTR Result$[rsp], 0
	jne	SHORT $LN2@ccflushfil
; Line 50
	lea	rax, OFFSET FLAT:$SG107537
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 50					; 00000032H
	lea	r8, OFFSET FLAT:$SG107538
	mov	edx, 49					; 00000031H
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG107535
	lea	rdx, OFFSET FLAT:$SG107536
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
$LN2@ccflushfil:
; Line 52
	mov	eax, DWORD PTR Result$[rsp]
; Line 53
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
ccflushfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccfilesize PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 41
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 42
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_GetFileSize
; Line 43
	add	rsp, 40					; 00000028H
	ret	0
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
file$ = 32
ccrealfile PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 35
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 36
	cmp	QWORD PTR file$[rsp], -1
	je	SHORT $LN3@ccrealfile
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@ccrealfile
$LN3@ccrealfile:
	mov	DWORD PTR tv65[rsp], 0
$LN4@ccrealfile:
	mov	eax, DWORD PTR tv65[rsp]
; Line 37
	add	rsp, 24
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 0
name$ = 32
ccfileext PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 22
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 23
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 25
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN4@ccfileext
$LN2@ccfileext:
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR name$[rsp], rax
$LN4@ccfileext:
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@ccfileext
; Line 26
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN5@ccfileext
; Line 27
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR result$[rsp], rax
$LN5@ccfileext:
	jmp	SHORT $LN2@ccfileext
$LN3@ccfileext:
; Line 29
	mov	rax, QWORD PTR result$[rsp]
; Line 30
	add	rsp, 24
	ret	0
ccfileext ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
i$2 = 52
$T3 = 64
$T4 = 96
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 224
$T9 = 256
$T10 = 288
$T11 = 320
$T12 = 352
$T13 = 384
$T14 = 416
$T15 = 448
$T16 = 480
$T17 = 512
$T18 = 544
$T19 = 576
$T20 = 608
$T21 = 640
$T22 = 672
$T23 = 704
$T24 = 736
allocator$ = 800
block$ = 808
cccheck_ward PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 1081
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 776				; 00000308H
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@cccheck_wa
$LN2@cccheck_wa:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@cccheck_wa:
	cmp	DWORD PTR i$1[rsp], 4
	jge	$LN3@cccheck_wa
$LN7@cccheck_wa:
; Line 1082
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN35@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107214
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1083				; 0000043bH
	lea	r8, OFFSET FLAT:$SG107215
	mov	edx, 23
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107212
	lea	rdx, OFFSET FLAT:$SG107213
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN35@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107218
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1083				; 0000043bH
	lea	r8, OFFSET FLAT:$SG107219
	mov	edx, 24
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107216
	lea	rdx, OFFSET FLAT:$SG107217
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN35@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	$LN7@cccheck_wa
	jmp	$LN2@cccheck_wa
$LN3@cccheck_wa:
; Line 1084
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@cccheck_wa
$LN8@cccheck_wa:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@cccheck_wa:
	cmp	DWORD PTR i$2[rsp], 4
	jge	$LN9@cccheck_wa
$LN13@cccheck_wa:
; Line 1085
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+88]
	test	eax, eax
	je	$LN36@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107223
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1086				; 0000043eH
	lea	r8, OFFSET FLAT:$SG107224
	mov	edx, 25
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107221
	lea	rdx, OFFSET FLAT:$SG107222
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN36@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107227
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1086				; 0000043eH
	lea	r8, OFFSET FLAT:$SG107228
	mov	edx, 26
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107225
	lea	rdx, OFFSET FLAT:$SG107226
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN36@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	$LN13@cccheck_wa
	jmp	$LN8@cccheck_wa
$LN9@cccheck_wa:
$LN16@cccheck_wa:
; Line 1088
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN37@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107232
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1088				; 00000440H
	lea	r8, OFFSET FLAT:$SG107233
	mov	edx, 27
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107230
	lea	rdx, OFFSET FLAT:$SG107231
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN37@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN16@cccheck_wa
$LN19@cccheck_wa:
; Line 1089
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN38@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107237
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1089				; 00000441H
	lea	r8, OFFSET FLAT:$SG107238
	mov	edx, 28
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107235
	lea	rdx, OFFSET FLAT:$SG107236
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	int	3
$LN38@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN19@cccheck_wa
$LN22@cccheck_wa:
; Line 1091
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR allocator$[rsp]
	cmp	QWORD PTR [rax+56], rcx
	je	SHORT $LN39@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107242
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1091				; 00000443H
	lea	r8, OFFSET FLAT:$SG107243
	mov	edx, 29
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107240
	lea	rdx, OFFSET FLAT:$SG107241
	lea	rcx, QWORD PTR $T9[rsp]
	call	cctrace_
	int	3
$LN39@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN22@cccheck_wa
$LN25@cccheck_wa:
; Line 1096
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN40@cccheck_wa
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], rcx
	je	SHORT $LN40@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107247
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1096				; 00000448H
	lea	r8, OFFSET FLAT:$SG107248
	mov	edx, 30
	lea	rcx, QWORD PTR $T21[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107245
	lea	rdx, OFFSET FLAT:$SG107246
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
	int	3
$LN40@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	$LN25@cccheck_wa
$LN28@cccheck_wa:
; Line 1097
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN41@cccheck_wa
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], rcx
	je	SHORT $LN41@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107252
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1097				; 00000449H
	lea	r8, OFFSET FLAT:$SG107253
	mov	edx, 31
	lea	rcx, QWORD PTR $T22[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107250
	lea	rdx, OFFSET FLAT:$SG107251
	lea	rcx, QWORD PTR $T11[rsp]
	call	cctrace_
	int	3
$LN41@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	$LN28@cccheck_wa
$LN31@cccheck_wa:
; Line 1099
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN42@cccheck_wa
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+72], rcx
	jne	SHORT $LN42@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107257
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1099				; 0000044bH
	lea	r8, OFFSET FLAT:$SG107258
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T23[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107255
	lea	rdx, OFFSET FLAT:$SG107256
	lea	rcx, QWORD PTR $T12[rsp]
	call	cctrace_
	int	3
$LN42@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	$LN31@cccheck_wa
$LN34@cccheck_wa:
; Line 1100
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN43@cccheck_wa
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+64], rcx
	jne	SHORT $LN43@cccheck_wa
	lea	rax, OFFSET FLAT:$SG107262
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1100				; 0000044cH
	lea	r8, OFFSET FLAT:$SG107263
	mov	edx, 33					; 00000021H
	lea	rcx, QWORD PTR $T24[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107260
	lea	rdx, OFFSET FLAT:$SG107261
	lea	rcx, QWORD PTR $T13[rsp]
	call	cctrace_
	int	3
$LN43@cccheck_wa:
	xor	eax, eax
	test	eax, eax
	jne	$LN34@cccheck_wa
; Line 1101
	add	rsp, 776				; 00000308H
	pop	rdi
	pop	rsi
	ret	0
cccheck_ward ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 48
$T1 = 64
$T2 = 96
caller$ = 160
ccallocentry PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 749
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 750
	lea	rax, OFFSET FLAT:$SG106741
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 750				; 000002eeH
	lea	r8, OFFSET FLAT:$SG106742
	mov	edx, 9
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccuserallocator_
	mov	QWORD PTR e$[rsp], rax
; Line 751
	mov	rax, QWORD PTR e$[rsp]
	mov	QWORD PTR [rax+32], 0
; Line 752
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 753
	mov	rax, QWORD PTR e$[rsp]
	mov	QWORD PTR [rax+48], 0
; Line 754
	mov	rax, QWORD PTR e$[rsp]
	mov	QWORD PTR [rax+56], -1
; Line 756
	mov	rdi, QWORD PTR e$[rsp]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 758
	mov	rax, QWORD PTR e$[rsp]
; Line 759
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
ccallocentry ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
memory$ = 48
$T1 = 64
$T2 = 96
length$ = 160
zero$ = 168
ccstatic_alloc PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 576
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
$LN4@ccstatic_a:
; Line 578
	cmp	DWORD PTR length$[rsp], 4096		; 00001000H
	jle	SHORT $LN5@ccstatic_a
	lea	rax, OFFSET FLAT:$SG106583
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 578				; 00000242H
	lea	r8, OFFSET FLAT:$SG106584
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106581
	lea	rdx, OFFSET FLAT:$SG106582
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@ccstatic_a:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ccstatic_a
; Line 580
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax+4296]
	add	eax, DWORD PTR length$[rsp]
	cmp	eax, 4096				; 00001000H
	jl	SHORT $LN6@ccstatic_a
; Line 581
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+4296], 0
$LN6@ccstatic_a:
; Line 583
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	movsxd	rcx, DWORD PTR [rdx+rcx+4296]
	lea	rax, QWORD PTR [rax+rcx+200]
	mov	QWORD PTR memory$[rsp], rax
; Line 584
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax+4296]
	add	eax, DWORD PTR length$[rsp]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rdi+4296], eax
; Line 586
	cmp	DWORD PTR zero$[rsp], 0
	je	SHORT $LN7@ccstatic_a
; Line 588
	movsxd	rax, DWORD PTR length$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR memory$[rsp]
	call	memset
$LN7@ccstatic_a:
; Line 591
	mov	rax, QWORD PTR memory$[rsp]
; Line 592
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
ccstatic_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
string$ = 48
ccout	PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 561
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 563
	mov	rcx, QWORD PTR string$[rsp]
	call	QWORD PTR __imp_OutputDebugStringA
; Line 565
	mov	rcx, QWORD PTR string$[rsp]
	call	printf
; Line 566
	add	rsp, 40					; 00000028H
	ret	0
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 48
vli$ = 56
tv385 = 64
tv487 = 72
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
r$ = 240
ccprintf PROC
; File W:\cpp\void\e\rx\cc\ccprintf.cc
; Line 52
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 63
	lea	rax, QWORD PTR r$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
$LN2@ccprintf:
; Line 66
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	movsx	eax, BYTE PTR c$[rsp]
	test	eax, eax
	je	$LN3@ccprintf
; Line 68
	jmp	SHORT $LN7@ccprintf
$LN5@ccprintf:
; Line 70
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
$LN7@ccprintf:
; Line 69
	movsx	eax, BYTE PTR c$[rsp]
	test	eax, eax
	je	SHORT $LN6@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN6@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN14@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 33					; 00000021H
	je	SHORT $LN6@ccprintf
$LN14@ccprintf:
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN15@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 62					; 0000003eH
	je	SHORT $LN6@ccprintf
$LN15@ccprintf:
; Line 70
	movsx	eax, BYTE PTR c$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG107083
	call	printf
	jmp	$LN5@ccprintf
$LN6@ccprintf:
; Line 72
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 60					; 0000003cH
	jne	$LN16@ccprintf
; Line 73
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 2
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
; Line 74
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	$LN18@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 57					; 00000039H
	jg	$LN18@ccprintf
; Line 75
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	r8d, DWORD PTR _tls_index
	mov	r9, QWORD PTR gs:88
	add	rdx, QWORD PTR [r9+r8*8]
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	r9d, DWORD PTR _tls_index
	mov	r10, QWORD PTR gs:88
	mov	r9, QWORD PTR [r10+r9*8]
	movsx	r8, WORD PTR [r9+r8+2]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx+r8*2+4], ax
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	movzx	eax, WORD PTR [rax+rdx+2]
	inc	ax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	WORD PTR [rcx+r8+2], ax
	movsx	eax, BYTE PTR c$[rsp]
	sub	eax, 48					; 00000030H
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	WORD PTR [rdx+rcx], ax
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN19@ccprintf
$LN18@ccprintf:
; Line 77
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 65					; 00000041H
	jl	$LN20@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 70					; 00000046H
	jg	$LN20@ccprintf
; Line 78
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	r8d, DWORD PTR _tls_index
	mov	r9, QWORD PTR gs:88
	add	rdx, QWORD PTR [r9+r8*8]
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	r9d, DWORD PTR _tls_index
	mov	r10, QWORD PTR gs:88
	mov	r9, QWORD PTR [r10+r9*8]
	movsx	r8, WORD PTR [r9+r8+2]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx+r8*2+4], ax
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	movzx	eax, WORD PTR [rax+rdx+2]
	inc	ax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	WORD PTR [rcx+r8+2], ax
	movsx	eax, BYTE PTR c$[rsp]
	sub	eax, 55					; 00000037H
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	WORD PTR [rdx+rcx], ax
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN21@ccprintf
$LN20@ccprintf:
; Line 80
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 97					; 00000061H
	jl	$LN22@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 102				; 00000066H
	jg	$LN22@ccprintf
; Line 81
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	r8d, DWORD PTR _tls_index
	mov	r9, QWORD PTR gs:88
	add	rdx, QWORD PTR [r9+r8*8]
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	r9d, DWORD PTR _tls_index
	mov	r10, QWORD PTR gs:88
	mov	r9, QWORD PTR [r10+r9*8]
	movsx	r8, WORD PTR [r9+r8+2]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx+r8*2+4], ax
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	movzx	eax, WORD PTR [rax+rdx+2]
	inc	ax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	WORD PTR [rcx+r8+2], ax
	movsx	eax, BYTE PTR c$[rsp]
	sub	eax, 87					; 00000057H
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	WORD PTR [rdx+rcx], ax
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN23@ccprintf
$LN22@ccprintf:
; Line 83
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	jne	$LN24@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 105				; 00000069H
	jne	$LN24@ccprintf
; Line 84
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	r8d, DWORD PTR _tls_index
	mov	r9, QWORD PTR gs:88
	add	rdx, QWORD PTR [r9+r8*8]
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	r9d, DWORD PTR _tls_index
	mov	r10, QWORD PTR gs:88
	mov	r9, QWORD PTR [r10+r9*8]
	movsx	r8, WORD PTR [r9+r8+2]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx+r8*2+4], ax
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	movzx	eax, WORD PTR [rax+rdx+2]
	inc	ax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	WORD PTR [rcx+r8+2], ax
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR vli$[rsp]
	movzx	edx, WORD PTR [rdx-8]
	mov	WORD PTR [rcx+rax], dx
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 2
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	SHORT $LN25@ccprintf
$LN24@ccprintf:
$LN10@ccprintf:
; Line 86
	lea	rax, OFFSET FLAT:$SG107095
	test	rax, rax
	je	SHORT $LN26@ccprintf
	lea	rax, OFFSET FLAT:$SG107098
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 86					; 00000056H
	lea	r8, OFFSET FLAT:$SG107099
	mov	edx, 21
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107096
	lea	rdx, OFFSET FLAT:$SG107097
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN26@ccprintf:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@ccprintf
$LN25@ccprintf:
$LN23@ccprintf:
$LN21@ccprintf:
$LN19@ccprintf:
; Line 87
	jmp	$LN17@ccprintf
$LN16@ccprintf:
; Line 88
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 33					; 00000021H
	jne	$LN27@ccprintf
; Line 89
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	movzx	eax, WORD PTR [rcx+rax+2]
	dec	ax
	mov	WORD PTR tv385[rsp], ax
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	movzx	edx, WORD PTR tv385[rsp]
	mov	WORD PTR [rcx+rax+2], dx
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	movsx	rdx, WORD PTR tv385[rsp]
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	esi, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	add	rdi, QWORD PTR [r8+rsi*8]
	movzx	edx, WORD PTR [rdi+rdx*2+4]
	mov	WORD PTR [rcx+rax], dx
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 2
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
; Line 90
	jmp	$LN28@ccprintf
$LN27@ccprintf:
; Line 91
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	jne	$LN29@ccprintf
; Line 92
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
; Line 93
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN31@ccprintf
; Line 94
	lea	rcx, OFFSET FLAT:$SG107106
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN32@ccprintf
$LN31@ccprintf:
; Line 96
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 105				; 00000069H
	jne	SHORT $LN33@ccprintf
; Line 97
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	edx, DWORD PTR [rax-8]
	lea	rcx, OFFSET FLAT:$SG107109
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN34@ccprintf
$LN33@ccprintf:
; Line 99
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 102				; 00000066H
	jne	SHORT $LN35@ccprintf
; Line 100
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movaps	xmm1, xmm0
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG107112
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN36@ccprintf
$LN35@ccprintf:
; Line 102
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN37@ccprintf
; Line 103
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR [rax-8]
	lea	rcx, OFFSET FLAT:$SG107115
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN38@ccprintf
$LN37@ccprintf:
; Line 105
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN39@ccprintf
; Line 106
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	movsx	eax, BYTE PTR [rax-8]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG107118
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN40@ccprintf
$LN39@ccprintf:
; Line 108
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 112				; 00000070H
	jne	SHORT $LN41@ccprintf
; Line 109
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR [rax-8]
	lea	rcx, OFFSET FLAT:$SG107121
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN42@ccprintf
$LN41@ccprintf:
; Line 111
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN43@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN43@ccprintf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 105				; 00000069H
	jne	SHORT $LN43@ccprintf
; Line 112
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR [rax-8]
	lea	rcx, OFFSET FLAT:$SG107124
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 3
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN44@ccprintf
$LN43@ccprintf:
; Line 114
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN45@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN45@ccprintf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN45@ccprintf
; Line 115
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR [rax-8]
	lea	rcx, OFFSET FLAT:$SG107127
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 3
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	SHORT $LN46@ccprintf
$LN45@ccprintf:
$LN13@ccprintf:
; Line 117
	lea	rax, OFFSET FLAT:$SG107129
	test	rax, rax
	je	SHORT $LN47@ccprintf
	lea	rax, OFFSET FLAT:$SG107132
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 117				; 00000075H
	lea	r8, OFFSET FLAT:$SG107133
	mov	edx, 22
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG107130
	lea	rdx, OFFSET FLAT:$SG107131
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN47@ccprintf:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@ccprintf
$LN46@ccprintf:
$LN44@ccprintf:
$LN42@ccprintf:
$LN40@ccprintf:
$LN38@ccprintf:
$LN36@ccprintf:
$LN34@ccprintf:
$LN32@ccprintf:
; Line 119
	jmp	SHORT $LN30@ccprintf
$LN29@ccprintf:
; Line 120
	movsx	eax, BYTE PTR c$[rsp]
	test	eax, eax
	jne	SHORT $LN48@ccprintf
; Line 121
	jmp	SHORT $LN3@ccprintf
$LN48@ccprintf:
$LN30@ccprintf:
$LN28@ccprintf:
$LN17@ccprintf:
; Line 124
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	QWORD PTR tv487[rsp], rdx
	mov	edi, DWORD PTR _tls_index
	mov	rsi, QWORD PTR gs:88
	mov	rdi, QWORD PTR [rsi+rdi*8]
	movzx	edx, WORD PTR [rcx+rax]
	mov	rax, QWORD PTR tv487[rsp]
	mov	rcx, QWORD PTR [rdi+rax+4304]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 126
	jmp	$LN2@ccprintf
$LN3@ccprintf:
; Line 127
	mov	QWORD PTR vli$[rsp], 0
; Line 128
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
ccprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 48
tv68 = 56
caller$ = 80
label$ = 88
format$ = 96
cctrace_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 632
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 634
	lea	rax, QWORD PTR format$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 636
	mov	rdx, QWORD PTR vli$[rsp]
	mov	rcx, QWORD PTR format$[rsp]
	call	ccformatv
	mov	QWORD PTR tv68[rsp], rax
	mov	rcx, QWORD PTR caller$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	call	ccfnames
	mov	rcx, QWORD PTR tv68[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR caller$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR caller$[rsp]
	mov	r9d, DWORD PTR [rcx+16]
	mov	r8, rax
	mov	rdx, QWORD PTR label$[rsp]
	lea	rcx, OFFSET FLAT:$SG106637
	call	ccformat
	mov	rcx, rax
	call	ccout
; Line 640
	mov	QWORD PTR vli$[rsp], 0
; Line 641
	add	rsp, 72					; 00000048H
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 0
name$ = 32
ccfnames PROC
; File W:\cpp\void\e\rx\cc\ccio.cc
; Line 10
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 11
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 13
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN4@ccfnames
$LN2@ccfnames:
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR name$[rsp], rax
$LN4@ccfnames:
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@ccfnames
; Line 14
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	je	SHORT $LN6@ccfnames
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	SHORT $LN5@ccfnames
$LN6@ccfnames:
; Line 15
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR result$[rsp], rax
$LN5@ccfnames:
	jmp	SHORT $LN2@ccfnames
$LN3@ccfnames:
; Line 17
	mov	rax, QWORD PTR result$[rsp]
; Line 18
	add	rsp, 24
	ret	0
ccfnames ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$1 = 48
i$2 = 56
tv88 = 64
tv141 = 72
f$3 = 80
$T4 = 96
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 224
$T9 = 256
dlb$ = 320
ccdlbdel_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 646
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 647
	cmp	QWORD PTR dlb$[rsp], 0
	je	$LN11@ccdlbdel_
$LN4@ccdlbdel_:
; Line 649
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN12@ccdlbdel_
	lea	rax, OFFSET FLAT:$SG106659
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 649				; 00000289H
	lea	r8, OFFSET FLAT:$SG106660
	mov	edx, 1
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106657
	lea	rdx, OFFSET FLAT:$SG106658
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN12@ccdlbdel_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ccdlbdel_
; Line 651
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN13@ccdlbdel_
; Line 654
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR e$1[rsp], rax
	jmp	SHORT $LN7@ccdlbdel_
$LN5@ccdlbdel_:
	mov	rax, QWORD PTR e$1[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR e$1[rsp], rax
$LN7@ccdlbdel_:
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN15@ccdlbdel_
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv88[rsp], rax
	jmp	SHORT $LN16@ccdlbdel_
$LN15@ccdlbdel_:
	mov	QWORD PTR tv88[rsp], 0
$LN16@ccdlbdel_:
	imul	rax, QWORD PTR tv88[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR dlb$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR e$1[rsp], rax
	jae	$LN6@ccdlbdel_
; Line 655
	mov	rax, QWORD PTR e$1[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR i$2[rsp], rax
$LN8@ccdlbdel_:
	cmp	QWORD PTR i$2[rsp], 0
	je	SHORT $LN9@ccdlbdel_
; Line 656
	mov	rax, QWORD PTR i$2[rsp]
	mov	QWORD PTR f$3[rsp], rax
; Line 657
	mov	rax, QWORD PTR i$2[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR i$2[rsp], rax
; Line 659
	lea	rax, OFFSET FLAT:$SG106662
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 659				; 00000293H
	lea	r8, OFFSET FLAT:$SG106663
	mov	edx, 2
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR f$3[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rax, QWORD PTR dlb$[rsp]
	call	QWORD PTR [rax+8]
; Line 660
	jmp	SHORT $LN8@ccdlbdel_
$LN9@ccdlbdel_:
; Line 661
	jmp	$LN5@ccdlbdel_
$LN6@ccdlbdel_:
; Line 663
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN17@ccdlbdel_
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv141[rsp], rax
	jmp	SHORT $LN18@ccdlbdel_
$LN17@ccdlbdel_:
	mov	QWORD PTR tv141[rsp], 0
$LN18@ccdlbdel_:
	mov	rcx, QWORD PTR tv141[rsp]
	call	ccdlbdel_
$LN13@ccdlbdel_:
; Line 666
	lea	rax, OFFSET FLAT:$SG106664
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 666				; 0000029aH
	lea	r8, OFFSET FLAT:$SG106665
	mov	edx, 3
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR dlb$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rax, QWORD PTR dlb$[rsp]
	call	QWORD PTR [rax+8]
$LN11@ccdlbdel_:
; Line 668
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
ccdlbdel_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv137 = 48
$T1 = 64
$T2 = 96
$T3 = 128
caller$ = 192
ccm$ = 200
ize$ = 208
len$ = 216
key$ = 224
cctblseti_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 886
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
$LN4@cctblseti_:
	cmp	QWORD PTR ccm$[rsp], 0
	jne	SHORT $LN5@cctblseti_
	lea	rax, OFFSET FLAT:$SG106919
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 886				; 00000376H
	lea	r8, OFFSET FLAT:$SG106920
	mov	edx, 18
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106917
	lea	rdx, OFFSET FLAT:$SG106918
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@cctblseti_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@cctblseti_
; Line 887
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+36], 0
; Line 888
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+40], 1
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8d, DWORD PTR ize$[rsp]
	mov	rdx, QWORD PTR ccm$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctblhsh_
; Line 890
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	QWORD PTR [rcx+rax+40], 0
	je	SHORT $LN7@cctblseti_
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv137[rsp], rax
	jmp	SHORT $LN8@cctblseti_
$LN7@cctblseti_:
	mov	QWORD PTR tv137[rsp], 0
$LN8@cctblseti_:
	mov	rax, QWORD PTR tv137[rsp]
; Line 891
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctblseti_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv178 = 48
tv188 = 56
tv186 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
caller$ = 240
ccm$ = 248
ize$ = 256
len$ = 264
key$ = 272
cctblputi_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 873
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
$LN4@cctblputi_:
	cmp	QWORD PTR ccm$[rsp], 0
	jne	SHORT $LN5@cctblputi_
	lea	rax, OFFSET FLAT:$SG106895
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 873				; 00000369H
	lea	r8, OFFSET FLAT:$SG106896
	mov	edx, 17
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106893
	lea	rdx, OFFSET FLAT:$SG106894
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@cctblputi_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@cctblputi_
; Line 874
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+36], 2
; Line 875
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+40], 1
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8d, DWORD PTR ize$[rsp]
	mov	rdx, QWORD PTR ccm$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctblhsh_
	test	eax, eax
	je	$LN6@cctblputi_
; Line 876
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	QWORD PTR tv188[rsp], rax
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	rcx, QWORD PTR [rdx+rcx+40]
	mov	QWORD PTR tv186[rsp], rcx
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	edi, DWORD PTR _tls_index
	mov	rsi, QWORD PTR gs:88
	mov	rdi, QWORD PTR [rsi+rdi*8]
	mov	rdx, QWORD PTR [rdi+rdx+40]
	mov	rcx, QWORD PTR [rdx+8]
	call	ccfnames
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rcx, QWORD PTR tv188[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR tv186[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9, rax
	lea	r8, OFFSET FLAT:$SG106899
	lea	rdx, OFFSET FLAT:$SG106900
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
; Line 878
	jmp	SHORT $LN7@cctblputi_
$LN6@cctblputi_:
; Line 879
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+36], 0
$LN7@cctblputi_:
; Line 880
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	QWORD PTR [rcx+rax+40], 0
	je	SHORT $LN9@cctblputi_
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv178[rsp], rax
	jmp	SHORT $LN10@cctblputi_
$LN9@cctblputi_:
	mov	QWORD PTR tv178[rsp], 0
$LN10@cctblputi_:
	mov	rax, QWORD PTR tv178[rsp]
; Line 881
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
cctblputi_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv146 = 48
$T1 = 64
$T2 = 96
$T3 = 128
caller$ = 192
ccm$ = 200
ize$ = 208
len$ = 216
key$ = 224
cctblgeti_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 863
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
$LN4@cctblgeti_:
	cmp	QWORD PTR ccm$[rsp], 0
	jne	SHORT $LN5@cctblgeti_
	lea	rax, OFFSET FLAT:$SG106874
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 863				; 0000035fH
	lea	r8, OFFSET FLAT:$SG106875
	mov	edx, 16
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106872
	lea	rdx, OFFSET FLAT:$SG106873
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN5@cctblgeti_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@cctblgeti_
; Line 864
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+36], 1
; Line 865
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8d, DWORD PTR ize$[rsp]
	mov	rdx, QWORD PTR ccm$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctblhsh_
	test	eax, eax
	je	SHORT $LN6@cctblgeti_
; Line 866
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+36], 0
$LN6@cctblgeti_:
; Line 867
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	QWORD PTR [rcx+rax+40], 0
	je	SHORT $LN8@cctblgeti_
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv146[rsp], rax
	jmp	SHORT $LN9@cctblgeti_
$LN8@cctblgeti_:
	mov	QWORD PTR tv146[rsp], 0
$LN9@cctblgeti_:
	mov	rax, QWORD PTR tv146[rsp]
; Line 868
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctblgeti_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dlb$ = 48
idx$ = 56
hsh$ = 64
tv152 = 72
tv138 = 80
tv168 = 88
tv283 = 96
val$1 = 104
max$ = 112
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
$T10 = 384
$T11 = 416
$T12 = 448
caller$ = 512
ccm$ = 520
ize$ = 528
len$ = 536
key$ = 544
create_always$ = 552
cctblhsh_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 765
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 488				; 000001e8H
$LN4@cctblhsh_:
; Line 766
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN23@cctblhsh_
	lea	rax, OFFSET FLAT:$SG106798
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 766				; 000002feH
	lea	r8, OFFSET FLAT:$SG106799
	mov	edx, 10
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106796
	lea	rdx, OFFSET FLAT:$SG106797
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN23@cctblhsh_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@cctblhsh_
$LN7@cctblhsh_:
; Line 767
	cmp	QWORD PTR key$[rsp], 0
	jne	SHORT $LN24@cctblhsh_
	lea	rax, OFFSET FLAT:$SG106803
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 767				; 000002ffH
	lea	r8, OFFSET FLAT:$SG106804
	mov	edx, 11
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106801
	lea	rdx, OFFSET FLAT:$SG106802
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN24@cctblhsh_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN7@cctblhsh_
; Line 771
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	$LN25@cctblhsh_
; Line 774
	cmp	DWORD PTR create_always$[rsp], 0
	je	$LN27@cctblhsh_
; Line 776
	xor	r9d, r9d
	mov	r8d, 1
	mov	edx, DWORD PTR ize$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlbadd_
; Line 778
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR dlb$[rsp], rax
; Line 781
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 16
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 64					; 00000040H
	mov	rcx, rax
	call	ccdlbadd_
; Line 782
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN43@cctblhsh_
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv138[rsp], rax
	jmp	SHORT $LN44@cctblhsh_
$LN43@cctblhsh_:
	mov	QWORD PTR tv138[rsp], 0
$LN44@cctblhsh_:
	imul	rax, QWORD PTR tv138[rsp], 64		; 00000040H
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 783
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN45@cctblhsh_
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rax-40]
	or	eax, 2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	DWORD PTR [rcx-40], eax
	mov	DWORD PTR tv152[rsp], 1
	jmp	SHORT $LN46@cctblhsh_
$LN45@cctblhsh_:
	mov	DWORD PTR tv152[rsp], 0
$LN46@cctblhsh_:
; Line 784
	jmp	SHORT $LN28@cctblhsh_
$LN27@cctblhsh_:
; Line 786
	xor	eax, eax
	jmp	$LN1@cctblhsh_
$LN28@cctblhsh_:
; Line 787
	jmp	SHORT $LN26@cctblhsh_
$LN25@cctblhsh_:
; Line 788
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR dlb$[rsp], rax
$LN26@cctblhsh_:
; Line 790
	mov	QWORD PTR hsh$[rsp], 5381		; 00001505H
; Line 793
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN29@cctblhsh_
; Line 794
	mov	QWORD PTR idx$[rsp], 0
	jmp	SHORT $LN10@cctblhsh_
$LN8@cctblhsh_:
	mov	rax, QWORD PTR hsh$[rsp]
	shl	rax, 5
	mov	QWORD PTR hsh$[rsp], rax
	mov	rax, QWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	rax, BYTE PTR [rax]
	mov	rcx, QWORD PTR hsh$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR hsh$[rsp], rax
	mov	rax, QWORD PTR idx$[rsp]
	inc	rax
	mov	QWORD PTR idx$[rsp], rax
$LN10@cctblhsh_:
	movsxd	rax, DWORD PTR len$[rsp]
	cmp	QWORD PTR idx$[rsp], rax
	jae	SHORT $LN9@cctblhsh_
	jmp	SHORT $LN8@cctblhsh_
$LN9@cctblhsh_:
	jmp	SHORT $LN30@cctblhsh_
$LN29@cctblhsh_:
; Line 796
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR hsh$[rsp], rax
$LN30@cctblhsh_:
; Line 798
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN47@cctblhsh_
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax-16]
	mov	QWORD PTR tv168[rsp], rax
	jmp	SHORT $LN48@cctblhsh_
$LN47@cctblhsh_:
	mov	QWORD PTR tv168[rsp], 0
$LN48@cctblhsh_:
	mov	rax, QWORD PTR tv168[rsp]
	mov	QWORD PTR max$[rsp], rax
; Line 800
	xor	edx, edx
	mov	rax, QWORD PTR hsh$[rsp]
	div	QWORD PTR max$[rsp]
	mov	rax, rdx
	mov	QWORD PTR idx$[rsp], rax
$LN13@cctblhsh_:
; Line 802
	cmp	QWORD PTR idx$[rsp], 0
	je	SHORT $LN31@cctblhsh_
	lea	rax, OFFSET FLAT:$SG106814
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 802				; 00000322H
	lea	r8, OFFSET FLAT:$SG106815
	mov	edx, 12
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106812
	lea	rdx, OFFSET FLAT:$SG106813
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN31@cctblhsh_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN13@cctblhsh_
; Line 804
	imul	rax, QWORD PTR idx$[rsp], 64		; 00000040H
	mov	rcx, QWORD PTR dlb$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rdx+rcx+40], rax
; Line 807
	jmp	SHORT $LN16@cctblhsh_
$LN14@cctblhsh_:
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rdx+rcx+40], rax
$LN16@cctblhsh_:
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	cmp	QWORD PTR [rax+48], 0
	je	$LN15@cctblhsh_
; Line 810
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	ecx, DWORD PTR len$[rsp]
	cmp	DWORD PTR [rax+40], ecx
	jne	$LN32@cctblhsh_
; Line 811
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN33@cctblhsh_
; Line 812
	movsxd	rax, DWORD PTR len$[rsp]
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	rcx, QWORD PTR [rdx+rcx+40]
	mov	r8, rax
	mov	rdx, QWORD PTR key$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN35@cctblhsh_
; Line 813
	mov	eax, 1
	jmp	$LN1@cctblhsh_
$LN35@cctblhsh_:
; Line 814
	jmp	SHORT $LN34@cctblhsh_
$LN33@cctblhsh_:
; Line 815
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, QWORD PTR key$[rsp]
	cmp	QWORD PTR [rax+48], rcx
	jne	SHORT $LN36@cctblhsh_
; Line 816
	mov	eax, 1
	jmp	$LN1@cctblhsh_
$LN36@cctblhsh_:
$LN34@cctblhsh_:
$LN32@cctblhsh_:
; Line 821
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN37@cctblhsh_
; Line 822
	jmp	SHORT $LN15@cctblhsh_
$LN37@cctblhsh_:
; Line 823
	jmp	$LN14@cctblhsh_
$LN15@cctblhsh_:
; Line 825
	cmp	DWORD PTR create_always$[rsp], 0
	je	$LN38@cctblhsh_
; Line 827
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN39@cctblhsh_
; Line 828
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccallocentry
	mov	QWORD PTR tv283[rsp], rax
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, QWORD PTR tv283[rsp]
	mov	QWORD PTR [rax+32], rcx
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR tv283[rsp]
	mov	QWORD PTR [rcx+rax+40], rdx
$LN39@cctblhsh_:
; Line 830
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, DWORD PTR ize$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlbadd_
	mov	QWORD PTR val$1[rsp], rax
$LN19@cctblhsh_:
; Line 832
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN40@cctblhsh_
	lea	rax, OFFSET FLAT:$SG106827
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 832				; 00000340H
	lea	r8, OFFSET FLAT:$SG106828
	mov	edx, 13
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106825
	lea	rdx, OFFSET FLAT:$SG106826
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN40@cctblhsh_:
	xor	eax, eax
	test	eax, eax
	jne	$LN19@cctblhsh_
$LN22@cctblhsh_:
; Line 833
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	cmp	DWORD PTR [rax+40], 0
	je	SHORT $LN41@cctblhsh_
	lea	rax, OFFSET FLAT:$SG106832
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 833				; 00000341H
	lea	r8, OFFSET FLAT:$SG106833
	mov	edx, 14
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106830
	lea	rdx, OFFSET FLAT:$SG106831
	lea	rcx, QWORD PTR $T7[rsp]
	call	cctrace_
	int	3
$LN41@cctblhsh_:
	xor	eax, eax
	test	eax, eax
	jne	$LN22@cctblhsh_
; Line 836
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 837
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, QWORD PTR key$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 838
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, QWORD PTR val$1[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 841
	movsxd	rax, DWORD PTR ize$[rsp]
	movsxd	rcx, DWORD PTR ize$[rsp]
	mov	rdx, QWORD PTR val$1[rsp]
	imul	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR ccm$[rsp]
	add	rcx, QWORD PTR [rdx]
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN38@cctblhsh_:
; Line 844
	xor	eax, eax
$LN1@cctblhsh_:
; Line 845
	add	rsp, 488				; 000001e8H
	pop	rdi
	pop	rsi
	ret	0
cctblhsh_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dlb$ = 48
sze_max$ = 56
rem_rze$ = 64
rem_add$ = 68
sze_min$ = 72
alc$ = 80
tv163 = 88
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
lpp$ = 384
isze$ = 392
rsze$ = 400
csze$ = 408
ccdlbadd_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 691
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
; Line 692
	cmp	QWORD PTR rsze$[rsp], 0
	jg	SHORT $LN11@ccdlbadd_
	cmp	QWORD PTR csze$[rsp], 0
	jg	SHORT $LN11@ccdlbadd_
; Line 694
	xor	eax, eax
	jmp	$LN1@ccdlbadd_
$LN11@ccdlbadd_:
; Line 702
	mov	rax, QWORD PTR lpp$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN12@ccdlbadd_
; Line 703
	mov	rax, QWORD PTR lpp$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR dlb$[rsp], rax
; Line 704
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR alc$[rsp], rax
; Line 705
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR sze_max$[rsp], rax
; Line 706
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR sze_min$[rsp], rax
; Line 707
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	mov	DWORD PTR rem_rze$[rsp], eax
; Line 708
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 1
	mov	DWORD PTR rem_add$[rsp], eax
$LN4@ccdlbadd_:
; Line 709
	cmp	DWORD PTR rem_add$[rsp], 0
	je	SHORT $LN14@ccdlbadd_
	lea	rax, OFFSET FLAT:$SG106717
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 709				; 000002c5H
	lea	r8, OFFSET FLAT:$SG106718
	mov	edx, 5
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106715
	lea	rdx, OFFSET FLAT:$SG106716
	lea	rcx, QWORD PTR $T1[rsp]
	call	cctrace_
	int	3
$LN14@ccdlbadd_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN4@ccdlbadd_
; Line 710
	jmp	SHORT $LN13@ccdlbadd_
$LN12@ccdlbadd_:
; Line 711
	mov	QWORD PTR dlb$[rsp], 0
; Line 712
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+192]
	mov	QWORD PTR alc$[rsp], rax
; Line 713
	mov	QWORD PTR sze_max$[rsp], 0
; Line 714
	mov	QWORD PTR sze_min$[rsp], 0
; Line 715
	mov	DWORD PTR rem_rze$[rsp], 0
; Line 716
	mov	DWORD PTR rem_add$[rsp], 0
$LN13@ccdlbadd_:
$LN7@ccdlbadd_:
; Line 719
	mov	rax, QWORD PTR sze_max$[rsp]
	mov	rcx, QWORD PTR rsze$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR sze_min$[rsp]
	cmp	QWORD PTR csze$[rsp], rax
	jle	SHORT $LN15@ccdlbadd_
	lea	rax, OFFSET FLAT:$SG106722
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 719				; 000002cfH
	lea	r8, OFFSET FLAT:$SG106723
	mov	edx, 6
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106720
	lea	rdx, OFFSET FLAT:$SG106721
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN15@ccdlbadd_:
	xor	eax, eax
	test	eax, eax
	jne	$LN7@ccdlbadd_
; Line 721
	mov	rax, QWORD PTR rsze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR sze_max$[rsp], rax
	jge	$LN16@ccdlbadd_
$LN10@ccdlbadd_:
; Line 723
	cmp	DWORD PTR rem_rze$[rsp], 0
	je	SHORT $LN17@ccdlbadd_
	lea	rax, OFFSET FLAT:$SG106728
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 723				; 000002d3H
	lea	r8, OFFSET FLAT:$SG106729
	mov	edx, 7
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:$SG106726
	lea	rdx, OFFSET FLAT:$SG106727
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
	int	3
$LN17@ccdlbadd_:
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN10@ccdlbadd_
; Line 725
	mov	rax, QWORD PTR sze_max$[rsp]
	shl	rax, 1
	mov	QWORD PTR sze_max$[rsp], rax
; Line 726
	mov	rax, QWORD PTR rsze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR sze_max$[rsp], rax
	jge	SHORT $LN18@ccdlbadd_
; Line 727
	mov	rax, QWORD PTR rsze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR sze_max$[rsp], rax
$LN18@ccdlbadd_:
; Line 729
	movsxd	rax, DWORD PTR isze$[rsp]
	mov	rcx, QWORD PTR sze_max$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	add	rax, 40					; 00000028H
	mov	QWORD PTR tv163[rsp], rax
	lea	rcx, OFFSET FLAT:$SG106731
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 729				; 000002d9H
	lea	r8, OFFSET FLAT:$SG106732
	mov	edx, 8
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR tv163[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR alc$[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 731
	mov	rax, QWORD PTR lpp$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN19@ccdlbadd_
; Line 732
	mov	eax, DWORD PTR rem_rze$[rsp]
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 733
	mov	eax, DWORD PTR rem_add$[rsp]
	and	eax, 1
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	ecx, DWORD PTR [rcx]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 734
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR alc$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 735
	mov	rax, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rax+16], 0
$LN19@ccdlbadd_:
; Line 738
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR lpp$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 740
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR sze_max$[rsp]
	mov	QWORD PTR [rax+24], rcx
$LN16@ccdlbadd_:
; Line 743
	mov	rax, QWORD PTR csze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 744
	mov	rax, QWORD PTR sze_min$[rsp]
$LN1@ccdlbadd_:
; Line 745
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
ccdlbadd_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
guid$ = 72
file$ = 80
line$ = 88
func$ = 96
cccaller PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 1041
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 1043
	mov	eax, DWORD PTR guid$[rsp]
	mov	DWORD PTR t$[rsp], eax
; Line 1044
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR t$[rsp+8], rax
; Line 1045
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR t$[rsp+16], eax
; Line 1046
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR t$[rsp+24], rax
; Line 1047
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1048
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
cccaller ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 8
ccclocksecs PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 570
	mov	QWORD PTR [rsp+8], rcx
; Line 571
	mov	rax, QWORD PTR t$[rsp]
	test	rax, rax
	jl	SHORT $LN5@ccclocksec
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@ccclocksec
$LN5@ccclocksec:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@ccclocksec:
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+4312]
	test	rax, rax
	jl	SHORT $LN3@ccclocksec
	cvtsi2sd xmm1, rax
	jmp	SHORT $LN4@ccclocksec
$LN3@ccclocksec:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
	movaps	xmm1, xmm2
$LN4@ccclocksec:
	divsd	xmm0, xmm1
; Line 572
	ret	0
ccclocksecs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 32
ccclocktick PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 551
	sub	rsp, 56					; 00000038H
; Line 554
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 555
	mov	rax, QWORD PTR l$[rsp]
; Line 557
	add	rsp, 56					; 00000038H
	ret	0
ccclocktick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 32
res$ = 40
fmt$ = 64
ccformat PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 623
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 624
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 625
	mov	rdx, QWORD PTR vli$[rsp]
	mov	rcx, QWORD PTR fmt$[rsp]
	call	ccformatv
	mov	QWORD PTR res$[rsp], rax
; Line 626
	mov	QWORD PTR vli$[rsp], 0
; Line 627
	mov	rax, QWORD PTR res$[rsp]
; Line 628
	add	rsp, 56					; 00000038H
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
static_length$ = 32
length$ = 36
string$ = 40
fmt$ = 64
vli$ = 72
ccformatv PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 602
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	ccformatvex
	mov	DWORD PTR length$[rsp], eax
; Line 603
	mov	DWORD PTR static_length$[rsp], 4096	; 00001000H
; Line 604
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax+4296]
	add	eax, DWORD PTR length$[rsp]
	cmp	eax, DWORD PTR static_length$[rsp]
	jl	SHORT $LN2@ccformatv
; Line 605
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+rax+4296], 0
$LN2@ccformatv:
; Line 606
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	movsxd	rcx, DWORD PTR [rdx+rcx+4296]
	lea	rax, QWORD PTR [rax+rcx+200]
	mov	QWORD PTR string$[rsp], rax
; Line 607
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax+4296]
	mov	ecx, DWORD PTR static_length$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR string$[rsp]
	call	ccformatvex
; Line 608
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax+4296]
	mov	ecx, DWORD PTR length$[rsp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:cc
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rcx+r8+4296], eax
; Line 609
	mov	rax, QWORD PTR string$[rsp]
; Line 610
	add	rsp, 56					; 00000038H
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
vli$ = 72
ccformatvex PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 596
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 597
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
; Line 598
	add	rsp, 40					; 00000028H
	ret	0
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 32
ccinit	PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 536
	sub	rsp, 56					; 00000038H
; Line 537
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rax, QWORD PTR [rcx+rax+4320]
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rdx+rcx+4488], rax
; Line 538
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	ecx, OFFSET FLAT:cc
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rdx+rcx+4304], rax
; Line 540
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:ccuserallocator_
	mov	QWORD PTR [rcx+rax+192], rdx
; Line 544
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 545
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+rax+4312], rdx
; Line 547
	add	rsp, 56					; 00000038H
	ret	0
ccinit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
caller$ = 48
size$ = 56
data$ = 64
ccinternalallocator_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 1104
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1107
	cmp	QWORD PTR size$[rsp], 0
	je	SHORT $LN2@ccinternal
; Line 1108
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN3@ccinternal
; Line 1109
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	realloc
	jmp	SHORT $LN1@ccinternal
	jmp	SHORT $LN4@ccinternal
$LN3@ccinternal:
; Line 1111
	mov	rcx, QWORD PTR size$[rsp]
	call	malloc
	jmp	SHORT $LN1@ccinternal
$LN4@ccinternal:
$LN2@ccinternal:
; Line 1114
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 1116
	xor	eax, eax
$LN1@ccinternal:
; Line 1117
	add	rsp, 40					; 00000028H
	ret	0
ccinternalallocator_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ward$ = 32
sentry$1 = 40
$T2 = 48
caller$ = 112
size$ = 120
data$ = 128
ccuserallocator_ PROC
; File W:\cpp\void\e\rx\cc\cc.c
; Line 1201
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1202
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR size$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccinternalallocator_
	jmp	$LN1@ccuserallo
; Line 1204
	mov	QWORD PTR ward$[rsp], 0
; Line 1205
	cmp	QWORD PTR size$[rsp], 0
	jne	$LN2@ccuserallo
; Line 1207
	cmp	QWORD PTR data$[rsp], 0
	je	$LN4@ccuserallo
; Line 1209
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	QWORD PTR sentry$1[rsp], rax
; Line 1210
	mov	rax, QWORD PTR data$[rsp]
	sub	rax, 96					; 00000060H
	mov	QWORD PTR ward$[rsp], rax
; Line 1211
	mov	rdx, QWORD PTR ward$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	cccheck_ward
; Line 1213
	mov	rax, QWORD PTR ward$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN5@ccuserallo
	mov	rax, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR ward$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax+72], rcx
$LN5@ccuserallo:
; Line 1214
	mov	rax, QWORD PTR ward$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN6@ccuserallo
	mov	rax, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR ward$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax+64], rcx
	jmp	SHORT $LN7@ccuserallo
$LN6@ccuserallo:
; Line 1215
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	rdx, QWORD PTR [rdx+64]
	mov	QWORD PTR [rcx+rax+48], rdx
$LN7@ccuserallo:
; Line 1217
	mov	rax, QWORD PTR sentry$1[rsp]
	mov	eax, DWORD PTR [rax+164]
	inc	eax
	mov	rcx, QWORD PTR sentry$1[rsp]
	mov	DWORD PTR [rcx+164], eax
; Line 1218
	mov	rax, QWORD PTR sentry$1[rsp]
	mov	rax, QWORD PTR [rax+136]
	inc	rax
	mov	rcx, QWORD PTR sentry$1[rsp]
	mov	QWORD PTR [rcx+136], rax
; Line 1219
	mov	rax, QWORD PTR sentry$1[rsp]
	mov	rax, QWORD PTR [rax+152]
	mov	rcx, QWORD PTR ward$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR sentry$1[rsp]
	mov	QWORD PTR [rcx+152], rax
; Line 1222
	mov	rax, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rax+72], 0
; Line 1223
	mov	rax, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rax+64], 0
; Line 1224
	mov	rcx, QWORD PTR ward$[rsp]
	call	free
$LN4@ccuserallo:
; Line 1226
	jmp	$LN3@ccuserallo
$LN2@ccuserallo:
; Line 1227
	cmp	QWORD PTR data$[rsp], 0
	je	$LN8@ccuserallo
; Line 1229
	mov	rax, QWORD PTR data$[rsp]
	sub	rax, 96					; 00000060H
	mov	QWORD PTR ward$[rsp], rax
; Line 1230
	mov	rdx, QWORD PTR ward$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	cccheck_ward
; Line 1232
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	rax, QWORD PTR [rax+152]
	mov	rcx, QWORD PTR ward$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	QWORD PTR [rcx+152], rax
; Line 1234
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rcx, QWORD PTR ward$[rsp]
	call	realloc
	mov	QWORD PTR ward$[rsp], rax
; Line 1235
	mov	rax, QWORD PTR ward$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 1236
	mov	rax, QWORD PTR ward$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 1238
	mov	rax, QWORD PTR ward$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN10@ccuserallo
	mov	rax, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rax+72], rcx
$LN10@ccuserallo:
; Line 1239
	mov	rax, QWORD PTR ward$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN11@ccuserallo
	mov	rax, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rcx, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rax+64], rcx
	jmp	SHORT $LN12@ccuserallo
$LN11@ccuserallo:
; Line 1240
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rcx+rax+48], rdx
$LN12@ccuserallo:
; Line 1242
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rax, QWORD PTR [rax+rdx+4488]
	mov	rax, QWORD PTR [rax+128]
	inc	rax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	QWORD PTR [rcx+128], rax
; Line 1243
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rax, QWORD PTR [rax+rdx+4488]
	mov	rax, QWORD PTR [rax+136]
	inc	rax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	QWORD PTR [rcx+136], rax
; Line 1244
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	rax, QWORD PTR [rax+144]
	add	rax, QWORD PTR size$[rsp]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	QWORD PTR [rcx+144], rax
; Line 1245
	jmp	$LN9@ccuserallo
$LN8@ccuserallo:
; Line 1247
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 96					; 00000060H
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR ward$[rsp], rax
; Line 1248
	mov	r8d, 96					; 00000060H
	xor	edx, edx
	mov	rcx, QWORD PTR ward$[rsp]
	call	memset
; Line 1250
	mov	rax, QWORD PTR ward$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	mov	QWORD PTR [rax+56], rcx
; Line 1251
	mov	rax, QWORD PTR ward$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 1252
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	QWORD PTR [rdx+40], rax
; Line 1253
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	QWORD PTR [rdx+48], rax
; Line 1254
	mov	rax, QWORD PTR ward$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 1256
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	QWORD PTR [rcx+rax+48], 0
	je	SHORT $LN13@ccuserallo
; Line 1257
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rcx+rax+48]
	mov	QWORD PTR [rdx+64], rax
; Line 1258
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+48]
	mov	rcx, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rax+72], rcx
$LN13@ccuserallo:
; Line 1260
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	QWORD PTR [rcx+rax+48], rdx
; Line 1261
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ward$[rsp]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	QWORD PTR [rdx+48], rax
; Line 1263
	mov	rdx, QWORD PTR ward$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	cccheck_ward
; Line 1265
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rax, QWORD PTR [rax+rdx+4488]
	mov	eax, DWORD PTR [rax+160]
	inc	eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	DWORD PTR [rcx+160], eax
; Line 1266
	mov	eax, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cc
	mov	edx, edx
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	rax, QWORD PTR [rax+rdx+4488]
	mov	rax, QWORD PTR [rax+128]
	inc	rax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	QWORD PTR [rcx+128], rax
; Line 1267
	mov	eax, OFFSET FLAT:cc
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+4488]
	mov	rax, QWORD PTR [rax+144]
	add	rax, QWORD PTR size$[rsp]
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:cc
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rcx, QWORD PTR [rcx+rdi+4488]
	mov	QWORD PTR [rcx+144], rax
$LN9@ccuserallo:
$LN3@ccuserallo:
; Line 1270
	mov	rax, QWORD PTR ward$[rsp]
	add	rax, 96					; 00000060H
$LN1@ccuserallo:
; Line 1271
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
ccuserallocator_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
et$1 = 0
ph$ = 8
eb$2 = 16
e$3 = 20
pl$ = 24
cn$4 = 32
cn$5 = 36
cn$6 = 40
cn$7 = 44
cn$8 = 48
cn$9 = 52
cn$10 = 56
cn$11 = 60
cn$12 = 64
cn$13 = 68
cn$14 = 72
cn$15 = 76
cn$16 = 80
cn$17 = 84
cn$18 = 88
cn$19 = 92
cn$20 = 96
cn$21 = 100
cn$22 = 104
cn$23 = 108
cn$24 = 112
cn$25 = 116
cn$26 = 120
cn$27 = 124
p2l$28 = 128
p2h$29 = 136
bt$30 = 144
bt$31 = 152
bt$32 = 160
bt$33 = 168
bt$34 = 176
bt$35 = 184
ahi$36 = 192
bhi$37 = 200
ahi$38 = 208
bhi$39 = 216
ahi$40 = 224
bhi$41 = 232
ahi$42 = 240
bhi$43 = 248
ahi$44 = 256
bhi$45 = 264
ahi$46 = 272
bhi$47 = 280
alo$48 = 288
blo$49 = 296
alo$50 = 304
blo$51 = 312
s$52 = 320
alo$53 = 328
blo$54 = 336
alo$55 = 344
blo$56 = 352
s$57 = 360
alo$58 = 368
blo$59 = 376
s$60 = 384
alo$61 = 392
blo$62 = 400
s$63 = 408
ohi$ = 432
olo$ = 440
d$ = 448
power$ = 456
stbsp__raise_to_power10 PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1639
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 424				; 000001a8H
; Line 1641
	cmp	DWORD PTR power$[rsp], 0
	jl	$LN74@stbsp__rai
	cmp	DWORD PTR power$[rsp], 22
	jg	$LN74@stbsp__rai
; Line 1642
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$36[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$37[rsp], xmm0
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$4[rsp], 0
	jmp	SHORT $LN4@stbsp__rai
$LN2@stbsp__rai:
	mov	eax, DWORD PTR cn$4[rsp]
	inc	eax
	mov	DWORD PTR cn$4[rsp], eax
$LN4@stbsp__rai:
	cmp	DWORD PTR cn$4[rsp], 8
	jge	SHORT $LN3@stbsp__rai
	movsxd	rax, DWORD PTR cn$4[rsp]
	movsxd	rcx, DWORD PTR cn$4[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$30[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rai
$LN3@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$5[rsp], 0
	jmp	SHORT $LN7@stbsp__rai
$LN5@stbsp__rai:
	mov	eax, DWORD PTR cn$5[rsp]
	inc	eax
	mov	DWORD PTR cn$5[rsp], eax
$LN7@stbsp__rai:
	cmp	DWORD PTR cn$5[rsp], 8
	jge	SHORT $LN6@stbsp__rai
	movsxd	rax, DWORD PTR cn$5[rsp]
	movsxd	rcx, DWORD PTR cn$5[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR ahi$36[rsp+rcx], al
	jmp	SHORT $LN5@stbsp__rai
$LN6@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$36[rsp]
	movsd	QWORD PTR alo$48[rsp], xmm0
	mov	DWORD PTR cn$6[rsp], 0
	jmp	SHORT $LN10@stbsp__rai
$LN8@stbsp__rai:
	mov	eax, DWORD PTR cn$6[rsp]
	inc	eax
	mov	DWORD PTR cn$6[rsp], eax
$LN10@stbsp__rai:
	cmp	DWORD PTR cn$6[rsp], 8
	jge	SHORT $LN9@stbsp__rai
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$6[rsp]
	movsxd	rdx, DWORD PTR cn$6[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$30[rsp+rdx], al
	jmp	SHORT $LN8@stbsp__rai
$LN9@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$7[rsp], 0
	jmp	SHORT $LN13@stbsp__rai
$LN11@stbsp__rai:
	mov	eax, DWORD PTR cn$7[rsp]
	inc	eax
	mov	DWORD PTR cn$7[rsp], eax
$LN13@stbsp__rai:
	cmp	DWORD PTR cn$7[rsp], 8
	jge	SHORT $LN12@stbsp__rai
	movsxd	rax, DWORD PTR cn$7[rsp]
	movsxd	rcx, DWORD PTR cn$7[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR bhi$37[rsp+rcx], al
	jmp	SHORT $LN11@stbsp__rai
$LN12@stbsp__rai:
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$37[rsp]
	movsd	QWORD PTR blo$49[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$36[rsp]
	mulsd	xmm0, QWORD PTR bhi$37[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$36[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR bhi$37[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1643
	jmp	$LN75@stbsp__rai
$LN74@stbsp__rai:
; Line 1647
	mov	eax, DWORD PTR power$[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1648
	cmp	DWORD PTR power$[rsp], 0
	jge	SHORT $LN76@stbsp__rai
; Line 1649
	mov	eax, DWORD PTR e$3[rsp]
	neg	eax
	mov	DWORD PTR e$3[rsp], eax
$LN76@stbsp__rai:
; Line 1650
	imul	eax, DWORD PTR e$3[rsp], 713		; 000002c9H
	sar	eax, 14
	mov	DWORD PTR et$1[rsp], eax
; Line 1651
	cmp	DWORD PTR et$1[rsp], 13
	jle	SHORT $LN77@stbsp__rai
; Line 1652
	mov	DWORD PTR et$1[rsp], 13
$LN77@stbsp__rai:
; Line 1653
	imul	eax, DWORD PTR et$1[rsp], 23
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR eb$2[rsp], eax
; Line 1655
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1656
	xorps	xmm0, xmm0
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1657
	cmp	DWORD PTR power$[rsp], 0
	jge	$LN78@stbsp__rai
; Line 1658
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN80@stbsp__rai
; Line 1659
	mov	eax, DWORD PTR eb$2[rsp]
	dec	eax
	mov	DWORD PTR eb$2[rsp], eax
; Line 1660
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$38[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$39[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$8[rsp], 0
	jmp	SHORT $LN16@stbsp__rai
$LN14@stbsp__rai:
	mov	eax, DWORD PTR cn$8[rsp]
	inc	eax
	mov	DWORD PTR cn$8[rsp], eax
$LN16@stbsp__rai:
	cmp	DWORD PTR cn$8[rsp], 8
	jge	SHORT $LN15@stbsp__rai
	movsxd	rax, DWORD PTR cn$8[rsp]
	movsxd	rcx, DWORD PTR cn$8[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$31[rsp+rcx], al
	jmp	SHORT $LN14@stbsp__rai
$LN15@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$9[rsp], 0
	jmp	SHORT $LN19@stbsp__rai
$LN17@stbsp__rai:
	mov	eax, DWORD PTR cn$9[rsp]
	inc	eax
	mov	DWORD PTR cn$9[rsp], eax
$LN19@stbsp__rai:
	cmp	DWORD PTR cn$9[rsp], 8
	jge	SHORT $LN18@stbsp__rai
	movsxd	rax, DWORD PTR cn$9[rsp]
	movsxd	rcx, DWORD PTR cn$9[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR ahi$38[rsp+rcx], al
	jmp	SHORT $LN17@stbsp__rai
$LN18@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$38[rsp]
	movsd	QWORD PTR alo$50[rsp], xmm0
	mov	DWORD PTR cn$10[rsp], 0
	jmp	SHORT $LN22@stbsp__rai
$LN20@stbsp__rai:
	mov	eax, DWORD PTR cn$10[rsp]
	inc	eax
	mov	DWORD PTR cn$10[rsp], eax
$LN22@stbsp__rai:
	cmp	DWORD PTR cn$10[rsp], 8
	jge	SHORT $LN21@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$10[rsp]
	movsxd	rdx, DWORD PTR cn$10[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$31[rsp+rdx], al
	jmp	SHORT $LN20@stbsp__rai
$LN21@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$11[rsp], 0
	jmp	SHORT $LN25@stbsp__rai
$LN23@stbsp__rai:
	mov	eax, DWORD PTR cn$11[rsp]
	inc	eax
	mov	DWORD PTR cn$11[rsp], eax
$LN25@stbsp__rai:
	cmp	DWORD PTR cn$11[rsp], 8
	jge	SHORT $LN24@stbsp__rai
	movsxd	rax, DWORD PTR cn$11[rsp]
	movsxd	rcx, DWORD PTR cn$11[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR bhi$39[rsp+rcx], al
	jmp	SHORT $LN23@stbsp__rai
$LN24@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$39[rsp]
	movsd	QWORD PTR blo$51[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$38[rsp]
	mulsd	xmm0, QWORD PTR bhi$39[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$38[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR bhi$39[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1661
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negboterr
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	xmm1, QWORD PTR pl$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
$LN80@stbsp__rai:
; Line 1663
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN81@stbsp__rai
; Line 1664
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$52[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1665
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1666
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$40[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$41[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$12[rsp], 0
	jmp	SHORT $LN28@stbsp__rai
$LN26@stbsp__rai:
	mov	eax, DWORD PTR cn$12[rsp]
	inc	eax
	mov	DWORD PTR cn$12[rsp], eax
$LN28@stbsp__rai:
	cmp	DWORD PTR cn$12[rsp], 8
	jge	SHORT $LN27@stbsp__rai
	movsxd	rax, DWORD PTR cn$12[rsp]
	movsxd	rcx, DWORD PTR cn$12[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$32[rsp+rcx], al
	jmp	SHORT $LN26@stbsp__rai
$LN27@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$13[rsp], 0
	jmp	SHORT $LN31@stbsp__rai
$LN29@stbsp__rai:
	mov	eax, DWORD PTR cn$13[rsp]
	inc	eax
	mov	DWORD PTR cn$13[rsp], eax
$LN31@stbsp__rai:
	cmp	DWORD PTR cn$13[rsp], 8
	jge	SHORT $LN30@stbsp__rai
	movsxd	rax, DWORD PTR cn$13[rsp]
	movsxd	rcx, DWORD PTR cn$13[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR ahi$40[rsp+rcx], al
	jmp	SHORT $LN29@stbsp__rai
$LN30@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$40[rsp]
	movsd	QWORD PTR alo$53[rsp], xmm0
	mov	DWORD PTR cn$14[rsp], 0
	jmp	SHORT $LN34@stbsp__rai
$LN32@stbsp__rai:
	mov	eax, DWORD PTR cn$14[rsp]
	inc	eax
	mov	DWORD PTR cn$14[rsp], eax
$LN34@stbsp__rai:
	cmp	DWORD PTR cn$14[rsp], 8
	jge	SHORT $LN33@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$14[rsp]
	movsxd	rdx, DWORD PTR cn$14[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$32[rsp+rdx], al
	jmp	SHORT $LN32@stbsp__rai
$LN33@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$15[rsp], 0
	jmp	SHORT $LN37@stbsp__rai
$LN35@stbsp__rai:
	mov	eax, DWORD PTR cn$15[rsp]
	inc	eax
	mov	DWORD PTR cn$15[rsp], eax
$LN37@stbsp__rai:
	cmp	DWORD PTR cn$15[rsp], 8
	jge	SHORT $LN36@stbsp__rai
	movsxd	rax, DWORD PTR cn$15[rsp]
	movsxd	rcx, DWORD PTR cn$15[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR bhi$41[rsp+rcx], al
	jmp	SHORT $LN35@stbsp__rai
$LN36@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$41[rsp]
	movsd	QWORD PTR blo$54[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$40[rsp]
	mulsd	xmm0, QWORD PTR bhi$41[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$40[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR bhi$41[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1667
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtoperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1668
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1669
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN81@stbsp__rai:
; Line 1671
	jmp	$LN79@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN82@stbsp__rai
; Line 1673
	mov	eax, DWORD PTR eb$2[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1674
	cmp	DWORD PTR eb$2[rsp], 22
	jle	SHORT $LN83@stbsp__rai
; Line 1675
	mov	DWORD PTR eb$2[rsp], 22
$LN83@stbsp__rai:
; Line 1676
	mov	eax, DWORD PTR eb$2[rsp]
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$3[rsp], eax
; Line 1677
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$42[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$43[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$16[rsp], 0
	jmp	SHORT $LN40@stbsp__rai
$LN38@stbsp__rai:
	mov	eax, DWORD PTR cn$16[rsp]
	inc	eax
	mov	DWORD PTR cn$16[rsp], eax
$LN40@stbsp__rai:
	cmp	DWORD PTR cn$16[rsp], 8
	jge	SHORT $LN39@stbsp__rai
	movsxd	rax, DWORD PTR cn$16[rsp]
	movsxd	rcx, DWORD PTR cn$16[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$33[rsp+rcx], al
	jmp	SHORT $LN38@stbsp__rai
$LN39@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$17[rsp], 0
	jmp	SHORT $LN43@stbsp__rai
$LN41@stbsp__rai:
	mov	eax, DWORD PTR cn$17[rsp]
	inc	eax
	mov	DWORD PTR cn$17[rsp], eax
$LN43@stbsp__rai:
	cmp	DWORD PTR cn$17[rsp], 8
	jge	SHORT $LN42@stbsp__rai
	movsxd	rax, DWORD PTR cn$17[rsp]
	movsxd	rcx, DWORD PTR cn$17[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR ahi$42[rsp+rcx], al
	jmp	SHORT $LN41@stbsp__rai
$LN42@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$42[rsp]
	movsd	QWORD PTR alo$55[rsp], xmm0
	mov	DWORD PTR cn$18[rsp], 0
	jmp	SHORT $LN46@stbsp__rai
$LN44@stbsp__rai:
	mov	eax, DWORD PTR cn$18[rsp]
	inc	eax
	mov	DWORD PTR cn$18[rsp], eax
$LN46@stbsp__rai:
	cmp	DWORD PTR cn$18[rsp], 8
	jge	SHORT $LN45@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$18[rsp]
	movsxd	rdx, DWORD PTR cn$18[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$33[rsp+rdx], al
	jmp	SHORT $LN44@stbsp__rai
$LN45@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$19[rsp], 0
	jmp	SHORT $LN49@stbsp__rai
$LN47@stbsp__rai:
	mov	eax, DWORD PTR cn$19[rsp]
	inc	eax
	mov	DWORD PTR cn$19[rsp], eax
$LN49@stbsp__rai:
	cmp	DWORD PTR cn$19[rsp], 8
	jge	SHORT $LN48@stbsp__rai
	movsxd	rax, DWORD PTR cn$19[rsp]
	movsxd	rcx, DWORD PTR cn$19[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR bhi$43[rsp+rcx], al
	jmp	SHORT $LN47@stbsp__rai
$LN48@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$43[rsp]
	movsd	QWORD PTR blo$56[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$42[rsp]
	mulsd	xmm0, QWORD PTR bhi$43[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$42[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR bhi$43[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1678
	cmp	DWORD PTR e$3[rsp], 0
	je	$LN84@stbsp__rai
; Line 1679
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$57[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1680
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$44[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$45[rsp], xmm0
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$20[rsp], 0
	jmp	SHORT $LN52@stbsp__rai
$LN50@stbsp__rai:
	mov	eax, DWORD PTR cn$20[rsp]
	inc	eax
	mov	DWORD PTR cn$20[rsp], eax
$LN52@stbsp__rai:
	cmp	DWORD PTR cn$20[rsp], 8
	jge	SHORT $LN51@stbsp__rai
	movsxd	rax, DWORD PTR cn$20[rsp]
	movsxd	rcx, DWORD PTR cn$20[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$34[rsp+rcx], al
	jmp	SHORT $LN50@stbsp__rai
$LN51@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$21[rsp], 0
	jmp	SHORT $LN55@stbsp__rai
$LN53@stbsp__rai:
	mov	eax, DWORD PTR cn$21[rsp]
	inc	eax
	mov	DWORD PTR cn$21[rsp], eax
$LN55@stbsp__rai:
	cmp	DWORD PTR cn$21[rsp], 8
	jge	SHORT $LN54@stbsp__rai
	movsxd	rax, DWORD PTR cn$21[rsp]
	movsxd	rcx, DWORD PTR cn$21[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR ahi$44[rsp+rcx], al
	jmp	SHORT $LN53@stbsp__rai
$LN54@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$44[rsp]
	movsd	QWORD PTR alo$58[rsp], xmm0
	mov	DWORD PTR cn$22[rsp], 0
	jmp	SHORT $LN58@stbsp__rai
$LN56@stbsp__rai:
	mov	eax, DWORD PTR cn$22[rsp]
	inc	eax
	mov	DWORD PTR cn$22[rsp], eax
$LN58@stbsp__rai:
	cmp	DWORD PTR cn$22[rsp], 8
	jge	SHORT $LN57@stbsp__rai
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$22[rsp]
	movsxd	rdx, DWORD PTR cn$22[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$34[rsp+rdx], al
	jmp	SHORT $LN56@stbsp__rai
$LN57@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$23[rsp], 0
	jmp	SHORT $LN61@stbsp__rai
$LN59@stbsp__rai:
	mov	eax, DWORD PTR cn$23[rsp]
	inc	eax
	mov	DWORD PTR cn$23[rsp], eax
$LN61@stbsp__rai:
	cmp	DWORD PTR cn$23[rsp], 8
	jge	SHORT $LN60@stbsp__rai
	movsxd	rax, DWORD PTR cn$23[rsp]
	movsxd	rcx, DWORD PTR cn$23[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR bhi$45[rsp+rcx], al
	jmp	SHORT $LN59@stbsp__rai
$LN60@stbsp__rai:
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$45[rsp]
	movsd	QWORD PTR blo$59[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$44[rsp]
	mulsd	xmm0, QWORD PTR bhi$45[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$44[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR bhi$45[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1681
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	mulsd	xmm0, QWORD PTR pl$[rsp]
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1682
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1683
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN84@stbsp__rai:
$LN82@stbsp__rai:
; Line 1686
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN85@stbsp__rai
; Line 1687
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$60[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1688
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1689
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$46[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$47[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$24[rsp], 0
	jmp	SHORT $LN64@stbsp__rai
$LN62@stbsp__rai:
	mov	eax, DWORD PTR cn$24[rsp]
	inc	eax
	mov	DWORD PTR cn$24[rsp], eax
$LN64@stbsp__rai:
	cmp	DWORD PTR cn$24[rsp], 8
	jge	SHORT $LN63@stbsp__rai
	movsxd	rax, DWORD PTR cn$24[rsp]
	movsxd	rcx, DWORD PTR cn$24[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$35[rsp+rcx], al
	jmp	SHORT $LN62@stbsp__rai
$LN63@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$25[rsp], 0
	jmp	SHORT $LN67@stbsp__rai
$LN65@stbsp__rai:
	mov	eax, DWORD PTR cn$25[rsp]
	inc	eax
	mov	DWORD PTR cn$25[rsp], eax
$LN67@stbsp__rai:
	cmp	DWORD PTR cn$25[rsp], 8
	jge	SHORT $LN66@stbsp__rai
	movsxd	rax, DWORD PTR cn$25[rsp]
	movsxd	rcx, DWORD PTR cn$25[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR ahi$46[rsp+rcx], al
	jmp	SHORT $LN65@stbsp__rai
$LN66@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$46[rsp]
	movsd	QWORD PTR alo$61[rsp], xmm0
	mov	DWORD PTR cn$26[rsp], 0
	jmp	SHORT $LN70@stbsp__rai
$LN68@stbsp__rai:
	mov	eax, DWORD PTR cn$26[rsp]
	inc	eax
	mov	DWORD PTR cn$26[rsp], eax
$LN70@stbsp__rai:
	cmp	DWORD PTR cn$26[rsp], 8
	jge	SHORT $LN69@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$26[rsp]
	movsxd	rdx, DWORD PTR cn$26[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$35[rsp+rdx], al
	jmp	SHORT $LN68@stbsp__rai
$LN69@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$27[rsp], 0
	jmp	SHORT $LN73@stbsp__rai
$LN71@stbsp__rai:
	mov	eax, DWORD PTR cn$27[rsp]
	inc	eax
	mov	DWORD PTR cn$27[rsp], eax
$LN73@stbsp__rai:
	cmp	DWORD PTR cn$27[rsp], 8
	jge	SHORT $LN72@stbsp__rai
	movsxd	rax, DWORD PTR cn$27[rsp]
	movsxd	rcx, DWORD PTR cn$27[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR bhi$47[rsp+rcx], al
	jmp	SHORT $LN71@stbsp__rai
$LN72@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$47[rsp]
	movsd	QWORD PTR blo$62[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$46[rsp]
	mulsd	xmm0, QWORD PTR bhi$47[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$46[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR bhi$47[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1690
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__toperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1691
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1692
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN85@stbsp__rai:
$LN79@stbsp__rai:
$LN75@stbsp__rai:
; Line 1696
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$63[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1697
	mov	rax, QWORD PTR ohi$[rsp]
	movsd	xmm0, QWORD PTR ph$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1698
	mov	rax, QWORD PTR olo$[rsp]
	movsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1699
	add	rsp, 424				; 000001a8H
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
buf$ = 32
user$ = 40
len$ = 48
stbsp__count_clamp_callback PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1422
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1423
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1426
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1427
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
; Line 1428
	add	rsp, 24
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
s$1 = 8
d$2 = 16
tv93 = 24
se$3 = 32
buf$ = 64
user$ = 72
len$ = 80
stbsp__clamp_callback PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1394
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1395
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1396
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1398
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN5@stbsp__cla
; Line 1399
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR len$[rsp], eax
$LN5@stbsp__cla:
; Line 1401
	cmp	DWORD PTR len$[rsp], 0
	je	$LN6@stbsp__cla
; Line 1402
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR buf$[rsp], rax
	je	SHORT $LN7@stbsp__cla
; Line 1405
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR d$2[rsp], rax
; Line 1406
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR s$1[rsp], rax
; Line 1407
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR se$3[rsp], rax
$LN4@stbsp__cla:
; Line 1409
	mov	rax, QWORD PTR d$2[rsp]
	mov	rcx, QWORD PTR s$1[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR d$2[rsp]
	inc	rax
	mov	QWORD PTR d$2[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	inc	rax
	mov	QWORD PTR s$1[rsp], rax
; Line 1410
	mov	rax, QWORD PTR se$3[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	jb	SHORT $LN4@stbsp__cla
$LN7@stbsp__cla:
; Line 1412
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1413
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN6@stbsp__cla:
; Line 1416
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN8@stbsp__cla
; Line 1417
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	jmp	SHORT $LN1@stbsp__cla
$LN8@stbsp__cla:
; Line 1418
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 512			; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN11@stbsp__cla
$LN10@stbsp__cla:
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	mov	QWORD PTR tv93[rsp], rax
$LN11@stbsp__cla:
	mov	rax, QWORD PTR tv93[rsp]
$LN1@stbsp__cla:
; Line 1419
	add	rsp, 56					; 00000038H
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 0
sn$ = 8
s$ = 32
limit$ = 40
stbsp__strlen_limited PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 310
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 311
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR sn$[rsp], rax
$LN2@stbsp__str:
; Line 315
	mov	rax, QWORD PTR sn$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN9@stbsp__str
; Line 316
	jmp	SHORT $LN3@stbsp__str
$LN9@stbsp__str:
; Line 318
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN11@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN10@stbsp__str
$LN11@stbsp__str:
; Line 319
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	$LN1@stbsp__str
$LN10@stbsp__str:
; Line 321
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 322
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 323
	jmp	SHORT $LN2@stbsp__str
$LN3@stbsp__str:
$LN5@stbsp__str:
; Line 330
	cmp	DWORD PTR limit$[rsp], 4
	jb	SHORT $LN6@stbsp__str
; Line 331
	mov	rax, QWORD PTR sn$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$1[rsp], eax
; Line 333
	mov	eax, DWORD PTR v$1[rsp]
	sub	eax, 16843009				; 01010101H
	mov	ecx, DWORD PTR v$1[rsp]
	not	ecx
	and	eax, ecx
	and	eax, -2139062144			; 80808080H
	test	eax, eax
	je	SHORT $LN12@stbsp__str
; Line 334
	jmp	SHORT $LN6@stbsp__str
$LN12@stbsp__str:
; Line 336
	mov	rax, QWORD PTR sn$[rsp]
	add	rax, 4
	mov	QWORD PTR sn$[rsp], rax
; Line 337
	mov	eax, DWORD PTR limit$[rsp]
	sub	eax, 4
	mov	DWORD PTR limit$[rsp], eax
; Line 338
	jmp	SHORT $LN5@stbsp__str
$LN6@stbsp__str:
$LN7@stbsp__str:
; Line 341
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN8@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@stbsp__str
; Line 342
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 343
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 344
	jmp	SHORT $LN7@stbsp__str
$LN8@stbsp__str:
; Line 346
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@stbsp__str:
; Line 347
	add	rsp, 24
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 295
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
; Line 296
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 297
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN2@stbsp__lea
; Line 298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 299
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 45			; 0000002dH
	jmp	SHORT $LN3@stbsp__lea
$LN2@stbsp__lea:
; Line 300
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 302
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
	jmp	SHORT $LN5@stbsp__lea
$LN4@stbsp__lea:
; Line 303
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 305
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 43			; 0000002bH
$LN6@stbsp__lea:
$LN5@stbsp__lea:
$LN3@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cn$1 = 0
b$ = 8
d$ = 16
bits$ = 48
expo$ = 56
value$ = 64
stbsp__real_to_parts PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1492
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1494
	mov	QWORD PTR b$[rsp], 0
; Line 1497
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1499
	mov	DWORD PTR cn$1[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$1[rsp]
	inc	eax
	mov	DWORD PTR cn$1[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$1[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$1[rsp]
	movsxd	rcx, DWORD PTR cn$1[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR b$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1501
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR b$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR bits$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1502
	mov	rax, QWORD PTR b$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	sub	rax, 1023				; 000003ffH
	mov	rcx, QWORD PTR expo$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1504
	mov	rax, QWORD PTR b$[rsp]
	shr	rax, 63					; 0000003fH
; Line 1505
	add	rsp, 40					; 00000028H
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bits$ = 32
tens$ = 40
e$ = 44
dg$1 = 48
cn$2 = 52
expo$ = 56
n$3 = 60
n$4 = 64
ng$ = 68
tv131 = 72
tv162 = 76
d$ = 80
ph$5 = 88
ahi$6 = 96
v$7 = 104
tv82 = 112
vh$8 = 120
t$9 = 128
r$10 = 136
alo$11 = 144
pl$12 = 152
o$13 = 160
start$ = 192
len$ = 200
out$ = 208
decimal_pos$ = 216
value$ = 224
frac_digits$ = 232
stbsp__real_to_str PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 1708
	mov	QWORD PTR bits$[rsp], 0
; Line 1711
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1712
	mov	DWORD PTR cn$2[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$2[rsp]
	inc	eax
	mov	DWORD PTR cn$2[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$2[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$2[rsp]
	movsxd	rcx, DWORD PTR cn$2[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bits$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1713
	mov	rax, QWORD PTR bits$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	mov	DWORD PTR expo$[rsp], eax
; Line 1714
	mov	rax, QWORD PTR bits$[rsp]
	shr	rax, 63					; 0000003fH
	mov	DWORD PTR ng$[rsp], eax
; Line 1715
	cmp	DWORD PTR ng$[rsp], 0
	je	SHORT $LN21@stbsp__rea
; Line 1716
	movsd	xmm0, QWORD PTR d$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR d$[rsp], xmm0
$LN21@stbsp__rea:
; Line 1718
	cmp	DWORD PTR expo$[rsp], 2047		; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN40@stbsp__rea
	lea	rax, OFFSET FLAT:$SG106301
	mov	QWORD PTR tv82[rsp], rax
	jmp	SHORT $LN41@stbsp__rea
$LN40@stbsp__rea:
	lea	rax, OFFSET FLAT:$SG106302
	mov	QWORD PTR tv82[rsp], rax
$LN41@stbsp__rea:
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1721
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 28672			; 00007000H
; Line 1722
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 3
; Line 1723
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	cmp	DWORD PTR expo$[rsp], 0
	jne	$LN23@stbsp__rea
; Line 1728
	mov	rax, QWORD PTR bits$[rsp]
	shl	rax, 1
	test	rax, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1731
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1732
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 48			; 00000030H
; Line 1733
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1734
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
	mov	QWORD PTR v$7[rsp], rax
$LN5@stbsp__rea:
; Line 1739
	mov	rax, QWORD PTR v$7[rsp]
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN6@stbsp__rea
; Line 1740
	mov	eax, DWORD PTR expo$[rsp]
	dec	eax
	mov	DWORD PTR expo$[rsp], eax
; Line 1741
	mov	rax, QWORD PTR v$7[rsp]
	sar	rax, 1
	mov	QWORD PTR v$7[rsp], rax
; Line 1742
	jmp	SHORT $LN5@stbsp__rea
$LN6@stbsp__rea:
$LN23@stbsp__rea:
; Line 1751
	mov	eax, DWORD PTR expo$[rsp]
	sub	eax, 1023				; 000003ffH
	mov	DWORD PTR tens$[rsp], eax
; Line 1752
	cmp	DWORD PTR tens$[rsp], 0
	jge	SHORT $LN42@stbsp__rea
	imul	eax, DWORD PTR tens$[rsp], 617		; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN43@stbsp__rea
$LN42@stbsp__rea:
	imul	eax, DWORD PTR tens$[rsp], 1233		; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12
	inc	eax
	mov	DWORD PTR tv131[rsp], eax
$LN43@stbsp__rea:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR tens$[rsp], eax
; Line 1755
	mov	eax, 18
	sub	eax, DWORD PTR tens$[rsp]
	mov	r9d, eax
	movsd	xmm2, QWORD PTR d$[rsp]
	lea	rdx, QWORD PTR pl$12[rsp]
	lea	rcx, QWORD PTR ph$5[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$6[rsp], xmm0
	cvttsd2si rax, QWORD PTR ph$5[rsp]
	mov	QWORD PTR bits$[rsp], rax
	cvtsi2sd xmm0, QWORD PTR bits$[rsp]
	movsd	QWORD PTR vh$8[rsp], xmm0
	movsd	xmm0, QWORD PTR ph$5[rsp]
	subsd	xmm0, QWORD PTR vh$8[rsp]
	movsd	QWORD PTR ahi$6[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR ph$5[rsp]
	movsd	QWORD PTR t$9[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR t$9[rsp]
	movsd	xmm1, QWORD PTR ph$5[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR vh$8[rsp]
	addsd	xmm1, QWORD PTR t$9[rsp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR alo$11[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	addsd	xmm0, QWORD PTR alo$11[rsp]
	addsd	xmm0, QWORD PTR pl$12[rsp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1761
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN25@stbsp__rea
; Line 1762
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN25@stbsp__rea:
; Line 1766
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, -2147483648			; 80000000H
	test	eax, eax
	je	SHORT $LN44@stbsp__rea
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv162[rsp], eax
	jmp	SHORT $LN45@stbsp__rea
$LN44@stbsp__rea:
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv162[rsp], eax
$LN45@stbsp__rea:
	mov	eax, DWORD PTR tv162[rsp]
	mov	DWORD PTR frac_digits$[rsp], eax
; Line 1767
	cmp	DWORD PTR frac_digits$[rsp], 24
	jae	$LN26@stbsp__rea
; Line 1768
	mov	DWORD PTR dg$1[rsp], 1
; Line 1769
	mov	eax, 8
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN27@stbsp__rea
; Line 1770
	mov	DWORD PTR dg$1[rsp], 10
$LN27@stbsp__rea:
$LN7@stbsp__rea:
; Line 1771
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN8@stbsp__rea
; Line 1772
	mov	eax, DWORD PTR dg$1[rsp]
	inc	eax
	mov	DWORD PTR dg$1[rsp], eax
; Line 1773
	cmp	DWORD PTR dg$1[rsp], 20
	jne	SHORT $LN28@stbsp__rea
; Line 1774
	jmp	$noround$46
$LN28@stbsp__rea:
; Line 1775
	jmp	SHORT $LN7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	mov	eax, DWORD PTR dg$1[rsp]
	cmp	DWORD PTR frac_digits$[rsp], eax
	jae	$LN29@stbsp__rea
; Line 1779
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR dg$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 1780
	cmp	DWORD PTR e$[rsp], 24
	jb	SHORT $LN30@stbsp__rea
; Line 1781
	jmp	SHORT $noround$46
$LN30@stbsp__rea:
; Line 1782
	movsxd	rax, DWORD PTR e$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR r$10[rsp], rax
; Line 1783
	xor	edx, edx
	mov	rax, QWORD PTR r$10[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1784
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN31@stbsp__rea
; Line 1785
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN31@stbsp__rea:
; Line 1786
	xor	edx, edx
	mov	rax, QWORD PTR bits$[rsp]
	div	QWORD PTR r$10[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN29@stbsp__rea:
$noround$46:
$LN26@stbsp__rea:
; Line 1792
	cmp	QWORD PTR bits$[rsp], 0
	je	SHORT $LN32@stbsp__rea
$LN9@stbsp__rea:
; Line 1795
	mov	eax, -1
	cmp	QWORD PTR bits$[rsp], rax
	jg	SHORT $LN33@stbsp__rea
; Line 1796
	jmp	SHORT $LN10@stbsp__rea
$LN33@stbsp__rea:
; Line 1797
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN34@stbsp__rea
; Line 1798
	jmp	SHORT $donez$47
$LN34@stbsp__rea:
; Line 1799
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1800
	jmp	SHORT $LN9@stbsp__rea
$LN10@stbsp__rea:
; Line 1801
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$4[rsp], eax
$LN12@stbsp__rea:
; Line 1802
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN13@stbsp__rea
; Line 1803
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR n$4[rsp], eax
	jmp	SHORT $LN12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	eax, DWORD PTR n$4[rsp]
	mov	QWORD PTR bits$[rsp], rax
$donez$47:
$LN32@stbsp__rea:
; Line 1809
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR out$[rsp], rax
; Line 1810
	mov	DWORD PTR e$[rsp], 0
$LN14@stbsp__rea:
; Line 1813
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
	mov	QWORD PTR o$13[rsp], rax
; Line 1815
	cmp	QWORD PTR bits$[rsp], 100000000		; 05f5e100H
	jl	SHORT $LN35@stbsp__rea
; Line 1816
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1817
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1818
	jmp	SHORT $LN36@stbsp__rea
$LN35@stbsp__rea:
; Line 1819
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1820
	mov	QWORD PTR bits$[rsp], 0
$LN36@stbsp__rea:
$LN17@stbsp__rea:
; Line 1822
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN18@stbsp__rea
; Line 1823
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 2
	mov	QWORD PTR out$[rsp], rax
; Line 1824
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR out$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1825
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1826
	mov	eax, DWORD PTR e$[rsp]
	add	eax, 2
	mov	DWORD PTR e$[rsp], eax
; Line 1827
	jmp	SHORT $LN17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	cmp	QWORD PTR bits$[rsp], 0
	jne	SHORT $LN37@stbsp__rea
; Line 1829
	cmp	DWORD PTR e$[rsp], 0
	je	SHORT $LN38@stbsp__rea
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN38@stbsp__rea
; Line 1830
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 1831
	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax
$LN38@stbsp__rea:
; Line 1833
	jmp	SHORT $LN15@stbsp__rea
$LN37@stbsp__rea:
$LN19@stbsp__rea:
; Line 1835
	mov	rax, QWORD PTR o$13[rsp]
	cmp	QWORD PTR out$[rsp], rax
	je	SHORT $LN20@stbsp__rea
; Line 1836
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1837
	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
; Line 1838
	jmp	SHORT $LN19@stbsp__rea
$LN20@stbsp__rea:
; Line 1839
	jmp	$LN14@stbsp__rea
$LN15@stbsp__rea:
; Line 1841
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1842
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1843
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1844
	mov	eax, DWORD PTR ng$[rsp]
$LN1@stbsp__rea:
; Line 1845
	add	rsp, 184				; 000000b8H
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 275
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
; Line 276
	movzx	eax, BYTE PTR pperiod$[rsp]
	mov	BYTE PTR stbsp__period, al
; Line 277
	movzx	eax, BYTE PTR pcomma$[rsp]
	mov	BYTE PTR stbsp__comma, al
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$1 = 48
pr$2 = 52
n$3 = 56
s$4 = 64
l$5 = 72
bf$ = 80
dp$6 = 88
idx$7 = 92
f$ = 96
cs$8 = 104
i$9 = 108
tlen$ = 112
fw$10 = 116
n64$11 = 120
i$12 = 128
sn$13 = 136
i$14 = 144
i$15 = 148
tz$16 = 152
i$17 = 156
i$18 = 160
i$19 = 164
fv$20 = 168
h$21 = 176
tv218 = 184
tv141 = 188
v$22 = 192
tv265 = 196
len$23 = 200
c$24 = 204
len$25 = 208
len$26 = 212
len$27 = 216
len$28 = 220
len$29 = 224
len$30 = 228
len$31 = 232
len$32 = 236
i$33 = 240
len$34 = 244
tv472 = 248
tv528 = 252
tv600 = 256
tv917 = 260
lg$35 = 264
lg$36 = 268
tv996 = 272
lg$37 = 276
lg$38 = 280
lg$39 = 284
lg$40 = 288
lg$41 = 292
lg$42 = 296
c$43 = 300
tv271 = 304
tv315 = 308
tv408 = 312
tv409 = 316
tv410 = 320
tv469 = 324
o$44 = 328
divisor$45 = 336
tv1820 = 344
tv860 = 348
tv883 = 352
i64$46 = 360
tv1020 = 368
tv1019 = 372
tv1215 = 376
tv388 = 380
$T47 = 384
$T48 = 392
$T49 = 400
$T50 = 408
$T51 = 416
$T52 = 424
tv299 = 432
tv432 = 440
tv478 = 448
$T53 = 456
$T54 = 464
tv718 = 472
$T55 = 480
$T56 = 488
tv747 = 496
$T57 = 504
$T58 = 512
$T59 = 520
$T60 = 528
d$61 = 536
tv1488 = 544
lead$62 = 552
tail$63 = 560
num$64 = 576
__$ArrayPad$ = 1104
callback$ = 1136
user$ = 1144
buf$ = 1152
fmt$ = 1160
va$ = 1168
stbsp_vsprintfcb PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 350
$LN408:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1128				; 00000468H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 355
	mov	DWORD PTR tlen$[rsp], 0
; Line 357
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
; Line 358
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR f$[rsp], rax
$LN2@stbsp_vspr:
$LN5@stbsp_vspr:
$LN8@stbsp_vspr:
; Line 393
	mov	rax, QWORD PTR f$[rsp]
	and	rax, 3
	test	rax, rax
	je	$LN9@stbsp_vspr
$schk1$409:
; Line 395
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN126@stbsp_vspr
; Line 396
	jmp	$scandd$410
$LN126@stbsp_vspr:
$schk2$411:
; Line 398
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN127@stbsp_vspr
; Line 399
	jmp	$endfmt$412
$LN127@stbsp_vspr:
; Line 400
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN128@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$32[rsp], eax
	mov	eax, DWORD PTR len$32[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN129@stbsp_vspr
	mov	eax, DWORD PTR len$32[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$32[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN130@stbsp_vspr
	jmp	$done$413
$LN130@stbsp_vspr:
$LN129@stbsp_vspr:
$LN128@stbsp_vspr:
; Line 401
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bf$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 402
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 403
	jmp	$LN8@stbsp_vspr
$LN9@stbsp_vspr:
$LN10@stbsp_vspr:
; Line 409
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$22[rsp], eax
; Line 410
	mov	eax, DWORD PTR v$22[rsp]
	not	eax
	and	eax, -2139062144			; 80808080H
	mov	DWORD PTR c$43[rsp], eax
; Line 411
	mov	eax, DWORD PTR v$22[rsp]
	xor	eax, 623191333				; 25252525H
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$43[rsp]
	test	eax, eax
	je	SHORT $LN131@stbsp_vspr
; Line 412
	jmp	$schk1$409
$LN131@stbsp_vspr:
; Line 413
	mov	eax, DWORD PTR v$22[rsp]
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$43[rsp]
	test	eax, eax
	je	SHORT $LN132@stbsp_vspr
; Line 414
	jmp	$schk2$411
$LN132@stbsp_vspr:
; Line 415
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN133@stbsp_vspr
; Line 416
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 4
	jge	SHORT $LN134@stbsp_vspr
; Line 417
	jmp	$schk1$409
$LN134@stbsp_vspr:
$LN133@stbsp_vspr:
; Line 427
	mov	rax, QWORD PTR bf$[rsp]
	mov	ecx, DWORD PTR v$22[rsp]
	mov	DWORD PTR [rax], ecx
; Line 429
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 430
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 4
	mov	QWORD PTR f$[rsp], rax
; Line 431
	jmp	$LN10@stbsp_vspr
; Line 432
	jmp	$LN5@stbsp_vspr
$scandd$410:
; Line 435
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 438
	mov	DWORD PTR fw$10[rsp], 0
; Line 439
	mov	DWORD PTR pr$2[rsp], -1
; Line 440
	mov	DWORD PTR fl$1[rsp], 0
; Line 441
	mov	DWORD PTR tz$16[rsp], 0
$LN13@stbsp_vspr:
; Line 445
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv141[rsp], eax
	cmp	DWORD PTR tv141[rsp], 63		; 0000003fH
	ja	$LN147@stbsp_vspr
	movsxd	rax, DWORD PTR tv141[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN406@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN407@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN135@stbsp_vspr:
; Line 448
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 1
	mov	DWORD PTR fl$1[rsp], eax
; Line 449
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 450
	jmp	SHORT $LN13@stbsp_vspr
$LN136@stbsp_vspr:
; Line 453
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 2
	mov	DWORD PTR fl$1[rsp], eax
; Line 454
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 455
	jmp	$LN13@stbsp_vspr
$LN137@stbsp_vspr:
; Line 458
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 4
	mov	DWORD PTR fl$1[rsp], eax
; Line 459
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 460
	jmp	$LN13@stbsp_vspr
$LN138@stbsp_vspr:
; Line 463
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
; Line 464
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 465
	jmp	$LN13@stbsp_vspr
$LN139@stbsp_vspr:
; Line 468
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR fl$1[rsp], eax
; Line 469
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 470
	jmp	$LN13@stbsp_vspr
$LN140@stbsp_vspr:
; Line 473
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN141@stbsp_vspr
; Line 474
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN143@stbsp_vspr
; Line 475
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 12
	mov	DWORD PTR fl$1[rsp], eax
; Line 476
	jmp	SHORT $LN144@stbsp_vspr
$LN143@stbsp_vspr:
; Line 477
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 11
	mov	DWORD PTR fl$1[rsp], eax
$LN144@stbsp_vspr:
; Line 479
	jmp	SHORT $LN142@stbsp_vspr
$LN141@stbsp_vspr:
; Line 480
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
$LN142@stbsp_vspr:
; Line 482
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 483
	jmp	$LN13@stbsp_vspr
$LN145@stbsp_vspr:
; Line 486
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 10
	mov	DWORD PTR fl$1[rsp], eax
; Line 487
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 488
	jmp	$LN13@stbsp_vspr
$LN146@stbsp_vspr:
; Line 491
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 16
	mov	DWORD PTR fl$1[rsp], eax
; Line 492
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 493
	jmp	SHORT $flags_done$414
$LN147@stbsp_vspr:
; Line 494
	jmp	SHORT $flags_done$414
; Line 496
	jmp	$LN13@stbsp_vspr
$flags_done$414:
; Line 500
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN148@stbsp_vspr
; Line 501
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR fw$10[rsp], eax
; Line 502
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 503
	jmp	SHORT $LN149@stbsp_vspr
$LN148@stbsp_vspr:
$LN18@stbsp_vspr:
; Line 504
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN19@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN19@stbsp_vspr
; Line 505
	imul	eax, DWORD PTR fw$10[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR fw$10[rsp], eax
; Line 506
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 507
	jmp	SHORT $LN18@stbsp_vspr
$LN19@stbsp_vspr:
$LN149@stbsp_vspr:
; Line 510
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN150@stbsp_vspr
; Line 511
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 512
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN151@stbsp_vspr
; Line 513
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR pr$2[rsp], eax
; Line 514
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 515
	jmp	SHORT $LN152@stbsp_vspr
$LN151@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$2[rsp], 0
$LN20@stbsp_vspr:
; Line 517
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN21@stbsp_vspr
; Line 518
	imul	eax, DWORD PTR pr$2[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR pr$2[rsp], eax
; Line 519
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 520
	jmp	SHORT $LN20@stbsp_vspr
$LN21@stbsp_vspr:
$LN152@stbsp_vspr:
$LN150@stbsp_vspr:
; Line 525
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv218[rsp], eax
	mov	eax, DWORD PTR tv218[rsp]
	sub	eax, 73					; 00000049H
	mov	DWORD PTR tv218[rsp], eax
	cmp	DWORD PTR tv218[rsp], 49		; 00000031H
	ja	$LN165@stbsp_vspr
	movsxd	rax, DWORD PTR tv218[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN404@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN405@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN153@stbsp_vspr:
; Line 528
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 9
	mov	DWORD PTR fl$1[rsp], eax
; Line 529
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 530
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 104				; 00000068H
	jne	SHORT $LN154@stbsp_vspr
; Line 531
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN154@stbsp_vspr:
; Line 532
	jmp	$LN22@stbsp_vspr
$LN155@stbsp_vspr:
; Line 535
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fl$1[rsp], eax
; Line 536
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 537
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN156@stbsp_vspr
; Line 538
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 539
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN156@stbsp_vspr:
; Line 541
	jmp	$LN22@stbsp_vspr
$LN157@stbsp_vspr:
; Line 544
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 545
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 546
	jmp	$LN22@stbsp_vspr
$LN158@stbsp_vspr:
; Line 549
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 550
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 551
	jmp	$LN22@stbsp_vspr
$LN159@stbsp_vspr:
; Line 553
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 554
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 555
	jmp	$LN22@stbsp_vspr
$LN160@stbsp_vspr:
; Line 558
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN161@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 52					; 00000034H
	jne	SHORT $LN161@stbsp_vspr
; Line 559
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 560
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
	jmp	SHORT $LN162@stbsp_vspr
$LN161@stbsp_vspr:
; Line 561
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 51					; 00000033H
	jne	SHORT $LN163@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 50					; 00000032H
	jne	SHORT $LN163@stbsp_vspr
; Line 562
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
; Line 563
	jmp	SHORT $LN164@stbsp_vspr
$LN163@stbsp_vspr:
; Line 564
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 565
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN164@stbsp_vspr:
$LN162@stbsp_vspr:
$LN165@stbsp_vspr:
$LN22@stbsp_vspr:
; Line 572
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv265[rsp], eax
	mov	eax, DWORD PTR tv265[rsp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR tv265[rsp], eax
	cmp	DWORD PTR tv265[rsp], 55		; 00000037H
	ja	$LN336@stbsp_vspr
	movsxd	rax, DWORD PTR tv265[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN402@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN403@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN166@stbsp_vspr:
; Line 589
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR s$4[rsp], rax
; Line 590
	cmp	QWORD PTR s$4[rsp], 0
	jne	SHORT $LN167@stbsp_vspr
; Line 591
	lea	rax, OFFSET FLAT:$SG105722
	mov	QWORD PTR s$4[rsp], rax
$LN167@stbsp_vspr:
; Line 594
	cmp	DWORD PTR pr$2[rsp], 0
	jl	SHORT $LN342@stbsp_vspr
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv271[rsp], eax
	jmp	SHORT $LN343@stbsp_vspr
$LN342@stbsp_vspr:
	mov	DWORD PTR tv271[rsp], -1		; ffffffffH
$LN343@stbsp_vspr:
	mov	edx, DWORD PTR tv271[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	call	stbsp__strlen_limited
	mov	DWORD PTR l$5[rsp], eax
; Line 595
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T49[rsp], rax
	cmp	QWORD PTR $T49[rsp], 8
	jae	SHORT $LN344@stbsp_vspr
	jmp	SHORT $LN345@stbsp_vspr
$LN344@stbsp_vspr:
	call	__report_rangecheckfailure
$LN345@stbsp_vspr:
	mov	rax, QWORD PTR $T49[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 596
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T50[rsp], rax
	cmp	QWORD PTR $T50[rsp], 8
	jae	SHORT $LN346@stbsp_vspr
	jmp	SHORT $LN347@stbsp_vspr
$LN346@stbsp_vspr:
	call	__report_rangecheckfailure
$LN347@stbsp_vspr:
	mov	rax, QWORD PTR $T50[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 597
	mov	DWORD PTR pr$2[rsp], 0
; Line 598
	mov	DWORD PTR dp$6[rsp], 0
; Line 599
	mov	DWORD PTR cs$8[rsp], 0
; Line 601
	jmp	$scopy$415
$LN168@stbsp_vspr:
; Line 605
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 606
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR va$[rsp]
	movzx	ecx, BYTE PTR [rcx-8]
	mov	BYTE PTR [rax], cl
; Line 607
	mov	DWORD PTR l$5[rsp], 1
; Line 608
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T51[rsp], rax
	cmp	QWORD PTR $T51[rsp], 8
	jae	SHORT $LN348@stbsp_vspr
	jmp	SHORT $LN349@stbsp_vspr
$LN348@stbsp_vspr:
	call	__report_rangecheckfailure
$LN349@stbsp_vspr:
	mov	rax, QWORD PTR $T51[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 609
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T52[rsp], rax
	cmp	QWORD PTR $T52[rsp], 8
	jae	SHORT $LN350@stbsp_vspr
	jmp	SHORT $LN351@stbsp_vspr
$LN350@stbsp_vspr:
	call	__report_rangecheckfailure
$LN351@stbsp_vspr:
	mov	rax, QWORD PTR $T52[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 610
	mov	DWORD PTR pr$2[rsp], 0
; Line 611
	mov	DWORD PTR dp$6[rsp], 0
; Line 612
	mov	DWORD PTR cs$8[rsp], 0
; Line 613
	jmp	$scopy$415
$LN169@stbsp_vspr:
; Line 617
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR d$61[rsp], rax
; Line 618
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR d$61[rsp]
	mov	DWORD PTR [rcx], eax
; Line 619
	jmp	$LN24@stbsp_vspr
$LN170@stbsp_vspr:
$LN171@stbsp_vspr:
; Line 641
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN352@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv299[rsp], rax
	jmp	SHORT $LN353@stbsp_vspr
$LN352@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv299[rsp], rax
$LN353@stbsp_vspr:
	mov	rax, QWORD PTR tv299[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 642
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 643
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN172@stbsp_vspr
; Line 644
	mov	DWORD PTR pr$2[rsp], 6
$LN172@stbsp_vspr:
; Line 646
	movsd	xmm2, QWORD PTR fv$20[rsp]
	lea	rdx, QWORD PTR dp$6[rsp]
	lea	rcx, QWORD PTR n64$11[rsp]
	call	stbsp__real_to_parts
	test	eax, eax
	je	SHORT $LN173@stbsp_vspr
; Line 647
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN173@stbsp_vspr:
; Line 649
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 651
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 653
	cmp	DWORD PTR dp$6[rsp], -1023		; fffffffffffffc01H
	jne	SHORT $LN174@stbsp_vspr
; Line 654
	cmp	QWORD PTR n64$11[rsp], 0
	je	SHORT $LN354@stbsp_vspr
	mov	DWORD PTR tv315[rsp], -1022		; fffffffffffffc02H
	jmp	SHORT $LN355@stbsp_vspr
$LN354@stbsp_vspr:
	mov	DWORD PTR tv315[rsp], 0
$LN355@stbsp_vspr:
	mov	eax, DWORD PTR tv315[rsp]
	mov	DWORD PTR dp$6[rsp], eax
	jmp	SHORT $LN175@stbsp_vspr
$LN174@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	mov	rcx, QWORD PTR n64$11[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN175@stbsp_vspr:
; Line 657
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 8
	mov	QWORD PTR n64$11[rsp], rax
; Line 658
	cmp	DWORD PTR pr$2[rsp], 15
	jge	SHORT $LN176@stbsp_vspr
; Line 659
	mov	eax, DWORD PTR pr$2[rsp]
	shl	eax, 2
	mov	rcx, 576460752303423488			; 0800000000000000H
	mov	QWORD PTR tv1488[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1488[rsp]
	shr	rax, cl
	mov	rcx, QWORD PTR n64$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN176@stbsp_vspr:
; Line 666
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	inc	eax
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 667
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 120		; 00000078H
; Line 668
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
; Line 670
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 671
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 672
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN177@stbsp_vspr
; Line 673
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN177@stbsp_vspr:
; Line 674
	mov	rax, QWORD PTR s$4[rsp]
	mov	QWORD PTR sn$13[rsp], rax
; Line 677
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 678
	cmp	DWORD PTR n$3[rsp], 13
	jbe	SHORT $LN178@stbsp_vspr
; Line 679
	mov	DWORD PTR n$3[rsp], 13
$LN178@stbsp_vspr:
; Line 680
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN179@stbsp_vspr
; Line 681
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN179@stbsp_vspr:
; Line 682
	mov	DWORD PTR pr$2[rsp], 0
$LN26@stbsp_vspr:
; Line 683
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR tv388[rsp], eax
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
	cmp	DWORD PTR tv388[rsp], 0
	je	SHORT $LN27@stbsp_vspr
; Line 684
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 685
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 686
	jmp	SHORT $LN26@stbsp_vspr
$LN27@stbsp_vspr:
; Line 689
	mov	eax, 1
	imul	rax, rax, 17
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 690
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN180@stbsp_vspr
; Line 691
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 692
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 693
	jmp	SHORT $LN181@stbsp_vspr
$LN180@stbsp_vspr:
; Line 694
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN181@stbsp_vspr:
; Line 695
	cmp	DWORD PTR dp$6[rsp], 1000		; 000003e8H
	jl	SHORT $LN360@stbsp_vspr
	mov	DWORD PTR tv410[rsp], 6
	jmp	SHORT $LN361@stbsp_vspr
$LN360@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN358@stbsp_vspr
	mov	DWORD PTR tv409[rsp], 5
	jmp	SHORT $LN359@stbsp_vspr
$LN358@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 10
	jl	SHORT $LN356@stbsp_vspr
	mov	DWORD PTR tv408[rsp], 4
	jmp	SHORT $LN357@stbsp_vspr
$LN356@stbsp_vspr:
	mov	DWORD PTR tv408[rsp], 3
$LN357@stbsp_vspr:
	mov	eax, DWORD PTR tv408[rsp]
	mov	DWORD PTR tv409[rsp], eax
$LN359@stbsp_vspr:
	mov	eax, DWORD PTR tv409[rsp]
	mov	DWORD PTR tv410[rsp], eax
$LN361@stbsp_vspr:
	mov	eax, DWORD PTR tv410[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 696
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN28@stbsp_vspr:
; Line 698
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 699
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN182@stbsp_vspr
; Line 700
	jmp	SHORT $LN29@stbsp_vspr
$LN182@stbsp_vspr:
; Line 701
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 702
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 703
	jmp	SHORT $LN28@stbsp_vspr
$LN29@stbsp_vspr:
; Line 705
	mov	rax, QWORD PTR sn$13[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dp$6[rsp], eax
; Line 706
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 707
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 708
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 709
	jmp	$scopy$415
$LN183@stbsp_vspr:
$LN184@stbsp_vspr:
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN362@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv432[rsp], rax
	jmp	SHORT $LN363@stbsp_vspr
$LN362@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv432[rsp], rax
$LN363@stbsp_vspr:
	mov	rax, QWORD PTR tv432[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 714
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 715
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN185@stbsp_vspr
; Line 716
	mov	DWORD PTR pr$2[rsp], 6
	jmp	SHORT $LN186@stbsp_vspr
$LN185@stbsp_vspr:
; Line 717
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN187@stbsp_vspr
; Line 718
	mov	DWORD PTR pr$2[rsp], 1
$LN187@stbsp_vspr:
$LN186@stbsp_vspr:
; Line 720
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN188@stbsp_vspr
; Line 721
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN188@stbsp_vspr:
; Line 724
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 725
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR l$5[rsp], eax
	jbe	SHORT $LN189@stbsp_vspr
; Line 726
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR l$5[rsp], eax
$LN189@stbsp_vspr:
$LN31@stbsp_vspr:
; Line 727
	cmp	DWORD PTR l$5[rsp], 1
	jbe	SHORT $LN32@stbsp_vspr
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN32@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR sn$13[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN32@stbsp_vspr
; Line 728
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
; Line 729
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 730
	jmp	SHORT $LN31@stbsp_vspr
$LN32@stbsp_vspr:
; Line 733
	cmp	DWORD PTR dp$6[rsp], -4
	jle	SHORT $LN191@stbsp_vspr
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jle	SHORT $LN190@stbsp_vspr
$LN191@stbsp_vspr:
; Line 734
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN192@stbsp_vspr
; Line 735
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
	jmp	SHORT $LN193@stbsp_vspr
$LN192@stbsp_vspr:
; Line 736
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN194@stbsp_vspr
; Line 737
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
$LN194@stbsp_vspr:
$LN193@stbsp_vspr:
; Line 738
	jmp	$doexpfromg$416
$LN190@stbsp_vspr:
; Line 741
	cmp	DWORD PTR dp$6[rsp], 0
	jle	SHORT $LN195@stbsp_vspr
; Line 742
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jge	SHORT $LN364@stbsp_vspr
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv469[rsp], eax
	jmp	SHORT $LN365@stbsp_vspr
$LN364@stbsp_vspr:
	mov	DWORD PTR tv469[rsp], 0
$LN365@stbsp_vspr:
	mov	eax, DWORD PTR tv469[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 743
	jmp	SHORT $LN196@stbsp_vspr
$LN195@stbsp_vspr:
; Line 744
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN366@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv472[rsp], eax
	jmp	SHORT $LN367@stbsp_vspr
$LN366@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv472[rsp], eax
$LN367@stbsp_vspr:
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	add	eax, DWORD PTR tv472[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN196@stbsp_vspr:
; Line 746
	jmp	$dofloatfromg$417
$LN197@stbsp_vspr:
$LN198@stbsp_vspr:
; Line 750
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN368@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv478[rsp], rax
	jmp	SHORT $LN369@stbsp_vspr
$LN368@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv478[rsp], rax
$LN369@stbsp_vspr:
	mov	rax, QWORD PTR tv478[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 751
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 752
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN199@stbsp_vspr
; Line 753
	mov	DWORD PTR pr$2[rsp], 6
$LN199@stbsp_vspr:
; Line 755
	mov	eax, DWORD PTR pr$2[rsp]
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN200@stbsp_vspr
; Line 756
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN200@stbsp_vspr:
$doexpfromg$416:
; Line 758
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T53[rsp], rax
	cmp	QWORD PTR $T53[rsp], 8
	jae	SHORT $LN370@stbsp_vspr
	jmp	SHORT $LN371@stbsp_vspr
$LN370@stbsp_vspr:
	call	__report_rangecheckfailure
$LN371@stbsp_vspr:
	mov	rax, QWORD PTR $T53[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 759
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 760
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN201@stbsp_vspr
; Line 761
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 762
	mov	DWORD PTR cs$8[rsp], 0
; Line 763
	mov	DWORD PTR pr$2[rsp], 0
; Line 764
	jmp	$scopy$415
$LN201@stbsp_vspr:
; Line 766
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 768
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 770
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN202@stbsp_vspr
; Line 771
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN202@stbsp_vspr:
; Line 774
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN203@stbsp_vspr
; Line 775
	mov	eax, DWORD PTR pr$2[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
$LN203@stbsp_vspr:
; Line 776
	mov	DWORD PTR n$3[rsp], 1
	jmp	SHORT $LN35@stbsp_vspr
$LN33@stbsp_vspr:
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
$LN35@stbsp_vspr:
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN34@stbsp_vspr
; Line 777
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	jmp	SHORT $LN33@stbsp_vspr
$LN34@stbsp_vspr:
; Line 779
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 780
	mov	DWORD PTR pr$2[rsp], 0
; Line 782
	mov	eax, 1
	imul	rax, rax, 14
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 783
	mov	eax, DWORD PTR dp$6[rsp]
	dec	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 784
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN204@stbsp_vspr
; Line 785
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 786
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 787
	jmp	SHORT $LN205@stbsp_vspr
$LN204@stbsp_vspr:
; Line 788
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN205@stbsp_vspr:
; Line 792
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN372@stbsp_vspr
	mov	DWORD PTR tv528[rsp], 5
	jmp	SHORT $LN373@stbsp_vspr
$LN372@stbsp_vspr:
	mov	DWORD PTR tv528[rsp], 4
$LN373@stbsp_vspr:
	mov	eax, DWORD PTR tv528[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 794
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN36@stbsp_vspr:
; Line 796
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 797
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN206@stbsp_vspr
; Line 798
	jmp	SHORT $LN37@stbsp_vspr
$LN206@stbsp_vspr:
; Line 799
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 800
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 801
	jmp	SHORT $LN36@stbsp_vspr
$LN37@stbsp_vspr:
; Line 802
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 803
	jmp	$flt_lead$418
$LN207@stbsp_vspr:
; Line 806
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR fv$20[rsp], xmm0
$doafloat$419:
; Line 809
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN208@stbsp_vspr
; Line 811
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
; Line 812
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN209@stbsp_vspr
; Line 813
	movsd	xmm0, QWORD PTR __real@4090000000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
$LN209@stbsp_vspr:
$LN39@stbsp_vspr:
; Line 814
	cmp	DWORD PTR fl$1[rsp], 67108864		; 04000000H
	jae	SHORT $LN40@stbsp_vspr
; Line 815
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	comisd	xmm0, QWORD PTR fv$20[rsp]
	jbe	SHORT $LN210@stbsp_vspr
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR fv$20[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN210@stbsp_vspr
; Line 816
	jmp	SHORT $LN40@stbsp_vspr
$LN210@stbsp_vspr:
; Line 817
	movsd	xmm0, QWORD PTR fv$20[rsp]
	divsd	xmm0, QWORD PTR divisor$45[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 818
	mov	eax, DWORD PTR fl$1[rsp]
	add	eax, 16777216				; 01000000H
	mov	DWORD PTR fl$1[rsp], eax
; Line 819
	jmp	SHORT $LN39@stbsp_vspr
$LN40@stbsp_vspr:
$LN208@stbsp_vspr:
; Line 821
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN211@stbsp_vspr
; Line 822
	mov	DWORD PTR pr$2[rsp], 6
$LN211@stbsp_vspr:
; Line 824
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN212@stbsp_vspr
; Line 825
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN212@stbsp_vspr:
$dofloatfromg$417:
; Line 827
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T54[rsp], rax
	cmp	QWORD PTR $T54[rsp], 8
	jae	SHORT $LN374@stbsp_vspr
	jmp	SHORT $LN375@stbsp_vspr
$LN374@stbsp_vspr:
	call	__report_rangecheckfailure
$LN375@stbsp_vspr:
	mov	rax, QWORD PTR $T54[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 828
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 829
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN213@stbsp_vspr
; Line 830
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 831
	mov	DWORD PTR cs$8[rsp], 0
; Line 832
	mov	DWORD PTR pr$2[rsp], 0
; Line 833
	jmp	$scopy$415
$LN213@stbsp_vspr:
; Line 835
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 838
	cmp	DWORD PTR dp$6[rsp], 0
	jg	$LN214@stbsp_vspr
; Line 841
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 842
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN216@stbsp_vspr
; Line 843
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN216@stbsp_vspr:
; Line 844
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 845
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jle	SHORT $LN217@stbsp_vspr
; Line 846
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN217@stbsp_vspr:
; Line 847
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN41@stbsp_vspr:
; Line 848
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN42@stbsp_vspr
; Line 849
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN218@stbsp_vspr
; Line 850
	jmp	SHORT $LN42@stbsp_vspr
$LN218@stbsp_vspr:
; Line 851
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 852
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 853
	jmp	SHORT $LN41@stbsp_vspr
$LN42@stbsp_vspr:
$LN43@stbsp_vspr:
; Line 854
	cmp	DWORD PTR i$12[rsp], 4
	jl	SHORT $LN44@stbsp_vspr
; Line 855
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 856
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 857
	mov	eax, DWORD PTR i$12[rsp]
	sub	eax, 4
	mov	DWORD PTR i$12[rsp], eax
; Line 858
	jmp	SHORT $LN43@stbsp_vspr
$LN44@stbsp_vspr:
$LN45@stbsp_vspr:
; Line 859
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN46@stbsp_vspr
; Line 860
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 861
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 862
	jmp	SHORT $LN45@stbsp_vspr
$LN46@stbsp_vspr:
; Line 863
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jle	SHORT $LN219@stbsp_vspr
; Line 864
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN219@stbsp_vspr:
; Line 865
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN47@stbsp_vspr:
; Line 866
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN48@stbsp_vspr
; Line 867
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 868
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 869
	jmp	SHORT $LN47@stbsp_vspr
$LN48@stbsp_vspr:
; Line 870
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 871
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 872
	jmp	$LN215@stbsp_vspr
$LN214@stbsp_vspr:
; Line 873
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN376@stbsp_vspr
	mov	eax, 600				; 00000258H
	sub	eax, DWORD PTR dp$6[rsp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	eax, edx
	mov	DWORD PTR tv600[rsp], eax
	jmp	SHORT $LN377@stbsp_vspr
$LN376@stbsp_vspr:
	mov	DWORD PTR tv600[rsp], 0
$LN377@stbsp_vspr:
	mov	eax, DWORD PTR tv600[rsp]
	mov	DWORD PTR cs$8[rsp], eax
; Line 874
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jb	$LN220@stbsp_vspr
; Line 876
	mov	DWORD PTR n$3[rsp], 0
$LN49@stbsp_vspr:
; Line 878
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN222@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN222@stbsp_vspr
; Line 879
	mov	DWORD PTR cs$8[rsp], 0
; Line 880
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 881
	jmp	SHORT $LN223@stbsp_vspr
$LN222@stbsp_vspr:
; Line 882
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 883
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 884
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN224@stbsp_vspr
; Line 885
	jmp	SHORT $LN50@stbsp_vspr
$LN224@stbsp_vspr:
$LN223@stbsp_vspr:
; Line 887
	jmp	SHORT $LN49@stbsp_vspr
$LN50@stbsp_vspr:
; Line 888
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	$LN225@stbsp_vspr
; Line 889
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR dp$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 890
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN226@stbsp_vspr
$LN52@stbsp_vspr:
; Line 891
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN53@stbsp_vspr
; Line 892
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN227@stbsp_vspr
; Line 893
	jmp	SHORT $LN53@stbsp_vspr
$LN227@stbsp_vspr:
; Line 894
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 895
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 896
	jmp	SHORT $LN52@stbsp_vspr
$LN53@stbsp_vspr:
$LN54@stbsp_vspr:
; Line 897
	cmp	DWORD PTR n$3[rsp], 4
	jb	SHORT $LN55@stbsp_vspr
; Line 898
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 899
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 900
	mov	eax, DWORD PTR n$3[rsp]
	sub	eax, 4
	mov	DWORD PTR n$3[rsp], eax
; Line 901
	jmp	SHORT $LN54@stbsp_vspr
$LN55@stbsp_vspr:
$LN226@stbsp_vspr:
$LN56@stbsp_vspr:
; Line 903
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN57@stbsp_vspr
; Line 904
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN228@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN228@stbsp_vspr
; Line 905
	mov	DWORD PTR cs$8[rsp], 0
; Line 906
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 907
	jmp	SHORT $LN229@stbsp_vspr
$LN228@stbsp_vspr:
; Line 908
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 909
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
$LN229@stbsp_vspr:
; Line 911
	jmp	SHORT $LN56@stbsp_vspr
$LN57@stbsp_vspr:
$LN225@stbsp_vspr:
; Line 913
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 914
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN230@stbsp_vspr
; Line 915
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 916
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tz$16[rsp], eax
$LN230@stbsp_vspr:
; Line 918
	jmp	$LN221@stbsp_vspr
$LN220@stbsp_vspr:
; Line 920
	mov	DWORD PTR n$3[rsp], 0
$LN58@stbsp_vspr:
; Line 922
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN231@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN231@stbsp_vspr
; Line 923
	mov	DWORD PTR cs$8[rsp], 0
; Line 924
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 925
	jmp	SHORT $LN232@stbsp_vspr
$LN231@stbsp_vspr:
; Line 926
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 927
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 928
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN233@stbsp_vspr
; Line 929
	jmp	SHORT $LN59@stbsp_vspr
$LN233@stbsp_vspr:
$LN232@stbsp_vspr:
; Line 931
	jmp	SHORT $LN58@stbsp_vspr
$LN59@stbsp_vspr:
; Line 932
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 933
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN234@stbsp_vspr
; Line 934
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN234@stbsp_vspr:
; Line 935
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN235@stbsp_vspr
; Line 936
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN235@stbsp_vspr:
$LN61@stbsp_vspr:
; Line 937
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN62@stbsp_vspr
; Line 938
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 939
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 940
	jmp	SHORT $LN61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN221@stbsp_vspr:
$LN215@stbsp_vspr:
; Line 944
	mov	DWORD PTR pr$2[rsp], 0
; Line 947
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN236@stbsp_vspr
; Line 949
	mov	BYTE PTR idx$7[rsp], 1
; Line 950
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN237@stbsp_vspr
; Line 951
	mov	BYTE PTR idx$7[rsp], 0
$LN237@stbsp_vspr:
; Line 952
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
; Line 953
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR tail$63[rsp+rax], 32		; 00000020H
; Line 955
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	test	eax, eax
	je	$LN238@stbsp_vspr
; Line 956
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN239@stbsp_vspr
; Line 957
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG105796
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
	jmp	SHORT $LN240@stbsp_vspr
$LN239@stbsp_vspr:
; Line 959
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG105797
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
$LN240@stbsp_vspr:
; Line 960
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
; Line 962
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN241@stbsp_vspr
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	SHORT $LN241@stbsp_vspr
; Line 963
	movsx	eax, BYTE PTR idx$7[rsp]
	inc	eax
	cdqe
	mov	BYTE PTR tail$63[rsp+rax], 105		; 00000069H
; Line 964
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
$LN241@stbsp_vspr:
; Line 966
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN238@stbsp_vspr:
$LN236@stbsp_vspr:
$flt_lead$418:
; Line 973
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 974
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 975
	jmp	$scopy$415
$LN242@stbsp_vspr:
$LN243@stbsp_vspr:
; Line 980
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN378@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv718[rsp], rax
	jmp	SHORT $LN379@stbsp_vspr
$LN378@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv718[rsp], rax
$LN379@stbsp_vspr:
	mov	rax, QWORD PTR tv718[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 981
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T55[rsp], rax
	cmp	QWORD PTR $T55[rsp], 8
	jae	SHORT $LN380@stbsp_vspr
	jmp	SHORT $LN381@stbsp_vspr
$LN380@stbsp_vspr:
	call	__report_rangecheckfailure
$LN381@stbsp_vspr:
	mov	rax, QWORD PTR $T55[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 982
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN244@stbsp_vspr
; Line 983
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 984
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 985
	mov	eax, 1
	imul	rax, rax, 11
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN244@stbsp_vspr:
; Line 987
	mov	DWORD PTR l$5[rsp], 384			; 00000180H
; Line 988
	jmp	$radixnum$420
$LN245@stbsp_vspr:
; Line 991
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR h$21[rsp], rax
; Line 992
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T56[rsp], rax
	cmp	QWORD PTR $T56[rsp], 8
	jae	SHORT $LN382@stbsp_vspr
	jmp	SHORT $LN383@stbsp_vspr
$LN382@stbsp_vspr:
	call	__report_rangecheckfailure
$LN383@stbsp_vspr:
	mov	rax, QWORD PTR $T56[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 993
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN246@stbsp_vspr
; Line 994
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 1
; Line 995
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
$LN246@stbsp_vspr:
; Line 997
	mov	DWORD PTR l$5[rsp], 816			; 00000330H
; Line 998
	jmp	$radixnum$420
$LN247@stbsp_vspr:
; Line 1001
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 1002
	mov	DWORD PTR pr$2[rsp], 16
; Line 1003
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -17				; ffffffefH
	mov	DWORD PTR fl$1[rsp], eax
$LN248@stbsp_vspr:
$LN249@stbsp_vspr:
; Line 1008
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 88					; 00000058H
	jne	SHORT $LN384@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv747[rsp], rax
	jmp	SHORT $LN385@stbsp_vspr
$LN384@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@9
	mov	QWORD PTR tv747[rsp], rax
$LN385@stbsp_vspr:
	mov	rax, QWORD PTR tv747[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 1009
	mov	DWORD PTR l$5[rsp], 1088		; 00000440H
; Line 1010
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T57[rsp], rax
	cmp	QWORD PTR $T57[rsp], 8
	jae	SHORT $LN386@stbsp_vspr
	jmp	SHORT $LN387@stbsp_vspr
$LN386@stbsp_vspr:
	call	__report_rangecheckfailure
$LN387@stbsp_vspr:
	mov	rax, QWORD PTR $T57[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1011
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN250@stbsp_vspr
; Line 1012
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 1013
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 1014
	mov	eax, 1
	imul	rax, rax, 16
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN250@stbsp_vspr:
$radixnum$420:
; Line 1018
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN251@stbsp_vspr
; Line 1019
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR n64$11[rsp], rax
	jmp	SHORT $LN252@stbsp_vspr
$LN251@stbsp_vspr:
; Line 1021
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	QWORD PTR n64$11[rsp], rax
$LN252@stbsp_vspr:
; Line 1023
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1024
	mov	DWORD PTR dp$6[rsp], 0
; Line 1026
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T58[rsp], rax
	cmp	QWORD PTR $T58[rsp], 8
	jae	SHORT $LN388@stbsp_vspr
	jmp	SHORT $LN389@stbsp_vspr
$LN388@stbsp_vspr:
	call	__report_rangecheckfailure
$LN389@stbsp_vspr:
	mov	rax, QWORD PTR $T58[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1027
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN253@stbsp_vspr
; Line 1028
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T59[rsp], rax
	cmp	QWORD PTR $T59[rsp], 8
	jae	SHORT $LN390@stbsp_vspr
	jmp	SHORT $LN391@stbsp_vspr
$LN390@stbsp_vspr:
	call	__report_rangecheckfailure
$LN391@stbsp_vspr:
	mov	rax, QWORD PTR $T59[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1029
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN254@stbsp_vspr
; Line 1030
	mov	DWORD PTR l$5[rsp], 0
; Line 1031
	mov	DWORD PTR cs$8[rsp], 0
; Line 1032
	jmp	$scopy$415
$LN254@stbsp_vspr:
$LN253@stbsp_vspr:
$LN63@stbsp_vspr:
; Line 1037
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	ecx, 1
	mov	DWORD PTR tv1820[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1820[rsp]
	shl	eax, cl
	dec	eax
	cdqe
	mov	rcx, QWORD PTR n64$11[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1038
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	eax, eax
	movzx	ecx, al
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, cl
	mov	QWORD PTR n64$11[rsp], rax
; Line 1039
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN255@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	cmp	eax, DWORD PTR pr$2[rsp]
	jl	SHORT $LN255@stbsp_vspr
; Line 1040
	jmp	SHORT $LN64@stbsp_vspr
$LN255@stbsp_vspr:
; Line 1041
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN256@stbsp_vspr
; Line 1042
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 1043
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	cmp	eax, ecx
	jne	SHORT $LN257@stbsp_vspr
; Line 1044
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR l$5[rsp], eax
; Line 1045
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
$LN257@stbsp_vspr:
$LN256@stbsp_vspr:
; Line 1048
	jmp	$LN63@stbsp_vspr
$LN64@stbsp_vspr:
; Line 1050
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	shl	ecx, 24
	add	eax, ecx
	mov	DWORD PTR cs$8[rsp], eax
; Line 1052
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1054
	jmp	$scopy$415
$LN258@stbsp_vspr:
$LN259@stbsp_vspr:
$LN260@stbsp_vspr:
; Line 1060
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN261@stbsp_vspr
; Line 1061
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR i64$46[rsp], rax
; Line 1062
	mov	rax, QWORD PTR i64$46[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1063
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN263@stbsp_vspr
	cmp	QWORD PTR i64$46[rsp], 0
	jge	SHORT $LN263@stbsp_vspr
; Line 1064
	mov	rax, QWORD PTR i64$46[rsp]
	neg	rax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1065
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN263@stbsp_vspr:
; Line 1067
	jmp	SHORT $LN262@stbsp_vspr
$LN261@stbsp_vspr:
; Line 1068
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR i$33[rsp], eax
; Line 1069
	mov	eax, DWORD PTR i$33[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1070
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN264@stbsp_vspr
	cmp	DWORD PTR i$33[rsp], 0
	jge	SHORT $LN264@stbsp_vspr
; Line 1071
	mov	eax, DWORD PTR i$33[rsp]
	neg	eax
	mov	eax, eax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1072
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN264@stbsp_vspr:
$LN262@stbsp_vspr:
; Line 1077
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN265@stbsp_vspr
; Line 1078
	cmp	QWORD PTR n64$11[rsp], 1024		; 00000400H
	jae	SHORT $LN266@stbsp_vspr
; Line 1079
	mov	DWORD PTR pr$2[rsp], 0
	jmp	SHORT $LN267@stbsp_vspr
$LN266@stbsp_vspr:
; Line 1080
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN268@stbsp_vspr
; Line 1081
	mov	DWORD PTR pr$2[rsp], 1
$LN268@stbsp_vspr:
$LN267@stbsp_vspr:
; Line 1082
	cvtsi2sd xmm0, QWORD PTR n64$11[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 1083
	jmp	$doafloat$419
$LN265@stbsp_vspr:
; Line 1088
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1089
	mov	DWORD PTR l$5[rsp], 0
$LN66@stbsp_vspr:
; Line 1093
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 8
	mov	QWORD PTR o$44[rsp], rax
; Line 1094
	cmp	QWORD PTR n64$11[rsp], 100000000	; 05f5e100H
	jb	SHORT $LN269@stbsp_vspr
; Line 1095
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1096
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	QWORD PTR n64$11[rsp], rax
; Line 1097
	jmp	SHORT $LN270@stbsp_vspr
$LN269@stbsp_vspr:
; Line 1098
	mov	eax, DWORD PTR n64$11[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1099
	mov	QWORD PTR n64$11[rsp], 0
$LN270@stbsp_vspr:
; Line 1101
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN271@stbsp_vspr
$LN71@stbsp_vspr:
; Line 1103
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 2
	mov	QWORD PTR s$4[rsp], rax
; Line 1104
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR s$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1105
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1106
	cmp	DWORD PTR n$3[rsp], 0
	jne	SHORT $LN71@stbsp_vspr
$LN271@stbsp_vspr:
$LN72@stbsp_vspr:
; Line 1108
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN73@stbsp_vspr
; Line 1109
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN272@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv860[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv860[rsp], 3
	jne	SHORT $LN272@stbsp_vspr
; Line 1110
	mov	DWORD PTR l$5[rsp], 0
; Line 1111
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1112
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1113
	jmp	SHORT $LN273@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1114
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	eax, edx
	movsx	eax, al
	add	eax, 48					; 00000030H
	mov	rcx, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rcx], al
; Line 1115
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
$LN273@stbsp_vspr:
; Line 1117
	jmp	$LN72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN274@stbsp_vspr
; Line 1119
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN275@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN275@stbsp_vspr
; Line 1120
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN275@stbsp_vspr:
; Line 1121
	jmp	$LN67@stbsp_vspr
$LN274@stbsp_vspr:
$LN74@stbsp_vspr:
; Line 1123
	mov	rax, QWORD PTR o$44[rsp]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN75@stbsp_vspr
; Line 1124
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN276@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv883[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv883[rsp], 3
	jne	SHORT $LN276@stbsp_vspr
; Line 1125
	mov	DWORD PTR l$5[rsp], 0
; Line 1126
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1127
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1128
	jmp	SHORT $LN277@stbsp_vspr
$LN276@stbsp_vspr:
; Line 1129
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
$LN277@stbsp_vspr:
; Line 1130
	jmp	$LN74@stbsp_vspr
$LN75@stbsp_vspr:
; Line 1131
	jmp	$LN66@stbsp_vspr
$LN67@stbsp_vspr:
; Line 1133
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T60[rsp], rax
	cmp	QWORD PTR $T60[rsp], 8
	jae	SHORT $LN392@stbsp_vspr
	jmp	SHORT $LN393@stbsp_vspr
$LN392@stbsp_vspr:
	call	__report_rangecheckfailure
$LN393@stbsp_vspr:
	mov	rax, QWORD PTR $T60[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1134
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 1137
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1138
	cmp	DWORD PTR l$5[rsp], 0
	jne	SHORT $LN278@stbsp_vspr
; Line 1139
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1140
	mov	DWORD PTR l$5[rsp], 1
$LN278@stbsp_vspr:
; Line 1142
	mov	eax, DWORD PTR l$5[rsp]
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 1143
	cmp	DWORD PTR pr$2[rsp], 0
	jge	SHORT $LN279@stbsp_vspr
; Line 1144
	mov	DWORD PTR pr$2[rsp], 0
$LN279@stbsp_vspr:
$scopy$415:
; Line 1148
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jge	SHORT $LN280@stbsp_vspr
; Line 1149
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN280@stbsp_vspr:
; Line 1150
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	ecx, BYTE PTR tail$63[rsp+rcx]
	mov	edx, DWORD PTR tz$16[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1151
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jge	SHORT $LN281@stbsp_vspr
; Line 1152
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR fw$10[rsp], eax
$LN281@stbsp_vspr:
; Line 1153
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
; Line 1154
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1157
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN282@stbsp_vspr
; Line 1158
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN283@stbsp_vspr
; Line 1160
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jle	SHORT $LN394@stbsp_vspr
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR tv917[rsp], eax
	jmp	SHORT $LN395@stbsp_vspr
$LN394@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv917[rsp], eax
$LN395@stbsp_vspr:
	mov	eax, DWORD PTR tv917[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 1161
	mov	DWORD PTR fw$10[rsp], 0
; Line 1162
	jmp	SHORT $LN284@stbsp_vspr
$LN283@stbsp_vspr:
; Line 1163
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -65				; ffffffbfH
	mov	DWORD PTR fl$1[rsp], eax
$LN284@stbsp_vspr:
$LN282@stbsp_vspr:
; Line 1168
	mov	eax, DWORD PTR pr$2[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	$LN285@stbsp_vspr
; Line 1173
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN286@stbsp_vspr
$LN76@stbsp_vspr:
; Line 1174
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN77@stbsp_vspr
; Line 1175
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN287@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$35[rsp], eax
	mov	eax, DWORD PTR lg$35[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN288@stbsp_vspr
	mov	eax, DWORD PTR lg$35[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN288@stbsp_vspr:
$LN287@stbsp_vspr:
; Line 1176
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN78@stbsp_vspr:
; Line 1177
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN79@stbsp_vspr
; Line 1178
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN289@stbsp_vspr
; Line 1179
	jmp	SHORT $LN79@stbsp_vspr
$LN289@stbsp_vspr:
; Line 1180
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1181
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1182
	jmp	SHORT $LN78@stbsp_vspr
$LN79@stbsp_vspr:
$LN80@stbsp_vspr:
; Line 1183
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN81@stbsp_vspr
; Line 1184
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1185
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1187
	jmp	SHORT $LN80@stbsp_vspr
$LN81@stbsp_vspr:
$LN82@stbsp_vspr:
; Line 1188
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN83@stbsp_vspr
; Line 1189
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1191
	jmp	SHORT $LN82@stbsp_vspr
$LN83@stbsp_vspr:
; Line 1192
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN290@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$34[rsp], eax
	mov	eax, DWORD PTR len$34[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN291@stbsp_vspr
	mov	eax, DWORD PTR len$34[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$34[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN292@stbsp_vspr
	jmp	$done$413
$LN292@stbsp_vspr:
$LN291@stbsp_vspr:
$LN290@stbsp_vspr:
; Line 1193
	jmp	$LN76@stbsp_vspr
$LN77@stbsp_vspr:
$LN286@stbsp_vspr:
; Line 1196
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN84@stbsp_vspr:
; Line 1197
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN85@stbsp_vspr
; Line 1198
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN293@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$36[rsp], eax
	mov	eax, DWORD PTR lg$36[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN294@stbsp_vspr
	mov	eax, DWORD PTR lg$36[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN294@stbsp_vspr:
$LN293@stbsp_vspr:
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$9[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN86@stbsp_vspr:
; Line 1200
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN87@stbsp_vspr
; Line 1201
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1202
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1203
	jmp	SHORT $LN86@stbsp_vspr
$LN87@stbsp_vspr:
; Line 1204
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN295@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$23[rsp], eax
	mov	eax, DWORD PTR len$23[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN296@stbsp_vspr
	mov	eax, DWORD PTR len$23[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$23[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN297@stbsp_vspr
	jmp	$done$413
$LN297@stbsp_vspr:
$LN296@stbsp_vspr:
$LN295@stbsp_vspr:
; Line 1205
	jmp	$LN84@stbsp_vspr
$LN85@stbsp_vspr:
; Line 1208
	mov	eax, DWORD PTR cs$8[rsp]
	shr	eax, 24
	mov	DWORD PTR c$24[rsp], eax
; Line 1209
	mov	eax, DWORD PTR cs$8[rsp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR cs$8[rsp], eax
; Line 1210
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN396@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$24[rsp]
	inc	ecx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR c$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv996[rsp], eax
	jmp	SHORT $LN397@stbsp_vspr
$LN396@stbsp_vspr:
	mov	DWORD PTR tv996[rsp], 0
$LN397@stbsp_vspr:
	mov	eax, DWORD PTR tv996[rsp]
	mov	DWORD PTR cs$8[rsp], eax
$LN88@stbsp_vspr:
; Line 1211
	cmp	DWORD PTR pr$2[rsp], 0
	jle	$LN89@stbsp_vspr
; Line 1212
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN298@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$37[rsp], eax
	mov	eax, DWORD PTR lg$37[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN299@stbsp_vspr
	mov	eax, DWORD PTR lg$37[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN299@stbsp_vspr:
$LN298@stbsp_vspr:
; Line 1213
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1214
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN300@stbsp_vspr
$LN90@stbsp_vspr:
; Line 1215
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN91@stbsp_vspr
; Line 1216
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN301@stbsp_vspr
; Line 1217
	jmp	SHORT $LN91@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1218
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1219
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1220
	jmp	SHORT $LN90@stbsp_vspr
$LN91@stbsp_vspr:
$LN92@stbsp_vspr:
; Line 1221
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN93@stbsp_vspr
; Line 1222
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1223
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1224
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1225
	jmp	SHORT $LN92@stbsp_vspr
$LN93@stbsp_vspr:
$LN300@stbsp_vspr:
$LN94@stbsp_vspr:
; Line 1227
	cmp	DWORD PTR i$9[rsp], 0
	je	$LN95@stbsp_vspr
; Line 1228
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN302@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	DWORD PTR tv1019[rsp], eax
	mov	eax, DWORD PTR c$24[rsp]
	mov	DWORD PTR tv1020[rsp], eax
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	mov	eax, DWORD PTR tv1020[rsp]
	cmp	DWORD PTR tv1019[rsp], eax
	jne	SHORT $LN302@stbsp_vspr
; Line 1229
	mov	DWORD PTR cs$8[rsp], 0
; Line 1230
	mov	rax, QWORD PTR bf$[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1231
	jmp	SHORT $LN303@stbsp_vspr
$LN302@stbsp_vspr:
; Line 1232
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
$LN303@stbsp_vspr:
; Line 1233
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1234
	jmp	$LN94@stbsp_vspr
$LN95@stbsp_vspr:
; Line 1235
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN304@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$25[rsp], eax
	mov	eax, DWORD PTR len$25[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN305@stbsp_vspr
	mov	eax, DWORD PTR len$25[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$25[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN306@stbsp_vspr
	jmp	$done$413
$LN306@stbsp_vspr:
$LN305@stbsp_vspr:
$LN304@stbsp_vspr:
; Line 1236
	jmp	$LN88@stbsp_vspr
$LN89@stbsp_vspr:
$LN285@stbsp_vspr:
; Line 1240
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN96@stbsp_vspr:
; Line 1241
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN97@stbsp_vspr
; Line 1243
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$18[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN307@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$38[rsp], eax
	mov	eax, DWORD PTR lg$38[rsp]
	cmp	DWORD PTR i$18[rsp], eax
	jle	SHORT $LN308@stbsp_vspr
	mov	eax, DWORD PTR lg$38[rsp]
	mov	DWORD PTR i$18[rsp], eax
$LN308@stbsp_vspr:
$LN307@stbsp_vspr:
; Line 1244
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$18[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN98@stbsp_vspr:
; Line 1245
	cmp	DWORD PTR i$18[rsp], 0
	je	SHORT $LN99@stbsp_vspr
; Line 1246
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1247
	mov	eax, DWORD PTR i$18[rsp]
	dec	eax
	mov	DWORD PTR i$18[rsp], eax
; Line 1248
	jmp	SHORT $LN98@stbsp_vspr
$LN99@stbsp_vspr:
; Line 1249
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN309@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$26[rsp], eax
	mov	eax, DWORD PTR len$26[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN310@stbsp_vspr
	mov	eax, DWORD PTR len$26[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$26[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN311@stbsp_vspr
	jmp	$done$413
$LN311@stbsp_vspr:
$LN310@stbsp_vspr:
$LN309@stbsp_vspr:
; Line 1250
	jmp	$LN96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1253
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN100@stbsp_vspr:
; Line 1254
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN101@stbsp_vspr
; Line 1256
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$17[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN312@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$39[rsp], eax
	mov	eax, DWORD PTR lg$39[rsp]
	cmp	DWORD PTR i$17[rsp], eax
	jle	SHORT $LN313@stbsp_vspr
	mov	eax, DWORD PTR lg$39[rsp]
	mov	DWORD PTR i$17[rsp], eax
$LN313@stbsp_vspr:
$LN312@stbsp_vspr:
; Line 1257
	mov	eax, DWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
$LN102@stbsp_vspr:
; Line 1258
	cmp	DWORD PTR i$17[rsp], 4
	jl	SHORT $LN103@stbsp_vspr
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR i$17[rsp]
	sub	eax, 4
	mov	DWORD PTR i$17[rsp], eax
; Line 1263
	jmp	SHORT $LN102@stbsp_vspr
$LN103@stbsp_vspr:
$LN104@stbsp_vspr:
; Line 1264
	cmp	DWORD PTR i$17[rsp], 0
	je	SHORT $LN105@stbsp_vspr
; Line 1265
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 1266
	mov	eax, DWORD PTR i$17[rsp]
	dec	eax
	mov	DWORD PTR i$17[rsp], eax
; Line 1267
	jmp	SHORT $LN104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN314@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$27[rsp], eax
	mov	eax, DWORD PTR len$27[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN315@stbsp_vspr
	mov	eax, DWORD PTR len$27[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$27[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN316@stbsp_vspr
	jmp	$done$413
$LN316@stbsp_vspr:
$LN315@stbsp_vspr:
$LN314@stbsp_vspr:
; Line 1269
	jmp	$LN100@stbsp_vspr
$LN101@stbsp_vspr:
$LN106@stbsp_vspr:
; Line 1272
	cmp	DWORD PTR tz$16[rsp], 0
	je	$LN107@stbsp_vspr
; Line 1274
	mov	eax, DWORD PTR tz$16[rsp]
	mov	DWORD PTR i$14[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN317@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$40[rsp], eax
	mov	eax, DWORD PTR lg$40[rsp]
	cmp	DWORD PTR i$14[rsp], eax
	jle	SHORT $LN318@stbsp_vspr
	mov	eax, DWORD PTR lg$40[rsp]
	mov	DWORD PTR i$14[rsp], eax
$LN318@stbsp_vspr:
$LN317@stbsp_vspr:
; Line 1275
	mov	eax, DWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR tz$16[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN108@stbsp_vspr:
; Line 1276
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN109@stbsp_vspr
; Line 1277
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN319@stbsp_vspr
; Line 1278
	jmp	SHORT $LN109@stbsp_vspr
$LN319@stbsp_vspr:
; Line 1279
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1280
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1281
	jmp	SHORT $LN108@stbsp_vspr
$LN109@stbsp_vspr:
$LN110@stbsp_vspr:
; Line 1282
	cmp	DWORD PTR i$14[rsp], 4
	jl	SHORT $LN111@stbsp_vspr
; Line 1283
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1284
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1285
	mov	eax, DWORD PTR i$14[rsp]
	sub	eax, 4
	mov	DWORD PTR i$14[rsp], eax
; Line 1286
	jmp	SHORT $LN110@stbsp_vspr
$LN111@stbsp_vspr:
$LN112@stbsp_vspr:
; Line 1287
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN113@stbsp_vspr
; Line 1288
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1289
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1290
	jmp	SHORT $LN112@stbsp_vspr
$LN113@stbsp_vspr:
; Line 1291
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN320@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$28[rsp], eax
	mov	eax, DWORD PTR len$28[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN321@stbsp_vspr
	mov	eax, DWORD PTR len$28[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$28[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN322@stbsp_vspr
	jmp	$done$413
$LN322@stbsp_vspr:
$LN321@stbsp_vspr:
$LN320@stbsp_vspr:
; Line 1292
	jmp	$LN106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1295
	lea	rax, QWORD PTR tail$63[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN114@stbsp_vspr:
; Line 1296
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	test	eax, eax
	je	$LN115@stbsp_vspr
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	mov	DWORD PTR i$19[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN323@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$41[rsp], eax
	mov	eax, DWORD PTR lg$41[rsp]
	cmp	DWORD PTR i$19[rsp], eax
	jle	SHORT $LN324@stbsp_vspr
	mov	eax, DWORD PTR lg$41[rsp]
	mov	DWORD PTR i$19[rsp], eax
$LN324@stbsp_vspr:
$LN323@stbsp_vspr:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$19[rsp]
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR tail$63[rsp+rcx], al
$LN116@stbsp_vspr:
; Line 1300
	cmp	DWORD PTR i$19[rsp], 0
	je	SHORT $LN117@stbsp_vspr
; Line 1301
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1302
	mov	eax, DWORD PTR i$19[rsp]
	dec	eax
	mov	DWORD PTR i$19[rsp], eax
; Line 1303
	jmp	SHORT $LN116@stbsp_vspr
$LN117@stbsp_vspr:
; Line 1304
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN325@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$29[rsp], eax
	mov	eax, DWORD PTR len$29[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN326@stbsp_vspr
	mov	eax, DWORD PTR len$29[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$29[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN327@stbsp_vspr
	jmp	$done$413
$LN327@stbsp_vspr:
$LN326@stbsp_vspr:
$LN325@stbsp_vspr:
; Line 1305
	jmp	$LN114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	je	$LN328@stbsp_vspr
; Line 1309
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN329@stbsp_vspr
$LN118@stbsp_vspr:
; Line 1310
	cmp	DWORD PTR fw$10[rsp], 0
	je	$LN119@stbsp_vspr
; Line 1312
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$15[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN330@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$42[rsp], eax
	mov	eax, DWORD PTR lg$42[rsp]
	cmp	DWORD PTR i$15[rsp], eax
	jle	SHORT $LN331@stbsp_vspr
	mov	eax, DWORD PTR lg$42[rsp]
	mov	DWORD PTR i$15[rsp], eax
$LN331@stbsp_vspr:
$LN330@stbsp_vspr:
; Line 1313
	mov	eax, DWORD PTR i$15[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN120@stbsp_vspr:
; Line 1314
	cmp	DWORD PTR i$15[rsp], 0
	je	SHORT $LN121@stbsp_vspr
; Line 1315
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN332@stbsp_vspr
; Line 1316
	jmp	SHORT $LN121@stbsp_vspr
$LN332@stbsp_vspr:
; Line 1317
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1318
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
; Line 1319
	jmp	SHORT $LN120@stbsp_vspr
$LN121@stbsp_vspr:
$LN122@stbsp_vspr:
; Line 1320
	cmp	DWORD PTR i$15[rsp], 4
	jl	SHORT $LN123@stbsp_vspr
; Line 1321
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1322
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1323
	mov	eax, DWORD PTR i$15[rsp]
	sub	eax, 4
	mov	DWORD PTR i$15[rsp], eax
; Line 1324
	jmp	SHORT $LN122@stbsp_vspr
$LN123@stbsp_vspr:
$LN124@stbsp_vspr:
; Line 1325
	mov	eax, DWORD PTR i$15[rsp]
	mov	DWORD PTR tv1215[rsp], eax
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
	cmp	DWORD PTR tv1215[rsp], 0
	je	SHORT $LN125@stbsp_vspr
; Line 1326
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	jmp	SHORT $LN124@stbsp_vspr
$LN125@stbsp_vspr:
; Line 1327
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN333@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$30[rsp], eax
	mov	eax, DWORD PTR len$30[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN334@stbsp_vspr
	mov	eax, DWORD PTR len$30[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$30[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN335@stbsp_vspr
	jmp	$done$413
$LN335@stbsp_vspr:
$LN334@stbsp_vspr:
$LN333@stbsp_vspr:
; Line 1328
	jmp	$LN118@stbsp_vspr
$LN119@stbsp_vspr:
$LN329@stbsp_vspr:
$LN328@stbsp_vspr:
; Line 1330
	jmp	$LN24@stbsp_vspr
$LN336@stbsp_vspr:
; Line 1333
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 1334
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1335
	mov	DWORD PTR l$5[rsp], 1
; Line 1336
	mov	DWORD PTR fl$1[rsp], 0
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 1337
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T47[rsp], rax
	cmp	QWORD PTR $T47[rsp], 8
	jae	SHORT $LN398@stbsp_vspr
	jmp	SHORT $LN399@stbsp_vspr
$LN398@stbsp_vspr:
	call	__report_rangecheckfailure
$LN399@stbsp_vspr:
	mov	rax, QWORD PTR $T47[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1338
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T48[rsp], rax
	cmp	QWORD PTR $T48[rsp], 8
	jae	SHORT $LN400@stbsp_vspr
	jmp	SHORT $LN401@stbsp_vspr
$LN400@stbsp_vspr:
	call	__report_rangecheckfailure
$LN401@stbsp_vspr:
	mov	rax, QWORD PTR $T48[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1339
	mov	DWORD PTR pr$2[rsp], 0
; Line 1340
	mov	DWORD PTR dp$6[rsp], 0
; Line 1341
	mov	DWORD PTR cs$8[rsp], 0
; Line 1342
	jmp	$scopy$415
$LN24@stbsp_vspr:
; Line 1344
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 1345
	jmp	$LN2@stbsp_vspr
$endfmt$412:
; Line 1348
	cmp	QWORD PTR callback$[rsp], 0
	jne	SHORT $LN337@stbsp_vspr
; Line 1349
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 0
	jmp	SHORT $LN338@stbsp_vspr
$LN337@stbsp_vspr:
; Line 1351
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$31[rsp], eax
	mov	eax, DWORD PTR len$31[rsp]
	add	eax, 511				; 000001ffH
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN339@stbsp_vspr
	mov	eax, DWORD PTR len$31[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$31[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
$LN339@stbsp_vspr:
$LN338@stbsp_vspr:
$done$413:
; Line 1354
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN341@stbsp_vspr:
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1128				; 00000468H
	ret	0
	npad	2
$LN407@stbsp_vspr:
	DD	$LN137@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN140@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN136@stbsp_vspr
	DD	$LN135@stbsp_vspr
	DD	$LN146@stbsp_vspr
	DD	$LN145@stbsp_vspr
	DD	$LN147@stbsp_vspr
$LN406@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN405@stbsp_vspr:
	DD	$LN160@stbsp_vspr
	DD	$LN153@stbsp_vspr
	DD	$LN157@stbsp_vspr
	DD	$LN155@stbsp_vspr
	DD	$LN159@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN165@stbsp_vspr
$LN404@stbsp_vspr:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	npad	2
$LN403@stbsp_vspr:
	DD	$LN170@stbsp_vspr
	DD	$LN242@stbsp_vspr
	DD	$LN197@stbsp_vspr
	DD	$LN183@stbsp_vspr
	DD	$LN248@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN243@stbsp_vspr
	DD	$LN168@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN198@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN184@stbsp_vspr
	DD	$LN259@stbsp_vspr
	DD	$LN169@stbsp_vspr
	DD	$LN245@stbsp_vspr
	DD	$LN247@stbsp_vspr
	DD	$LN166@stbsp_vspr
	DD	$LN258@stbsp_vspr
	DD	$LN249@stbsp_vspr
	DD	$LN336@stbsp_vspr
$LN402@stbsp_vspr:
	DB	0
	DB	1
	DB	19
	DB	19
	DB	2
	DB	19
	DB	3
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	4
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	19
	DB	19
	DB	19
	DB	19
	DB	13
	DB	14
	DB	15
	DB	19
	DB	19
	DB	16
	DB	19
	DB	17
	DB	19
	DB	19
	DB	18
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
va$ = 40
buf$ = 64
count$ = 72
fmt$ = 80
stbsp_snprintf PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1461
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1464
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1466
	mov	r9, QWORD PTR va$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
	mov	DWORD PTR result$[rsp], eax
; Line 1467
	mov	QWORD PTR va$[rsp], 0
; Line 1469
	mov	eax, DWORD PTR result$[rsp]
; Line 1470
	add	rsp, 56					; 00000038H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
va$ = 56
buf$ = 80
fmt$ = 88
stbsp_sprintf PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1377
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1381
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
	mov	DWORD PTR result$[rsp], eax
; Line 1382
	mov	QWORD PTR va$[rsp], 0
; Line 1383
	mov	eax, DWORD PTR result$[rsp]
; Line 1384
	add	rsp, 72					; 00000048H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$1 = 48
c$ = 64
__$ArrayPad$ = 592
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1431
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 616				; 00000268H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1434
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
	cmp	QWORD PTR buf$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
; Line 1436
	mov	DWORD PTR c$[rsp+12], 0
; Line 1438
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	lea	r8, QWORD PTR c$[rsp+16]
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN3@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1444
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1445
	mov	eax, DWORD PTR count$[rsp]
	mov	DWORD PTR c$[rsp+8], eax
; Line 1446
	mov	DWORD PTR c$[rsp+12], 0
; Line 1448
	xor	r8d, r8d
	lea	rdx, QWORD PTR c$[rsp]
	xor	ecx, ecx
	call	stbsp__clamp_callback
	mov	rcx, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$1[rsp], eax
; Line 1452
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR l$1[rsp], eax
	jl	SHORT $LN4@stbsp_vsnp
; Line 1453
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR l$1[rsp], eax
$LN4@stbsp_vsnp:
; Line 1454
	movsxd	rax, DWORD PTR l$1[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN3@stbsp_vsnp:
; Line 1457
	mov	eax, DWORD PTR c$[rsp+12]
; Line 1458
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 616				; 00000268H
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC
; File W:\cpp\void\e\rx\cc\stb_sprintf.h
; Line 1473
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
END
